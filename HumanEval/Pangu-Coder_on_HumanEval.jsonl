{"question_id": "HumanEval/0", "language": "python", "prompt": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n", "signature": "def has_close_elements(numbers: List[float], threshold: float):", "solutions": [{"id": "0", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for i in range(1, len(numbers)):\n        if numbers[i - 1] > threshold:\n            return True\n    return False\n"}, {"id": "1", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for num in numbers:\n        if abs(num - numbers[-1]) < threshold:\n            return True\n    return False\n"}, {"id": "2", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(number < threshold for number in numbers)\n"}, {"id": "3", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for i in range(1, len(numbers)):\n        if numbers[i - 1] > threshold:\n            if numbers[i] < threshold:\n                return True\n    return False\n"}, {"id": "4", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for n in numbers:\n        if abs(n - n < threshold):\n            return True\n    return False\n"}, {"id": "5", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for n in numbers:\n        if abs(n - numbers[0]) <= threshold:\n            continue\n        else:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(numbers[i] - numbers[i - 1]) <= threshold for i in range(1, len(numbers)))\n"}, {"id": "7", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(num < threshold for num in numbers)\n"}, {"id": "8", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for n in numbers:\n        if abs(n - float(n)) > threshold:\n            return True\n    return False\n"}, {"id": "9", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(num < threshold for num in numbers)\n"}]}
{"question_id": "HumanEval/1", "language": "python", "prompt": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n", "signature": "def separate_paren_groups(paren_string: str):", "solutions": [{"id": "0", "snippet": "def separate_paren_groups(paren_string: str):\n    return [g[1:-1] for g in re.findall(r'\\([^()]*\\)', paren_string)]\n"}, {"id": "1", "snippet": "def separate_paren_groups(paren_string: str):\n    return re.findall(r'\\(([^()]+)\\)', paren_string)\n"}, {"id": "2", "snippet": "def separate_paren_groups(paren_string: str):\n    paren_string = paren_string.replace('()', '(').replace('())', ')')\n    return paren_string.split('(')\n"}, {"id": "3", "snippet": "def separate_paren_groups(paren_string: str):\n    splitted = paren_string.split('(')\n    splitted = [i.strip() for i in splitted]\n    return splitted\n"}, {"id": "4", "snippet": "def separate_paren_groups(paren_string: str):\n    paren_string = paren_string.replace('()', '')\n    paren_string = paren_string.replace('()(', '')\n    paren_string = paren_string.replace(')', '')\n    return paren_string.split('(')\n"}, {"id": "5", "snippet": "def separate_paren_groups(paren_string: str):\n\n    return [s for s in paren_string.split('(') if s]"}, {"id": "6", "snippet": "def separate_paren_groups(paren_string: str):\n    separated_strings = []\n    for group in re.split('\\(|\\)', paren_string):\n        if group:\n            separated_strings.append(group)\n    return separated_strings\n"}, {"id": "7", "snippet": "def separate_paren_groups(paren_string: str):\n    paren_string = paren_string.strip()\n    result = []\n    for match in PARENTHESIS_REGEX.finditer(paren_string):\n        if len(match.groups()) > 1:\n            result.append(match.group())\n    return result\n"}, {"id": "8", "snippet": "def separate_paren_groups(paren_string: str):\n    separated = []\n    for i in paren_string.split('('):\n        separated.append(i.strip())\n    return separated\n"}, {"id": "9", "snippet": "def separate_paren_groups(paren_string: str):\n    return [separate_paren_group(paren_string, i) for i in range(len(paren_string))]\n"}]}
{"question_id": "HumanEval/10", "language": "python", "prompt": "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n", "signature": "def make_palindrome(string: str):", "solutions": [{"id": "0", "snippet": "def make_palindrome(string: str):\n\n    prefix = ''\n    for i in range(len(string)):\n        if string[i]!= prefix:\n            prefix = string[i+1:][::-1] + string[:i]\n    return prefix[::-1]\n"}, {"id": "1", "snippet": "def make_palindrome(string: str):\n    reverse = string[::-1]\n    if string == reverse:\n        return string\n    else:\n        return reverse + make_palindrome(string[1:])\n"}, {"id": "2", "snippet": "def make_palindrome(string: str):\n    prefix = \"\"\n    for char in string:\n        if char!= prefix:\n            prefix = char + prefix\n        else:\n            break\n    return prefix[::-1]"}, {"id": "3", "snippet": "def make_palindrome(string: str):\n\n    if len(string) <= 1:\n        return string\n\n    for i in range(len(string) - 1, 0, -1):\n        if string[:i] == string[i:][::-1]:\n            return string[:i] + string[i:]\n"}, {"id": "4", "snippet": "def make_palindrome(string: str):\n    if string == '':\n        return ''\n    else:\n        return _make_palindrome(string[::-1])\n"}, {"id": "5", "snippet": "def make_palindrome(string: str):\n    # TODO: Write your solution here\n    palindrome = ''\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] == string[i - 1]:\n            palindrome += string[i]\n    return palindrome[::-1]\n"}, {"id": "6", "snippet": "def make_palindrome(string: str):\n    return reverse_string(string)\n"}, {"id": "7", "snippet": "def make_palindrome(string: str):\n    return reverse_string(string)\n"}, {"id": "8", "snippet": "def make_palindrome(string: str):\n\n    string_length = len(string)\n    reverse_string = string[::-1]\n\n    for i in range(string_length):\n        if string[i]!= reverse_string[i]:\n            return string[:i] + string[i] + string[i+1:]\n"}, {"id": "9", "snippet": "def make_palindrome(string: str):\n    prefix = string[::-1]\n    return prefix + string[::-1][::-1]\n"}]}
{"question_id": "HumanEval/100", "language": "python", "prompt": "\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n", "signature": "def make_a_pile(n):", "solutions": [{"id": "0", "snippet": "def make_a_pile(n):\n    return [n] * (n - 1) if n % 2 == 0 else [n] * (n - 1) + [n + 1]"}, {"id": "1", "snippet": "def make_a_pile(n):\n    return [make_a_stone(n) for i in range(n - 1)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}, {"id": "2", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n] * (n // 2) + [n - 1]\n\n\n# Q4"}, {"id": "3", "snippet": "def make_a_pile(n):\n    result = []\n    if n % 2 == 0:\n        result.append(n)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        result.append(n - i * i)\n    return result\n"}, {"id": "4", "snippet": "def make_a_pile(n):\n    pass\n"}, {"id": "5", "snippet": "def make_a_pile(n):\n    return [make_a_stone(n) for i in range(n + 1)]\n"}, {"id": "6", "snippet": "def make_a_pile(n):\n    if n == 0:\n        return []\n    else:\n        return [n] + make_a_pile(n - 1)\n\n"}, {"id": "7", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n - 1] + make_a_pile(n // 2)"}, {"id": "8", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n - 1] + [n + 1] * (n // 2)\n"}, {"id": "9", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n - 1] + make_a_pile(n - 1)\n"}]}
{"question_id": "HumanEval/101", "language": "python", "prompt": "\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n", "signature": "def words_string(s):", "solutions": [{"id": "0", "snippet": "def words_string(s):\n    return s.split()"}, {"id": "1", "snippet": "def words_string(s):\n    words = s.split(',')\n    return words"}, {"id": "2", "snippet": "def words_string(s):\n    return [w.strip() for w in s.split(',')]"}, {"id": "3", "snippet": "def words_string(s):\n    return s.split(\",\")\n"}, {"id": "4", "snippet": "def words_string(s):\n    return s.split()"}, {"id": "5", "snippet": "def words_string(s):\n    words = s.split()\n    return words"}, {"id": "6", "snippet": "def words_string(s):\n\n    words = s.split()\n    return words\n"}, {"id": "7", "snippet": "def words_string(s):\n\n    words_list = s.split(\",\")\n    return words_list\n"}, {"id": "8", "snippet": "def words_string(s):\n    pass\n"}, {"id": "9", "snippet": "def words_string(s):\n    return s.split()\n"}]}
{"question_id": "HumanEval/102", "language": "python", "prompt": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n", "signature": "def choose_num(x, y):", "solutions": [{"id": "0", "snippet": "def choose_num(x, y):\n    if x > y:\n        return y\n    else:\n        return x\n"}, {"id": "1", "snippet": "def choose_num(x, y):\n    if x < 0 or y < 0:\n        return -1\n    if y == 0:\n        return x\n    if x == 0:\n        return y\n    if x > y:\n        return choose_num(x - 1, y)\n    if y > x:\n        return choose_num(x, y - 1)\n    return -1\n"}, {"id": "2", "snippet": "def choose_num(x, y):\n    if x > y:\n        return y\n    elif y > x:\n        return x\n    else:\n        return -1\n"}, {"id": "3", "snippet": "def choose_num(x, y):\n    if x > y:\n        biggest_num = x\n    else:\n        biggest_num = y\n    \n    for i in range(x, biggest_num + 1):\n        if i % 2 == 0:\n            return i\n    return -1"}, {"id": "4", "snippet": "def choose_num(x, y):\n    max_num = max(x, y)\n    if x < y:\n        return max_num\n    if x > y:\n        return max_num - 1\n    return -1\n"}, {"id": "5", "snippet": "def choose_num(x, y):\n    \n    # YOUR CODE HERE\n    return -1 if x > y else x\n    \n    "}, {"id": "6", "snippet": "def choose_num(x, y):\n    if x > y:\n        return x\n    else:\n        return y\n\n\n# Function to print the max of two positive integers"}, {"id": "7", "snippet": "def choose_num(x, y):\n    # Your code here\n    max_num = x if x % 2 == 0 else y\n    for i in range(max_num):\n        if i % 2 == 0:\n            if y % 2 == 0:\n                return i\n            else:\n                return -1\n\n# Problem 3"}, {"id": "8", "snippet": "def choose_num(x, y):\n    # Your code here\n    if x >= y:\n        return x\n    elif x < y:\n        return y\n    else:\n        return -1"}, {"id": "9", "snippet": "def choose_num(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n    "}]}
{"question_id": "HumanEval/103", "language": "python", "prompt": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n", "signature": "def rounded_avg(n, m):", "solutions": [{"id": "0", "snippet": "def rounded_avg(n, m):\n    if n < m:\n        return -1\n    else:\n        return str(bin(n)).split('b')[-1].replace('0b', '')[:m]\n"}, {"id": "1", "snippet": "def rounded_avg(n, m):\n    return int(\"\".join(str(int(x) + int(n - x)) for x in str(n))) // int(m)\n"}, {"id": "2", "snippet": "def rounded_avg(n, m):\n    answer = ''\n    while n >= m:\n        answer = str(n % 2) + answer\n        n = n // 2\n    answer = str(n) + answer\n    return int(answer, 2)\n"}, {"id": "3", "snippet": "def rounded_avg(n, m):\n    if n == m:\n        return -1\n    else:\n        return int((n + m) / 2)\n"}, {"id": "4", "snippet": "def rounded_avg(n, m):\n\n    if n > m:\n        return -1\n    else:\n        return bin(n)[2:].zfill(m)\n"}, {"id": "5", "snippet": "def rounded_avg(n, m):\n    return bin(n)[2:] + bin(m)[2:]"}, {"id": "6", "snippet": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        return bin(n)[2:].zfill(m)"}, {"id": "7", "snippet": "def rounded_avg(n, m):\n    answer = 0\n    while n > m:\n        answer += n % 2\n        n //= 2\n\n    return answer if n == 0 else '{}{}'.format(answer, '1' if n > m else '0')\n"}, {"id": "8", "snippet": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    return bin(n)[2:].zfill(m)\n\n\n# Q5"}, {"id": "9", "snippet": "def rounded_avg(n, m):\n    if n < m:\n        return -1\n    return \"{0:b}\".format(int((n + m) / 2))[::-1]\n"}]}
{"question_id": "HumanEval/104", "language": "python", "prompt": "Given a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n", "signature": "def unique_digits(x):", "solutions": [{"id": "0", "snippet": "def unique_digits(x):\n\n    lst = []\n    for i in x:\n        if i % 2 == 0:\n            lst.append(i)\n    return sorted(lst)\n\n# Q4"}, {"id": "1", "snippet": "def unique_digits(x):\n    return [x_i for x_i in x if x_i % 2!= 0]\n"}, {"id": "2", "snippet": "def unique_digits(x):\n    return [x[i] for i in range(len(x)) if x[i] % 2!= 0]"}, {"id": "3", "snippet": "def unique_digits(x):\npass"}, {"id": "4", "snippet": "def unique_digits(x):\n    result = []\n    for i in x:\n        if x.count(i) % 2!= 0:\n            result.append(i)\n    return result"}, {"id": "5", "snippet": "def unique_digits(x):\n    res = []\n    for i in x:\n        if not is_digit_even(i):\n            res.append(i)\n    return res\n"}, {"id": "6", "snippet": "def unique_digits(x):\n    # TODO: Remove pass and complete method\n    pass\n"}, {"id": "7", "snippet": "def unique_digits(x):\n    return [i for i in x if i % 2!= 0]\n"}, {"id": "8", "snippet": "def unique_digits(x):\n    return sorted(list(set(x)))\n"}, {"id": "9", "snippet": "def unique_digits(x):\n    return sorted(list(set(x)))\n\n\n"}]}
{"question_id": "HumanEval/105", "language": "python", "prompt": "\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\nIf the array is empty, return an empty array:\narr = []\nreturn []\n\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = ['One']\n", "signature": "def by_length(arr):", "solutions": [{"id": "0", "snippet": "def by_length(arr):\n\n    return []\n"}, {"id": "1", "snippet": "def by_length(arr):\n    arr.sort()\n    arr.reverse()\n    return arr\n"}, {"id": "2", "snippet": "def by_length(arr):\n\n    return []\n"}, {"id": "3", "snippet": "def by_length(arr):\n    return []\n"}, {"id": "4", "snippet": "def by_length(arr):\n    return sorted(arr, key=len, reverse=True)\n"}, {"id": "5", "snippet": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    return [arr[0]] + by_length(arr[1:])\n"}, {"id": "6", "snippet": "def by_length(arr):\n    return [str(i) for i in arr]\n"}, {"id": "7", "snippet": "def by_length(arr):\n\n    return [''.join(sorted(i)) for i in arr]"}, {"id": "8", "snippet": "def by_length(arr):\n    return [name_from_number(i) for i in arr]\n"}, {"id": "9", "snippet": "def by_length(arr):\n    if arr:\n        return [i for i in arr if len(str(i)) > 1]\n    return []\n"}]}
{"question_id": "HumanEval/106", "language": "python", "prompt": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n", "signature": "def f(n):", "solutions": [{"id": "0", "snippet": "def f(n):\n    return []\n"}, {"id": "1", "snippet": "def f(n):\n    return [i for i in range(1, n + 1) if i % 2 == 0]\n"}, {"id": "2", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i * i)\n    return result"}, {"id": "3", "snippet": "def f(n):\n    return []"}, {"id": "4", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i - 1))\n    return result\n"}, {"id": "5", "snippet": "def f(n):\n    result = [1]\n    for i in range(1, n+1):\n        result.append(result[i-1] * i)\n    return result\n\n\n# Examples:"}, {"id": "6", "snippet": "def f(n):\n    pass"}, {"id": "7", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * (i - 1))\n        else:\n            result.append(i)\n    return result\n"}, {"id": "8", "snippet": "def f(n):\n    if n == 0:\n        return [1]\n    else:\n        return [f(n-1)*(i+1) for i in range(n)]\n"}, {"id": "9", "snippet": "def f(n):\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * (i + 1) // 2)\n        else:\n            result.append(i)\n    return result\n"}]}
{"question_id": "HumanEval/107", "language": "python", "prompt": "\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n", "signature": "def even_odd_palindrome(n):", "solutions": [{"id": "0", "snippet": "def even_odd_palindrome(n):\npass"}, {"id": "1", "snippet": "def even_odd_palindrome(n):\npass"}, {"id": "2", "snippet": "def even_odd_palindrome(n):\n    return (even_odd_palindrome_helper(n, n, 0, 0), even_odd_palindrome_helper(n, n, 1, 1))\n"}, {"id": "3", "snippet": "def even_odd_palindrome(n):\n\n    evens = 0\n    odds = 0\n    for i in range(n):\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n\n    return (evens, odds)\n"}, {"id": "4", "snippet": "def even_odd_palindrome(n):\n    pass"}, {"id": "5", "snippet": "def even_odd_palindrome(n):\npass"}, {"id": "6", "snippet": "def even_odd_palindrome(n):\n\n    even_odd_palindromes = []\n\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_palindrome(i - 1):\n            even_odd_palindromes.append(i)\n\n    return (len(even_odd_palindromes), len(even_odd_palindromes) - 1)\n"}, {"id": "7", "snippet": "def even_odd_palindrome(n):\npass"}, {"id": "8", "snippet": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if is_even(i):\n            even += 1\n        if is_odd(i):\n            odd += 1\n    return (even, odd)\n"}, {"id": "9", "snippet": "def even_odd_palindrome(n):\npass"}]}
{"question_id": "HumanEval/108", "language": "python", "prompt": "\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n", "signature": "def count_nums(arr):", "solutions": [{"id": "0", "snippet": "def count_nums(arr):\n    result = 0\n    for i in range(len(arr)):\n        if sum(arr) > 0:\n            result += 1\n    return result\n"}, {"id": "1", "snippet": "def count_nums(arr):\n    num_count = 0\n    for num in arr:\n        if is_positive(num):\n            num_count += 1\n    return num_count"}, {"id": "2", "snippet": "def count_nums(arr):\n    n = 0\n    for i in arr:\n        if i > 0:\n            n += 1\n    return n\n\n\n# print(count_nums([1, 2, -3]))\n"}, {"id": "3", "snippet": "def count_nums(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    count = 0\n    for i in range(n):\n        if arr[i] > 0:\n            count += arr[i]\n    return count"}, {"id": "4", "snippet": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def count_nums(arr):\n\n    if not arr:\n        return 0\n\n    s = 0\n    for i in arr:\n        if i > 0:\n            s += i * (10 ** (len(arr) - 1 - i))\n    return s\n"}, {"id": "6", "snippet": "def count_nums(arr):\n    num_arr = []\n    for i in arr:\n        if i!= 0:\n            num_arr.append(i)\n    num_arr.sort()\n    n = len(num_arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return num_arr[0]\n    else:\n        return num_arr[n - 1] + count_nums(num_arr[:n - 1])\n"}, {"id": "7", "snippet": "def count_nums(arr):\n    if not arr:\n        return 0\n    \n    nums = [int(n) for n in arr]\n    return sum([n > 0 for n in nums])\n"}, {"id": "8", "snippet": "def count_nums(arr):\n    total = 0\n    for i in arr:\n        if i > 0:\n            total += i * int((i % 10) / 10)\n    return total\n"}, {"id": "9", "snippet": "def count_nums(arr):\n    \n    count = 0\n    for num in arr:\n        if (sum([int(i) for i in str(num)]) > 0):\n            count += 1\n    return count"}]}
{"question_id": "HumanEval/109", "language": "python", "prompt": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.\n\n", "signature": "def move_one_ball(arr):", "solutions": [{"id": "0", "snippet": "def move_one_ball(arr):\n    return False"}, {"id": "1", "snippet": "def move_one_ball(arr):\n    return True\n"}, {"id": "2", "snippet": "def move_one_ball(arr):\n    return True"}, {"id": "3", "snippet": "def move_one_ball(arr):\n    return False"}, {"id": "4", "snippet": "def move_one_ball(arr):\n    return False"}, {"id": "5", "snippet": "def move_one_ball(arr):\n    return True"}, {"id": "6", "snippet": "def move_one_ball(arr):\n    return False"}, {"id": "7", "snippet": "def move_one_ball(arr):\n    return False"}, {"id": "8", "snippet": "def move_one_ball(arr):\n    pass\n"}, {"id": "9", "snippet": "def move_one_ball(arr):\n    return False"}]}
{"question_id": "HumanEval/11", "language": "python", "prompt": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n", "signature": "def string_xor(a: str, b: str):", "solutions": [{"id": "0", "snippet": "def string_xor(a: str, b: str):\n    return ''.join(map(lambda c: str(int(c == 1)) if c == '1' else str(int(c == 0)), a + b))\n"}, {"id": "1", "snippet": "def string_xor(a: str, b: str):\n    x = \"\"\n    for i in range(len(a)):\n        x += str(int(a[i]) ^ int(b[i]))\n    return x"}, {"id": "2", "snippet": "def string_xor(a: str, b: str):\n    xor = ''\n    for i, e in enumerate(a):\n        if e == '1':\n            xor += chr(ord(b[i]) ^ ord(a[i]))\n    return xor\n"}, {"id": "3", "snippet": "def string_xor(a: str, b: str):\n    return ''.join(chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a)))\n"}, {"id": "4", "snippet": "def string_xor(a: str, b: str):\n    return ''.join(map(str, list(map(xor, a, b))))\n"}, {"id": "5", "snippet": "def string_xor(a: str, b: str):\n    return ''.join([chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a))])\n"}, {"id": "6", "snippet": "def string_xor(a: str, b: str):\n    return ''.join([chr(ord(a[i]) ^ ord(b[i])) for i in range(len(a))])\n"}, {"id": "7", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += bin(ord(a[i]) ^ ord(b[i]))[2:]\n    return result\n\n# Test Cases"}, {"id": "8", "snippet": "def string_xor(a: str, b: str):\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n"}, {"id": "9", "snippet": "def string_xor(a: str, b: str):\n    # TODO\n    return ''"}]}
{"question_id": "HumanEval/110", "language": "python", "prompt": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n", "signature": "def exchange(lst1, lst2):", "solutions": [{"id": "0", "snippet": "def exchange(lst1, lst2):\n    # Your code here\n    if len(lst1)!= 0:\n        if lst1[0] % 2 == 0:\n            return exchange(lst1[1:], lst2)\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""}, {"id": "1", "snippet": "def exchange(lst1, lst2):\n    if lst1[::2] == lst2[::2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Problem 6"}, {"id": "2", "snippet": "def exchange(lst1, lst2):\n    # Your code here\n    if lst1 == [] or lst2 == []:\n        return \"NO\"\n    elif lst1[0] % 2 == 0 or lst2[0] % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\""}, {"id": "3", "snippet": "def exchange(lst1, lst2):\n    return \"NO\"\n    \n\n# Problem 3"}, {"id": "4", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) == 0 or len(lst2) == 0:\n        return \"NO\"\n    if lst1[0] % 2 == 0:\n        return exchange(lst1[1:], lst2)\n    else:\n        return exchange(lst1, lst2[1:])\n"}, {"id": "5", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) == 0:\n        return \"NO\"\n    if len(lst2) == 0:\n        return \"YES\"\n    if lst1[0] % 2 == 0 and lst2[0] % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}, {"id": "6", "snippet": "def exchange(lst1, lst2):\n\n    return \"NO\""}, {"id": "7", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) == 0:\n        return \"YES\"\n    elif len(lst2) == 0:\n        return \"NO\"\n    else:\n        return exchange(lst1[1:], lst2[::2])\n\n# Problem 6"}, {"id": "8", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) > len(lst2):\n        return \"NO\"\n    elif len(lst1) == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}, {"id": "9", "snippet": "def exchange(lst1, lst2):\n\n    for i in range(len(lst1)):\n        if (lst1[i] % 2 == 0) and (lst2[i] % 2 == 0):\n            return \"NO\"\n    return \"YES\""}]}
{"question_id": "HumanEval/111", "language": "python", "prompt": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n", "signature": "def histogram(test):", "solutions": [{"id": "0", "snippet": "def histogram(test):\n    return {c: 0 for c in test}\n"}, {"id": "1", "snippet": "def histogram(test):\n\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n\n    return d\n"}, {"id": "2", "snippet": "def histogram(test):\n    return {k: v for k, v in Counter(test).items() if v > 1}\n"}, {"id": "3", "snippet": "def histogram(test):\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n"}, {"id": "4", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n"}, {"id": "5", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"}, {"id": "6", "snippet": "def histogram(test):\n    histogram = {}\n    for letter in test:\n        histogram[letter] = histogram.get(letter, 0) + 1\n    return histogram\n"}, {"id": "7", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist"}, {"id": "8", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist"}, {"id": "9", "snippet": "def histogram(test):\n    d = {}\n    for c in test:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    return d"}]}
{"question_id": "HumanEval/112", "language": "python", "prompt": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n", "signature": "def reverse_delete(s, c):", "solutions": [{"id": "0", "snippet": "def reverse_delete(s, c):\n\n    if s == \"\":\n        return \"\", True\n    if s[0] == c:\n        return reverse_delete(s[1:], c)\n    else:\n        return s[0] + reverse_delete(s[1:], c), False\n"}, {"id": "1", "snippet": "def reverse_delete(s, c):\n\n    if s == \"\":\n        return s, True\n    else:\n        return reverse_delete(s[1:], c) + s[0], False"}, {"id": "2", "snippet": "def reverse_delete(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n        else:\n            result += c[i]\n    return result, True"}, {"id": "3", "snippet": "def reverse_delete(s, c):\n    if s == '':\n        return s, True\n    else:\n        if s[0] == c:\n            return s[1:], reverse_delete(s[1:], c)\n        else:\n            return s[0:len(s)-1], reverse_delete(s[0:len(s)-1], c)\n"}, {"id": "4", "snippet": "def reverse_delete(s, c):\n    return (s[::-1], s == c[::-1])"}, {"id": "5", "snippet": "def reverse_delete(s, c):\n    if s == \"\":\n        return (\"\", False)\n    elif s[-1] == c:\n        return reverse_delete(s[:-1], c)\n    else:\n        return (s[:-1], True)\n"}, {"id": "6", "snippet": "def reverse_delete(s, c):\n    return s[::-1], s == c"}, {"id": "7", "snippet": "def reverse_delete(s, c):\n    if s == '' or c == '':\n        return ('', True)\n    elif s[0] == c[0]:\n        return reverse_delete(s[1:], c[1:])\n    else:\n        return (s[0:len(s)-1], False)"}, {"id": "8", "snippet": "def reverse_delete(s, c):\n    # Your Code Here\n    result = ''\n    for i in range(len(s)):\n        if s[i]!= c[i]:\n            result += s[i]\n    return result, result.lower() == s[::-1].lower()"}, {"id": "9", "snippet": "def reverse_delete(s, c):\n    result = ''\n    for char in s:\n        if char in c:\n            result += char\n        else:\n            return (result, False)\n    return (result, True)\n"}]}
{"question_id": "HumanEval/113", "language": "python", "prompt": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n", "signature": "def odd_count(lst):", "solutions": [{"id": "0", "snippet": "def odd_count(lst):\n    result = []\n    for i in lst:\n        result += [\"the number of odd elements \" + str(len(i)) + \"n the str\" + str(i) + \"of the \" + str(len(i)) + \"nput.\"]\n    return result\n\n\n\n\n\n\n\n\n\n\n"}, {"id": "1", "snippet": "def odd_count(lst):\n    output = []\n    for i in lst:\n        output.append(\"the number of odd elements \"+str(len(re.findall(\"[0-9]+\",i)))+\"n the str\"+i+\" of the \"+str(len(re.findall(\"[0-9]+\",i)))+\" of the \"+str(len(re.findall(\"[0-9]+\",i))))\n    return output"}, {"id": "2", "snippet": "def odd_count(lst):\npass"}, {"id": "3", "snippet": "def odd_count(lst):\npass"}, {"id": "4", "snippet": "def odd_count(lst):\n    # write your code here\n    return [str(i) + \"n the str\" for i in range(1, len(lst)) if lst.count(str(i)) % 2 == 1]\n"}, {"id": "5", "snippet": "def odd_count(lst):\n    pass\n"}, {"id": "6", "snippet": "def odd_count(lst):\n    pass\n\n# Q8"}, {"id": "7", "snippet": "def odd_count(lst):\npass"}, {"id": "8", "snippet": "def odd_count(lst):\n    return [lst[i:i+2] for i in range(0, len(lst), 2)]\n\n\n# Problem 4\n# Write a function that takes a string and returns a list of the letters in the string\n# that are not in the alphabet. Return an empty list."}, {"id": "9", "snippet": "def odd_count(lst):\n    return [str(len([i for i in j if i % 2!= 0])) + i for j in lst]\n"}]}
{"question_id": "HumanEval/114", "language": "python", "prompt": "\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n", "signature": "def minSubArraySum(nums):", "solutions": [{"id": "0", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    minSum = nums[0]\n    for i in range(1, len(nums)):\n        minSum = min(nums[i], minSum + nums[i])\n    return minSum\n"}, {"id": "1", "snippet": "def minSubArraySum(nums):\n    min_sum = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[i]:\n                min_sum = min(min_sum, nums[i] + nums[j])\n    return min_sum"}, {"id": "2", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    minimum = nums[0]\n    cur_sum = nums[0]\n    for i in range(1, len(nums)):\n        cur_sum = min(nums[i], cur_sum + nums[i])\n        minimum = min(minimum, cur_sum)\n    return minimum"}, {"id": "3", "snippet": "def minSubArraySum(nums):\n\n    # base case\n    if not nums:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    return min(minSubArraySum(nums[:-1]), nums[-1] + minSubArraySum(nums[1:]))\n"}, {"id": "4", "snippet": "def minSubArraySum(nums):\n    currentSum = 0\n    minSum = float('inf')\n    for num in nums:\n        currentSum += num\n        minSum = min(minSum, currentSum - minSum)\n    return minSum\n\n"}, {"id": "5", "snippet": "def minSubArraySum(nums):\n    # write your code here\n    if nums == []:\n        return 0\n    return nums[0] + minSubArraySum(nums[1:])"}, {"id": "6", "snippet": "def minSubArraySum(nums):\n    n = len(nums)\n    if n < 1:\n        return 0\n    min_sum = nums[0]\n    min_sum_sub_array = nums[0]\n    for i in range(1, n):\n        min_sum = min(min_sum + nums[i], nums[i])\n        min_sum_sub_array = min(min_sum_sub_array, min_sum)\n    return min_sum_sub_array\n"}, {"id": "7", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if nums[mid] > 0:\n            start = mid + 1\n        else:\n            end = mid\n    return nums[start]"}, {"id": "8", "snippet": "def minSubArraySum(nums):\n    # write your code here\n    minSum = float('inf')\n    currSum = 0\n    for num in nums:\n        currSum += num\n        if currSum < minSum:\n            minSum = currSum\n        if currSum == 0:\n            return minSum\n    return minSum"}, {"id": "9", "snippet": "def minSubArraySum(nums):\n\n    # base case\n    if nums is None or len(nums) == 0:\n        return 0\n\n    # recursive case\n    elif len(nums) == 1:\n        return nums[0]\n\n    # recursive case\n    else:\n        return min(nums[0] + minSubArraySum(nums[1:]), nums[0])"}]}
{"question_id": "HumanEval/115", "language": "python", "prompt": "\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n", "signature": "def max_fill(grid, capacity):", "solutions": [{"id": "0", "snippet": "def max_fill(grid, capacity):\n    return 0"}, {"id": "1", "snippet": "def max_fill(grid, capacity):\n    return 0"}, {"id": "2", "snippet": "def max_fill(grid, capacity):\n    return 0\n"}, {"id": "3", "snippet": "def max_fill(grid, capacity):\n    return len(grid) - sum(max_fill(row, capacity) for row in grid)\n"}, {"id": "4", "snippet": "def max_fill(grid, capacity):\n    return grid.max(axis=0) == capacity"}, {"id": "5", "snippet": "def max_fill(grid, capacity):\n    return 0"}, {"id": "6", "snippet": "def max_fill(grid, capacity):\n    return grid.max() + capacity"}, {"id": "7", "snippet": "def max_fill(grid, capacity):\n    return np.max(grid)\n"}, {"id": "8", "snippet": "def max_fill(grid, capacity):\npass"}, {"id": "9", "snippet": "def max_fill(grid, capacity):\n    return 0"}]}
{"question_id": "HumanEval/116", "language": "python", "prompt": "\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n", "signature": "def sort_array(arr):", "solutions": [{"id": "0", "snippet": "def sort_array(arr):\npass"}, {"id": "1", "snippet": "def sort_array(arr):\n    pass"}, {"id": "2", "snippet": "def sort_array(arr):\npass"}, {"id": "3", "snippet": "def sort_array(arr):\n    pass"}, {"id": "4", "snippet": "def sort_array(arr):\n    pass\n"}, {"id": "5", "snippet": "def sort_array(arr):\n    pass\n"}, {"id": "6", "snippet": "def sort_array(arr):\n    pass\n"}, {"id": "7", "snippet": "def sort_array(arr):\n    pass\n"}, {"id": "8", "snippet": "def sort_array(arr):\n    return sorted(arr)\n"}, {"id": "9", "snippet": "def sort_array(arr):\n    # Implemented the above function with the definition of the binary numbers.\n    # The binary numbers are the same as the binary numbers in the input array.\n    pass\n"}]}
{"question_id": "HumanEval/117", "language": "python", "prompt": "Given a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n", "signature": "def select_words(s, n):", "solutions": [{"id": "0", "snippet": "def select_words(s, n):\n    return s.split(\" \")\n"}, {"id": "1", "snippet": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]\n"}, {"id": "2", "snippet": "def select_words(s, n):\n    pass"}, {"id": "3", "snippet": "def select_words(s, n):\n    return [w for w in s.split(\" \") if \" \".join(w.split(\" \")[:n]) == \"\"]"}, {"id": "4", "snippet": "def select_words(s, n):\n\n    return [word for word in s.split(\" \") if (\n        len(word) == n and check_consonants(word))]\n"}, {"id": "5", "snippet": "def select_words(s, n):\npass"}, {"id": "6", "snippet": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]\n"}, {"id": "7", "snippet": "def select_words(s, n):\n    return list(filter(lambda x: x.isalpha() and len(x) == n, s.split()))\n"}, {"id": "8", "snippet": "def select_words(s, n):\n\n    return [word for word in s.split() if s.count(word) == n]\n"}, {"id": "9", "snippet": "def select_words(s, n):\n    return [word for word in s.split(\" \") if len(word) == n]\n\n\n# Testing"}]}
{"question_id": "HumanEval/118", "language": "python", "prompt": "You are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n", "signature": "def get_closest_vowel(word):", "solutions": [{"id": "0", "snippet": "def get_closest_vowel(word):\n    vowel = \"\"\n    index = -1\n    for i in range(len(word) - 1):\n        if word[i] in 'aeiouAEIOU':\n            index = i\n            vowel = word[i]\n            break\n    return vowel"}, {"id": "1", "snippet": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    if word[0] in vowels:\n        return word[1:]\n    else:\n        return \"\"\n"}, {"id": "2", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    index = 0\n    length = len(word)\n    while index < length and word[index] not in vowels:\n        index += 1\n    if index < length:\n        return word[:index]\n    else:\n        return \"\"\n    "}, {"id": "3", "snippet": "def get_closest_vowel(word):\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    if word[0] in vowels:\n        return word[1:]\n    else:\n        return \"\"\n"}, {"id": "4", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    index = vowels.find(word[0])\n    if index >= 0:\n        return vowels[index + 1]\n    else:\n        return \"\""}, {"id": "5", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left, right = 0, len(word) - 1\n\n    while left < right:\n        if word[left] in vowels:\n            left += 1\n        if word[right] in vowels:\n            right -= 1\n\n    return word[left:right+1]\n"}, {"id": "6", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    lst = []\n    for i in range(len(word)):\n        if word[i].lower() not in vowels:\n            lst.append(word[i])\n    return \"\".join(lst)\n"}, {"id": "7", "snippet": "def get_closest_vowel(word):\n    vowel_index = 0\n    while vowel_index < len(VOWELS):\n        if is_vowel(word[vowel_index]):\n            return word[:vowel_index] + VOWELS[vowel_index] + word[vowel_index+1:]\n        else:\n            vowel_index += 1\n    return \"\"\n"}, {"id": "8", "snippet": "def get_closest_vowel(word):\n    vowel_dict = {'a': 'aeiou', 'e': 'eiu', 'i': 'ivu', 'o': 'oeu', 'u': 'ueiu'}\n    vowel = \"\"\n    for i in range(len(word)):\n        if word[i] in vowel_dict.keys():\n            vowel = vowel + vowel_dict[word[i]]\n    return vowel"}, {"id": "9", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiou\"\n    vowel_index = 0\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n\n    return word[:i] + get_next_vowel(word, vowel_index) + word[i+1:]\n"}]}
{"question_id": "HumanEval/119", "language": "python", "prompt": "\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n", "signature": "def match_parens(lst):", "solutions": [{"id": "0", "snippet": "def match_parens(lst):\n    for i in range(len(lst)):\n        if len(lst[i]) == 1:\n            return 'No'\n        if len(lst[i]) == 2:\n            return 'Yes'\n"}, {"id": "1", "snippet": "def match_parens(lst):\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            lst[i] = ''\n        else:\n            lst[i] = '('\n    return 'Yes' if '(' in lst else 'No'\n"}, {"id": "2", "snippet": "def match_parens(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] == '(' and lst[i + 1] == ')':\n            return 'Yes'\n    return 'No'\n"}, {"id": "3", "snippet": "def match_parens(lst):\n\n    if len(lst) == 0:\n        return 'No'\n    elif len(lst) == 1:\n        return match_parens(lst[:-1]) == 'Yes'\n    else:\n        return match_parens(lst[:-2]) == 'Yes' and match_parens(lst[:-1]) == 'No'"}, {"id": "4", "snippet": "def match_parens(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == lst[i+1]:\n            return 'Yes'\n    return 'No'\n    "}, {"id": "5", "snippet": "def match_parens(lst):\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return lst[0]\n    return 'No' if match_parens(lst[1:]) == 'Yes' else 'No'\n"}, {"id": "6", "snippet": "def match_parens(lst):\n\n    for i in range(len(lst)-1):\n        if lst[i] == '(' and lst[i+1] == ')':\n            return 'Yes'\n    return 'No'"}, {"id": "7", "snippet": "def match_parens(lst):\n    return 'No'"}, {"id": "8", "snippet": "def match_parens(lst):\n\n    # If any string is not a parenthesis, return 'No'\n    for i in range(len(lst)):\n        if lst[i]!= '(' and lst[i]!= ')':\n            return 'No'\n    return 'Yes'"}, {"id": "9", "snippet": "def match_parens(lst):\n    if len(lst) == 1:\n        return 'Yes'\n    elif not lst[0] and not lst[1]:\n        return 'No'\n    else:\n        return match_parens(lst[1:])\n"}]}
{"question_id": "HumanEval/12", "language": "python", "prompt": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n", "signature": "def longest(strings: List[str]):", "solutions": [{"id": "0", "snippet": "def longest(strings: List[str]):\n\n    if not strings:\n        return None\n\n    if len(strings) == 1:\n        return strings[0]\n\n    return max(strings, key=len)"}, {"id": "1", "snippet": "def longest(strings: List[str]):\n    if strings:\n        return max(strings, key=len)\n    else:\n        return None\n"}, {"id": "2", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}, {"id": "3", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    longest = strings[0]\n    for string in strings:\n        if len(string) > len(longest):\n            longest = string\n    return longest\n"}, {"id": "4", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n    elif len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)\n"}, {"id": "5", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n\n    return max(strings, key=len)\n"}, {"id": "6", "snippet": "def longest(strings: List[str]):\n\n    if strings:\n        return max(strings, key=len)\n    else:\n        return None"}, {"id": "7", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    else:\n        return max(strings, key=len)"}, {"id": "8", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n\n    # return the first string in case the length of the input is more than one\n    if len(strings) > 1:\n        return strings[0]\n\n    return max(strings)\n"}, {"id": "9", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n"}]}
{"question_id": "HumanEval/120", "language": "python", "prompt": "\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\n\nExample 1:\n\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\n\nExample 2:\n\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\n\nExample 3:\n\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\n\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n", "signature": "def maximum(arr, k):", "solutions": [{"id": "0", "snippet": "def maximum(arr, k):\npass"}, {"id": "1", "snippet": "def maximum(arr, k):\n    pass\n"}, {"id": "2", "snippet": "def maximum(arr, k):\n    arr.sort()\n    return arr[:k]"}, {"id": "3", "snippet": "def maximum(arr, k):\npass"}, {"id": "4", "snippet": "def maximum(arr, k):\n\n    pass\n\n\n"}, {"id": "5", "snippet": "def maximum(arr, k):\n    max_num = arr[0]\n    max_pos = 0\n    for i in range(1, k + 1):\n        if arr[i] > max_num:\n            max_num = arr[i]\n            max_pos = i\n    return [max_num] + arr[max_pos:]\n"}, {"id": "6", "snippet": "def maximum(arr, k):\n    return arr[:k]\n\n\n# Example 1:"}, {"id": "7", "snippet": "def maximum(arr, k):\npass"}, {"id": "8", "snippet": "def maximum(arr, k):\n    result = []\n    arr.sort()\n    return result\n"}, {"id": "9", "snippet": "def maximum(arr, k):\n\n    if len(arr) == 0:\n        return []\n    return sorted(arr[:k])\n"}]}
{"question_id": "HumanEval/121", "language": "python", "prompt": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n", "signature": "def solution(lst):", "solutions": [{"id": "0", "snippet": "def solution(lst):\n    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2!= 0])\n"}, {"id": "1", "snippet": "def solution(lst):\n    sum = 0\n    for i in lst:\n        if i%2 == 0:\n            sum = sum + i\n    return sum"}, {"id": "2", "snippet": "def solution(lst):\n\n    sum = 0\n\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n\n    return sum\n"}, {"id": "3", "snippet": "def solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum"}, {"id": "4", "snippet": "def solution(lst):\n    return sum(lst[::2])\n"}, {"id": "5", "snippet": "def solution(lst):\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])\n"}, {"id": "6", "snippet": "def solution(lst):\n    result = 0\n\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n\n    return result\n"}, {"id": "7", "snippet": "def solution(lst):\n\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])"}, {"id": "8", "snippet": "def solution(lst):\n\n    # Write your code here.\n\n    if not lst:\n        return 0\n\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0])"}, {"id": "9", "snippet": "def solution(lst):\n    total = 0\n    for num in lst:\n        if num % 2 == 0:\n            total += num\n    return total"}]}
{"question_id": "HumanEval/122", "language": "python", "prompt": "\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\n\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n", "signature": "def add_elements(arr, k):", "solutions": [{"id": "0", "snippet": "def add_elements(arr, k):\n\n    return sum([int(i) for i in str(sum(arr))[k:]])\n"}, {"id": "1", "snippet": "def add_elements(arr, k):\npass"}, {"id": "2", "snippet": "def add_elements(arr, k):\npass"}, {"id": "3", "snippet": "def add_elements(arr, k):\n    return sum(int(i) for i in arr[:k])\n"}, {"id": "4", "snippet": "def add_elements(arr, k):\n    pass\n"}, {"id": "5", "snippet": "def add_elements(arr, k):\n    pass\n"}, {"id": "6", "snippet": "def add_elements(arr, k):\n\n    if len(arr) < k:\n        return 0\n\n    return sum([int(i) for i in arr[:k]])\n"}, {"id": "7", "snippet": "def add_elements(arr, k):\n    pass\n"}, {"id": "8", "snippet": "def add_elements(arr, k):\n\n    return sum(arr[0:k])\n"}, {"id": "9", "snippet": "def add_elements(arr, k):\n    if not arr:\n        return 0\n\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n\n    return sum\n"}]}
{"question_id": "HumanEval/123", "language": "python", "prompt": "\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n", "signature": "def get_odd_collatz(n):", "solutions": [{"id": "0", "snippet": "def get_odd_collatz(n):\n    collatz_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            collatz_list.append(i)\n    return collatz_list\n"}, {"id": "1", "snippet": "def get_odd_collatz(n):\n\n    # Your code here\n    return sorted([i for i in range(1, n+1) if i%2!= 0])"}, {"id": "2", "snippet": "def get_odd_collatz(n):\n    res = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            res.append(i)\n    return res"}, {"id": "3", "snippet": "def get_odd_collatz(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}, {"id": "4", "snippet": "def get_odd_collatz(n):\n\n    return [n] + [i for i in range(1, n // 2 + 1) if n % i == 0]\n"}, {"id": "5", "snippet": "def get_odd_collatz(n):\n    return [x for x in range(1, n + 1) if not is_even(x)]\n"}, {"id": "6", "snippet": "def get_odd_collatz(n):\n\n    pass\n"}, {"id": "7", "snippet": "def get_odd_collatz(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}, {"id": "8", "snippet": "def get_odd_collatz(n):\n\n    answer = []\n    for i in range(n):\n        if i%2 == 0:\n            answer.append(i)\n    return answer"}, {"id": "9", "snippet": "def get_odd_collatz(n):\n    pass\n"}]}
{"question_id": "HumanEval/124", "language": "python", "prompt": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example:\nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n", "signature": "def valid_date(date):", "solutions": [{"id": "0", "snippet": "def valid_date(date):\n    if date == '':\n        return False\n    return True"}, {"id": "1", "snippet": "def valid_date(date):\n    pass\n"}, {"id": "2", "snippet": "def valid_date(date):\n    pass\n"}, {"id": "3", "snippet": "def valid_date(date):\n    if len(date) == 0:\n        return False\n    return True"}, {"id": "4", "snippet": "def valid_date(date):\n    pass\n"}, {"id": "5", "snippet": "def valid_date(date):\n    if date == '':\n        return False\n    return True\n"}, {"id": "6", "snippet": "def valid_date(date):\n    pass\n"}, {"id": "7", "snippet": "def valid_date(date):\n    if date:\n        return True\n    return False\n"}, {"id": "8", "snippet": "def valid_date(date):\n    if date is None:\n        return False\n    return True\n"}, {"id": "9", "snippet": "def valid_date(date):\n\n    if date == '':\n        return False\n    else:\n        return valid_month(date)\n"}]}
{"question_id": "HumanEval/125", "language": "python", "prompt": "\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3\n", "signature": "def split_words(txt):", "solutions": [{"id": "0", "snippet": "def split_words(txt):\n    return [w.strip() for w in txt.split(',')]\n"}, {"id": "1", "snippet": "def split_words(txt):\n    return [word for word in txt.split(',') if len(word) > 0]\n"}, {"id": "2", "snippet": "def split_words(txt):\n    return [w.lower() for w in txt.split(',') if w.isalpha()]\n"}, {"id": "3", "snippet": "def split_words(txt):\n    return re.split('\\s+', txt.strip())\n"}, {"id": "4", "snippet": "def split_words(txt):\n    return [word.lower() for word in txt.split(',') if len(word) > 0]\n"}, {"id": "5", "snippet": "def split_words(txt):\n\n    # TODO: Remove this and use split_text instead\n    return split_text(txt).split(\",\")\n"}, {"id": "6", "snippet": "def split_words(txt):\n    return [w.lower() for w in txt.split(',') if w.isalpha()]\n"}, {"id": "7", "snippet": "def split_words(txt):\n    return [word.lower() for word in re.split('[,\\s]+', txt) if word!= \"\"]\n"}, {"id": "8", "snippet": "def split_words(txt):\n    return [w.lower() for w in re.split(\"[,]+\", txt) if w.strip()]"}, {"id": "9", "snippet": "def split_words(txt):\n    # TODO: implement this\n    pass\n"}]}
{"question_id": "HumanEval/126", "language": "python", "prompt": "\nGiven a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n", "signature": "def is_sorted(lst):", "solutions": [{"id": "0", "snippet": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i-1]:\n            return False\n    return True\n"}, {"id": "1", "snippet": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] < lst[j]:\n                return False\n\n    return True"}, {"id": "2", "snippet": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n# Test Cases"}, {"id": "3", "snippet": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i - 1] < lst[i]:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n"}, {"id": "5", "snippet": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i - 1]:\n                return False\n        return True"}, {"id": "7", "snippet": "def is_sorted(lst):\n    return len(lst) <= 1 or all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# TODO: Rename to is_sorted"}, {"id": "8", "snippet": "def is_sorted(lst):\n    return lst == sorted(lst)\n"}, {"id": "9", "snippet": "def is_sorted(lst):\n    # Check if list is empty.\n    if lst == []:\n        return True\n\n    # Check if list contains duplicate numbers.\n    if len(lst) <= 1:\n        return False\n\n    return is_sorted(lst[1:]) and is_sorted(lst[:-1])\n"}]}
{"question_id": "HumanEval/127", "language": "python", "prompt": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n", "signature": "def intersection(interval1, interval2):", "solutions": [{"id": "0", "snippet": "def intersection(interval1, interval2):\n    return interval1[0] <= interval2[1] and interval2[0] <= interval1[1]"}, {"id": "1", "snippet": "def intersection(interval1, interval2):\n    return interval1[0] <= interval2[1] and interval2[0] <= interval1[1]\n"}, {"id": "2", "snippet": "def intersection(interval1, interval2):\n    return \"NO\""}, {"id": "3", "snippet": "def intersection(interval1, interval2):\n    return \"NO\""}, {"id": "4", "snippet": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1]:\n        return \"YES\"\n    return \"NO\"\n"}, {"id": "5", "snippet": "def intersection(interval1, interval2):\n    return \"NO\""}, {"id": "6", "snippet": "def intersection(interval1, interval2):\n    return \"NO\"\n"}, {"id": "7", "snippet": "def intersection(interval1, interval2):\n    if interval1[0] <= interval2[1] and interval1[1] >= interval2[0]:\n        return \"YES\"\n    return \"NO\""}, {"id": "8", "snippet": "def intersection(interval1, interval2):\n    return \"NO\""}, {"id": "9", "snippet": "def intersection(interval1, interval2):\n    return \"NO\" if (interval1[0] <= interval2[1]) else \"YES\""}]}
{"question_id": "HumanEval/128", "language": "python", "prompt": "\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n", "signature": "def prod_signs(arr):", "solutions": [{"id": "0", "snippet": "def prod_signs(arr):\n    if not arr:\n        return None\n    else:\n        return sum([arr[i]*(-1*arr[i]) for i in range(len(arr))])"}, {"id": "1", "snippet": "def prod_signs(arr):\n    # TODO: implement this function\n    pass\n"}, {"id": "2", "snippet": "def prod_signs(arr):\n    result = None\n    if arr == []:\n        return result\n    else:\n        for i in arr:\n            if i > 0:\n                result += i * (-1)\n            else:\n                result += i * (-1)\n        return result"}, {"id": "3", "snippet": "def prod_signs(arr):\n    if arr == []:\n        return None\n    else:\n        return product(arr) * prod_signs(arr[1:])\n"}, {"id": "4", "snippet": "def prod_signs(arr):\n    signs = []\n    for i in arr:\n        if i > 0:\n            signs.append(1)\n        else:\n            signs.append(-1)\n    return sum(signs)"}, {"id": "5", "snippet": "def prod_signs(arr):\n\n    if arr == []:\n        return None\n\n    result = 0\n    for i in arr:\n        if i > 0:\n            result = result * i\n        else:\n            result = result * (-i)\n    return result\n"}, {"id": "6", "snippet": "def prod_signs(arr):\n    pass"}, {"id": "7", "snippet": "def prod_signs(arr):\n\n    if not arr:\n        return None\n    else:\n        return reduce(operator.mul, (1 for i in arr), 1)\n"}, {"id": "8", "snippet": "def prod_signs(arr):\n\n    product = 1\n    for n in arr:\n        product *= n\n\n    return product"}, {"id": "9", "snippet": "def prod_signs(arr):\n    sum = 0\n    for i in arr:\n        if i >= 0:\n            sum += 1\n        else:\n            sum -= 1\n    return sum * product([-1, 1])\n"}]}
{"question_id": "HumanEval/129", "language": "python", "prompt": "\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n", "signature": "def minPath(grid, k):", "solutions": [{"id": "0", "snippet": "def minPath(grid, k):\n    return []"}, {"id": "1", "snippet": "def minPath(grid, k):\n    return []"}, {"id": "2", "snippet": "def minPath(grid, k):\n    return grid[:k]"}, {"id": "3", "snippet": "def minPath(grid, k):\n    return []"}, {"id": "4", "snippet": "def minPath(grid, k):\n    return []"}, {"id": "5", "snippet": "def minPath(grid, k):\n    return [1]"}, {"id": "6", "snippet": "def minPath(grid, k):\n    return [1]"}, {"id": "7", "snippet": "def minPath(grid, k):\n return [1]"}, {"id": "8", "snippet": "def minPath(grid, k):\n    return []\n"}, {"id": "9", "snippet": "def minPath(grid, k):\n    return []"}]}
{"question_id": "HumanEval/13", "language": "python", "prompt": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n", "signature": "def greatest_common_divisor(a: int, b: int):", "solutions": [{"id": "0", "snippet": "def greatest_common_divisor(a: int, b: int):\n    if a > b:\n        return greatest_common_divisor(b, a)\n    else:\n        return greatest_common_divisor(a, b - a)\n"}, {"id": "1", "snippet": "def greatest_common_divisor(a: int, b: int):\n    return min(a, b) if a > b else max(a, b)"}, {"id": "2", "snippet": "def greatest_common_divisor(a: int, b: int):\n    # TODO: implement this function\n    return a if a % b == 0 else greatest_common_divisor(b, a % b)\n"}, {"id": "3", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    return min([a, b]) if a < b else max([a, b])\n"}, {"id": "4", "snippet": "def greatest_common_divisor(a: int, b: int):\n    return __greatest_common_divisor(a, b, True)\n"}, {"id": "5", "snippet": "def greatest_common_divisor(a: int, b: int):\n    if a > b:\n        a, b = b, a\n    while b!= 0:\n        a, b = b, a % b\n    return a\n"}, {"id": "6", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    if b == 0:\n        return a\n\n    return greatest_common_divisor(b, a % b)\n"}, {"id": "7", "snippet": "def greatest_common_divisor(a: int, b: int):\n    if a == 0 or b == 0:\n        return a if a < b else b\n    else:\n        return greatest_common_divisor(b, a % b)\n"}, {"id": "8", "snippet": "def greatest_common_divisor(a: int, b: int):\n    while b!= 0:\n        a, b = b, a % b\n    return a"}, {"id": "9", "snippet": "def greatest_common_divisor(a: int, b: int):\n    if b == 0:\n        return a\n    else:\n        return greatest_common_divisor(b, a % b)"}]}
{"question_id": "HumanEval/130", "language": "python", "prompt": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n", "signature": "def tri(n):", "solutions": [{"id": "0", "snippet": "def tri(n):\n    if n < 2:\n        return [n]\n    else:\n        return tri(n-1) + tri(n-2)"}, {"id": "1", "snippet": "def tri(n):\n    pass"}, {"id": "2", "snippet": "def tri(n):\n    if n < 2:\n        return []\n    else:\n        return [n + 1] + tri(n - 1)\n"}, {"id": "3", "snippet": "def tri(n):\n\n    return [1, 3, 2, 8]\n"}, {"id": "4", "snippet": "def tri(n):\n    if n < 0:\n        return []\n\n    return [n, n + 1]"}, {"id": "5", "snippet": "def tri(n):\npass"}, {"id": "6", "snippet": "def tri(n):\n    if n == 0:\n        return []\n    return [n] + tri(n - 1)\n\n\n# Problem 3"}, {"id": "7", "snippet": "def tri(n):\n    if n < 2:\n        return []\n    else:\n        return tri(n - 1) + [n]\n\n\n# Test cases"}, {"id": "8", "snippet": "def tri(n):\n    # Your code here\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,1]\n    else:\n        return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]"}, {"id": "9", "snippet": "def tri(n):\n    return []\n"}]}
{"question_id": "HumanEval/131", "language": "python", "prompt": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n", "signature": "def digits(n):", "solutions": [{"id": "0", "snippet": "def digits(n):\n\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return n % 2 + digits(n // 2)\n"}, {"id": "1", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return digits(n // 2) * 2"}, {"id": "2", "snippet": "def digits(n):\n    if n < 10:\n        return 0\n    return n % 10 + digits(n // 10)\n"}, {"id": "3", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + digits(n // 10)\n"}, {"id": "4", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n * digits(n - 1)\n    else:\n        return n * digits(n - 1) + 1\n"}, {"id": "5", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + digits(n // 10)"}, {"id": "6", "snippet": "def digits(n):\n    if n < 10:\n        return n\n    return digits(n//10)*10 + n%10"}, {"id": "7", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 * digits(n // 10)"}, {"id": "8", "snippet": "def digits(n):\n    if n < 10:\n        return 0\n    else:\n        return n % 10 + digits(n//10)"}, {"id": "9", "snippet": "def digits(n):\n    if n < 10:\n        return n\n    else:\n        return n % 10 + digits(n // 10)\n"}]}
{"question_id": "HumanEval/132", "language": "python", "prompt": "\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n", "signature": "def is_nested(string):", "solutions": [{"id": "0", "snippet": "def is_nested(string):\n\n    return re.search(r'\\[\\[([^]]*)\\]\\]', string) is not None\n"}, {"id": "1", "snippet": "def is_nested(string):\n    def inner(string):\n        return any(is_nested_bracket(bracket) for bracket in string)\n    return inner\n"}, {"id": "2", "snippet": "def is_nested(string):\n    if not string:\n        return False\n    bracket_count = 0\n    for i in string:\n        if i == '[':\n            bracket_count += 1\n        elif i == ']':\n            bracket_count -= 1\n        if bracket_count == 0:\n            return True\n"}, {"id": "3", "snippet": "def is_nested(string):\n    return all(is_bracket(s) for s in string)\n"}, {"id": "4", "snippet": "def is_nested(string):\n    return any('[' in bracket for bracket in string.split('['))\n"}, {"id": "5", "snippet": "def is_nested(string):\n    for i in range(len(string)):\n        if string[i] == '[' and string[i + 1] == ']':\n            return True\n    return False"}, {"id": "6", "snippet": "def is_nested(string):\n    is_valid = True\n    for i in range(len(string)):\n        if string[i] == '[' or string[i] == ']' or string[i] == ']]]]]':\n            is_valid = False\n    return is_valid\n"}, {"id": "7", "snippet": "def is_nested(string):\n    return any('[' in sub or ']]]]]' in sub or '[[' in sub or ']]]]]]]' in sub"}, {"id": "8", "snippet": "def is_nested(string):\n    pass\n"}, {"id": "9", "snippet": "def is_nested(string):\n\n    def nested(string):\n        for bracket in brackets(string):\n            if is_bracket(bracket):\n                if is_nested(bracket):\n                    return True\n        return False\n    return nested"}]}
{"question_id": "HumanEval/133", "language": "python", "prompt": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n", "signature": "def sum_squares(lst):", "solutions": [{"id": "0", "snippet": "def sum_squares(lst):\n    return sum([int(x)**2 for x in lst])"}, {"id": "1", "snippet": "def sum_squares(lst):\n    return sum([i**2 for i in lst])"}, {"id": "2", "snippet": "def sum_squares(lst):\n    return sum([x ** 2 for x in lst])"}, {"id": "3", "snippet": "def sum_squares(lst):\n    return sum([i**2 for i in lst])"}, {"id": "4", "snippet": "def sum_squares(lst):\npass"}, {"id": "5", "snippet": "def sum_squares(lst):\n    return sum([int(i)**2 for i in lst])\n"}, {"id": "6", "snippet": "def sum_squares(lst):\n    # Your code here\n    # Your code here\n    result = 0\n    for i in lst:\n        result += i**2\n    return result"}, {"id": "7", "snippet": "def sum_squares(lst):\n    return sum([int(x)**2 for x in lst])"}, {"id": "8", "snippet": "def sum_squares(lst):\n    pass\n"}, {"id": "9", "snippet": "def sum_squares(lst):\n    return sum([int(e)**2 for e in lst])\n"}]}
{"question_id": "HumanEval/134", "language": "python", "prompt": "\nCreate a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False\n", "signature": "def check_if_last_char_is_a_letter(txt):", "solutions": [{"id": "0", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda s: s.endswith(txt[-1]) and s[-1] not in string.punctuation\n"}, {"id": "1", "snippet": "def check_if_last_char_is_a_letter(txt):\n\n    return lambda x: (\n        x[-1]!= \" \"\n        and x[-1] in alphabet\n        and not x[-1].isalpha()\n    )\n"}, {"id": "2", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda s: s[-1] in alphabet and not txt.startswith(s)\n"}, {"id": "3", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda s: s[-1] == s[-2] and s[-2] not in string.punctuation\n"}, {"id": "4", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda x: x[-1].isalpha() and not x[-1] == \" \"\n"}, {"id": "5", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda s: s[-1].isalpha() and s[-1]!=''\n"}, {"id": "6", "snippet": "def check_if_last_char_is_a_letter(txt):\n    # TODO\n    return lambda s: s.endswith(txt[-1]) and (not s.isalpha()) and (len(s) > 1)\n"}, {"id": "7", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda char: (char!='' and char.isalpha() and char!= '.' and char!= ',' and char!= ':')\n"}, {"id": "8", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda word: (txt[-1] in \"abcdefghijklmnopqrstuvwxyz \"\n                         \"0123456789!@#$%^&*()-_=+[]|\\:;'<>?,./\\\"\") and \\\n                         txt[-len(word):].isalpha()\n"}, {"id": "9", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda x: txt[-1] in x and (txt[-1]!= \" \" or x.count(\" \") > 0)\n"}]}
{"question_id": "HumanEval/135", "language": "python", "prompt": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n", "signature": "def can_arrange(arr):", "solutions": [{"id": "0", "snippet": "def can_arrange(arr):\n    if len(arr) == 0:\n        return -1\n    else:\n        return max([0] + [max(arr[0:i+1]) for i in range(len(arr)-1) if arr[i] >= arr[i+1]]) + 1"}, {"id": "1", "snippet": "def can_arrange(arr):\n    return lambda x: x if x <= arr[0] else -1"}, {"id": "2", "snippet": "def can_arrange(arr):\n    idx = -1\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i + 1]:\n            idx = i\n            break\n    return idx"}, {"id": "3", "snippet": "def can_arrange(arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            i += 1\n        else:\n            return i\n    return -1"}, {"id": "4", "snippet": "def can_arrange(arr):\n    pass\n"}, {"id": "5", "snippet": "def can_arrange(arr):\n    return lambda x: x if arr[x] >= arr[x - 1] else -1"}, {"id": "6", "snippet": "def can_arrange(arr):\n\n    if not arr:\n        return -1\n    else:\n        return max(arr)"}, {"id": "7", "snippet": "def can_arrange(arr):\n\n    return _arrange(arr, 0, len(arr) - 1)\n"}, {"id": "8", "snippet": "def can_arrange(arr):\n    pass\n"}, {"id": "9", "snippet": "def can_arrange(arr):\n    pass\n"}]}
{"question_id": "HumanEval/136", "language": "python", "prompt": "\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n", "signature": "def largest_smallest_integers(lst):", "solutions": [{"id": "0", "snippet": "def largest_smallest_integers(lst):\n    pass"}, {"id": "1", "snippet": "def largest_smallest_integers(lst):\n\n    return None\n"}, {"id": "2", "snippet": "def largest_smallest_integers(lst):\n    lst = list(lst)\n    if lst == []:\n        return None, None\n    else:\n        return max(lst), min(lst)"}, {"id": "3", "snippet": "def largest_smallest_integers(lst):\n    pass\n"}, {"id": "4", "snippet": "def largest_smallest_integers(lst):\n    return max(lst, key=lambda x: (-x)) if lst else (None, None)\n"}, {"id": "5", "snippet": "def largest_smallest_integers(lst):\n    pass\n"}, {"id": "6", "snippet": "def largest_smallest_integers(lst):\n    pass\n"}, {"id": "7", "snippet": "def largest_smallest_integers(lst):\n    pass\n"}, {"id": "8", "snippet": "def largest_smallest_integers(lst):\n\n    return max([(lst[i], i) for i in range(len(lst)) if lst[i]!= 0])\n"}, {"id": "9", "snippet": "def largest_smallest_integers(lst):\n\n    return max(lst, key=lambda x: smallest_integer(lst))\n"}]}
{"question_id": "HumanEval/137", "language": "python", "prompt": "\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n", "signature": "def compare_one(a, b):", "solutions": [{"id": "0", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(a, float):\n        if isinstance(b, str) or isinstance(b, float):\n            return cmp(float(a), float(b))\n        else:\n            return cmp(a, b)\n    else:\n        return cmp(a, b)"}, {"id": "1", "snippet": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    return None if a == b else max(a, b)\n"}, {"id": "2", "snippet": "def compare_one(a, b):\n    return None if a == b else a if a > b else b\n"}, {"id": "3", "snippet": "def compare_one(a, b):\n\n    if a == b:\n        return None\n\n    return (a > b) - (a < b)"}, {"id": "4", "snippet": "def compare_one(a, b):\n    if a == b:\n        return None\n    elif isinstance(a, float) and isinstance(b, float):\n        return a > b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a > b\n    elif isinstance(a, int) and isinstance(b, int):\n        return a > b\n    else:\n        return None"}, {"id": "5", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        return None\n    if a == b:\n        return None\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    return None\n"}, {"id": "6", "snippet": "def compare_one(a, b):\n    if a == b:\n        return None\n    if isinstance(a, str) and isinstance(b, str):\n        a, b = float(a), float(b)\n    return cmp(a, b)\n"}, {"id": "7", "snippet": "def compare_one(a, b):\n    return None if a == b else a if a > b else b\n"}, {"id": "8", "snippet": "def compare_one(a, b):\n    if isinstance(a, float) and isinstance(b, float):\n        return float(\"inf\") if a == b else a > b\n    if isinstance(a, str):\n        return a > b\n    return None if a == b else a > b\n"}, {"id": "9", "snippet": "def compare_one(a, b):\n    try:\n        return cmp(float(a), float(b))\n    except ValueError:\n        return None\n"}]}
{"question_id": "HumanEval/138", "language": "python", "prompt": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n", "signature": "def is_equal_to_sum_even(n):", "solutions": [{"id": "0", "snippet": "def is_equal_to_sum_even(n):\n    return is_equal_to_sum_odd(n) and (n & 1) == 0"}, {"id": "1", "snippet": "def is_equal_to_sum_even(n):\n    return (n % 2 == 0 and is_sum_of_even(n))"}, {"id": "2", "snippet": "def is_equal_to_sum_even(n):\n    return (n + 1) % 2 == 0 and n == sum_of_n_evens(n)\n"}, {"id": "3", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum_of_exactly_four_positive_evens(n)\n"}, {"id": "4", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum_of_positive_evens(n)\n"}, {"id": "5", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum_of_all_even(n)\n"}, {"id": "6", "snippet": "def is_equal_to_sum_even(n):\n    return is_equal_to_sum_exactly(n, n+1)\n"}, {"id": "7", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum_of_exactly_four_positive_integers(n)\n"}, {"id": "8", "snippet": "def is_equal_to_sum_even(n):\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_equal_to_sum_even(n // 2)\n"}, {"id": "9", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum_of_positive_evens(n)"}]}
{"question_id": "HumanEval/139", "language": "python", "prompt": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n", "signature": "def special_factorial(n):", "solutions": [{"id": "0", "snippet": "def special_factorial(n):\n\n    return n * special_factorial(n - 1)\n"}, {"id": "1", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)"}, {"id": "2", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}, {"id": "3", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return special_factorial(n - 1) * n"}, {"id": "4", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return special_factorial(n-1) * n"}, {"id": "5", "snippet": "def special_factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}, {"id": "6", "snippet": "def special_factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "7", "snippet": "def special_factorial(n):\n    if n <= 0:\n        return 0\n    else:\n        return special_factorial(n-1) * n\n"}, {"id": "8", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return special_factorial(n-1) * n"}, {"id": "9", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}]}
{"question_id": "HumanEval/14", "language": "python", "prompt": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n", "signature": "def all_prefixes(string: str):", "solutions": [{"id": "0", "snippet": "def all_prefixes(string: str):\n    if string == '':\n        return []\n    prefixes = [string[0]]\n    for i in range(1, len(string)):\n        prefix = string[:i]\n        if prefix == prefixes[-1]:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix[:-1])\n    return prefixes\n"}, {"id": "1", "snippet": "def all_prefixes(string: str):\n    return [string[:i] for i in range(len(string))]\n"}, {"id": "2", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}, {"id": "3", "snippet": "def all_prefixes(string: str):\n    return [prefix for prefix in itertools.takewhile(lambda c: c!= '', string)]\n"}, {"id": "4", "snippet": "def all_prefixes(string: str):\n    return [s[:i] for s, i in zip(string, range(len(string)))]\n"}, {"id": "5", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                prefixes.append(string[i:j])\n    return prefixes\n"}, {"id": "6", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n\n    for i in range(len(string)):\n        if string[i]!= string[i - 1]:\n            prefixes.append(string[:i])\n\n    return prefixes\n"}, {"id": "7", "snippet": "def all_prefixes(string: str):\n    return [prefix for prefix, _ in shortest_prefix_length(string)]\n"}, {"id": "8", "snippet": "def all_prefixes(string: str):\n\n    if not string:\n        return []\n    prefixes = []\n    for i in range(len(string)):\n        for prefix in all_prefixes(string[:i] + string[i + 1:]):\n            prefixes.append(string[i] + prefix)\n    return prefixes\n"}, {"id": "9", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}]}
{"question_id": "HumanEval/140", "language": "python", "prompt": "\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n", "signature": "def fix_spaces(text):", "solutions": [{"id": "0", "snippet": "def fix_spaces(text):\n    return re.sub(r' +', '_', text)"}, {"id": "1", "snippet": "def fix_spaces(text):\n    return re.sub(r'\\s+', '_', text)\n"}, {"id": "2", "snippet": "def fix_spaces(text):\n    return re.sub(' +', '_', text)\n"}, {"id": "3", "snippet": "def fix_spaces(text):\n    return re.sub(r\"\\s+\", \"_\", text)"}, {"id": "4", "snippet": "def fix_spaces(text):\n    return re.sub(r'\\s+', '_', text)\n"}, {"id": "5", "snippet": "def fix_spaces(text):\n    return text.replace(' ', '_')\n"}, {"id": "6", "snippet": "def fix_spaces(text):\n    return re.sub(r'\\s+', '_', text)\n"}, {"id": "7", "snippet": "def fix_spaces(text):\n    return re.sub(r'\\s+', '_', text)\n"}, {"id": "8", "snippet": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"\\t\", \"_\")\n    text = text.replace(\"\\n\", \"_\")\n    text = text.replace(\"\\r\", \"_\")\n    return text"}, {"id": "9", "snippet": "def fix_spaces(text):\n    return text.replace(\" \", \"_\")"}]}
{"question_id": "HumanEval/141", "language": "python", "prompt": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n", "signature": "def file_name_check(file_name):", "solutions": [{"id": "0", "snippet": "def file_name_check(file_name):\n    return lambda name: name.isdigit() and (name[0] in \"0123456789.\") and (name[1] == \".\" or name[1].isalpha())"}, {"id": "1", "snippet": "def file_name_check(file_name):\n    return lambda x: x == file_name.replace('.', '').replace('0', '').replace('1', '')"}, {"id": "2", "snippet": "def file_name_check(file_name):\n    return lambda x: (x!= '') and (len(x) == 1) and (x[0].isalpha() and x[0].isupper())\n"}, {"id": "3", "snippet": "def file_name_check(file_name):\n    return lambda name: name.isdigit() and (len(name) == 1 or name[0].isalpha())\n"}, {"id": "4", "snippet": "def file_name_check(file_name):\n\n    return lambda x: x!= \"\" and x.isdigit() and x[0].isalpha() and x[0].isupper()"}, {"id": "5", "snippet": "def file_name_check(file_name):\n    return lambda s: re.search(r\"^(\\w+)\\.(\\w+)$\", s) is not None\n"}, {"id": "6", "snippet": "def file_name_check(file_name):\n    return lambda x: x.isdigit() and len(x) == 1 and x.isalpha() and x.isupper() and x[0].isalpha() and x[0].isupper()"}, {"id": "7", "snippet": "def file_name_check(file_name):\n    if re.match(r'^[0-9]{3}\\.[a-z]{1}$', file_name):\n        return 'Yes'\n    return 'No'\n"}, {"id": "8", "snippet": "def file_name_check(file_name):\n    return lambda x: x and check_name(x) and check_name(x[0]) and check_name(x[1:])"}, {"id": "9", "snippet": "def file_name_check(file_name):\n    return lambda x: x!= '' and re.match('[0-9]+', x) and not re.match('[a-zA-Z]+', x) and file_name[:1] == '.'"}]}
{"question_id": "HumanEval/142", "language": "python", "prompt": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n", "signature": "def sum_squares(lst):", "solutions": [{"id": "0", "snippet": "def sum_squares(lst):\n    return sum(i ** 2 for i in lst)"}, {"id": "1", "snippet": "def sum_squares(lst):\n    pass\n"}, {"id": "2", "snippet": "def sum_squares(lst):\n    return sum(lst) ** 2\n\n# Ex B.5\n# Sum of squares of a list that is a multiple of 3 and not a multiple of 4."}, {"id": "3", "snippet": "def sum_squares(lst):\n\n    # Your code\n    sum = 0\n    for i in lst:\n        if i%3 == 0 or i%4 == 0:\n            sum += i*i\n    return sum\n"}, {"id": "4", "snippet": "def sum_squares(lst):\npass"}, {"id": "5", "snippet": "def sum_squares(lst):\n    if len(lst) == 0:\n        return 0\n    return (lst[0] ** 2) + sum_squares(lst[1:])\n"}, {"id": "6", "snippet": "def sum_squares(lst):\npass"}, {"id": "7", "snippet": "def sum_squares(lst):\n\n    pass\n"}, {"id": "8", "snippet": "def sum_squares(lst):\n    # Your code here\n    return sum([i**2 for i in lst if i % 3 == 0 or i % 4 == 0])\n"}, {"id": "9", "snippet": "def sum_squares(lst):\n    if len(lst) % 3 == 0:\n        return (lst[0] * lst[0] + lst[1] * lst[1] + lst[2] * lst[2]) ** 0.5\n    elif len(lst) % 4 == 0:\n        return (lst[0] * lst[0] + lst[1] * lst[1] + lst[2] * lst[2]) ** 0.5\n"}]}
{"question_id": "HumanEval/143", "language": "python", "prompt": "\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\n\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\n\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n", "signature": "def words_in_sentence(sentence):", "solutions": [{"id": "0", "snippet": "def words_in_sentence(sentence):\n    # TODO\n    pass\n"}, {"id": "1", "snippet": "def words_in_sentence(sentence):\n    pass\n"}, {"id": "2", "snippet": "def words_in_sentence(sentence):\n    return sentence.lower().split()\n"}, {"id": "3", "snippet": "def words_in_sentence(sentence):\npass"}, {"id": "4", "snippet": "def words_in_sentence(sentence):\n    return \" \".join([word for word in sentence.split() if is_prime(word)])\n"}, {"id": "5", "snippet": "def words_in_sentence(sentence):\n    sentence = sentence.lower()\n    words = sentence.split()\n    prime_numbers = []\n    for word in words:\n        if is_prime(word):\n            prime_numbers.append(word)\n    return \" \".join(prime_numbers)"}, {"id": "6", "snippet": "def words_in_sentence(sentence):\n\n    return''.join(sentence.split())\n"}, {"id": "7", "snippet": "def words_in_sentence(sentence):\n    pass"}, {"id": "8", "snippet": "def words_in_sentence(sentence):\n    return \" \".join(words_in_words(sentence))"}, {"id": "9", "snippet": "def words_in_sentence(sentence):\n    # TODO\n    pass\n"}]}
{"question_id": "HumanEval/144", "language": "python", "prompt": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n", "signature": "def simplify(x, n):", "solutions": [{"id": "0", "snippet": "def simplify(x, n):\n    pass\n"}, {"id": "1", "snippet": "def simplify(x, n):\n    pass\n"}, {"id": "2", "snippet": "def simplify(x, n):\n    pass"}, {"id": "3", "snippet": "def simplify(x, n):\n    if x.is_integer() and n.is_integer():\n        if x == 0:\n            return False\n        else:\n            return int(x / n)\n    else:\n        return False"}, {"id": "4", "snippet": "def simplify(x, n):\n    return x * n"}, {"id": "5", "snippet": "def simplify(x, n):\n    if n == 0:\n        return False\n    else:\n        return x * simplify(n, x)\n"}, {"id": "6", "snippet": "def simplify(x, n):\n    return x / n"}, {"id": "7", "snippet": "def simplify(x, n):\n    pass\n"}, {"id": "8", "snippet": "def simplify(x, n):\n    return True"}, {"id": "9", "snippet": "def simplify(x, n):\n    pass"}]}
{"question_id": "HumanEval/145", "language": "python", "prompt": "\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n", "signature": "def order_by_points(nums):", "solutions": [{"id": "0", "snippet": "def order_by_points(nums):\n\n    sorted_nums = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n    return sorted_nums\n"}, {"id": "1", "snippet": "def order_by_points(nums):\n    pass\n"}, {"id": "2", "snippet": "def order_by_points(nums):\n    nums = sorted(nums, key=lambda x: (x.digits), reverse=True)\n    return nums"}, {"id": "3", "snippet": "def order_by_points(nums):\n    nums = sorted(nums, key = lambda x: x.digits)\n    return nums"}, {"id": "4", "snippet": "def order_by_points(nums):\n    pass\n"}, {"id": "5", "snippet": "def order_by_points(nums):\npass"}, {"id": "6", "snippet": "def order_by_points(nums):\npass"}, {"id": "7", "snippet": "def order_by_points(nums):\n    pass\n"}, {"id": "8", "snippet": "def order_by_points(nums):\n\n    if not nums:\n        return []\n\n    return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))\n"}, {"id": "9", "snippet": "def order_by_points(nums):\n\n    sorted_nums = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n\n    return sorted_nums"}]}
{"question_id": "HumanEval/146", "language": "python", "prompt": "Write a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1\nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n", "signature": "def specialFilter(nums):", "solutions": [{"id": "0", "snippet": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 0:\n            count += 1\n        elif nums[i] > 10 and nums[i] % 2!= 0:\n            count += 1\n        elif nums[i] < 10 and nums[i] % 2 == 0:\n            count += 1\n    return count"}, {"id": "1", "snippet": "def specialFilter(nums):\n    \n    \n    return sum([num > 10 for num in nums]) + sum([num % 2 for num in nums])\n"}, {"id": "2", "snippet": "def specialFilter(nums):\n    return sum([nums[i] > 10 and nums[i] % 2 == 1 for i in range(len(nums))])\n"}, {"id": "3", "snippet": "def specialFilter(nums):\n    count = 0\n    for i in nums:\n        if i > 10 and i % 2 == 0:\n            count += 1\n        elif i > 10 and i % 2!= 0:\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def specialFilter(nums):\n    return sum(nums[1:len(nums)]) - sum(nums[:len(nums)-1])"}, {"id": "5", "snippet": "def specialFilter(nums):\n    return len([x for x in nums if x > 10 and x % 10 == 1 and x % 3 == 5 and x % 7 == 9])\n"}, {"id": "6", "snippet": "def specialFilter(nums):\n\n    return len([x for x in nums if x > 10 and x % 2 == 0])"}, {"id": "7", "snippet": "def specialFilter(nums):\n    if len(nums) < 2:\n        return 0\n    return sum([nums[i] > nums[i - 1] and nums[i]!= nums[i - 2] and nums[i]!= nums[i - 3] and nums[i]!= nums[i - 4] and nums[i]!= nums[i - 5] and nums[i]!= nums[i - 6] and nums[i]!= nums[i - 7] and nums[i]!= nums[i - 8] and nums[i]!= nums[i - 9]])\n"}, {"id": "8", "snippet": "def specialFilter(nums):\n    nums = sorted(nums)\n    if len(nums) < 3:\n        return 0\n    elif nums[0] > 10:\n        return 0\n    elif nums[-1] > 10:\n        return 0\n    elif nums[-2] > 10:\n        return 0\n    elif nums[-3] > 10:\n        return 0\n    else:\n        return len(nums)\n"}, {"id": "9", "snippet": "def specialFilter(nums):\n    pass\n"}]}
{"question_id": "HumanEval/147", "language": "python", "prompt": "\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n", "signature": "def get_max_triples(n):", "solutions": [{"id": "0", "snippet": "def get_max_triples(n):\n    a = range(1, n + 1)\n    max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                max_triples = max(max_triples, (i * j) + (i * k) + (j * k) + (k * j))\n    return max_triples"}, {"id": "1", "snippet": "def get_max_triples(n):\n    # Your code here\n    a = [1,3,7,13,21]\n    n = n % 3\n    return len(a) - n"}, {"id": "2", "snippet": "def get_max_triples(n):\n    pass\n"}, {"id": "3", "snippet": "def get_max_triples(n):\n\n    # Your code here\n\n    return 0"}, {"id": "4", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] == 3:\n                    triples += 3\n    return triples"}, {"id": "5", "snippet": "def get_max_triples(n):\n    # For a given number of triples of a given number of items, the number of triples of a given number of items\n    # is the number of items in a multiple of 3.\n    return n // 3 * 3 + 1\n"}, {"id": "6", "snippet": "def get_max_triples(n):\npass"}, {"id": "7", "snippet": "def get_max_triples(n):\n    # write your code here\n    if n < 1:\n        return 0\n    else:\n        a = [1, 3, 7, 13, 21]\n        return get_triples(a, n - 1) + get_triples(a, n - 2) + get_triples(a, n - 3)"}, {"id": "8", "snippet": "def get_max_triples(n):\n\n    a = [1, 3, 7, 13, 21]\n\n    return len(a) // 3\n"}, {"id": "9", "snippet": "def get_max_triples(n):\n    a = [0 for i in range(n)]\n    a[0] = 1\n    for i in range(1, n):\n        for j in range(1, i):\n            a[i] = max(a[i], a[j] + a[i - 1] + 1)\n    return a[n - 1]\n"}]}
{"question_id": "HumanEval/148", "language": "python", "prompt": "\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n", "signature": "def bf(planet1, planet2):", "solutions": [{"id": "0", "snippet": "def bf(planet1, planet2):\n    pass"}, {"id": "1", "snippet": "def bf(planet1, planet2):\npass"}, {"id": "2", "snippet": "def bf(planet1, planet2):\n    pass"}, {"id": "3", "snippet": "def bf(planet1, planet2):\n    pass"}, {"id": "4", "snippet": "def bf(planet1, planet2):\n\n    return tuple(sorted([planet1, planet2], key=lambda x: dist(planet1, planet2)))\n"}, {"id": "5", "snippet": "def bf(planet1, planet2):\npass"}, {"id": "6", "snippet": "def bf(planet1, planet2):\n    pass"}, {"id": "7", "snippet": "def bf(planet1, planet2):\n    pass"}, {"id": "8", "snippet": "def bf(planet1, planet2):\npass"}, {"id": "9", "snippet": "def bf(planet1, planet2):\n    return sorted([planet1, planet2], key=lambda x: (abs(x.orbit.longitude), x.orbit.latitude))[0:7]\n"}]}
{"question_id": "HumanEval/149", "language": "python", "prompt": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n", "signature": "def sorted_list_sum(lst):", "solutions": [{"id": "0", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst)\n"}, {"id": "1", "snippet": "def sorted_list_sum(lst):\npass"}, {"id": "2", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst, key=len)\n"}, {"id": "3", "snippet": "def sorted_list_sum(lst):\npass"}, {"id": "4", "snippet": "def sorted_list_sum(lst):\n\n    return sorted(lst, key=len)\n"}, {"id": "5", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst, key=len)\n"}, {"id": "6", "snippet": "def sorted_list_sum(lst):\npass"}, {"id": "7", "snippet": "def sorted_list_sum(lst):\n    pass\n"}, {"id": "8", "snippet": "def sorted_list_sum(lst):\npass"}, {"id": "9", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst)\n"}]}
{"question_id": "HumanEval/15", "language": "python", "prompt": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n", "signature": "def string_sequence(n: int):", "solutions": [{"id": "0", "snippet": "def string_sequence(n: int):\n    return''.join(str(i) for i in range(0, n))\n"}, {"id": "1", "snippet": "def string_sequence(n: int):\n    return \"\".join([\" \" for _ in range(n)])\n"}, {"id": "2", "snippet": "def string_sequence(n: int):\n    return''.join(str(i) for i in range(n))\n"}, {"id": "3", "snippet": "def string_sequence(n: int):\n    return \"\".join([str(i) for i in range(n)])\n"}, {"id": "4", "snippet": "def string_sequence(n: int):\n    return ''.join([str(i) for i in range(n)])\n"}, {"id": "5", "snippet": "def string_sequence(n: int):\n    return''.join([str(i) for i in range(n)])\n"}, {"id": "6", "snippet": "def string_sequence(n: int):\n    return''.join(str(i) for i in range(n))\n"}, {"id": "7", "snippet": "def string_sequence(n: int):\n    return \" \".join(str(i) for i in range(n))\n"}, {"id": "8", "snippet": "def string_sequence(n: int):\n    if n == 0:\n        return \"0\"\n    return \" \".join([str(n - i) for i in range(n)])\n"}, {"id": "9", "snippet": "def string_sequence(n: int):\n    return''.join(str(n) for _ in range(n))\n"}]}
{"question_id": "HumanEval/150", "language": "python", "prompt": "A simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n", "signature": "def x_or_y(n, x, y):", "solutions": [{"id": "0", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return y\n    if n % 2 == 0:\n        return x_or_y(n / 2, x, y)\n    return x_or_y(n / 2, x, y * 2)\n"}, {"id": "1", "snippet": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    else:\n        return x_or_y(n-1, x, y)\n\n# Test Cases"}, {"id": "2", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return x\n    elif n == 1:\n        return y\n    else:\n        return x_or_y(n - 1, x, y) + y\n"}, {"id": "3", "snippet": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y)\n    else:\n        return y\n"}, {"id": "4", "snippet": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}, {"id": "5", "snippet": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    return y\n"}, {"id": "6", "snippet": "def x_or_y(n, x, y):\n    return y if n % x == 0 else x\n"}, {"id": "7", "snippet": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y"}, {"id": "8", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y)\n    else:\n        return x_or_y(n // 2, x * 2, y)\n"}, {"id": "9", "snippet": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y)\n    else:\n        return y\n"}]}
{"question_id": "HumanEval/151", "language": "python", "prompt": "\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\n\nIf the input list is empty, return 0.\n", "signature": "def double_the_difference(lst):", "solutions": [{"id": "0", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return (lst[0] ** 2) + (lst[1] ** 2) + (lst[2] ** 2) + (lst[3] ** 2)"}, {"id": "1", "snippet": "def double_the_difference(lst):\n    sum = 0\n    for i in lst:\n        if i % 2!= 0:\n            sum += i\n    return sum"}, {"id": "2", "snippet": "def double_the_difference(lst):\n    if lst == []:\n        return 0\n    else:\n        return lst[0] * lst[0] + sum([(i + j) * (i + j) for i, j in zip(lst[1:], lst[1:][1:]) if i % 2!= 0 or j % 2!= 0])"}, {"id": "3", "snippet": "def double_the_difference(lst):\n    if lst == []:\n        return 0\n    return sum([(i + 1) * (i + 2) for i in lst if i % 2 == 0])"}, {"id": "4", "snippet": "def double_the_difference(lst):\n    return sum([i for i in lst if i % 2 == 1])\n"}, {"id": "5", "snippet": "def double_the_difference(lst):\n    s = 0\n    for i in lst:\n        if i % 2!= 0:\n            s += i\n    return s\n\n# Q2."}, {"id": "6", "snippet": "def double_the_difference(lst):\n    if lst == []:\n        return 0\n\n    return sum([int(i) ** 2 for i in lst])\n"}, {"id": "7", "snippet": "def double_the_difference(lst):\n    return sum(x * x for x in lst if x % 2!= 0)\n"}, {"id": "8", "snippet": "def double_the_difference(lst):\n    # TODO: implement this function\n    \n    s = 0\n    for i in lst:\n        if i % 2 == 0:\n            s += i\n    return s"}, {"id": "9", "snippet": "def double_the_difference(lst):\n    if lst == []:\n        return 0\n    return sum([i for i in lst if i % 2!= 0])"}]}
{"question_id": "HumanEval/152", "language": "python", "prompt": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n", "signature": "def compare(game, guess):", "solutions": [{"id": "0", "snippet": "def compare(game, guess):\n\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n"}, {"id": "1", "snippet": "def compare(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(game))]\n"}, {"id": "2", "snippet": "def compare(game, guess):\n    pass\n\n"}, {"id": "3", "snippet": "def compare(game, guess):\n    pass\n"}, {"id": "4", "snippet": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n"}, {"id": "5", "snippet": "def compare(game, guess):\n    pass\n"}, {"id": "6", "snippet": "def compare(game, guess):\n    return [sum(guess[i]!= game[i] for i in range(len(game))) - sum(guess[i] == game[i] for i in range(len(game)))]"}, {"id": "7", "snippet": "def compare(game, guess):\n    pass"}, {"id": "8", "snippet": "def compare(game, guess):\n    return [abs(a - b) for a, b in zip(game, guess)]"}, {"id": "9", "snippet": "def compare(game, guess):\n    return [abs(game[i]-guess[i]) for i in range(len(game))]"}]}
{"question_id": "HumanEval/153", "language": "python", "prompt": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n", "signature": "def Strongest_Extension(class_name, extensions):", "solutions": [{"id": "0", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "1", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "2", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "3", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "4", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "5", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "6", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "7", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "8", "snippet": "def Strongest_Extension(class_name, extensions):\n"}, {"id": "9", "snippet": "def Strongest_Extension(class_name, extensions):\n"}]}
{"question_id": "HumanEval/154", "language": "python", "prompt": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n", "signature": "def cycpattern_check(a, b):", "solutions": [{"id": "0", "snippet": "def cycpattern_check(a, b):\n    return True if re.search(a, b) else False\n"}, {"id": "1", "snippet": "def cycpattern_check(a, b):\n    for i in range(len(a)-len(b)+1):\n        if a[i:i+len(b)] in b:\n            return True\n    return False\n"}, {"id": "2", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n"}, {"id": "3", "snippet": "def cycpattern_check(a, b):\n    return a in b or b in a"}, {"id": "4", "snippet": "def cycpattern_check(a, b):\n    return True if (a in b or b in a) else False"}, {"id": "5", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n\n    return True\n"}, {"id": "6", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n    return all([a[i] == b[i] for i in range(len(a))])\n"}, {"id": "7", "snippet": "def cycpattern_check(a, b):\n\n    return (len(a) == len(b) and\n            all([a[i] == b[i] for i in range(len(a))]))\n"}, {"id": "8", "snippet": "def cycpattern_check(a, b):\n    return a in b or b in a"}, {"id": "9", "snippet": "def cycpattern_check(a, b):\n\n    return not (len(a) == len(b) and a!= b)"}]}
{"question_id": "HumanEval/155", "language": "python", "prompt": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\nExample:\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)\n", "signature": "def even_odd_count(num):", "solutions": [{"id": "0", "snippet": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num >= 10:\n        num //= 10\n        even += 1\n    while num >= 1:\n        num //= 10\n        odd += 1\n    return (even, odd)\n\n# Test Cases"}, {"id": "1", "snippet": "def even_odd_count(num):\n    num_list = list(str(num))\n    even_odd_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == \"0\":\n            even_odd_count += 1\n        else:\n            break\n    return (even_odd_count, len(num_list) - even_odd_count)"}, {"id": "2", "snippet": "def even_odd_count(num):\n    if num % 2 == 0:\n        even = num // 2\n    else:\n        even = num // 2 + 1\n    return (even, num % 2)"}, {"id": "3", "snippet": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 2\n    return (even, odd)\n"}, {"id": "4", "snippet": "def even_odd_count(num):\n    return (num % 2, num // 2)\n"}, {"id": "5", "snippet": "def even_odd_count(num):\n    if num % 2 == 0:\n        return (num // 2, num % 2)\n    else:\n        return (num // 2, num % 2)\n"}, {"id": "6", "snippet": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    if num % 2 == 0:\n        even = 1\n    else:\n        odd = 1\n    return (even, odd)"}, {"id": "7", "snippet": "def even_odd_count(num):\n\n    even = 0\n    odd = 0\n    for i in range(0, num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)"}, {"id": "8", "snippet": "def even_odd_count(num):\n    if num == 0:\n        return (0, 0)\n    even, odd = even_odd_count(num // 2)\n    return (even + 1, odd + 1)\n"}, {"id": "9", "snippet": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    while num!= 0:\n        if num % 2 == 0:\n            odd += 1\n        else:\n            even += 1\n        num //= 2\n    return even, odd\n"}]}
{"question_id": "HumanEval/156", "language": "python", "prompt": "\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n", "signature": "def int_to_mini_roman(number):", "solutions": [{"id": "0", "snippet": "def int_to_mini_roman(number):\n    return convert_to_roman(int_to_roman(number))"}, {"id": "1", "snippet": "def int_to_mini_roman(number):\n    pass\n"}, {"id": "2", "snippet": "def int_to_mini_roman(number):\n    return roman_numeral_to_mini_roman(int_to_roman(number))\n"}, {"id": "3", "snippet": "def int_to_mini_roman(number):\n\n    return roman_to_int(int_to_roman(number))"}, {"id": "4", "snippet": "def int_to_mini_roman(number):\n\n    return roman_converter(number)"}, {"id": "5", "snippet": "def int_to_mini_roman(number):\n\n    # get the upper and lower case letters\n    upper_case = get_upper_and_lower_case(number)\n\n    # convert the upper case letter to roman numeral\n    roman_numeral = roman_numeral_from_upper_case(upper_case)\n\n    # return the roman numeral\n    return roman_numeral\n\n# main function"}, {"id": "6", "snippet": "def int_to_mini_roman(number):\n    result = ''\n    for i in range(len(roman_numerals)):\n        if number >= 10 ** i:\n            result = roman_numerals[i] + result\n            number -= 10 ** i\n    return result.lower()"}, {"id": "7", "snippet": "def int_to_mini_roman(number):\n    num_roman = \"\"\n    roman_num = int_to_roman(number)\n    for i in range(0, len(roman_num) - 1):\n        if roman_num[i] >= roman_num[i+1]:\n            num_roman += roman_num[i]\n        else:\n            num_roman += roman_num[i] + \"m\"\n    return num_roman\n"}, {"id": "8", "snippet": "def int_to_mini_roman(number):\n\n    if number < 1:\n        raise ValueError('Number must be positive integer')\n    elif number > 1000:\n        raise ValueError('Number must be less than 1000')\n    else:\n        return convert_to_roman(int_to_roman(number))\n"}, {"id": "9", "snippet": "def int_to_mini_roman(number):\n    return roman_numeral_map[number]\n\n\n# https://en.wikipedia.org/wiki/Roman_numerals"}]}
{"question_id": "HumanEval/157", "language": "python", "prompt": "\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n", "signature": "def right_angle_triangle(a, b, c):", "solutions": [{"id": "0", "snippet": "def right_angle_triangle(a, b, c):\n\n    return (a * b) == (b * c) and (a * c) == (b * a)"}, {"id": "1", "snippet": "def right_angle_triangle(a, b, c):\n    return ((a + b + c) % (a + b + c) == 0) or ((a + b + c) % (a + c + b) == 0)"}, {"id": "2", "snippet": "def right_angle_triangle(a, b, c):\n    if (a + b > c and a + c > b and b + c > a) or (a + b > c and a + c > b and b + c > a):\n        return True\n    else:\n        return False"}, {"id": "3", "snippet": "def right_angle_triangle(a, b, c):\n    return (c ** 2 - a ** 2 - b ** 2) > 0\n"}, {"id": "4", "snippet": "def right_angle_triangle(a, b, c):\n    return (a ** 2 + b ** 2 == c ** 2) or (a * b == c ** 2)"}, {"id": "5", "snippet": "def right_angle_triangle(a, b, c):\n    return (a + b > c and b + c > a and a + c > b)\n\n# Question 3"}, {"id": "6", "snippet": "def right_angle_triangle(a, b, c):\n    return (a * b > c) and (b * c > a)\n"}, {"id": "7", "snippet": "def right_angle_triangle(a, b, c):\n    return angle_between(a, b, c) > 0"}, {"id": "8", "snippet": "def right_angle_triangle(a, b, c):\n    return a*a+b*b == c*c - a*b*c\n"}, {"id": "9", "snippet": "def right_angle_triangle(a, b, c):\n    return (a + b > c and b + c > a and c + a > b)"}]}
{"question_id": "HumanEval/158", "language": "python", "prompt": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n", "signature": "def find_max(words):", "solutions": [{"id": "0", "snippet": "def find_max(words):\n    # TODO: Write your code here\n    max_word = \"\"\n    for word in words:\n        if len(word) > len(max_word):\n            max_word = word\n    return max_word\n\n\n# Tests"}, {"id": "1", "snippet": "def find_max(words):\n    return max(words, key=lambda x: len(x))\n"}, {"id": "2", "snippet": "def find_max(words):\n    if len(words) == 1:\n        return words[0]\n    else:\n        return max(words, key=len)"}, {"id": "3", "snippet": "def find_max(words):\n    if len(words) == 0:\n        return \"\"\n    max_length = 0\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if len(words[i]) == len(words[j]):\n                max_length = max(max_length, len(words[i]))\n    return words[0][:max_length]\n"}, {"id": "4", "snippet": "def find_max(words):\n    # Your code here\n    words = list(set(words))\n    max_index = 0\n    for word in words:\n        if len(word) > max_index:\n            max_index = len(word)\n    return words[max_index]\n\n\n# Test Cases"}, {"id": "5", "snippet": "def find_max(words):\n    max_word = \"\"\n    for word in words:\n        count = len(word)\n        if count > max_word:\n            max_word = word\n    return max_word\n"}, {"id": "6", "snippet": "def find_max(words):\n\n    pass\n"}, {"id": "7", "snippet": "def find_max(words):\n    pass"}, {"id": "8", "snippet": "def find_max(words):\n    max_word = ''\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"}, {"id": "9", "snippet": "def find_max(words):\n    pass\n"}]}
{"question_id": "HumanEval/159", "language": "python", "prompt": "\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n", "signature": "def eat(number, need, remaining):", "solutions": [{"id": "0", "snippet": "def eat(number, need, remaining):\n\n    return [0] * (need - remaining) + [number] * (need - remaining)"}, {"id": "1", "snippet": "def eat(number, need, remaining):\n    return [need + remaining - number]"}, {"id": "2", "snippet": "def eat(number, need, remaining):\npass"}, {"id": "3", "snippet": "def eat(number, need, remaining):\n    pass\n"}, {"id": "4", "snippet": "def eat(number, need, remaining):\npass"}, {"id": "5", "snippet": "def eat(number, need, remaining):\n    return [0, 0]\n"}, {"id": "6", "snippet": "def eat(number, need, remaining):\npass"}, {"id": "7", "snippet": "def eat(number, need, remaining):\npass"}, {"id": "8", "snippet": "def eat(number, need, remaining):\npass"}, {"id": "9", "snippet": "def eat(number, need, remaining):\npass"}]}
{"question_id": "HumanEval/16", "language": "python", "prompt": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n", "signature": "def count_distinct_characters(string: str):", "solutions": [{"id": "0", "snippet": "def count_distinct_characters(string: str):\n    return len(set(string))\n"}, {"id": "1", "snippet": "def count_distinct_characters(string: str):\n    count = 0\n    for c in string:\n        if c.isupper():\n            count += 1\n    return count\n"}, {"id": "2", "snippet": "def count_distinct_characters(string: str):\n    distinct_characters = 0\n    for i in string:\n        if i.isupper():\n            distinct_characters += 1\n    return distinct_characters\n"}, {"id": "3", "snippet": "def count_distinct_characters(string: str):\n    count = 0\n    for char in string:\n        if char =='':\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def count_distinct_characters(string: str):\n    return len(set(string))\n"}, {"id": "5", "snippet": "def count_distinct_characters(string: str):\n    return len(set(string))\n"}, {"id": "6", "snippet": "def count_distinct_characters(string: str):\n    distinct = 0\n    for char in string:\n        if char.isupper():\n            distinct += 1\n    return distinct"}, {"id": "7", "snippet": "def count_distinct_characters(string: str):\n    return len({char for char in string})\n"}, {"id": "8", "snippet": "def count_distinct_characters(string: str):\n\n    chars = set(string)\n    return len(chars)\n"}, {"id": "9", "snippet": "def count_distinct_characters(string: str):\n    return len(set(string))\n"}]}
{"question_id": "HumanEval/160", "language": "python", "prompt": "\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n\n", "signature": "def do_algebra(operator, operand):", "solutions": [{"id": "0", "snippet": "def do_algebra(operator, operand):\n\n    return sum(operand) - sum(operator) * len(operand)"}, {"id": "1", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        return None\n    else:\n        return operator[0] + operator[1] * len(operand) - operand[0]\n"}, {"id": "2", "snippet": "def do_algebra(operator, operand):\n    if len(operator) == 1:\n        return operator[0] + operand[0]\n    else:\n        return do_algebra(operator[1], operand[0:1]) + do_algebra(operator[1], operand[1:])"}, {"id": "3", "snippet": "def do_algebra(operator, operand):\n    return operator[0] + operator[1] + operand[0] + operand[1]"}, {"id": "4", "snippet": "def do_algebra(operator, operand):\n    if len(operator) == 2 and len(operand) == 2:\n        return operator[0] + operator[1]\n    else:\n        raise Exception(\"Invalid number of operands\")\n"}, {"id": "5", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        raise Exception(\"Invalid number of operands\")\n\n    return operator[0] + operator[1] + operator[2] + operand[0] * operand[1]\n"}, {"id": "6", "snippet": "def do_algebra(operator, operand):\n    if len(operator) == 0 or len(operand) == 0:\n        return 0\n    return operator[0] + do_algebra(operator[1:], operand[0:-1])"}, {"id": "7", "snippet": "def do_algebra(operator, operand):\n    return operator[0](operand[0], operator[1](operand[1], operand[2]))\n"}, {"id": "8", "snippet": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operand)):\n        result += operand[i] * operator[i]\n    return result\n"}, {"id": "9", "snippet": "def do_algebra(operator, operand):\n    pass\n"}]}
{"question_id": "HumanEval/161", "language": "python", "prompt": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n", "signature": "def solve(s):", "solutions": [{"id": "0", "snippet": "def solve(s):\n    res = \"\"\n    for i in range(len(s)):\n        if s[i].isalpha():\n            res = res + s[i].upper()\n        else:\n            res = res + s[i]\n    return res\n\n# print(solve(\"AB\"))\n"}, {"id": "1", "snippet": "def solve(s):\n\n    return \"\".join(reversed(s))\n"}, {"id": "2", "snippet": "def solve(s):\n    pass\n"}, {"id": "3", "snippet": "def solve(s):\n    if len(s) == 0:\n        return \"\"\n    elif len(s) == 1:\n        return s\n    else:\n        return reverse(s)\n"}, {"id": "4", "snippet": "def solve(s):\n    res = \"\"\n    for i in range(len(s)):\n        if s[i] == 'a':\n            res = res + s[::-1]\n        elif s[i] == 'b':\n            res = res + s[::-1][::-1]\n        elif s[i] == 'c':\n            res = res + s[::-1][::-1]\n        elif s[i] == '#':\n            res = res + s[::-1]\n    return res\n"}, {"id": "5", "snippet": "def solve(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    return reverse(s)\n"}, {"id": "6", "snippet": "def solve(s):\n    return \"\".join(reversed(s))"}, {"id": "7", "snippet": "def solve(s):\n    if s == \"\":\n        return s\n    if s[0] == '#':\n        return solve(s[1:])\n    else:\n        return s[0].upper() + solve(s[1:])\n    "}, {"id": "8", "snippet": "def solve(s):\n    return \"\".join(reversed(s))\n"}, {"id": "9", "snippet": "def solve(s):\n\n    pass\n\n\n\n"}]}
{"question_id": "HumanEval/162", "language": "python", "prompt": "\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n", "signature": "def string_to_md5(text):", "solutions": [{"id": "0", "snippet": "def string_to_md5(text):\n    if text:\n        return md5.new(text).hexdigest()\n    else:\n        return None"}, {"id": "1", "snippet": "def string_to_md5(text):\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "2", "snippet": "def string_to_md5(text):\n    if text == '':\n        return None\n\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"}, {"id": "3", "snippet": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "4", "snippet": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n"}, {"id": "5", "snippet": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None\n"}, {"id": "6", "snippet": "def string_to_md5(text):\n    if text is None or len(text) == 0:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "7", "snippet": "def string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "8", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}, {"id": "9", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    md5 = hashlib.md5()\n    md5.update(text.encode('utf-8'))\n    return md5.hexdigest()"}]}
{"question_id": "HumanEval/163", "language": "python", "prompt": "\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n", "signature": "def generate_integers(a, b):", "solutions": [{"id": "0", "snippet": "def generate_integers(a, b):\n    return [int(i) for i in str(a) + str(b) if i % 2 == 0]\n"}, {"id": "1", "snippet": "def generate_integers(a, b):\n    # YOUR CODE HERE\n    a, b = a % 10, b % 10\n    if a < b:\n        return [a, b]\n    else:\n        return [b, a]"}, {"id": "2", "snippet": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}, {"id": "3", "snippet": "def generate_integers(a, b):\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}, {"id": "4", "snippet": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result\n"}, {"id": "5", "snippet": "def generate_integers(a, b):\n    # Your code here\n    return []"}, {"id": "6", "snippet": "def generate_integers(a, b):\n    evens = []\n    i = a\n    while i < b:\n        if i % 2 == 0:\n            evens.append(i)\n        i += 1\n    return evens"}, {"id": "7", "snippet": "def generate_integers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}, {"id": "8", "snippet": "def generate_integers(a, b):\n    # Your code here\n    digits = []\n    while a <= b:\n        digits.append(a)\n        a = a + 1\n    return digits\n"}, {"id": "9", "snippet": "def generate_integers(a, b):\n    i = 0\n    while i <= b:\n        yield i\n        i += 1"}]}
{"question_id": "HumanEval/17", "language": "python", "prompt": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n", "signature": "def parse_music(music_string: str):", "solutions": [{"id": "0", "snippet": "def parse_music(music_string: str):\n    beats = []\n    for note in music_string.split():\n        if len(note) == 1:\n            beats.append(int(note[0]))\n        else:\n            beats.append(int(note[0]) + int(note[1]))\n    return beats\n"}, {"id": "1", "snippet": "def parse_music(music_string: str):\n    return [int(x) for x in music_string.split('|')]\n"}, {"id": "2", "snippet": "def parse_music(music_string: str):\n\n    return [int(note) for note in music_string.split('|')]\n"}, {"id": "3", "snippet": "def parse_music(music_string: str):\n    return [int(b) for b in music_string[:-4].split(\"|\")]\n"}, {"id": "4", "snippet": "def parse_music(music_string: str):\n    return [int(c) for c in music_string[:-1]] + [int(music_string[-1])]\n"}, {"id": "5", "snippet": "def parse_music(music_string: str):\n\n    return [int(x) for x in music_string[:-1].split('|')]\n"}, {"id": "6", "snippet": "def parse_music(music_string: str):\n    return [int(i) for i in music_string.split('|')]\n"}, {"id": "7", "snippet": "def parse_music(music_string: str):\n    result = []\n    for number in music_string:\n        if number == 'o':\n            result.append(len(result))\n        elif number == '.':\n            result.append(len(result))\n        else:\n            result.append(int(number))\n    return result"}, {"id": "8", "snippet": "def parse_music(music_string: str):\n    return [int(i) for i in music_string.strip().split('|')]\n"}, {"id": "9", "snippet": "def parse_music(music_string: str):\n\n    if len(music_string) < 4:\n        raise ValueError('Invalid music string: {}'.format(music_string))\n\n    return [int(i) for i in music_string.split('|')]"}]}
{"question_id": "HumanEval/18", "language": "python", "prompt": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n", "signature": "def how_many_times(string: str, substring: str):", "solutions": [{"id": "0", "snippet": "def how_many_times(string: str, substring: str):\n    return string.count(substring)\n"}, {"id": "1", "snippet": "def how_many_times(string: str, substring: str):\n\n    return string.count(substring)\n"}, {"id": "2", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "3", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n            if len(substring) > 1:\n                count += how_many_times(string[i+1:], substring[1:])\n    return count\n"}, {"id": "4", "snippet": "def how_many_times(string: str, substring: str):\n\n    return string.count(substring)\n"}, {"id": "5", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for index in range(len(string)):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "6", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for char in string:\n        if char == substring:\n            count += 1\n    return count\n"}, {"id": "7", "snippet": "def how_many_times(string: str, substring: str):\n    return string.count(substring)\n"}, {"id": "8", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i + len(substring)]:\n            count += 1\n    return count\n"}, {"id": "9", "snippet": "def how_many_times(string: str, substring: str):\n    counter = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            counter += 1\n    return counter\n"}]}
{"question_id": "HumanEval/19", "language": "python", "prompt": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n", "signature": "def sort_numbers(numbers: str):", "solutions": [{"id": "0", "snippet": "def sort_numbers(numbers: str):\n    pass"}, {"id": "1", "snippet": "def sort_numbers(numbers: str):\n    return sorted(numbers.split())\n"}, {"id": "2", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    return''.join(sorted(numbers))\n"}, {"id": "3", "snippet": "def sort_numbers(numbers: str):\n    return sorted(numbers.split())\n"}, {"id": "4", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    return''.join(sorted(numbers))\n"}, {"id": "5", "snippet": "def sort_numbers(numbers: str):\n    return \" \".join(sorted(numbers.split()))\n"}, {"id": "6", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return''.join(numbers)\n"}, {"id": "7", "snippet": "def sort_numbers(numbers: str):\n    return \" \".join(sorted(numbers.split()))\n"}, {"id": "8", "snippet": "def sort_numbers(numbers: str):\n    return''.join(sorted(numbers.split()))\n"}, {"id": "9", "snippet": "def sort_numbers(numbers: str):\n    return sorted(numbers.split())\n"}]}
{"question_id": "HumanEval/2", "language": "python", "prompt": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n", "signature": "def truncate_number(number: float):", "solutions": [{"id": "0", "snippet": "def truncate_number(number: float):\n\n    # Iterate through numbers until we find the largest number smaller than given number\n    # and return it\n    # TODO Extend this function to return more numbers than given numbers\n    # TODO Return the decimal part of the number\n\n    return number\n"}, {"id": "1", "snippet": "def truncate_number(number: float):\n    pass"}, {"id": "2", "snippet": "def truncate_number(number: float):\n    decimal_part = number // 10 ** 3\n    decimal_part = decimal_part * 10 ** 3 if decimal_part > 0 else decimal_part\n\n    if number % 10 == 0:\n        return decimal_part - 1\n\n    return decimal_part\n"}, {"id": "3", "snippet": "def truncate_number(number: float):\n    return int(number * 100) / 100\n"}, {"id": "4", "snippet": "def truncate_number(number: float):\n    return int(number)\n"}, {"id": "5", "snippet": "def truncate_number(number: float):\n    if number < 0:\n        raise ValueError(\"Cannot truncate a negative number.\")\n    return int(number * 100)\n"}, {"id": "6", "snippet": "def truncate_number(number: float):\n    return int(number * 10)"}, {"id": "7", "snippet": "def truncate_number(number: float):\n    return int(number * (10 ** floor(log10(number))))\n"}, {"id": "8", "snippet": "def truncate_number(number: float):\n    number = int(number)\n    decimal_part = int(math.floor(number))\n    return number - decimal_part\n"}, {"id": "9", "snippet": "def truncate_number(number: float):\n    if number < 0:\n        raise ValueError('Number cannot be negative')\n    return int(number)\n"}]}
{"question_id": "HumanEval/20", "language": "python", "prompt": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n", "signature": "def find_closest_elements(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def find_closest_elements(numbers: List[float]):\n    return min(numbers), max(numbers)\n"}, {"id": "1", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n\n    return smallest, largest\n"}, {"id": "2", "snippet": "def find_closest_elements(numbers: List[float]):\n    pass\n"}, {"id": "3", "snippet": "def find_closest_elements(numbers: List[float]):\n    # Sort the list so that larger numbers are first\n    numbers.sort()\n    # Find the index of the smallest number\n    smallest = numbers.index(min(numbers))\n    # Sort the list so that larger numbers are first\n    numbers.sort(reverse=True)\n    # Find the index of the largest number\n    largest = numbers.index(max(numbers))\n    return (smallest, largest)\n"}, {"id": "4", "snippet": "def find_closest_elements(numbers: List[float]):\n    # your code here\n    closest_number = None\n    closest_number_distance = None\n    \n    for number in numbers:\n        distance = number - closest_number\n        if distance < closest_number_distance:\n            closest_number = number\n            closest_number_distance = distance\n    \n    return closest_number, closest_number_distance"}, {"id": "5", "snippet": "def find_closest_elements(numbers: List[float]):\n\n    # TODO: implement this function\n    pass\n"}, {"id": "6", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers = sorted(numbers)\n    return numbers[0], numbers[-1]\n"}, {"id": "7", "snippet": "def find_closest_elements(numbers: List[float]):\n\n    return min(numbers), max(numbers)\n"}, {"id": "8", "snippet": "def find_closest_elements(numbers: List[float]):\n    return sorted(numbers, key=lambda x: abs(x - min(numbers)))[0], sorted(numbers, key=lambda x: abs(x - max(numbers)))[0]\n"}, {"id": "9", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}]}
{"question_id": "HumanEval/21", "language": "python", "prompt": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n", "signature": "def rescale_to_unit(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def rescale_to_unit(numbers: List[float]):\n    numbers = [numbers[0] / numbers[1]] + numbers[1:]\n    return numbers\n"}, {"id": "1", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [x / math.sqrt(sum(i ** 2 for i in numbers)) for x in numbers]"}, {"id": "2", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [\n        number / math.sqrt(numbers[i] ** 2 + numbers[i + 1] ** 2) for i, number in enumerate(numbers)\n    ]\n"}, {"id": "3", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]"}, {"id": "4", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"}, {"id": "5", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(numbers[i] - min(numbers)) / (max(numbers) - min(numbers)) for i in range(len(numbers))]\n"}, {"id": "6", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [numbers[0] / numbers[1], numbers[0] * numbers[1] / numbers[1]]\n"}, {"id": "7", "snippet": "def rescale_to_unit(numbers: List[float]):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"}, {"id": "8", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(numbers[i] - numbers[i - 1]) / (numbers[i - 1] + EPS) for i in range(1, len(numbers))]\n"}, {"id": "9", "snippet": "def rescale_to_unit(numbers: List[float]):\n    if len(numbers) < 2:\n        return numbers\n\n    return [(numbers[i] - numbers[0]) / (numbers[1] - numbers[0]) for i in range(0, len(numbers))]\n"}]}
{"question_id": "HumanEval/22", "language": "python", "prompt": "Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n", "signature": "def filter_integers(values: List[Any]):", "solutions": [{"id": "0", "snippet": "def filter_integers(values: List[Any]):\n    return [v for v in values if isinstance(v, int)]\n"}, {"id": "1", "snippet": "def filter_integers(values: List[Any]):\n    return [v for v in values if isinstance(v, int)]\n"}, {"id": "2", "snippet": "def filter_integers(values: List[Any]):\n    return [v for v in values if isinstance(v, int)]\n"}, {"id": "3", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "4", "snippet": "def filter_integers(values: List[Any]):\n    return [x for x in values if isinstance(x, int)]\n"}, {"id": "5", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "6", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "7", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "8", "snippet": "def filter_integers(values: List[Any]):\n    return [v for v in values if isinstance(v, int)]\n"}, {"id": "9", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if type(value) is int]\n"}]}
{"question_id": "HumanEval/23", "language": "python", "prompt": "Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n", "signature": "def strlen(string: str):", "solutions": [{"id": "0", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "1", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "2", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "3", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "4", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "5", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "6", "snippet": "def strlen(string: str):\n    return len(string)"}, {"id": "7", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "8", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "9", "snippet": "def strlen(string: str):\n    return len(string)\n"}]}
{"question_id": "HumanEval/24", "language": "python", "prompt": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n", "signature": "def largest_divisor(n: int):", "solutions": [{"id": "0", "snippet": "def largest_divisor(n: int):\n    return reduce(gcd, range(1, n + 1))\n"}, {"id": "1", "snippet": "def largest_divisor(n: int):\n    return max([i for i in range(1, n) if n % i == 0])\n"}, {"id": "2", "snippet": "def largest_divisor(n: int):\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n"}, {"id": "3", "snippet": "def largest_divisor(n: int):\n    return 1 + max([x for x in range(1, n) if n % x == 0])\n"}, {"id": "4", "snippet": "def largest_divisor(n: int):\n    divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n\n"}, {"id": "5", "snippet": "def largest_divisor(n: int):\n    return max([divisor for divisor in range(1, n+1) if n % divisor == 0])\n"}, {"id": "6", "snippet": "def largest_divisor(n: int):\n    return max([i for i in range(1, n + 1) if n % i == 0])"}, {"id": "7", "snippet": "def largest_divisor(n: int):\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return max(divisors)\n"}, {"id": "8", "snippet": "def largest_divisor(n: int):\n    return max(_get_divisors(n))\n"}, {"id": "9", "snippet": "def largest_divisor(n: int):\n    return max([x for x in range(1, n) if n % x == 0])\n"}]}
{"question_id": "HumanEval/25", "language": "python", "prompt": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n", "signature": "def factorize(n: int):", "solutions": [{"id": "0", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n"}, {"id": "1", "snippet": "def factorize(n: int):\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        factors.append(n)\n    return factors\n"}, {"id": "2", "snippet": "def factorize(n: int):\n    factors = []\n\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return factors\n"}, {"id": "3", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i!= n // i:\n                factors.append(n // i)\n    return factors\n"}, {"id": "4", "snippet": "def factorize(n: int):\n    factors = []\n    i = 2\n    while n % i == 0:\n        factors.append(i)\n        i += 1\n    while i <= n:\n        n //= i\n        factors.append(i)\n    return factors\n"}, {"id": "5", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n"}, {"id": "6", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n"}, {"id": "7", "snippet": "def factorize(n: int):\n    return []\n"}, {"id": "8", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n"}, {"id": "9", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return factors\n"}]}
{"question_id": "HumanEval/26", "language": "python", "prompt": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n", "signature": "def remove_duplicates(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def remove_duplicates(numbers: List[int]):\n    return list(set(numbers))\n"}, {"id": "1", "snippet": "def remove_duplicates(numbers: List[int]):\n\n    return list(set(numbers))"}, {"id": "2", "snippet": "def remove_duplicates(numbers: List[int]):\n    return []\n"}, {"id": "3", "snippet": "def remove_duplicates(numbers: List[int]):\n    return list(set(numbers))"}, {"id": "4", "snippet": "def remove_duplicates(numbers: List[int]):\n    result = []\n    for num in numbers:\n        if numbers.count(num) > 1:\n            result.append(num)\n    return result\n"}, {"id": "5", "snippet": "def remove_duplicates(numbers: List[int]):\n    seen = set()\n    for n in numbers:\n        if n in seen:\n            continue\n        seen.add(n)\n        yield n\n"}, {"id": "6", "snippet": "def remove_duplicates(numbers: List[int]):\n    seen = set()\n    return [n for n in numbers if not (n in seen or seen.add(n))]\n"}, {"id": "7", "snippet": "def remove_duplicates(numbers: List[int]):\n    return [num for num in numbers if num not in numbers[numbers.index(num) + 1:]]\n"}, {"id": "8", "snippet": "def remove_duplicates(numbers: List[int]):\n\n    return []"}, {"id": "9", "snippet": "def remove_duplicates(numbers: List[int]):\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n"}]}
{"question_id": "HumanEval/27", "language": "python", "prompt": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n", "signature": "def flip_case(string: str):", "solutions": [{"id": "0", "snippet": "def flip_case(string: str):\n    return string.lower().replace(' ', '') + string.upper().replace(' ', '')\n"}, {"id": "1", "snippet": "def flip_case(string: str):\n    return string.upper().swapcase()\n"}, {"id": "2", "snippet": "def flip_case(string: str):\n    return string.upper().lower()\n"}, {"id": "3", "snippet": "def flip_case(string: str):\n    return string.lower().upper()\n"}, {"id": "4", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "5", "snippet": "def flip_case(string: str):\n    return string.upper().lower()\n"}, {"id": "6", "snippet": "def flip_case(string: str):\n    return string.upper().lower()\n"}, {"id": "7", "snippet": "def flip_case(string: str):\n    return string.lower().swapcase()\n"}, {"id": "8", "snippet": "def flip_case(string: str):\n    return string.upper().lower()\n"}, {"id": "9", "snippet": "def flip_case(string: str):\n\n    return string.upper()\n"}]}
{"question_id": "HumanEval/28", "language": "python", "prompt": "Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n", "signature": "def concatenate(strings: List[str]):", "solutions": [{"id": "0", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "1", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "2", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "3", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "4", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)"}, {"id": "5", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "6", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "7", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "8", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "9", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}]}
{"question_id": "HumanEval/29", "language": "python", "prompt": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n", "signature": "def filter_by_prefix(strings: List[str], prefix: str):", "solutions": [{"id": "0", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [string for string in strings if string.startswith(prefix)]\n"}, {"id": "1", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "2", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "3", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "4", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "5", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "6", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "7", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "8", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "9", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}]}
{"question_id": "HumanEval/3", "language": "python", "prompt": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n", "signature": "def below_zero(operations: List[int]):", "solutions": [{"id": "0", "snippet": "def below_zero(operations: List[int]):\n    if operations[0] > 0:\n        return True\n    return False\n"}, {"id": "1", "snippet": "def below_zero(operations: List[int]):\n    for op in operations:\n        if op < 0:\n            return True\n    return False\n"}, {"id": "2", "snippet": "def below_zero(operations: List[int]):\n    for operation in operations:\n        if operation < 0:\n            return False\n    return True\n"}, {"id": "3", "snippet": "def below_zero(operations: List[int]):\n    return len(operations) >= 2 and operations[0] < 0 and operations[1] < 0\n"}, {"id": "4", "snippet": "def below_zero(operations: List[int]):\n    pass\n"}, {"id": "5", "snippet": "def below_zero(operations: List[int]):\n    if operations[0] < 0:\n        return True\n    else:\n        return False\n"}, {"id": "6", "snippet": "def below_zero(operations: List[int]):\n    if operations[0] < 0:\n        return True\n    else:\n        return False\n"}, {"id": "7", "snippet": "def below_zero(operations: List[int]):\n    for i in operations:\n        if i < 0:\n            return True\n    return False\n"}, {"id": "8", "snippet": "def below_zero(operations: List[int]):\n    pass\n"}, {"id": "9", "snippet": "def below_zero(operations: List[int]):\n    pass\n"}]}
{"question_id": "HumanEval/30", "language": "python", "prompt": "Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n", "signature": "def get_positive(l: list):", "solutions": [{"id": "0", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "1", "snippet": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n"}, {"id": "2", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "3", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "4", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "5", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\n\n# Q7"}, {"id": "6", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n\n\n# Q6"}, {"id": "7", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "8", "snippet": "def get_positive(l: list):\n\n    return [item for item in l if item > 0]"}, {"id": "9", "snippet": "def get_positive(l: list):\n\n    return [elem for elem in l if elem > 0]"}]}
{"question_id": "HumanEval/31", "language": "python", "prompt": "Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n", "signature": "def is_prime(n):", "solutions": [{"id": "0", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n"}, {"id": "1", "snippet": "def is_prime(n):\n    \"*** YOUR CODE HERE ***\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}, {"id": "2", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0:\n            return False\n    return True"}, {"id": "3", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def is_prime(n):\n    \"*** YOUR CODE HERE ***\""}, {"id": "5", "snippet": "def is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"}, {"id": "6", "snippet": "def is_prime(n):\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    elif n % 5 == 0:\n        return False\n    else:\n        for x in range(4, n // 2 + 1, 6):\n            if n % x == 0:\n                return False\n        return True"}, {"id": "7", "snippet": "def is_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"}, {"id": "8", "snippet": "def is_prime(n):\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n"}, {"id": "9", "snippet": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}]}
{"question_id": "HumanEval/32", "language": "python", "prompt": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n", "signature": "def find_zero(xs: list):", "solutions": [{"id": "0", "snippet": "def find_zero(xs: list):\n    for x in xs:\n        if x == 0:\n            return x\n"}, {"id": "1", "snippet": "def find_zero(xs: list):\n    return max(xs) - min(xs) if len(xs) > 0 else 0\n"}, {"id": "2", "snippet": "def find_zero(xs: list):\n    x = 0\n    while x in xs:\n        x += 1\n    return x\n"}, {"id": "3", "snippet": "def find_zero(xs: list):\n    return find_zero_helper(xs, 0)\n"}, {"id": "4", "snippet": "def find_zero(xs: list):\n    return max(xs) - min(xs)\n"}, {"id": "5", "snippet": "def find_zero(xs: list):\n    x = None\n    for x in xs:\n        if x == 0:\n            return x\n    raise Exception(\"find_zero: no zero found\")\n"}, {"id": "6", "snippet": "def find_zero(xs: list):\n    zero = None\n    for x in xs:\n        if x == 0:\n            zero = x\n            break\n    return zero\n"}, {"id": "7", "snippet": "def find_zero(xs: list):\n    xs = list(xs)\n    xs.sort(reverse=True)\n    zero = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] == zero:\n            return zero\n    return zero\n"}, {"id": "8", "snippet": "def find_zero(xs: list):\n    zero_point = 0\n    for x in xs:\n        if x == 0:\n            return zero_point\n        else:\n            zero_point += 1\n"}, {"id": "9", "snippet": "def find_zero(xs: list):\n    for x in xs:\n        if not x or x == 0:\n            continue\n        elif x == 1:\n            return x\n        else:\n            return find_zero([x] + [x - 1] + [x + 1])\n    return None"}]}
{"question_id": "HumanEval/33", "language": "python", "prompt": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n", "signature": "def sort_third(l: list):", "solutions": [{"id": "0", "snippet": "def sort_third(l: list):\n    return []\n"}, {"id": "1", "snippet": "def sort_third(l: list):\npass"}, {"id": "2", "snippet": "def sort_third(l: list):\n\n    return []"}, {"id": "3", "snippet": "def sort_third(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % l[j] == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n\n# Tests"}, {"id": "4", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        if l[i] % 3!= 0:\n            for j in range(i + 1, len(l)):\n                if l[j] % 3 == 0 and l[j] > l[i]:\n                    l[j], l[i] = l[i], l[j]\n    return l\n\n# print(sort_third([1, 2, 3]))\n# print(sort_third([5, 6, 3, 4, 8, 9, 2]))\n"}, {"id": "5", "snippet": "def sort_third(l: list):\n    # Recursive helper function\n    if len(l) < 3:\n        return l\n    else:\n        return sort_third(l[1:]) + [l[0]] + sort_third(l[2:])\n"}, {"id": "6", "snippet": "def sort_third(l: list):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] % 3!= l[j] % 3:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "7", "snippet": "def sort_third(l: list):\n    return sort_divisible(l, 3)\n\n\n# Question 4"}, {"id": "8", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % 3!= 0 and l[j] % 3!= 0 and l[i] == l[j]:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "9", "snippet": "def sort_third(l: list):\npass"}]}
{"question_id": "HumanEval/34", "language": "python", "prompt": "Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n", "signature": "def unique(l: list):", "solutions": [{"id": "0", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "1", "snippet": "def unique(l: list):\n    return list(set(l))\n"}, {"id": "2", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}, {"id": "3", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}, {"id": "4", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "5", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "6", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "7", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}, {"id": "8", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}, {"id": "9", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}]}
{"question_id": "HumanEval/35", "language": "python", "prompt": "Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n", "signature": "def max_element(l: list):", "solutions": [{"id": "0", "snippet": "def max_element(l: list):\n    return l[0]\n"}, {"id": "1", "snippet": "def max_element(l: list):\n    return max(l)\n"}, {"id": "2", "snippet": "def max_element(l: list):\n    pass\n"}, {"id": "3", "snippet": "def max_element(l: list):\n    return max(l)\n"}, {"id": "4", "snippet": "def max_element(l: list):\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n"}, {"id": "5", "snippet": "def max_element(l: list):\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n"}, {"id": "6", "snippet": "def max_element(l: list):\n    \"*** YOUR CODE HERE ***\"\n    return l[0]\n"}, {"id": "7", "snippet": "def max_element(l: list):\n    if l == []:\n        return None\n    else:\n        return max(l)\n"}, {"id": "8", "snippet": "def max_element(l: list):\n    if len(l) == 0:\n        return None\n    return l[0]\n"}, {"id": "9", "snippet": "def max_element(l: list):\n    return l[0] if l else None\n"}]}
{"question_id": "HumanEval/36", "language": "python", "prompt": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n", "signature": "def fizz_buzz(n: int):", "solutions": [{"id": "0", "snippet": "def fizz_buzz(n: int):\n    # Write the function definition here\n    if n < 10:\n        return 0\n    elif n % 10 == 7:\n        return 1\n    elif n % 10 < 11:\n        return 2\n    else:\n        return 3"}, {"id": "1", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 13 == 0:\n            count += 1\n        else:\n            if count > 0:\n                if i % 3 == 0 and i % 5 == 0:\n                    count -= 1\n                elif i % 3 == 0:\n                    count += 1\n                elif i % 5 == 0:\n                    count -= 1\n    return count\n"}, {"id": "2", "snippet": "def fizz_buzz(n: int):\n    if n < 10:\n        return 0\n    return fizz_buzz(n // 10) + (n % 10) * 2\n"}, {"id": "3", "snippet": "def fizz_buzz(n: int):\n    if n <= 1:\n        return 0\n    return 1 + sum(\n        i % 3 == 0 and i % 5!= 0\n        for i in range(1, n + 1)\n    )\n"}, {"id": "4", "snippet": "def fizz_buzz(n: int):\n    return 0"}, {"id": "5", "snippet": "def fizz_buzz(n: int):\n    return sum(1 for i in range(n) if i % 10!= 7 or i % 13 == 0)\n"}, {"id": "6", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 10 == 7 and i % 13 >= 7:\n            count += 1\n        if i % 10 == 7 and i % 13 == 7:\n            count -= 1\n    return count"}, {"id": "7", "snippet": "def fizz_buzz(n: int):\n    return sum([i for i in range(1, n + 1) if (i % 7 == 0 or i % 13 == 0)])"}, {"id": "8", "snippet": "def fizz_buzz(n: int):\n    if n == 0:\n        return 0\n    elif n % 10 == 7:\n        return 1\n    else:\n        return fizz_buzz(n // 10) + (n % 10)\n"}, {"id": "9", "snippet": "def fizz_buzz(n: int):\n    return sum(1 for i in range(1, n + 1) if is_fizz_buzz(i))\n"}]}
{"question_id": "HumanEval/37", "language": "python", "prompt": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n", "signature": "def sort_even(l: list):", "solutions": [{"id": "0", "snippet": "def sort_even(l: list):\n\n    for i in range(1, len(l)):\n        for j in range(len(l) - i):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n    return l\n"}, {"id": "1", "snippet": "def sort_even(l: list):\n\n    even_index = 0\n    for i in range(1, len(l)):\n        if l[i] % 2 == 0:\n            l[even_index], l[i] = l[i], l[even_index]\n            even_index += 1\n    return l"}, {"id": "2", "snippet": "def sort_even(l: list):\n    for i in range(len(l)):\n        for j in range(i, len(l) - 1):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = l[j + 1], l[j]\n    return l\n"}, {"id": "3", "snippet": "def sort_even(l: list):\n    even = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n    even.sort()\n    return even\n"}, {"id": "4", "snippet": "def sort_even(l: list):\n\n    even_index = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_index.append(l[i])\n\n    even_index.sort()\n\n    return even_index"}, {"id": "5", "snippet": "def sort_even(l: list):\n    evens = []\n    odds = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            evens.append(l[i])\n        else:\n            odds.append(l[i])\n    evens = sorted(evens)\n    odds = sorted(odds)\n    return evens + odds\n"}, {"id": "6", "snippet": "def sort_even(l: list):\n    \n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            if l[j]!= l[i]:\n                l[i],l[j] = l[j],l[i]\n                \n    return l\n"}, {"id": "7", "snippet": "def sort_even(l: list):\n\n    return [l[i] for i in range(len(l)) if (i % 2 == 0) ^ (l[i] == l[i - 1])]\n"}, {"id": "8", "snippet": "def sort_even(l: list):\n    \"*** YOUR CODE HERE ***\"\n    odd = []\n    even = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return even + odd\n"}, {"id": "9", "snippet": "def sort_even(l: list):\n    even = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n            l[i] = l[i] // 2\n    return even\n"}]}
{"question_id": "HumanEval/38", "language": "python", "prompt": "\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n", "signature": "def decode_cyclic(s: str):", "solutions": [{"id": "0", "snippet": "def decode_cyclic(s: str):\n    return decode_uncyclic(encode_cyclic(s))\n"}, {"id": "1", "snippet": "def decode_cyclic(s: str):\n    s = encode_cyclic(s)\n    return decode_string(s)\n\n\n# string -> string"}, {"id": "2", "snippet": "def decode_cyclic(s: str):\n    # use the decode_cyclic function to decode the string\n    decoded = decode_cyclic_helper(s, 0, len(s) - 1)\n    return decoded\n"}, {"id": "3", "snippet": "def decode_cyclic(s: str):\n    return \"\".join(decode(c) for c in s)\n"}, {"id": "4", "snippet": "def decode_cyclic(s: str):\n    return decode(encode_cyclic(s))"}, {"id": "5", "snippet": "def decode_cyclic(s: str):\n    return ''.join(decode_cyclic_iter(s))\n"}, {"id": "6", "snippet": "def decode_cyclic(s: str):\n    return decode(encode_cyclic(s))"}, {"id": "7", "snippet": "def decode_cyclic(s: str):\n    return decode_cyclic_rec(s)[0]\n"}, {"id": "8", "snippet": "def decode_cyclic(s: str):\n    return decode_list(encode_cyclic(s))\n"}, {"id": "9", "snippet": "def decode_cyclic(s: str):\n    return decode_cyclic_helper(s)\n"}]}
{"question_id": "HumanEval/39", "language": "python", "prompt": "\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n", "signature": "def prime_fib(n: int):", "solutions": [{"id": "0", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    return prime_fib(n - 1) + prime_fib(n - 2)\n"}, {"id": "1", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return prime_fib(n-1) + prime_fib(n-2)\n"}, {"id": "2", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n\n    primes = [2, 3]\n    for i in range(4, n+1):\n        primes.append(get_prime(i))\n\n    return primes[n-1]\n"}, {"id": "3", "snippet": "def prime_fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"}, {"id": "4", "snippet": "def prime_fib(n: int):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        return prime_fib(n-1) + prime_fib(n-2) + prime_fib(n-3)\n"}, {"id": "5", "snippet": "def prime_fib(n: int):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"}, {"id": "6", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    else:\n        return prime_fib(n - 1) + prime_fib(n - 2)\n"}, {"id": "7", "snippet": "def prime_fib(n: int):\n    assert isinstance(n, int)\n    assert n > 0\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    fib_list = [0, 1]\n    for i in range(2, n):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n\n    return fib_list[-1]\n"}, {"id": "8", "snippet": "def prime_fib(n: int):\n    return n if n <= 2 else (n - 2) * prime_fib(n - 1) + n\n"}, {"id": "9", "snippet": "def prime_fib(n: int):\n    if n <= 1:\n        return n\n\n    if n == 2:\n        return 1\n\n    return prime_fib(n-1) + prime_fib(n-2)\n"}]}
{"question_id": "HumanEval/4", "language": "python", "prompt": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n", "signature": "def mean_absolute_deviation(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return np.mean(np.abs(numbers - np.mean(numbers)))\n"}, {"id": "1", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return sum(abs(x - x_mean) for x, x_mean in zip(numbers, get_mean(numbers))) / len(numbers)"}, {"id": "2", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center_point = mean(numbers)\n    return mean(map(abs, numbers)) - center_point\n"}, {"id": "3", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    mean_numbers = mean(numbers)\n    return mean([abs(x - mean_numbers) for x in numbers])\n"}, {"id": "4", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return sum(abs(n - n.mean()) for n in numbers) / len(numbers)\n"}, {"id": "5", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return np.mean(np.abs(numbers - np.mean(numbers)))\n"}, {"id": "6", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    x = mean(numbers)\n    return mean([abs(x - x_mean) for x_mean in numbers])\n"}, {"id": "7", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return np.mean(np.absolute(numbers - np.mean(numbers)))"}, {"id": "8", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return sum(abs(x) for x in numbers) / len(numbers)\n"}, {"id": "9", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return np.mean(np.abs(numbers - np.mean(numbers)))\n"}]}
{"question_id": "HumanEval/40", "language": "python", "prompt": "\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n", "signature": "def triples_sum_to_zero(l: list):", "solutions": [{"id": "0", "snippet": "def triples_sum_to_zero(l: list):\n\n    return len([i for i in l if i == 0]) == 3\n"}, {"id": "1", "snippet": "def triples_sum_to_zero(l: list):\n    # for i in l:\n    #     if i == 0:\n    #         return True\n    # return False\n    s = set()\n    for i in l:\n        if i not in s:\n            s.add(i)\n        else:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def triples_sum_to_zero(l: list):\n    # Replace this pass statement with your implementation.\n    pass\n"}, {"id": "3", "snippet": "def triples_sum_to_zero(l: list):\n    s = set()\n    for i in l:\n        if i in s:\n            return True\n        else:\n            s.add(i)\n    return False\n"}, {"id": "4", "snippet": "def triples_sum_to_zero(l: list):\n    # your code here\n    return not set(l).isdisjoint(set(l))\n"}, {"id": "5", "snippet": "def triples_sum_to_zero(l: list):\n    s = set()\n    for i in l:\n        if i not in s:\n            s.add(i)\n        else:\n            return True\n    return False\n"}, {"id": "6", "snippet": "def triples_sum_to_zero(l: list):\n    if len(set(l)) == 3:\n        return True\n    else:\n        return False"}, {"id": "7", "snippet": "def triples_sum_to_zero(l: list):\n    \"*** YOUR CODE HERE ***\"\n    for i in l:\n        if i == 0:\n            return True\n    return False"}, {"id": "8", "snippet": "def triples_sum_to_zero(l: list):\n\n    return len([x for x in l if x == sum(l) == 0]) == 3\n"}, {"id": "9", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}]}
{"question_id": "HumanEval/41", "language": "python", "prompt": "\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n", "signature": "def car_race_collision(n: int):", "solutions": [{"id": "0", "snippet": "def car_race_collision(n: int):\n    if n <= 1:\n        return 0\n    else:\n        return n * car_race_collision(n - 1)\n"}, {"id": "1", "snippet": "def car_race_collision(n: int):\n\n    pass"}, {"id": "2", "snippet": "def car_race_collision(n: int):\n    return n - car_race_collision_count(n)\n"}, {"id": "3", "snippet": "def car_race_collision(n: int):\n    return n * (n - 1) // 2\n"}, {"id": "4", "snippet": "def car_race_collision(n: int):\n    return n"}, {"id": "5", "snippet": "def car_race_collision(n: int):\n\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    return 0\n"}, {"id": "6", "snippet": "def car_race_collision(n: int):\n    return n ** 2\n"}, {"id": "7", "snippet": "def car_race_collision(n: int):\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if i + j > n:\n                    return n\n    return n\n"}, {"id": "8", "snippet": "def car_race_collision(n: int):\n    return n + 1\n"}, {"id": "9", "snippet": "def car_race_collision(n: int):\n    return n * (n - 1) // 2\n"}]}
{"question_id": "HumanEval/42", "language": "python", "prompt": "Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n", "signature": "def incr_list(l: list):", "solutions": [{"id": "0", "snippet": "def incr_list(l: list):\n    return [l[i] for i in range(len(l))]\n"}, {"id": "1", "snippet": "def incr_list(l: list):\n    l.append(1)\n    return l\n"}, {"id": "2", "snippet": "def incr_list(l: list):\n    return [l[i] for i in range(len(l))]\n"}, {"id": "3", "snippet": "def incr_list(l: list):\n    return [l[i] + 1 for i in range(len(l))]\n"}, {"id": "4", "snippet": "def incr_list(l: list):\n    return l + [1]\n"}, {"id": "5", "snippet": "def incr_list(l: list):\n    return [l[i] + 1 for i in range(len(l))]\n"}, {"id": "6", "snippet": "def incr_list(l: list):\n    return [l[0] + 1] + l[1:]\n"}, {"id": "7", "snippet": "def incr_list(l: list):\n    return [l[i] + 1 for i in range(len(l))]\n"}, {"id": "8", "snippet": "def incr_list(l: list):\n    return [l[i] for i in range(len(l))]\n"}, {"id": "9", "snippet": "def incr_list(l: list):\n    return [l[i] for i in range(len(l))]\n"}]}
{"question_id": "HumanEval/43", "language": "python", "prompt": "\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n", "signature": "def pairs_sum_to_zero(l):", "solutions": [{"id": "0", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(1, len(l)):\n        if l[i] - l[i-1] == 0:\n            return False\n    return True"}, {"id": "1", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n"}, {"id": "2", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n"}, {"id": "3", "snippet": "def pairs_sum_to_zero(l):\n    return len(set(l)) == len(l) and all(l[i] == 0 for i in l)\n"}, {"id": "4", "snippet": "def pairs_sum_to_zero(l):\n    return sum(l) == 0"}, {"id": "5", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n"}, {"id": "6", "snippet": "def pairs_sum_to_zero(l):\n    return len({i for i in l if l.count(i) == 2}) == 2"}, {"id": "7", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n"}, {"id": "8", "snippet": "def pairs_sum_to_zero(l):\n    return sum(l) == 0\n"}, {"id": "9", "snippet": "def pairs_sum_to_zero(l):\n    return sum(l) == 0\n\n\n# Problem 3"}]}
{"question_id": "HumanEval/44", "language": "python", "prompt": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n", "signature": "def change_base(x: int, base: int):", "solutions": [{"id": "0", "snippet": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n    return result\n"}, {"id": "1", "snippet": "def change_base(x: int, base: int):\n    if base == 10:\n        return str(x)\n\n    if x < base:\n        return str(x)\n\n    return change_base(x // base, base) + str(x % base)\n"}, {"id": "2", "snippet": "def change_base(x: int, base: int):\n    return str(int(x) * base)\n"}, {"id": "3", "snippet": "def change_base(x: int, base: int):\n    digits = []\n    while x:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    return \"\".join(str(x) for x in digits)\n"}, {"id": "4", "snippet": "def change_base(x: int, base: int):\n\n    if x < base:\n        return str(x)\n\n    result = ''\n    while x > 0:\n        result = str(base * x) + result\n        x = x // base\n\n    return result\n"}, {"id": "5", "snippet": "def change_base(x: int, base: int):\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    digits.reverse()\n    return ''.join(digits)\n"}, {"id": "6", "snippet": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}, {"id": "7", "snippet": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))\n"}, {"id": "8", "snippet": "def change_base(x: int, base: int):\n    res = ''\n    while x:\n        res = str(x % base) + res\n        x //= base\n    return res\n"}, {"id": "9", "snippet": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"}]}
{"question_id": "HumanEval/45", "language": "python", "prompt": "Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n", "signature": "def triangle_area(a, h):", "solutions": [{"id": "0", "snippet": "def triangle_area(a, h):\n    return (a * h) / 2"}, {"id": "1", "snippet": "def triangle_area(a, h):\n    return (1/2)*a*h"}, {"id": "2", "snippet": "def triangle_area(a, h):\n    return (0.25 * a * h) / math.tan(math.pi/3)"}, {"id": "3", "snippet": "def triangle_area(a, h):\n    return (a + h) * 0.5 * math.tan(math.pi / a)\n\n\n# Question 3"}, {"id": "4", "snippet": "def triangle_area(a, h):\n    return (0.25 * a) * h\n"}, {"id": "5", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n\n# Write a function called cube_area() that takes a number of sides and a\n# number of sides, and returns the area of a cube."}, {"id": "6", "snippet": "def triangle_area(a, h):\n    return (0.25 * a * h) / math.tan(math.pi / 3)"}, {"id": "7", "snippet": "def triangle_area(a, h):\n    return (1/2) * a * h"}, {"id": "8", "snippet": "def triangle_area(a, h):\n    return (a * h) / 2\n\n\n# Question 3"}, {"id": "9", "snippet": "def triangle_area(a, h):\n    return (1/2) * a * h"}]}
{"question_id": "HumanEval/46", "language": "python", "prompt": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n", "signature": "def fib4(n: int):", "solutions": [{"id": "0", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n-2) + fib4(n-1)\n"}, {"id": "1", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "2", "snippet": "def fib4(n: int):\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "3", "snippet": "def fib4(n: int):\n    assert n >= 0\n    if n <= 1:\n        return n\n    return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "4", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"}, {"id": "5", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "6", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    return fib4(n-1) + fib4(n-2)\n"}, {"id": "7", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).next\n"}, {"id": "8", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);"}, {"id": "9", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n"}]}
{"question_id": "HumanEval/47", "language": "python", "prompt": "Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n", "signature": "def median(l: list):", "solutions": [{"id": "0", "snippet": "def median(l: list):\n    m = sorted(l)\n    return (m[len(m) // 2] + m[len(m) // 2 - 1]) / 2.0"}, {"id": "1", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}, {"id": "2", "snippet": "def median(l: list):\n    l.sort()\n    if len(l) % 2 == 0:\n        return l[(len(l) - 1) // 2]\n    else:\n        return (l[len(l) // 2] + l[(len(l) - 1) // 2 - 1]) / 2\n"}, {"id": "3", "snippet": "def median(l: list):\n    return sorted(l)[len(l) // 2]\n"}, {"id": "4", "snippet": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return sorted_list[(length - 1) // 2]\n    else:\n        return (sorted_list[length // 2] + sorted_list[length // 2 - 1]) / 2\n"}, {"id": "5", "snippet": "def median(l: list):\n    l.sort()\n    l = l[len(l) // 2:]\n    return l[len(l) // 2]\n"}, {"id": "6", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n"}, {"id": "7", "snippet": "def median(l: list):\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return median(l[:int(len(l)/2)])\n"}, {"id": "8", "snippet": "def median(l: list):\n    m = sorted(l)\n    n = len(m)\n    if n % 2 == 1:\n        return m[n//2]\n    else:\n        return (m[n//2-1] + m[n//2]) / 2\n"}, {"id": "9", "snippet": "def median(l: list):\n\n    return sorted(l)[len(l) // 2]\n"}]}
{"question_id": "HumanEval/48", "language": "python", "prompt": "\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n", "signature": "def is_palindrome(text: str):", "solutions": [{"id": "0", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "1", "snippet": "def is_palindrome(text: str):\n    if len(text) <= 1:\n        return True\n    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n"}, {"id": "2", "snippet": "def is_palindrome(text: str):\n    return text == reverse(text)\n"}, {"id": "3", "snippet": "def is_palindrome(text: str):\n    return text == reverse(text)\n"}, {"id": "4", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "5", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "6", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "7", "snippet": "def is_palindrome(text: str):\n    if text == text[::-1]:\n        return True\n    return False\n"}, {"id": "8", "snippet": "def is_palindrome(text: str):\n    return text == reverse(text)\n"}, {"id": "9", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}]}
{"question_id": "HumanEval/49", "language": "python", "prompt": "Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n", "signature": "def modp(n: int, p: int):", "solutions": [{"id": "0", "snippet": "def modp(n: int, p: int):\n    q = p\n    while p > 0:\n        q = (q * 10) % n\n        p = (p // 10) % n\n    return q\n"}, {"id": "1", "snippet": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n % p == 0:\n        return n\n    else:\n        return modp(n // p, p)\n"}, {"id": "2", "snippet": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    if p == 0:\n        return 0\n    if p == 1:\n        return n\n    return n % modp(p, n // p)\n"}, {"id": "3", "snippet": "def modp(n: int, p: int):\n    return n if n % p == 0 else n % p\n"}, {"id": "4", "snippet": "def modp(n: int, p: int):\n    if p == 0:\n        return 1\n    else:\n        return n % p + modp(n // p, p)\n"}, {"id": "5", "snippet": "def modp(n: int, p: int):\n    \"*** YOUR CODE HERE ***\"\n    if p == 0:\n        return 1\n    else:\n        return n % p\n"}, {"id": "6", "snippet": "def modp(n: int, p: int):\n    if n <= 0:\n        return 0\n    if n % p == 0:\n        return n\n    return modp(n // p, p)\n"}, {"id": "7", "snippet": "def modp(n: int, p: int):\n    \"*** YOUR CODE HERE ***\"\n    if p == 0:\n        return 1\n    else:\n        return n % p"}, {"id": "8", "snippet": "def modp(n: int, p: int):\n    if p == 0:\n        return 1\n    if p == 1:\n        return n\n\n    a, b = divmod(n, p)\n    if b:\n        return a + modp(a, p)\n    else:\n        return a\n"}, {"id": "9", "snippet": "def modp(n: int, p: int):\n    \"*** YOUR CODE HERE ***\"\n    return (pow(2, n) - 1) % p + 1"}]}
{"question_id": "HumanEval/5", "language": "python", "prompt": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n", "signature": "def intersperse(numbers: List[int], delimeter: int):", "solutions": [{"id": "0", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + intersperse(numbers[1:], delimeter)\n"}, {"id": "1", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter] + numbers[0:len(numbers) - 1] + [delimeter]\n"}, {"id": "2", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter] + numbers + [delimeter]\n"}, {"id": "3", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter] + numbers[:-1] + [delimeter]"}, {"id": "4", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter] + numbers + [delimeter]\n"}, {"id": "5", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [n + delimeter for n in numbers]\n"}, {"id": "6", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[i] + numbers[i + 1] for i in range(len(numbers) - 1)] + [numbers[-1]]\n"}, {"id": "7", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n\n    return [numbers[0]] + intersperse(numbers[1:], delimeter)\n"}, {"id": "8", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter for _ in range(len(numbers))] + numbers\n"}, {"id": "9", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter] * (len(numbers) - 1) + numbers\n"}]}
{"question_id": "HumanEval/50", "language": "python", "prompt": "\ntakes as input string encoded with encode_shift function. Returns decoded string.\n", "signature": "def decode_shift(s: str):", "solutions": [{"id": "0", "snippet": "def decode_shift(s: str):\n    if not s:\n        return \"\"\n    return encode_shift(s[1:])\n"}, {"id": "1", "snippet": "def decode_shift(s: str):\n    shift_dict = {\"A\": \"T\", \"T\": \"A\", \"C\": \"G\", \"G\": \"C\"}\n    return shift_dict[s[0]] + s[1:]\n"}, {"id": "2", "snippet": "def decode_shift(s: str):\n    return decode(s, shift_dict)\n"}, {"id": "3", "snippet": "def decode_shift(s: str):\n    return decode(s, shift_alphabet)\n"}, {"id": "4", "snippet": "def decode_shift(s: str):\n    return \"\".join([chr(int(s[i]) + int(s[i+1])) for i in range(0, len(s), 2)])\n"}, {"id": "5", "snippet": "def decode_shift(s: str):\n    decoded = ''\n    for c in s:\n        if c.isalpha():\n            decoded += c.upper()\n        else:\n            decoded += c\n    return decoded\n"}, {"id": "6", "snippet": "def decode_shift(s: str):\n    return s.replace(' ', '')"}, {"id": "7", "snippet": "def decode_shift(s: str):\n    return ''.join(map(lambda x: x[1], encode_shift(s)))\n"}, {"id": "8", "snippet": "def decode_shift(s: str):\n    \n    \n    if s == '':\n        return ''\n    \n    left, right = s[0], s[1:]\n    return decode_shift(left) + decode_shift(right)\n"}, {"id": "9", "snippet": "def decode_shift(s: str):\n    decoded = []\n    for ch in s:\n        if ch == '0':\n            decoded.append('0')\n            continue\n        decoded.append(shift_dict[ch])\n    return ''.join(decoded)\n"}]}
{"question_id": "HumanEval/51", "language": "python", "prompt": "\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\nghijklm\")\n'bcdf\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n", "signature": "def remove_vowels(text):", "solutions": [{"id": "0", "snippet": "def remove_vowels(text):\n    vowels = set('aeiou')\n    return ''.join(ch for ch in text if ch not in vowels)"}, {"id": "1", "snippet": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n"}, {"id": "2", "snippet": "def remove_vowels(text):\n    vowels = '''aeiouAEIOU'''\n    for letter in text:\n        if letter not in vowels:\n            text = text.replace(letter, '')\n    return text\n"}, {"id": "3", "snippet": "def remove_vowels(text):\n    vowels = 'aeiou'\n    return ''.join(c for c in text if c not in vowels)"}, {"id": "4", "snippet": "def remove_vowels(text):\n    vowels = set('aeiouAEIOU')\n    return ''.join(c for c in text if c not in vowels)"}, {"id": "5", "snippet": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    for i in vowels:\n        text = text.replace(i, '')\n    return text\n\n\n# Problem 4"}, {"id": "6", "snippet": "def remove_vowels(text):\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n\n    return text\n"}, {"id": "7", "snippet": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text"}, {"id": "8", "snippet": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    new_text = []\n    for char in text:\n        if char not in vowels:\n            new_text.append(char)\n    return ''.join(new_text)\n"}, {"id": "9", "snippet": "def remove_vowels(text):\n    return re.sub(r'[aeiouAEIOU]', '', text)\n"}]}
{"question_id": "HumanEval/52", "language": "python", "prompt": "Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n", "signature": "def below_threshold(l: list, t: int):", "solutions": [{"id": "0", "snippet": "def below_threshold(l: list, t: int):\n    return all(l[i] < t for i in range(len(l)))\n"}, {"id": "1", "snippet": "def below_threshold(l: list, t: int):\n    return all(t <= num for num in l)\n"}, {"id": "2", "snippet": "def below_threshold(l: list, t: int):\n    return all(l[i] < t for i in range(len(l)))\n"}, {"id": "3", "snippet": "def below_threshold(l: list, t: int):\n    return all(l[i] < t for i in range(len(l)))\n"}, {"id": "4", "snippet": "def below_threshold(l: list, t: int):\n    return all(below_threshold(x, t) for x in l)"}, {"id": "5", "snippet": "def below_threshold(l: list, t: int):\n\n    for i in l:\n        if i < t:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True"}, {"id": "7", "snippet": "def below_threshold(l: list, t: int):\n    for x in l:\n        if x < t:\n            return False\n    return True\n"}, {"id": "8", "snippet": "def below_threshold(l: list, t: int):\n    for i in l:\n        if i < t:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def below_threshold(l: list, t: int):\n    return all(l[i] <= t for i in range(len(l)))\n"}]}
{"question_id": "HumanEval/53", "language": "python", "prompt": "Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n", "signature": "def add(x: int, y: int):", "solutions": [{"id": "0", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "1", "snippet": "def add(x: int, y: int):\n    return x + y"}, {"id": "2", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "3", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "4", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "5", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "6", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "7", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "8", "snippet": "def add(x: int, y: int):\n    return x + y"}, {"id": "9", "snippet": "def add(x: int, y: int):\n\n    return x + y\n"}]}
{"question_id": "HumanEval/54", "language": "python", "prompt": "\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n", "signature": "def same_chars(s0: str, s1: str):", "solutions": [{"id": "0", "snippet": "def same_chars(s0: str, s1: str):\n    return len(s0) == len(s1) and all(c1 == c2 for c1, c2 in zip(s0, s1))\n"}, {"id": "1", "snippet": "def same_chars(s0: str, s1: str):\n    return len(set(s0)) == len(set(s1))\n"}, {"id": "2", "snippet": "def same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)"}, {"id": "3", "snippet": "def same_chars(s0: str, s1: str):\n    return s0 == s1\n"}, {"id": "4", "snippet": "def same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)\n"}, {"id": "5", "snippet": "def same_chars(s0: str, s1: str):\n    return s0 == s1 and len(s0) == len(s1)\n"}, {"id": "6", "snippet": "def same_chars(s0: str, s1: str):\n    return s0 == s1\n"}, {"id": "7", "snippet": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n"}, {"id": "8", "snippet": "def same_chars(s0: str, s1: str):\n    return s0 == s1\n"}, {"id": "9", "snippet": "def same_chars(s0: str, s1: str):\n    return s0 == s1\n"}]}
{"question_id": "HumanEval/55", "language": "python", "prompt": "Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n", "signature": "def fib(n: int):", "solutions": [{"id": "0", "snippet": "def fib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}, {"id": "1", "snippet": "def fib(n: int):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}, {"id": "2", "snippet": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}, {"id": "3", "snippet": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}, {"id": "4", "snippet": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}, {"id": "5", "snippet": "def fib(n: int):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}, {"id": "6", "snippet": "def fib(n: int):\n    if n < 0:\n        raise ValueError('Fibonacci number out of range')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}, {"id": "7", "snippet": "def fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}, {"id": "8", "snippet": "def fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}, {"id": "9", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"}]}
{"question_id": "HumanEval/56", "language": "python", "prompt": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n", "signature": "def correct_bracketing(brackets: str):", "solutions": [{"id": "0", "snippet": "def correct_bracketing(brackets: str):\n    return all([brackets[i] == brackets[j] and brackets[i]!= brackets[j + 1]\n                for i in range(len(brackets) - 1) for j in range(i + 1, len(brackets))])\n"}, {"id": "1", "snippet": "def correct_bracketing(brackets: str):\n    pass\n"}, {"id": "2", "snippet": "def correct_bracketing(brackets: str):\n    return len([b for b in brackets if b == \"<\"]) == len(brackets)\n"}, {"id": "3", "snippet": "def correct_bracketing(brackets: str):\n    return all(\"<\" in opening_bracket and \">\" in opening_bracket for opening_bracket in brackets)\n"}, {"id": "4", "snippet": "def correct_bracketing(brackets: str):\n    opening_bracket = brackets[0]\n    closing_bracket = brackets[-1]\n    if opening_bracket == \"<\" and closing_bracket == \">\":\n        return True\n    elif opening_bracket == \">\" and closing_bracket == \"<\":\n        return True\n    else:\n        return False\n"}, {"id": "5", "snippet": "def correct_bracketing(brackets: str):\n    opening_brackets = [\"<\", \">\"]\n    for opening_bracket in opening_brackets:\n        if opening_bracket in brackets:\n            return True\n    return False\n"}, {"id": "6", "snippet": "def correct_bracketing(brackets: str):\n    opening_bracket = \"<\"\n    closing_bracket = \">\"\n\n    for i in range(len(brackets)):\n        if brackets[i]!= opening_bracket:\n            return False\n        if brackets[i]!= closing_bracket:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def correct_bracketing(brackets: str):\n    return all(bracket in correct_closing_brackets for bracket in brackets)\n"}, {"id": "8", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    opening = brackets[0]\n    closing = brackets[-1]\n    if opening == closing:\n        return True\n    else:\n        return correct_bracketing(brackets[1:-1])\n"}, {"id": "9", "snippet": "def correct_bracketing(brackets: str):\n    opening_bracket = brackets.index(\"<\")\n    closing_bracket = brackets.index(\">\")\n    if opening_bracket == closing_bracket:\n        return True\n    else:\n        return False\n"}]}
{"question_id": "HumanEval/57", "language": "python", "prompt": "Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n", "signature": "def monotonic(l: list):", "solutions": [{"id": "0", "snippet": "def monotonic(l: list):\n    i = 0\n    for j in range(len(l)):\n        if l[j] > l[i]:\n            return False\n        i += 1\n    return True\n"}, {"id": "1", "snippet": "def monotonic(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n"}, {"id": "2", "snippet": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\n"}, {"id": "3", "snippet": "def monotonic(l: list):\n    l = sorted(l)\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def monotonic(l: list):\n    for i in range(len(l)):\n        if i == 0 or l[i] > l[i - 1]:\n            return False\n    return True"}, {"id": "5", "snippet": "def monotonic(l: list):\n    return all(i >= j for i, j in zip(l, l[1:]))\n"}, {"id": "6", "snippet": "def monotonic(l: list):\n    for i in range(len(l)):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    else:\n        return all(x > y for x, y in zip(l, l[1:]))\n"}, {"id": "8", "snippet": "def monotonic(l: list):\n    return all(x > y for x, y in zip(l, l[1:]))\n"}, {"id": "9", "snippet": "def monotonic(l: list):\n    return all(l[i] >= l[i-1] for i in range(1, len(l)))\n"}]}
{"question_id": "HumanEval/58", "language": "python", "prompt": "Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n", "signature": "def common(l1: list, l2: list):", "solutions": [{"id": "0", "snippet": "def common(l1: list, l2: list):\n    return list(set(l1).intersection(set(l2)))\n"}, {"id": "1", "snippet": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))\n"}, {"id": "2", "snippet": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2)))"}, {"id": "3", "snippet": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(l2))\n"}, {"id": "4", "snippet": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n"}, {"id": "5", "snippet": "def common(l1: list, l2: list):\n    return sorted(set(l1).intersection(l2))\n"}, {"id": "6", "snippet": "def common(l1: list, l2: list):\n    return list(set(l1).intersection(set(l2)))\n"}, {"id": "7", "snippet": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(l2)))\n"}, {"id": "8", "snippet": "def common(l1: list, l2: list):\n    return [x for x in l1 if x in l2]\n"}, {"id": "9", "snippet": "def common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(set(l2))))\n"}]}
{"question_id": "HumanEval/59", "language": "python", "prompt": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n", "signature": "def largest_prime_factor(n: int):", "solutions": [{"id": "0", "snippet": "def largest_prime_factor(n: int):\n    factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n"}, {"id": "1", "snippet": "def largest_prime_factor(n: int):\n    if n == 1:\n        return 2\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n"}, {"id": "2", "snippet": "def largest_prime_factor(n: int):\n    if n < 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n\n"}, {"id": "3", "snippet": "def largest_prime_factor(n: int):\n    # print(n)\n    i = 2\n    while i < n and n % i == 0:\n        i += 1\n    if i > 1:\n        return n // i\n    else:\n        return n\n"}, {"id": "4", "snippet": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n"}, {"id": "5", "snippet": "def largest_prime_factor(n: int):\n    i = 2\n    while i < n:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n    return n\n"}, {"id": "6", "snippet": "def largest_prime_factor(n: int):\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return n\n"}, {"id": "7", "snippet": "def largest_prime_factor(n: int):\n    if n == 1:\n        return 1\n\n    i = 2\n    while i <= n // 2:\n        if n % i == 0:\n            n = n // i\n        else:\n            i += 1\n\n    if n > 1:\n        return n\n    else:\n        return 1"}, {"id": "8", "snippet": "def largest_prime_factor(n: int):\n    return largest_prime(n) - 1\n"}, {"id": "9", "snippet": "def largest_prime_factor(n: int):\n    for p in primes():\n        if n % p == 0:\n            return p\n"}]}
{"question_id": "HumanEval/6", "language": "python", "prompt": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n", "signature": "def parse_nested_parens(paren_string: str):", "solutions": [{"id": "0", "snippet": "def parse_nested_parens(paren_string: str):\n    return []\n"}, {"id": "1", "snippet": "def parse_nested_parens(paren_string: str):\n    paren_string = paren_string.split(' ')\n    paren_string = list(filter(None, paren_string))\n    return [len(paren_string)] + paren_string\n"}, {"id": "2", "snippet": "def parse_nested_parens(paren_string: str):\n    stack = []\n    for paren in paren_string:\n        if paren == \"(\":\n            stack.append(len(stack))\n        elif paren == \")\":\n            stack.pop()\n        else:\n            level = stack[-1] + 1\n            stack.append(level)\n    return stack\n"}, {"id": "3", "snippet": "def parse_nested_parens(paren_string: str):\n    nested_parens = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == \"(\":\n            nested_parens.append(i)\n        elif paren_string[i] == \")\":\n            nested_parens.pop()\n    return nested_parens\n"}, {"id": "4", "snippet": "def parse_nested_parens(paren_string: str):\n    parens = []\n    for paren in paren_string.split(' '):\n        if paren[0] == '(':\n            parens.append(paren[1:-1])\n        else:\n            parens[-1] += parens[-1]\n    return parens\n"}, {"id": "5", "snippet": "def parse_nested_parens(paren_string: str):\n    paren_list = []\n    for group in re.findall(r'\\((.*?)\\)', paren_string):\n        paren_list.append(len(group))\n    return paren_list\n"}, {"id": "6", "snippet": "def parse_nested_parens(paren_string: str):\n    depth = 0\n    paren_string = paren_string.strip()\n    paren_string = paren_string.replace('(', '')\n    paren_string = paren_string.replace(')', '')\n    for p in paren_string:\n        if p == '(':\n            depth += 1\n        elif p == ')':\n            depth -= 1\n    return depth"}, {"id": "7", "snippet": "def parse_nested_parens(paren_string: str):\n    nested_parens = []\n    for paren_group in re.findall(r'(\\()\\s*\\)\\s*(\\()\\s*\\)\\s*(\\()\\s*\\)\\s*\\)', paren_string):\n        nested_parens.append(len(paren_group))\n    return nested_parens\n"}, {"id": "8", "snippet": "def parse_nested_parens(paren_string: str):\n    paren_string = paren_string.strip()\n    res = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            res.append(i)\n        elif paren_string[i] == ')':\n            res.pop()\n    return res\n"}, {"id": "9", "snippet": "def parse_nested_parens(paren_string: str):\n    return []\n"}]}
{"question_id": "HumanEval/60", "language": "python", "prompt": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n", "signature": "def sum_to_n(n: int):", "solutions": [{"id": "0", "snippet": "def sum_to_n(n: int):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n"}, {"id": "1", "snippet": "def sum_to_n(n: int):\n    \"*** YOUR CODE HERE ***\"\n    total = 0\n    while n > 0:\n        total = total + n\n        n = n - 1\n    return total\n\n# Q5"}, {"id": "2", "snippet": "def sum_to_n(n: int):\n    return sum(range(1, n+1))\n"}, {"id": "3", "snippet": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))\n"}, {"id": "4", "snippet": "def sum_to_n(n: int):\n    def sum_to_n_helper(x):\n        if x == 0:\n            return 0\n        else:\n            return x + sum_to_n_helper(x-1)\n\n    return sum_to_n_helper(n)\n"}, {"id": "5", "snippet": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))\n"}, {"id": "6", "snippet": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n"}, {"id": "7", "snippet": "def sum_to_n(n: int):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 1\n    return total\n"}, {"id": "8", "snippet": "def sum_to_n(n: int):\n    if n < 1:\n        return 0\n    return n + sum_to_n(n-1)\n"}, {"id": "9", "snippet": "def sum_to_n(n: int):\n    return sum(range(1, n + 1))\n"}]}
{"question_id": "HumanEval/61", "language": "python", "prompt": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n", "signature": "def correct_bracketing(brackets: str):", "solutions": [{"id": "0", "snippet": "def correct_bracketing(brackets: str):\n    return all(bracket in \"([{\" for bracket in brackets)\n"}, {"id": "1", "snippet": "def correct_bracketing(brackets: str):\n    brackets = brackets.strip()\n    for i in range(len(brackets)):\n        if brackets[i]!= \"(\" and brackets[i]!= \")\":\n            return False\n    return True\n"}, {"id": "2", "snippet": "def correct_bracketing(brackets: str):\n    opening_bracket = \"(\"\n    closing_bracket = \")\"\n    for i in range(len(brackets)):\n        if brackets[i] == opening_bracket:\n            return True\n        elif brackets[i] == closing_bracket:\n            return False\n            "}, {"id": "3", "snippet": "def correct_bracketing(brackets: str):\n    return brackets.count(\"(\") == brackets.count(\")\")"}, {"id": "4", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            if brackets[i + 1] == \")\":\n                return True\n    return False"}, {"id": "5", "snippet": "def correct_bracketing(brackets: str):\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    for bracket in brackets:\n        if bracket!= \"(\" and bracket!= \")\":\n            return False\n    return True\n"}, {"id": "6", "snippet": "def correct_bracketing(brackets: str):\n    brackets_counter = Counter(brackets)\n    for key, value in brackets_counter.items():\n        if value == 2:\n            return True\n    return False"}, {"id": "7", "snippet": "def correct_bracketing(brackets: str):\n    return all([bracket == brackets[i + 1] for i, bracket in enumerate(brackets)])\n"}, {"id": "8", "snippet": "def correct_bracketing(brackets: str):\n    brackets_stack = Stack()\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            brackets_stack.push(\"(\")\n        elif bracket == \")\":\n            if not brackets_stack.is_empty():\n                brackets_stack.pop()\n            else:\n                return False\n\n    return brackets_stack.is_empty()\n"}, {"id": "9", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0]!= \"(\" or brackets[-1]!= \")\":\n        return False\n\n    for i in range(1, len(brackets)):\n        if brackets[i]!= \"(\" and brackets[i - 1]!= \")\":\n            return False\n\n    return True"}]}
{"question_id": "HumanEval/62", "language": "python", "prompt": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nReturn derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n", "signature": "def derivative(xs: list):", "solutions": [{"id": "0", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n    if len(xs) == 0:\n        return []\n    else:\n        return [xs[1]] + derivative(xs[1:])\n\n# Q4."}, {"id": "1", "snippet": "def derivative(xs: list):\n    derivative_list = []\n\n    for i in range(len(xs) - 1):\n        derivative_list.append(xs[i + 1] - xs[i] * xs[i])\n\n    return derivative_list\n"}, {"id": "2", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n    # base case\n    if len(xs) == 1:\n        return [xs[0]]\n    else:\n        # derivative of first term\n        return [xs[0] * xs[1]] + derivative(xs[1:])\n\n# Q13"}, {"id": "3", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n    return [x for x in xs]"}, {"id": "4", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n\n\n# Q4"}, {"id": "5", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n    return [x * (x + 1) for x in xs]"}, {"id": "6", "snippet": "def derivative(xs: list):\n    # TODO: write your derivative function here\n    if len(xs) < 2:\n        return []\n    else:\n        return [xs[i] for i in range(len(xs)-1)] + [xs[-1]]\n"}, {"id": "7", "snippet": "def derivative(xs: list):\n\n    derivative = []\n    for i in range(len(xs)):\n        derivative.append(xs[i] * (i + 1))\n\n    return derivative\n"}, {"id": "8", "snippet": "def derivative(xs: list):\n    \"*** YOUR CODE HERE ***\"\n    derivative = [0] * len(xs)\n    for i in range(len(xs)):\n        derivative[i] = xs[i] * i + xs[i - 1]\n    return derivative\n\n\n# Q2."}, {"id": "9", "snippet": "def derivative(xs: list):\n    # TODO: write your solution here\n    derivative = []\n    for i in range(len(xs)):\n        derivative.append(xs[i] * i + xs[i + 1])\n    return derivative\n"}]}
{"question_id": "HumanEval/63", "language": "python", "prompt": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n", "signature": "def fibfib(n: int):", "solutions": [{"id": "0", "snippet": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n"}, {"id": "1", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n"}, {"id": "2", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n\n    return fibfib(n-1) + fibfib(n-2)\n"}, {"id": "3", "snippet": "def fibfib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}, {"id": "4", "snippet": "def fibfib(n: int):\n    if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}, {"id": "5", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n"}, {"id": "6", "snippet": "def fibfib(n: int):\n    pass"}, {"id": "7", "snippet": "def fibfib(n: int):\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n"}, {"id": "8", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"}, {"id": "9", "snippet": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}]}
{"question_id": "HumanEval/64", "language": "python", "prompt": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n", "signature": "def vowels_count(s):", "solutions": [{"id": "0", "snippet": "def vowels_count(s):\n    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count = count + 1\n    return count\n"}, {"id": "1", "snippet": "def vowels_count(s):\n    # YOUR CODE HERE\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count"}, {"id": "2", "snippet": "def vowels_count(s):\n    count = 0\n    for c in s:\n        if c in 'aeiouAEIOU':\n            count += 1\n    return count"}, {"id": "3", "snippet": "def vowels_count(s):\n    vowels = \"aeiouyAEIOUY\"\n    count = 0\n    for c in s:\n        if c in vowels:\n            count += 1\n    return count"}, {"id": "4", "snippet": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}, {"id": "6", "snippet": "def vowels_count(s):\n    count = 0\n    for letter in s:\n        if letter in \"aeiouAEIOU\":\n            count += 1\n    return count"}, {"id": "7", "snippet": "def vowels_count(s):\n\n    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count"}, {"id": "8", "snippet": "def vowels_count(s):\n    # Your code here\n    count=0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count+=1\n    return count"}, {"id": "9", "snippet": "def vowels_count(s):\n\n    count = 0\n    for c in s:\n        if c in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}]}
{"question_id": "HumanEval/65", "language": "python", "prompt": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n", "signature": "def circular_shift(x, shift):", "solutions": [{"id": "0", "snippet": "def circular_shift(x, shift):\n    return str(x)[-shift:] + str(x)[:-shift]\n"}, {"id": "1", "snippet": "def circular_shift(x, shift):\n    return str(x + (int(str(x)[-shift:])))\n"}, {"id": "2", "snippet": "def circular_shift(x, shift):\n    digits = list(str(x))\n    digits.reverse()\n    return int(''.join(digits)) >> shift\n"}, {"id": "3", "snippet": "def circular_shift(x, shift):\n    return str(x)[-shift:] + str(x)[:-shift]\n"}, {"id": "4", "snippet": "def circular_shift(x, shift):\n    l = len(str(x))\n    return str(x)[-(l - shift):] + str(x)[:l - shift]"}, {"id": "5", "snippet": "def circular_shift(x, shift):\n    return str(x)[-shift:] + str(x)[:-shift]\n"}, {"id": "6", "snippet": "def circular_shift(x, shift):\n    if shift < 0:\n        raise ValueError('Shift must be non-negative')\n    if shift == 0:\n        return str(x)\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"}, {"id": "7", "snippet": "def circular_shift(x, shift):\n    return str(x)[-shift:] + str(x)[:-shift]"}, {"id": "8", "snippet": "def circular_shift(x, shift):\n    # the digits of the integer\n    digits = list(str(x))\n    # reverse the digits\n    digits[-shift:] = digits[-shift:][::-1]\n    # return the string\n    return ''.join(digits)\n"}, {"id": "9", "snippet": "def circular_shift(x, shift):\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-(shift):][::-1]"}]}
{"question_id": "HumanEval/66", "language": "python", "prompt": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153\n", "signature": "def digitSum(s):", "solutions": [{"id": "0", "snippet": "def digitSum(s):\n\n    return sum([ord(c) for c in s])"}, {"id": "1", "snippet": "def digitSum(s):\n    return sum([ord(c) for c in s])\n"}, {"id": "2", "snippet": "def digitSum(s):\n    return sum([ord(c) for c in s])\n"}, {"id": "3", "snippet": "def digitSum(s):\n    s = list(s)\n    return sum([ord(x) - 64 for x in s])"}, {"id": "4", "snippet": "def digitSum(s):\n    s = s.upper()\n    return sum([ord(c) for c in s])"}, {"id": "5", "snippet": "def digitSum(s):\n    return sum([ord(char) for char in s])"}, {"id": "6", "snippet": "def digitSum(s):\n    if len(s) == 0:\n        return 0\n    return sum([ord(c) for c in s])"}, {"id": "7", "snippet": "def digitSum(s):\n    return sum([ord(c) for c in s])"}, {"id": "8", "snippet": "def digitSum(s):\n    return sum([ord(c) for c in s])"}, {"id": "9", "snippet": "def digitSum(s):\n    return sum([ord(c) for c in s])"}]}
{"question_id": "HumanEval/67", "language": "python", "prompt": "\nIn this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n", "signature": "def fruit_distribution(s, n):", "solutions": [{"id": "0", "snippet": "def fruit_distribution(s, n):\n    return s.count(\"oranges\") + s.count(\"orange\") + s.count(\"apples\") + s.count(\"apple\") + s.count(\"sea\") + s.count(\"fruit\") - n\n\n"}, {"id": "1", "snippet": "def fruit_distribution(s, n):\n    fruits = 0\n    for i in range(n):\n        fruits += s.count('o')\n    return fruits\n"}, {"id": "2", "snippet": "def fruit_distribution(s, n):\n    fruit_count = 0\n    for i in range(n):\n        fruit_count += int(s[i])\n    return fruit_count\n"}, {"id": "3", "snippet": "def fruit_distribution(s, n):\n    fruit_dict = {}\n    for i in range(n):\n        fruit_dict[s[i]] = fruit_dict.get(s[i], 0) + 1\n    return fruit_dict.get(s, 0)\n"}, {"id": "4", "snippet": "def fruit_distribution(s, n):\n    return s * n\n"}, {"id": "5", "snippet": "def fruit_distribution(s, n):\n    return s.count(\"o\") / n\n"}, {"id": "6", "snippet": "def fruit_distribution(s, n):\n    if n == 0:\n        return 0\n    return s[n - 1]"}, {"id": "7", "snippet": "def fruit_distribution(s, n):\n    return s // n\n\n\n# Question 1\n# Complexity: O(n) - n is the total number of fruits"}, {"id": "8", "snippet": "def fruit_distribution(s, n):\n    return s[0:n]\n"}, {"id": "9", "snippet": "def fruit_distribution(s, n):\n    fruit = 0\n    for i in range(n):\n        fruit = fruit + s[i]\n    return fruit\n"}]}
{"question_id": "HumanEval/68", "language": "python", "prompt": "\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 3:\nInput: []\nOutput: []\n\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\n\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value\n", "signature": "def pluck(arr):", "solutions": [{"id": "0", "snippet": "def pluck(arr):\n    return arr[0]"}, {"id": "1", "snippet": "def pluck(arr):\n    return None"}, {"id": "2", "snippet": "def pluck(arr):\npass"}, {"id": "3", "snippet": "def pluck(arr):\n    pass\n"}, {"id": "4", "snippet": "def pluck(arr):\n    return arr[0]"}, {"id": "5", "snippet": "def pluck(arr):\n    return arr[0]"}, {"id": "6", "snippet": "def pluck(arr):\n    return arr[0]"}, {"id": "7", "snippet": "def pluck(arr):\n    return arr[0]"}, {"id": "8", "snippet": "def pluck(arr):\npass"}, {"id": "9", "snippet": "def pluck(arr):\n    return arr[0]"}]}
{"question_id": "HumanEval/69", "language": "python", "prompt": "\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n", "signature": "def search(lst):", "solutions": [{"id": "0", "snippet": "def search(lst):\n\n    # write your solution here\n\n    return -1"}, {"id": "1", "snippet": "def search(lst):\n    # if the list is empty, return -1\n    if lst == []:\n        return -1\n\n    # if the list is not empty, return the index of the first element that is greater than or equal to the value of the element\n    return search_helper(lst, 0, len(lst) - 1)\n"}, {"id": "2", "snippet": "def search(lst):\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            for j in range(lst[i], len(lst)):\n                if lst[j] == lst[i]:\n                    return i\n    return -1\n"}, {"id": "3", "snippet": "def search(lst):\n\n    for i in lst:\n        if i > 0 and lst.count(i) > 1:\n            return i\n\n    return -1\n"}, {"id": "4", "snippet": "def search(lst):\n    for i in range(1, len(lst)):\n        if lst[i] > 0:\n            return lst[i]\n    return -1"}, {"id": "5", "snippet": "def search(lst):\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            return i\n    return -1\n"}, {"id": "6", "snippet": "def search(lst):\n    # nonempty list is empty\n    if lst == []:\n        return -1\n\n    # find the value in the list\n    return search_helper(lst, 0, len(lst) - 1)\n"}, {"id": "7", "snippet": "def search(lst):\n    max_freq = 0\n    max_item = -1\n    for item in lst:\n        freq = lst.count(item)\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"}, {"id": "8", "snippet": "def search(lst):\n    pass\n"}, {"id": "9", "snippet": "def search(lst):\n    pass\n"}]}
{"question_id": "HumanEval/7", "language": "python", "prompt": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n", "signature": "def filter_by_substring(strings: List[str], substring: str):", "solutions": [{"id": "0", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [string for string in strings if substring in string]\n"}, {"id": "1", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "2", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "3", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "4", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "5", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "6", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n\n    return [s for s in strings if substring in s]\n"}, {"id": "7", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "8", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n\n    return [s for s in strings if substring in s]\n"}, {"id": "9", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}]}
{"question_id": "HumanEval/70", "language": "python", "prompt": "\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n", "signature": "def strange_sort_list(lst):", "solutions": [{"id": "0", "snippet": "def strange_sort_list(lst):\n    new_list = []\n    for i in range(len(lst)):\n        min_idx = find_min_idx(lst)\n        new_list.append(lst[min_idx])\n        lst[min_idx] = lst[i]\n        lst[i] = min_idx\n    return new_list\n"}, {"id": "1", "snippet": "def strange_sort_list(lst):\n    lst.sort()\n    return lst"}, {"id": "2", "snippet": "def strange_sort_list(lst):\n    lst.sort()\n    return lst"}, {"id": "3", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x - min(lst)) + [min(lst)]\n"}, {"id": "4", "snippet": "def strange_sort_list(lst):\n\n    return sorted(lst)\n"}, {"id": "5", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "6", "snippet": "def strange_sort_list(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n"}, {"id": "7", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x < 0 else x - 1)\n"}, {"id": "8", "snippet": "def strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst\n"}, {"id": "9", "snippet": "def strange_sort_list(lst):\n    return strange_sort(lst, 0, len(lst) - 1)\n"}]}
{"question_id": "HumanEval/71", "language": "python", "prompt": "\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n", "signature": "def triangle_area(a, b, c):", "solutions": [{"id": "0", "snippet": "def triangle_area(a, b, c):\n    a, b, c = sorted([a, b, c])\n    return (b - a) * (c - a) / 2\n"}, {"id": "1", "snippet": "def triangle_area(a, b, c):\n    # TODO: implement this function\n    return -1\n"}, {"id": "2", "snippet": "def triangle_area(a, b, c):\n    return round((a + b + c) * (a + b + c) / 2, 2)\n"}, {"id": "3", "snippet": "def triangle_area(a, b, c):\n    return (a + b + c) / 2\n"}, {"id": "4", "snippet": "def triangle_area(a, b, c):\n    # note: this function is an exact solution, but it is more accurate\n    # than the above function, as it is used in the solution of the recursion\n    return 0.5 * abs(a + b + c) * (b * c - a * c)"}, {"id": "5", "snippet": "def triangle_area(a, b, c):\n\n    # Calculate the area of the triangle\n    area = 0.5 * (a + b + c)\n\n    # Check if the area is valid\n    if area >= triangle_perimeter(a, b, c):\n        return -1\n\n    return area"}, {"id": "6", "snippet": "def triangle_area(a, b, c):\n    return round((a + b + c) / 2, 2)\n"}, {"id": "7", "snippet": "def triangle_area(a, b, c):\n    return round((a + b + c) * 0.5, 2)\n"}, {"id": "8", "snippet": "def triangle_area(a, b, c):\n    return 0.5 * a * b * c\n"}, {"id": "9", "snippet": "def triangle_area(a, b, c):\n    return round(((a + b + c) / 2) * (math.sqrt((a ** 2) + (b ** 2) + (c ** 2)),), 2)\n"}]}
{"question_id": "HumanEval/72", "language": "python", "prompt": "\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.\n", "signature": "def will_it_fly(q, w):", "solutions": [{"id": "0", "snippet": "def will_it_fly(q, w):\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n\n# print(will_it_fly([1, 2], 5))\n"}, {"id": "1", "snippet": "def will_it_fly(q, w):\n    return is_balanced(q) and sum_of_elements(q) <= w\n"}, {"id": "2", "snippet": "def will_it_fly(q, w):\n    sum = sum_of_elements(q)\n    return sum <= w\n\n# Problem 3"}, {"id": "3", "snippet": "def will_it_fly(q, w):\n    return len([x for x in q if is_balanced(x) and sum(q) <= w]) >= w\n\n# Q5"}, {"id": "4", "snippet": "def will_it_fly(q, w):\n\n    if is_balanced(q) and sum_of_elements(q) <= w:\n        return True\n    return False\n"}, {"id": "5", "snippet": "def will_it_fly(q, w):\n    if not is_balanced(q, w):\n        return False\n    return sum(q) <= w\n"}, {"id": "6", "snippet": "def will_it_fly(q, w):\n\n    if is_balanced(q) and sum_of_elements(q) <= w:\n        return True\n    return False"}, {"id": "7", "snippet": "def will_it_fly(q, w):\npass"}, {"id": "8", "snippet": "def will_it_fly(q, w):\n    return (is_balanced(q) and sum_of_elements(q) <= w)"}, {"id": "9", "snippet": "def will_it_fly(q, w):\n    if is_balanced(q) and sum_of_elements(q) <= w:\n        return True\n    else:\n        return False\n"}]}
{"question_id": "HumanEval/73", "language": "python", "prompt": "\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n", "signature": "def smallest_change(arr):", "solutions": [{"id": "0", "snippet": "def smallest_change(arr):\n    # Your code here\n    min_val = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            \n    return min_val"}, {"id": "1", "snippet": "def smallest_change(arr):\n    return len(arr) - max([arr.count(i) for i in arr])\n"}, {"id": "2", "snippet": "def smallest_change(arr):\n\n    return len(min(arr, key=lambda x: abs(x - x[::-1])))\n"}, {"id": "3", "snippet": "def smallest_change(arr):\n    arr = sorted(arr)\n    for i in range(len(arr) - 1):\n        if arr[i]!= arr[i + 1]:\n            return i + 1\n"}, {"id": "4", "snippet": "def smallest_change(arr):\n\n    arr.sort()\n    i = len(arr) // 2\n    while i > 0:\n        if arr[i]!= arr[i - 1]:\n            return i - 1\n        i -= 1\n    return i - 1\n"}, {"id": "5", "snippet": "def smallest_change(arr):\n\n    # Write your code here\n    l = len(arr)\n    for i in range(l):\n        for j in range(l - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr[0]\n"}, {"id": "6", "snippet": "def smallest_change(arr):\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n\n    for i in range(n, 1, -1):\n        for j in range(i - 1, -1, -1):\n            dp[i] = min(dp[i], dp[j] + arr[i - j])\n\n    return dp[n]\n"}, {"id": "7", "snippet": "def smallest_change(arr):\n    return min(arr)\n"}, {"id": "8", "snippet": "def smallest_change(arr):\n    return len(min_pal(arr))\n"}, {"id": "9", "snippet": "def smallest_change(arr):\n\n    # YOUR CODE HERE\n    if len(arr) < 2:\n        return 0\n    if len(arr) == 2:\n        return 1\n    else:\n        return min(smallest_change([arr[i] for i in range(1, len(arr))]),\n                   smallest_change([arr[i] for i in range(len(arr) - 1, 0, -1)]))\n"}]}
{"question_id": "HumanEval/74", "language": "python", "prompt": "\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n", "signature": "def total_match(lst1, lst2):", "solutions": [{"id": "0", "snippet": "def total_match(lst1, lst2):\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]\n"}, {"id": "1", "snippet": "def total_match(lst1, lst2):\n    return [i for i in lst1 if lst1.count(i) < lst2.count(i)]\n"}, {"id": "2", "snippet": "def total_match(lst1, lst2):\n    return list(set(lst1) & set(lst2))\n"}, {"id": "3", "snippet": "def total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return lst2\n"}, {"id": "4", "snippet": "def total_match(lst1, lst2):\n    return lst1 + lst2"}, {"id": "5", "snippet": "def total_match(lst1, lst2):\n    pass\n"}, {"id": "6", "snippet": "def total_match(lst1, lst2):\n\n    return [item for item in lst1 if lst2.count(item) > 0]\n"}, {"id": "7", "snippet": "def total_match(lst1, lst2):\n    return list(set(lst1) & set(lst2))"}, {"id": "8", "snippet": "def total_match(lst1, lst2):\n    return [l for l in lst1 if l in lst2]\n"}, {"id": "9", "snippet": "def total_match(lst1, lst2):\n\n    return [i for i in lst1 if len(i) == len(lst2)]\n"}]}
{"question_id": "HumanEval/75", "language": "python", "prompt": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n", "signature": "def is_multiply_prime(a):", "solutions": [{"id": "0", "snippet": "def is_multiply_prime(a):\n\n    if a < 100:\n        return False\n    else:\n        return True if a % 3 == 0 else False\n"}, {"id": "1", "snippet": "def is_multiply_prime(a):\n    return True if a == 3 * prime_number(a) else False\n"}, {"id": "2", "snippet": "def is_multiply_prime(a):\n    return (a % 3 == 0) and (a % 5 == 0)\n"}, {"id": "3", "snippet": "def is_multiply_prime(a):\n    return a >= 100\n"}, {"id": "4", "snippet": "def is_multiply_prime(a):\n    return a > 100 and a % 3 == 0"}, {"id": "5", "snippet": "def is_multiply_prime(a):\n    return a > 100 and is_prime(a)\n\n# Testing"}, {"id": "6", "snippet": "def is_multiply_prime(a):\n    return a % 3 == 0 and a % 5!= 0"}, {"id": "7", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "8", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def is_multiply_prime(a):\n    return (a % 3) == 0 and (a % 5) == 0\n"}]}
{"question_id": "HumanEval/76", "language": "python", "prompt": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n", "signature": "def is_simple_power(x, n):", "solutions": [{"id": "0", "snippet": "def is_simple_power(x, n):\n    if n <= 0:\n        return False\n    return x == int(x**n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}, {"id": "1", "snippet": "def is_simple_power(x, n):\n    if n**int(x) == x:\n        return True\n    else:\n        return False"}, {"id": "2", "snippet": "def is_simple_power(x, n):\n    return True if x ** n == x else False"}, {"id": "3", "snippet": "def is_simple_power(x, n):\n    if n == 1:\n        return True\n    else:\n        if n % x == 0:\n            return True\n        else:\n            return False\n\n\n# ----------------------------------------------------------------------------------------------------------------------"}, {"id": "4", "snippet": "def is_simple_power(x, n):\n    return True if n ** x == x else False"}, {"id": "5", "snippet": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    return False\n\n\n"}, {"id": "6", "snippet": "def is_simple_power(x, n):\n    # Your task here\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if x == 0:\n        return False\n    return is_simple_power(x // n, n)\n"}, {"id": "7", "snippet": "def is_simple_power(x, n):\n    return True if (n ** int(x)) == x else False\n"}, {"id": "8", "snippet": "def is_simple_power(x, n):\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    else:\n        return is_simple_power(x, n // 2) or is_simple_power(x, n // 2)\n"}, {"id": "9", "snippet": "def is_simple_power(x, n):\n    # Write the docstring for this function.\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    else:\n        return False\n"}]}
{"question_id": "HumanEval/77", "language": "python", "prompt": "\nWrite a function that takes an integer a and returns True\nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False\n", "signature": "def iscube(a):", "solutions": [{"id": "0", "snippet": "def iscube(a):\n    return (a ** 3) % 6 == 0"}, {"id": "1", "snippet": "def iscube(a):\n    if a < 1:\n        return False\n    return a % 3 == 0 and a % 5 == 0\n"}, {"id": "2", "snippet": "def iscube(a):\n    return is_cube(a)\n"}, {"id": "3", "snippet": "def iscube(a):\n    if a < 0:\n        return False\n    elif a == 0:\n        return True\n    else:\n        if a % 6 == 0 and a % 100!= 0:\n            return False\n        else:\n            return True\n"}, {"id": "4", "snippet": "def iscube(a):\n    return a % 4 == 0"}, {"id": "5", "snippet": "def iscube(a):\n\n    if a < 0:\n        return False\n    if a == 0:\n        return True\n    if a % 4 == 0 or a % 8 == 0:\n        return False\n    return iscube(a // 4) or iscube(a // 8)\n"}, {"id": "6", "snippet": "def iscube(a):\n    if a < 0:\n        return False\n    if a % 4!= 0:\n        return False\n    for i in range(int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def iscube(a):\n    return a % 4 == 0 and (a % 6 == 0 or a % 9 == 0)"}, {"id": "8", "snippet": "def iscube(a):\n    return isint(a) and a % 6 == 0 and a > 0"}, {"id": "9", "snippet": "def iscube(a):\n    if a == 0:\n        return False\n    return True"}]}
{"question_id": "HumanEval/78", "language": "python", "prompt": "You have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n", "signature": "def hex_key(num):", "solutions": [{"id": "0", "snippet": "def hex_key(num):\n    pass"}, {"id": "1", "snippet": "def hex_key(num):\n    return len(set(re.findall(r'\\d', num)))"}, {"id": "2", "snippet": "def hex_key(num):\n    return int(num, 16)"}, {"id": "3", "snippet": "def hex_key(num):\n    return len(set([int(c, 16) for c in list(binascii.unhexlify(num))]))"}, {"id": "4", "snippet": "def hex_key(num):\n    return sum([int(c) for c in num])\n"}, {"id": "5", "snippet": "def hex_key(num):\n    return sum([1 for c in num if c in \"ABCDEF0123456789\"])"}, {"id": "6", "snippet": "def hex_key(num):\n    return len(\"{:02x}\".format(int(num, 16)))"}, {"id": "7", "snippet": "def hex_key(num):\n    return sum([int(x) for x in list(num) if x in \"ABCDEF\"])"}, {"id": "8", "snippet": "def hex_key(num):\n    return sum([int(c) for c in num])"}, {"id": "9", "snippet": "def hex_key(num):\n    return int(num, 16)"}]}
{"question_id": "HumanEval/79", "language": "python", "prompt": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n", "signature": "def decimal_to_binary(decimal):", "solutions": [{"id": "0", "snippet": "def decimal_to_binary(decimal):\n    binary_string = bin(decimal)[2:]\n    return binary_string.zfill(len(binary_string))\n"}, {"id": "1", "snippet": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]\n"}, {"id": "2", "snippet": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:]"}, {"id": "3", "snippet": "def decimal_to_binary(decimal):\n    return \"\".join([str(bin(int(i))[2:]) for i in str(decimal)])"}, {"id": "4", "snippet": "def decimal_to_binary(decimal):\n    result = \"\"\n    for i in range(0, len(bin(decimal))):\n        result += '1' if decimal % 2 == 0 else '0'\n        decimal //= 2\n    return result"}, {"id": "5", "snippet": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n"}, {"id": "6", "snippet": "def decimal_to_binary(decimal):\n\n    binary_string = ''\n    while decimal > 0:\n        binary_string = str(decimal % 2) + binary_string\n        decimal = decimal // 2\n\n    return binary_string\n"}, {"id": "7", "snippet": "def decimal_to_binary(decimal):\n    result = ''\n    while decimal > 0:\n        result = str(decimal%2) + result\n        decimal //= 2\n    return result"}, {"id": "8", "snippet": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:].zfill(32)\n"}, {"id": "9", "snippet": "def decimal_to_binary(decimal):\n\n    return \"\".join([str((decimal >> i) & 1) for i in range(len(bin(decimal)) - 2, -1, -1)])\n"}]}
{"question_id": "HumanEval/8", "language": "python", "prompt": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n", "signature": "def sum_product(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def sum_product(numbers: List[int]):\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n"}, {"id": "1", "snippet": "def sum_product(numbers: List[int]):\n    \"*** YOUR CODE HERE ***\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum = sum + i\n        product = product * i\n    return (sum, product)\n"}, {"id": "2", "snippet": "def sum_product(numbers: List[int]):\n    sum = 0\n    product = 1\n    for n in numbers:\n        if n:\n            sum += n\n            product *= n\n    return (sum, product)\n"}, {"id": "3", "snippet": "def sum_product(numbers: List[int]):\n    total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return total, product\n"}, {"id": "4", "snippet": "def sum_product(numbers: List[int]):\n    return (0, 1)"}, {"id": "5", "snippet": "def sum_product(numbers: List[int]):\n    sum_product = 0\n    product = 1\n\n    for num in numbers:\n        sum_product += num\n        product *= num\n\n    return sum_product, product\n"}, {"id": "6", "snippet": "def sum_product(numbers: List[int]):\n    \"*** YOUR CODE HERE ***\"\n    sum_product = 0\n    product = 1\n    for i in numbers:\n        sum_product += i\n        product *= i\n    return sum_product, product\n"}, {"id": "7", "snippet": "def sum_product(numbers: List[int]):\n\n    # TODO\n    return 0, 1\n"}, {"id": "8", "snippet": "def sum_product(numbers: List[int]):\n    sum = 0\n    product = 1\n\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return (sum, product)\n"}, {"id": "9", "snippet": "def sum_product(numbers: List[int]):\n    return (0, 1)\n"}]}
{"question_id": "HumanEval/80", "language": "python", "prompt": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n", "signature": "def is_happy(s):", "solutions": [{"id": "0", "snippet": "def is_happy(s):\n    return len(set(s)) == len(s) and all(c in string.ascii_lowercase for c in s)\n"}, {"id": "1", "snippet": "def is_happy(s):\n\n    return is_happy_helper(s, 0, len(s)-1)\n"}, {"id": "2", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    return True"}, {"id": "3", "snippet": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 2] == s[i + 3]:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return True\n    else:\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n"}, {"id": "5", "snippet": "def is_happy(s):\n    s = s.lower()\n    count = 0\n    for i in s:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            count += 1\n    if count >= 3:\n        return False\n    return True\n"}, {"id": "6", "snippet": "def is_happy(s):\n    return len(set(s)) == len(s) and all(s.count(c) == 1 for c in s)"}, {"id": "7", "snippet": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)):\n            if i + 1 < len(s) and s[i] == s[i + 1]:\n                continue\n            else:\n                return False\n        return True"}, {"id": "8", "snippet": "def is_happy(s):\n    # TODO\n    pass"}, {"id": "9", "snippet": "def is_happy(s):\n    count = 0\n    for i in s:\n        if i == \"#\":\n            count += 1\n        if count == 3:\n            return False\n    return True"}]}
{"question_id": "HumanEval/81", "language": "python", "prompt": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n", "signature": "def numerical_letter_grade(grades):", "solutions": [{"id": "0", "snippet": "def numerical_letter_grade(grades):\n    pass\n"}, {"id": "1", "snippet": "def numerical_letter_grade(grades):\n    return ['A+', 'B', 'C-', 'C', 'A-', 'B+', 'D', 'E']"}, {"id": "2", "snippet": "def numerical_letter_grade(grades):\n    pass"}, {"id": "3", "snippet": "def numerical_letter_grade(grades):\n    pass"}, {"id": "4", "snippet": "def numerical_letter_grade(grades):\n    pass"}, {"id": "5", "snippet": "def numerical_letter_grade(grades):\n    pass\n"}, {"id": "6", "snippet": "def numerical_letter_grade(grades):\n    pass\n"}, {"id": "7", "snippet": "def numerical_letter_grade(grades):\npass"}, {"id": "8", "snippet": "def numerical_letter_grade(grades):\n    return []"}, {"id": "9", "snippet": "def numerical_letter_grade(grades):\n\n    pass\n"}]}
{"question_id": "HumanEval/82", "language": "python", "prompt": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n", "signature": "def prime_length(string):", "solutions": [{"id": "0", "snippet": "def prime_length(string):\n    # Create a list of all primes less than or equal to n\n    primes = []\n    for i in range(2, int(math.sqrt(len(string))) + 1):\n        if string.startswith(''.join([str(j) for j in range(i, len(string), i)])):\n            primes.append(i)\n    return len(primes) == 1"}, {"id": "1", "snippet": "def prime_length(string):\n\n    if string == \"\":\n        return False\n    for i in range(len(string)):\n        if string[i] == string[i - 1] or string[i] == string[i + 1]:\n            continue\n        else:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[:i] == string[i - 1::-1]:\n            return True\n    return False\n"}, {"id": "3", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i]!= string[i-1]:\n            return False\n    return True"}, {"id": "4", "snippet": "def prime_length(string):\n    if len(string) < 2:\n        return False\n    else:\n        for i in range(2, int(len(string) ** 0.5) + 1):\n            if string[0] == string[i - 1] and string[i - 1] == string[i]:\n                return False\n    return True\n"}, {"id": "5", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def prime_length(string):\n    return any(i in string for i in range(2, int(len(string) ** 0.5) + 1))"}, {"id": "7", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i] == string[i-1]:\n            return False\n    return True\n    "}, {"id": "8", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i] == string[i-1] and string[i-1] > string[i-2]:\n            return False\n    return True"}, {"id": "9", "snippet": "def prime_length(string):\n    \n    for i in range(2, len(string)):\n        if string[i] == string[i - 1]:\n            return False\n    return True"}]}
{"question_id": "HumanEval/83", "language": "python", "prompt": "\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n", "signature": "def starts_one_ends(n):", "solutions": [{"id": "0", "snippet": "def starts_one_ends(n):\n    return sum([1 for i in range(n) if i > 0 and i % 10 == 1])\n"}, {"id": "1", "snippet": "def starts_one_ends(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10\n    return count"}, {"id": "2", "snippet": "def starts_one_ends(n):\n    count = 0\n    while n > 1:\n        n //= 10\n        count += 1\n    return count"}, {"id": "3", "snippet": "def starts_one_ends(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return starts_one_ends(n - 1) + 1\n"}, {"id": "4", "snippet": "def starts_one_ends(n):\n    count = 0\n    while n > 1:\n        if n % 10 == 1:\n            n //= 10\n        else:\n            n //= 10\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def starts_one_ends(n):\n    return count_digits(n) - count_digits(n - 1)"}, {"id": "6", "snippet": "def starts_one_ends(n):\n    return count_digits(n) - count_digits(n - 1)"}, {"id": "7", "snippet": "def starts_one_ends(n):\n    return sum(1 for i in range(n) if n % i == 0)\n"}, {"id": "8", "snippet": "def starts_one_ends(n):\n    if n == 0:\n        return 1\n    elif n % 10 == 0:\n        return 1 + starts_one_ends(n//10)\n    else:\n        return starts_one_ends(n//10)"}, {"id": "9", "snippet": "def starts_one_ends(n):\n    return (n // 10) * 10 + (n % 10)\n"}]}
{"question_id": "HumanEval/84", "language": "python", "prompt": "Given a positive integer N, return the total sum of its digits in binary.\n\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n", "signature": "def solve(N):", "solutions": [{"id": "0", "snippet": "def solve(N):\n\n    return \"\".join([str(bin(int(x)))[2:].zfill(N) for x in list(str(2**N))])\n"}, {"id": "1", "snippet": "def solve(N):\n    sum = 0\n    for i in range(N):\n        sum = sum + int(str(bin(i)[2:])[2:])\n    return str(sum)"}, {"id": "2", "snippet": "def solve(N):\n    res = ''\n    for i in range(1, N + 1):\n        res += str(bin(i)).replace('0b', '')\n    return res"}, {"id": "3", "snippet": "def solve(N):\n\n    # create an empty binary array\n    binary = []\n    for i in range(0, N):\n        binary.append(str(i))\n\n    # convert to binary\n    binary = \"\".join(binary)\n\n    # compute the sum\n    total = 0\n    for i in binary:\n        total += int(i)\n\n    return str(total)"}, {"id": "4", "snippet": "def solve(N):\n    res = \"\"\n    for i in range(1, N + 1):\n        res += str(bin(i))[2:].zfill(8)\n    return res\n"}, {"id": "5", "snippet": "def solve(N):\n    # Create a list of digits in binary\n    num_list = list(range(N, 0, -1))\n    # Convert number to binary\n    binary = list(map(int, str(sum(num_list))))\n\n    # Get the total sum of digits in binary\n    total = 0\n    for digit in binary:\n        total += digit\n\n    return str(total)\n"}, {"id": "6", "snippet": "def solve(N):\n    if N < 10:\n        return '0' * N + str(1)\n    else:\n        return str(bin(N))[2:]\n"}, {"id": "7", "snippet": "def solve(N):\n    digits = [str(i) for i in range(N)]\n    total = 0\n    for digit in digits:\n        total += int(digit)\n    return total"}, {"id": "8", "snippet": "def solve(N):\n    sum_of_digits = 0\n    for num in range(1, N + 1):\n        sum_of_digits += bin(num).count(\"1\")\n    return str(sum_of_digits)\n"}, {"id": "9", "snippet": "def solve(N):\n    result = \"\"\n\n    if N < 0:\n        N = -N\n\n    for digit in range(0, N + 1):\n        result += str(bin(digit))[2:]\n\n    return result\n"}]}
{"question_id": "HumanEval/85", "language": "python", "prompt": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n", "signature": "def add(lst):", "solutions": [{"id": "0", "snippet": "def add(lst):\n    result = []\n    for i in lst:\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"}, {"id": "1", "snippet": "def add(lst):\n    return sum([int(x) for x in lst if x % 2 == 0])\n"}, {"id": "2", "snippet": "def add(lst):\n    return sum([2 * i for i in lst if i % 2 == 0])"}, {"id": "3", "snippet": "def add(lst):\n    for i in range(1, len(lst)):\n        if lst[i] % 2 == 0:\n            lst[i - 1] += lst[i]\n    return lst\n"}, {"id": "4", "snippet": "def add(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                lst[i] += 1\n                return lst\n            else:\n                lst[i] = 0\n        else:\n            lst[i] += 1\n    return lst\n"}, {"id": "5", "snippet": "def add(lst):\n    return [lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i]!= lst[i - 1]]\n"}, {"id": "6", "snippet": "def add(lst):\n    for i in range(0, len(lst)):\n        if i % 2!= 0:\n            lst[i] += 1\n    return lst\n"}, {"id": "7", "snippet": "def add(lst):\n\n    return [x + 2 for x in lst if x % 2 == 0]\n"}, {"id": "8", "snippet": "def add(lst):\n    # TODO: Write function to add here\n    even = 0\n    for i in lst:\n        if i % 2 == 0:\n            even += 1\n    return even\n"}, {"id": "9", "snippet": "def add(lst):\n    for i in range(1, len(lst)):\n        if lst[i] % 2!= 0:\n            lst[i] += 1\n    return lst\n"}]}
{"question_id": "HumanEval/86", "language": "python", "prompt": "\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n", "signature": "def anti_shuffle(s):", "solutions": [{"id": "0", "snippet": "def anti_shuffle(s):\n    result = ''\n    for i in range(len(s)):\n        result = result + s[i] +''\n    return result[:-1]"}, {"id": "1", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_words.append(str(word).replace(' ', ''))\n    return \" \".join(ordered_words)\n"}, {"id": "2", "snippet": "def anti_shuffle(s):\n    pass\n"}, {"id": "3", "snippet": "def anti_shuffle(s):\n    return \" \".join([s[i:i+2] for i in range(0,len(s),2)])"}, {"id": "4", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    shuffled = ''\n    for word in words:\n        shuffled += word.upper()\n    return shuffled\n"}, {"id": "5", "snippet": "def anti_shuffle(s):\n    # Your Code Here\n    return ''.join([chr(ord(letter) + 1) for letter in s])\n"}, {"id": "6", "snippet": "def anti_shuffle(s):\n\n    s = s.lower()\n    return''.join([i for i in s if ord(i) < 128])"}, {"id": "7", "snippet": "def anti_shuffle(s):\n\n    # Your code here\n    return s.lower().strip(' ')\n\n\n\n"}, {"id": "8", "snippet": "def anti_shuffle(s):\n    s = s.split()\n    return''.join(s)"}, {"id": "9", "snippet": "def anti_shuffle(s):\n    # Your code here\n    return''.join(s.split(' '))\n"}]}
{"question_id": "HumanEval/87", "language": "python", "prompt": "\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of lists, [[x1, y1], [x2, y2] ...] such that\neach list is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n", "signature": "def get_row(lst, x):", "solutions": [{"id": "0", "snippet": "def get_row(lst, x):\n\n    return [row[x] for row in lst]"}, {"id": "1", "snippet": "def get_row(lst, x):\n    return [row[x] for row in lst]\n"}, {"id": "2", "snippet": "def get_row(lst, x):\n    pass"}, {"id": "3", "snippet": "def get_row(lst, x):\n    return [lst[i][x] for i in range(len(lst))]\n"}, {"id": "4", "snippet": "def get_row(lst, x):\n\n    return [row[x] for row in lst]\n"}, {"id": "5", "snippet": "def get_row(lst, x):\n    return [row[x] for row in lst]\n"}, {"id": "6", "snippet": "def get_row(lst, x):\n    return [row for row in lst if x in row]\n"}, {"id": "7", "snippet": "def get_row(lst, x):\n    return [row[x] for row in lst]"}, {"id": "8", "snippet": "def get_row(lst, x):\n    return [row[x] for row in lst]"}, {"id": "9", "snippet": "def get_row(lst, x):\n    pass\n\n\n# Tests"}]}
{"question_id": "HumanEval/88", "language": "python", "prompt": "\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n", "signature": "def sort_array(array):", "solutions": [{"id": "0", "snippet": "def sort_array(array):\n    pass\n"}, {"id": "1", "snippet": "def sort_array(array):\n    pass\n"}, {"id": "2", "snippet": "def sort_array(array):\n\n    pass\n"}, {"id": "3", "snippet": "def sort_array(array):\n\n    # YOUR CODE HERE\n    for i in range(len(array) - 1):\n        if array[i] % 2!= 0:\n            array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n"}, {"id": "4", "snippet": "def sort_array(array):\n\n    if sum(array) % 2!= 0:\n        return array[::-1]\n    else:\n        return array"}, {"id": "5", "snippet": "def sort_array(array):\n    pass\n"}, {"id": "6", "snippet": "def sort_array(array):\n\n    return sorted(array)\n"}, {"id": "7", "snippet": "def sort_array(array):\npass"}, {"id": "8", "snippet": "def sort_array(array):\n    return sorted(array)"}, {"id": "9", "snippet": "def sort_array(array):\n    return array"}]}
{"question_id": "HumanEval/89", "language": "python", "prompt": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters\nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n", "signature": "def encrypt(s):", "solutions": [{"id": "0", "snippet": "def encrypt(s):\n    # TODO: Create and return the encryption function\n    rot = string.ascii_uppercase\n    return \"\".join(rot[i] for i in list(s))"}, {"id": "1", "snippet": "def encrypt(s):\n    rotated_string = ''\n    alphabet_position = 0\n    for char in s:\n        rotated_string += rotate_alphabet(char, alphabet_position)\n        alphabet_position += 2\n    return rotated_string\n"}, {"id": "2", "snippet": "def encrypt(s):\n    return rotate_characters(s, -2)\n    "}, {"id": "3", "snippet": "def encrypt(s):\n\n    return ''.join([rotate_character(c, 2) for c in s])\n"}, {"id": "4", "snippet": "def encrypt(s):\n    new_string = []\n    for i in s:\n        new_string.append(rotate_character(i))\n    return ''.join(new_string)\n"}, {"id": "5", "snippet": "def encrypt(s):\n    rotated_string = ''\n    for c in s:\n        rotated_string += rotate_character(c)\n    return rotated_string\n"}, {"id": "6", "snippet": "def encrypt(s):\n    return ''.join(rotate_string(s, rotate_alphabet_size(len(s))))\n"}, {"id": "7", "snippet": "def encrypt(s):\n    return rotate_string(s, rotate_key)\n"}, {"id": "8", "snippet": "def encrypt(s):\n    return rotate_string(s, rotation)\n"}, {"id": "9", "snippet": "def encrypt(s):\n    # YOUR CODE HERE\n    \n    return rotate_alpha(s)\n"}]}
{"question_id": "HumanEval/9", "language": "python", "prompt": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n", "signature": "def rolling_max(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def rolling_max(numbers: List[int]):\n    return [max(numbers)] + rolling_max(numbers[1:])\n"}, {"id": "1", "snippet": "def rolling_max(numbers: List[int]):\n    rolling_max_list = []\n    for number in numbers:\n        rolling_max_list.append(max(numbers))\n    return rolling_max_list\n"}, {"id": "2", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = numbers[0]\n    maximum_sequence = []\n\n    for i in range(1, len(numbers)):\n        if numbers[i] > maximum:\n            maximum = numbers[i]\n            maximum_sequence = [numbers[i]]\n        else:\n            maximum_sequence.append(numbers[i])\n\n    return maximum_sequence\n"}, {"id": "3", "snippet": "def rolling_max(numbers: List[int]):\n    result = []\n    for n in numbers:\n        result.append(max(numbers))\n        numbers.remove(max(numbers))\n    return result\n"}, {"id": "4", "snippet": "def rolling_max(numbers: List[int]):\n    result = []\n    for number in numbers:\n        result.append(max(numbers))\n    return result\n"}, {"id": "5", "snippet": "def rolling_max(numbers: List[int]):\n    return [max(numbers)] + rolling_max(numbers[:-1])\n"}, {"id": "6", "snippet": "def rolling_max(numbers: List[int]):\n    return [max(numbers)] + rolling_max(numbers[:-1])\n"}, {"id": "7", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = numbers[0]\n    max_numbers = numbers[0]\n    for number in numbers[1:]:\n        if number > maximum:\n            maximum = number\n            max_numbers = number\n    return [maximum, max_numbers]\n"}, {"id": "8", "snippet": "def rolling_max(numbers: List[int]):\n    pass\n"}, {"id": "9", "snippet": "def rolling_max(numbers: List[int]):\n    num_sum = 0\n    result = []\n    for num in numbers:\n        num_sum += num\n        if num_sum >= MOMENT:\n            result.append(num)\n            num_sum -= MOMENT\n    return result\n"}]}
{"question_id": "HumanEval/90", "language": "python", "prompt": "\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n", "signature": "def next_smallest(lst):", "solutions": [{"id": "0", "snippet": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]"}, {"id": "1", "snippet": "def next_smallest(lst):\n    if len(lst) <= 1:\n        return None\n    else:\n        return lst[1]\n\n\n# Ex B.3"}, {"id": "2", "snippet": "def next_smallest(lst):\n    if lst == []:\n        return None\n    if lst[0] < lst[1]:\n        return lst[0]\n    else:\n        return lst[1]"}, {"id": "3", "snippet": "def next_smallest(lst):\n    if len(lst) <= 1:\n        return None\n    else:\n        return lst[1]\n    "}, {"id": "4", "snippet": "def next_smallest(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        i = lst[0]\n        for j in range(1, len(lst)):\n            if lst[j] < i:\n                i = lst[j]\n            else:\n                return i\n"}, {"id": "5", "snippet": "def next_smallest(lst):\n    return None"}, {"id": "6", "snippet": "def next_smallest(lst):\n    if lst:\n        return lst[0]\n    else:\n        return None"}, {"id": "7", "snippet": "def next_smallest(lst):\n    if len(lst) == 1:\n        return lst[0]\n\n    return next_smallest(lst[1:]) + lst[0]"}, {"id": "8", "snippet": "def next_smallest(lst):\n    if len(lst) <= 1:\n        return None\n    else:\n        return lst[1]"}, {"id": "9", "snippet": "def next_smallest(lst):\n    pass"}]}
{"question_id": "HumanEval/91", "language": "python", "prompt": "\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n", "signature": "def is_bored(S):", "solutions": [{"id": "0", "snippet": "def is_bored(S):\n    return S.count(\"I\")"}, {"id": "1", "snippet": "def is_bored(S):\n    return 0"}, {"id": "2", "snippet": "def is_bored(S):\n    return S.count('I') + S.count('?') + S.count('!')"}, {"id": "3", "snippet": "def is_bored(S):\n    return S.count('B')\n"}, {"id": "4", "snippet": "def is_bored(S):\n    return S.startswith('I')\n"}, {"id": "5", "snippet": "def is_bored(S):\n\n    if S.startswith(\"I\"):\n        return 1\n\n    else:\n        return 0"}, {"id": "6", "snippet": "def is_bored(S):\n    return 0 if S.startswith('I') and S.find('B') >= 0 else 1\n"}, {"id": "7", "snippet": "def is_bored(S):\n    count = 0\n    for c in S:\n        if c.isalpha():\n            count += 1\n    if count == 1:\n        return True\n    return False\n"}, {"id": "8", "snippet": "def is_bored(S):\n    return S.count(\"I\") + S.count(\"?\") + S.count(\"!\") == len(S)\n"}, {"id": "9", "snippet": "def is_bored(S):\n    return S.count('.') == 1 and S.count('?') == 1 and S.count('!') == 0"}]}
{"question_id": "HumanEval/92", "language": "python", "prompt": "\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False\n\n\n\n", "signature": "def any_int(x, y, z):", "solutions": [{"id": "0", "snippet": "def any_int(x, y, z):\n    return x == sum(map(int, str(y) + str(z))) and all(map(int, str(y) + str(z)))\n"}, {"id": "1", "snippet": "def any_int(x, y, z):\n    return x + y + z == sum([int(i) for i in str(x) + str(y) + str(z)])\n"}, {"id": "2", "snippet": "def any_int(x, y, z):\n    if x == y == z:\n        return True\n    else:\n        return False\n"}, {"id": "3", "snippet": "def any_int(x, y, z):\n    return x + y + z == sum([int(i) for i in str(x) + str(y) + str(z)])"}, {"id": "4", "snippet": "def any_int(x, y, z):\n    if x == y or x == z or y == z:\n        return True\n    elif is_int(x) == is_int(y) == is_int(z):\n        return True\n    else:\n        return False\n"}, {"id": "5", "snippet": "def any_int(x, y, z):\n    if x == y == z == 0:\n        return True\n    elif x == 0 or y == 0 or z == 0:\n        return False\n    else:\n        return any_int(x, y, z) or any_int(y, x, z) or any_int(x, y, z)"}, {"id": "6", "snippet": "def any_int(x, y, z):\n    return (x + y + z) % 1 == 0 and all(int(i) == i for i in str(x + y + z))\n"}, {"id": "7", "snippet": "def any_int(x, y, z):\n    return (x + y + z == 0) or (x + y == z) or (x + y == -z)"}, {"id": "8", "snippet": "def any_int(x, y, z):\n    return x + y + z == sum([int(i) for i in str(x + y + z)])\n"}, {"id": "9", "snippet": "def any_int(x, y, z):\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n"}]}
{"question_id": "HumanEval/93", "language": "python", "prompt": "\nWrite a function that takes a message, and encodes in such a\nway that it swaps case of all letters, replaces all vowels in\nthe message with the letter that appears 2 places ahead of that\nvowel in the english alphabet.\nAssume only letters.\n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n", "signature": "def encode(message):", "solutions": [{"id": "0", "snippet": "def encode(message):\n    new_message = []\n    for letter in message:\n        if letter.isalpha():\n            new_message.append(letter.upper())\n        else:\n            new_message.append(letter)\n    new_message = ''.join(new_message)\n    return new_message"}, {"id": "1", "snippet": "def encode(message):\n    \n    letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    return ''.join([letters[ord(letter) - 97] for letter in message])\n    "}, {"id": "2", "snippet": "def encode(message):\n    return ''.join([chr(ord('A') + (ord(c) - ord('a') + 1) % 26) for c in message])\n"}, {"id": "3", "snippet": "def encode(message):\n    encoded = ''\n    for letter in message:\n        if letter.isupper():\n            encoded += letter.lower()\n        elif letter.islower():\n            encoded += letter.upper()\n        else:\n            encoded += letter\n    return encoded"}, {"id": "4", "snippet": "def encode(message):\n    return ''.join([encode_letter(letter) for letter in message.lower()])\n"}, {"id": "5", "snippet": "def encode(message):\n    return ''.join([chr(ord(letter) + 2) if chr(ord(letter) + 2) in 'aeiouAEIOU' else letter for letter in message])"}, {"id": "6", "snippet": "def encode(message):\n    return ''.join([(string.ascii_uppercase[(chr(i + 65) if i + 65 < 26 else chr(i - 26)) if i - 26 >= 0 else chr(i)]) if chr(i + 65) in string.ascii_uppercase else chr(i) for i in message])\n"}, {"id": "7", "snippet": "def encode(message):\n    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n            encoded += alphabet[ord(letter) - ord('A')]\n        else:\n            encoded += letter\n    return encoded\n"}, {"id": "8", "snippet": "def encode(message):\npass"}, {"id": "9", "snippet": "def encode(message):\n    return ''.join([encode_letter(letter) for letter in message])"}]}
{"question_id": "HumanEval/94", "language": "python", "prompt": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n", "signature": "def skjkasdkd(lst):", "solutions": [{"id": "0", "snippet": "def skjkasdkd(lst):\n    max_prime = max(lst)\n    sum_digits = 0\n    for i in lst:\n        if i == max_prime:\n            sum_digits += i\n    return sum_digits\n"}, {"id": "1", "snippet": "def skjkasdkd(lst):\n    if len(lst) == 0:\n        return 0\n    return max(lst) + skjkasdkd(lst[1:])\n\n\n# Testing"}, {"id": "2", "snippet": "def skjkasdkd(lst):\n    return sum([i for i in lst if is_prime(i)])"}, {"id": "3", "snippet": "def skjkasdkd(lst):\n    return sum([int(d) for d in str(max(lst))])"}, {"id": "4", "snippet": "def skjkasdkd(lst):\n    max_digit = max(lst)\n    sum_digits = 0\n    for i in lst:\n        sum_digits += i\n        if i > max_digit:\n            return sum_digits\n"}, {"id": "5", "snippet": "def skjkasdkd(lst):\n    return sum(lst)"}, {"id": "6", "snippet": "def skjkasdkd(lst):\n    return lst[0]"}, {"id": "7", "snippet": "def skjkasdkd(lst):\n    max_num = max(lst)\n    return sum([int(x) for x in str(max_num)])\n\n\n# print(skjkasdkd([0,3,2,1,3,5,7,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))"}, {"id": "8", "snippet": "def skjkasdkd(lst):\n    for i in range(len(lst)):\n        if lst[i] > lst[i-1]:\n            lst[i] = lst[i-1] + lst[i]\n    return sum(lst)"}, {"id": "9", "snippet": "def skjkasdkd(lst):\n    max_prime = max(lst)\n    return sum([int(i) for i in str(max_prime)])"}]}
{"question_id": "HumanEval/95", "language": "python", "prompt": "\nGiven a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n", "signature": "def check_dict_case(dict):", "solutions": [{"id": "0", "snippet": "def check_dict_case(dict):\n\n    return all(key.islower() or key.isupper() for key in dict.keys())\n"}, {"id": "1", "snippet": "def check_dict_case(dict):\n    pass\n\n# TODO: Write a test for this function."}, {"id": "2", "snippet": "def check_dict_case(dict):\n\n    return all([key.islower() or key.isupper() for key in dict.keys()])"}, {"id": "3", "snippet": "def check_dict_case(dict):\n    return all([isinstance(key, str) for key in dict.keys()])\n"}, {"id": "4", "snippet": "def check_dict_case(dict):\n\n    for key in dict.keys():\n        if not (type(dict[key]) == str or type(dict[key]) == unicode):\n            return False\n\n    return True\n"}, {"id": "5", "snippet": "def check_dict_case(dict):\n    return all([key.islower() or key.isupper() for key in dict.keys()])"}, {"id": "6", "snippet": "def check_dict_case(dict):\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n    return True"}, {"id": "7", "snippet": "def check_dict_case(dict):\n    pass"}, {"id": "8", "snippet": "def check_dict_case(dict):\n    return all([isinstance(k, str) for k in dict.keys()])"}, {"id": "9", "snippet": "def check_dict_case(dict):\n    pass"}]}
{"question_id": "HumanEval/96", "language": "python", "prompt": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n", "signature": "def count_up_to(n):", "solutions": [{"id": "0", "snippet": "def count_up_to(n):\n\n    result = []\n    for i in range(n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"}, {"id": "1", "snippet": "def count_up_to(n):\n    pass\n"}, {"id": "2", "snippet": "def count_up_to(n):\n    pass"}, {"id": "3", "snippet": "def count_up_to(n):\n\n    count = []\n    for i in range(n+1):\n        if is_prime(i):\n            count.append(i)\n    return count"}, {"id": "4", "snippet": "def count_up_to(n):\n    count = []\n    for i in range(n):\n        if is_prime(i):\n            count.append(i)\n    return count"}, {"id": "5", "snippet": "def count_up_to(n):\n    return []"}, {"id": "6", "snippet": "def count_up_to(n):\n    result = []\n    for i in range(n+1):\n        if is_prime(i):\n            result.append(i)\n    return result\n"}, {"id": "7", "snippet": "def count_up_to(n):\n    # Your Code Here\n    return []\n    "}, {"id": "8", "snippet": "def count_up_to(n):\n    pass"}, {"id": "9", "snippet": "def count_up_to(n):\npass"}]}
{"question_id": "HumanEval/97", "language": "python", "prompt": "Complete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n", "signature": "def multiply(a, b):", "solutions": [{"id": "0", "snippet": "def multiply(a, b):\n    return a * b"}, {"id": "1", "snippet": "def multiply(a, b):\n    # Your code here\n    if a == 0:\n        return b\n    else:\n        return a * multiply(a, b)\n\n"}, {"id": "2", "snippet": "def multiply(a, b):\n    if b == 0:\n        return 0\n    return a % b\n"}, {"id": "3", "snippet": "def multiply(a, b):\n\n    return a * b"}, {"id": "4", "snippet": "def multiply(a, b):\n    a = str(a)\n    b = str(b)\n    if len(a)!= len(b):\n        raise ValueError(\"The numbers must be the same length.\")\n    c = 0\n    for i in range(len(a)):\n        c += int(a[i]) * int(b[i])\n    return c"}, {"id": "5", "snippet": "def multiply(a, b):\n    return 0\n"}, {"id": "6", "snippet": "def multiply(a, b):\n    return a * b"}, {"id": "7", "snippet": "def multiply(a, b):\n    return a * b\n"}, {"id": "8", "snippet": "def multiply(a, b):\n    return a * b"}, {"id": "9", "snippet": "def multiply(a, b):\n    return a * b"}]}
{"question_id": "HumanEval/98", "language": "python", "prompt": "\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n", "signature": "def count_upper(s):", "solutions": [{"id": "0", "snippet": "def count_upper(s):\n    result = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            result += 1\n    return result\n"}, {"id": "1", "snippet": "def count_upper(s):\n    # Your code here\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            count = count + 1\n    return count"}, {"id": "2", "snippet": "def count_upper(s):\n\n    counter = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            counter += 1\n    return counter"}, {"id": "3", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count = count + 1\n    return count\n"}, {"id": "4", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def count_upper(s):\n    return sum([1 for i in range(len(s)) if s[i].isupper()])\n"}, {"id": "6", "snippet": "def count_upper(s):\n    return 0 if s == '' else (len([i for i in s if i.isupper()]) - 1)\n"}, {"id": "7", "snippet": "def count_upper(s):\n\n    # TODO: 2. Implement and test this function.\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def count_upper(s):\n    cnt = 0\n    for i in range(len(s) - 1):\n        if s[i].isupper():\n            cnt += 1\n    return cnt"}, {"id": "9", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            count += 1\n        if s[i] == 'B':\n            count -= 1\n        if s[i] == 'C':\n            count += 1\n        if s[i] == 'D':\n            count -= 1\n    return count\n\n\n# Test Cases"}]}
{"question_id": "HumanEval/99", "language": "python", "prompt": "\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n", "signature": "def closest_integer(value):", "solutions": [{"id": "0", "snippet": "def closest_integer(value):\n    return int(round(closest_distance(value)))\n"}, {"id": "1", "snippet": "def closest_integer(value):\n    return int(round(float(value)))"}, {"id": "2", "snippet": "def closest_integer(value):\n\n    value = int(value)\n    i = 0\n    while value - i > 0:\n        i += 1\n    return i\n"}, {"id": "3", "snippet": "def closest_integer(value):\n    value = int(value)\n    return max(min(value, 999999), -9999999)\n"}, {"id": "4", "snippet": "def closest_integer(value):\n    value = int(value)\n    closest_int = 0\n    for i in range(1, 100):\n        if closest_int + i < value:\n            closest_int = i\n    return closest_int\n"}, {"id": "5", "snippet": "def closest_integer(value):\n    return int(round((value - min(value, key=lambda x: abs(x - value))) / (max(value, key=lambda x: abs(x - value)) + 0.00001)))\n"}, {"id": "6", "snippet": "def closest_integer(value):\n    return int(value)\n"}, {"id": "7", "snippet": "def closest_integer(value):\n    value = int(value)\n    if value < 0:\n        value += (-value)\n    return min((int(value), value))[1]\n"}, {"id": "8", "snippet": "def closest_integer(value):\n    value = int(value)\n    if value == 0:\n        return 0\n    elif value == 1:\n        return 1\n    elif value == 2:\n        return 2\n    else:\n        return int(round(value ** 0.5))\n"}, {"id": "9", "snippet": "def closest_integer(value):\n    return int(value) if int(value) % 1 == 0 else int(value) - 1\n"}]}
