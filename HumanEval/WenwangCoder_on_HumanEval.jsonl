{"question_id": "HumanEval/0", "language": "python", "prompt": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nFalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\nTrue\n", "signature": "def has_close_elements(numbers: List[float], threshold: float):", "solutions": [{"id": "0", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(num < threshold for num in numbers)\n"}, {"id": "1", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(number - target) < threshold for number, target in zip(numbers, numbers[1:]))\n"}, {"id": "2", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(number < threshold for number in numbers)\n"}, {"id": "3", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(near(number, threshold) for number in numbers)\n"}, {"id": "4", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    for n in numbers:\n        if abs(n - min(numbers)) < threshold:\n            return True\n    return False\n"}, {"id": "5", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(number - x) < threshold for number, x in zip(numbers, numbers[1:]))\n"}, {"id": "6", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(n1 - n2) < threshold for n1, n2 in zip(numbers[:-1], numbers[1:]))\n"}, {"id": "7", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(n - t) < threshold for n, t in zip(numbers, numbers[1:]))\n"}, {"id": "8", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(n - threshold) < abs(n - 1) for n in numbers)\n"}, {"id": "9", "snippet": "def has_close_elements(numbers: List[float], threshold: float):\n    return any(abs(num - val) < threshold for num, val in zip(numbers, numbers[1:]))\n"}]}
{"question_id": "HumanEval/1", "language": "python", "prompt": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n['()', '(())', '(()())']\n", "signature": "def separate_paren_groups(paren_string: str):", "solutions": [{"id": "0", "snippet": "def separate_paren_groups(paren_string: str):\n    return [s for s in re.split(r'\\((?:\\s*)?\\)', paren_string) if s]\n"}, {"id": "1", "snippet": "def separate_paren_groups(paren_string: str):\n    return [g for g in re.split(r'(\\(\\))', paren_string) if g]\n"}, {"id": "2", "snippet": "def separate_paren_groups(paren_string: str):\n    paren_string = paren_string.replace(' ', '')\n    return [x for x in paren_string.split('(') if x.strip()!= '']\n"}, {"id": "3", "snippet": "def separate_paren_groups(paren_string: str):\n    split_string = paren_string.split('(')\n    return split_string\n"}, {"id": "4", "snippet": "def separate_paren_groups(paren_string: str):\n    separated_groups = []\n    for group in paren_string.split('('):\n        separated_groups.append(group[:group.find(')')])\n    return separated_groups\n"}, {"id": "5", "snippet": "def separate_paren_groups(paren_string: str):\n    separate_groups = []\n    for group in paren_string.split('('):\n        group_split = group.split(')')\n        separate_groups.append(''.join(group_split))\n\n    return separate_groups\n"}, {"id": "6", "snippet": "def separate_paren_groups(paren_string: str):\n    separated_strings = []\n    for group in paren_string.split('('):\n        if group.count(')') > 0:\n            separated_strings.append(group.strip())\n    return separated_strings\n"}, {"id": "7", "snippet": "def separate_paren_groups(paren_string: str):\n    separated_string = []\n    for group in paren_string.split('('):\n        for string in group.split(')'):\n            separated_string.append(string)\n    return separated_string\n"}, {"id": "8", "snippet": "def separate_paren_groups(paren_string: str):\n    separated_groups = []\n    for group in paren_string.split('('):\n        if ')' in group:\n            group = group.strip('()')\n            separated_groups.append(group)\n        else:\n            separated_groups.append(group)\n    return separated_groups\n"}, {"id": "9", "snippet": "def separate_paren_groups(paren_string: str):\n    return [s for s in re.split('(\\(|\\))', paren_string) if s]\n"}]}
{"question_id": "HumanEval/10", "language": "python", "prompt": "Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome('')\n''\n>>> make_palindrome('cat')\n'catac'\n>>> make_palindrome('cata')\n'catac'\n", "signature": "def make_palindrome(string: str):", "solutions": [{"id": "0", "snippet": "def make_palindrome(string: str):\n\n    prefix = ''\n    for i in range(len(string)):\n        if string[i]!= prefix:\n            prefix = string[i+1:][::-1]\n            if string[i] == prefix:\n                return string[:i] + string[i+1:][::-1]\n    return string\n"}, {"id": "1", "snippet": "def make_palindrome(string: str):\n    prefix = ''\n    current_length = len(string)\n    for i in range(current_length):\n        for j in range(i + 1, current_length):\n            if string[i:j] == prefix + string[j:][::-1]:\n                prefix = string[i:j]\n                return prefix\n"}, {"id": "2", "snippet": "def make_palindrome(string: str):\n    prefix = ''\n    for c in string:\n        if c!= prefix:\n            prefix = c\n            continue\n        else:\n            break\n    return c + string[len(prefix):][::-1]\n"}, {"id": "3", "snippet": "def make_palindrome(string: str):\n\n    length = len(string)\n\n    if length < 2:\n        return string\n\n    prefix = ''\n    for i in range(length):\n        if string[i]!= prefix[-1]:\n            prefix += string[i]\n        else:\n            break\n\n    return string[::-1].replace(prefix, '')\n"}, {"id": "4", "snippet": "def make_palindrome(string: str):\n    if string == '':\n        return ''\n    prefix = [string[0]]\n    for i in range(1, len(string)):\n        if string[i]!= prefix[-1] and string[i-1]!= prefix[-2]:\n            prefix.append(string[i])\n        else:\n            break\n    return ''.join(prefix)\n"}, {"id": "5", "snippet": "def make_palindrome(string: str):\n    if string == '':\n        return ''\n\n    for i in range(len(string) - 1):\n        if string[:i+1] == string[-1:][::-1]:\n            return string[:i] + string[i] + string[i+1:]\n"}, {"id": "6", "snippet": "def make_palindrome(string: str):\n    reversed_string = string[::-1]\n    if string == reversed_string:\n        return string\n    else:\n        return reversed_string + string[1:][::-1]\n"}, {"id": "7", "snippet": "def make_palindrome(string: str):\n    length = len(string)\n    rev = string[::-1]\n    for i in range(length):\n        if rev[i]!= string[i]:\n            return string[:i] + rev[i][::-1] + string[i + 1:]\n    return string\n"}, {"id": "8", "snippet": "def make_palindrome(string: str):\n    length = len(string)\n    prefix = string[:length // 2]\n    suffix = string[length // 2:]\n\n    if prefix == suffix:\n        return string + prefix\n    else:\n        return string[:length - 1] + make_palindrome(prefix) + string[length - 1:]\n"}, {"id": "9", "snippet": "def make_palindrome(string: str):\n    prefix = ''\n    for c in string:\n        if c!= prefix[-1]:\n            prefix += c\n        else:\n            break\n    return prefix + string[::-1][len(prefix):]\n"}]}
{"question_id": "HumanEval/100", "language": "python", "prompt": "\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\n", "signature": "def make_a_pile(n):", "solutions": [{"id": "0", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n + 1, n + 2]\n    else:\n        return [n + 2]\n"}, {"id": "1", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n // 2, n // 2, n]\n    else:\n        return [n // 2, n, n + 1]\n"}, {"id": "2", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n + 1]\n    else:\n        return [n - 1] + [n + 2] + [n - 2]\n"}, {"id": "3", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n // 2, n // 2, n]\n    else:\n        return [n // 2, n + 1, n + 2]\n"}, {"id": "4", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n + 1, n + 2]\n    else:\n        return [n + 2, n + 1]\n"}, {"id": "5", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n // 2, n // 2 + 1, n]\n    else:\n        return [n // 2, n // 2, n + 1]\n"}, {"id": "6", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n + 1, n + 2]\n    return [n - 1, n - 2]\n"}, {"id": "7", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [n + 1] + make_a_pile(n // 2)\n"}, {"id": "8", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        return [n] * (n // 2)\n    else:\n        return [n - 1] + [n + 1 for n in range(1, n // 2)]\n"}, {"id": "9", "snippet": "def make_a_pile(n):\n    if n % 2 == 0:\n        n += 1\n\n    return [n ** 2 + 1, n ** 3, n ** 5]\n"}]}
{"question_id": "HumanEval/101", "language": "python", "prompt": "\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n", "signature": "def words_string(s):", "solutions": [{"id": "0", "snippet": "def words_string(s):\n    return s.split()\n"}, {"id": "1", "snippet": "def words_string(s):\n    words = s.split(',')\n    return words\n"}, {"id": "2", "snippet": "def words_string(s):\n    return s.split(',')\n"}, {"id": "3", "snippet": "def words_string(s):\n    return s.split(\",\")\n"}, {"id": "4", "snippet": "def words_string(s):\n    return s.split()\n"}, {"id": "5", "snippet": "def words_string(s):\n    words = s.split()\n    return words\n"}, {"id": "6", "snippet": "def words_string(s):\n\n    word_array = s.split(',')\n\n    return word_array\n"}, {"id": "7", "snippet": "def words_string(s):\n\n    words = s.split()\n    return words\n"}, {"id": "8", "snippet": "def words_string(s):\n    return s.split(\",\")\n"}, {"id": "9", "snippet": "def words_string(s):\n    return s.split()\n"}]}
{"question_id": "HumanEval/102", "language": "python", "prompt": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If\nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n", "signature": "def choose_num(x, y):", "solutions": [{"id": "0", "snippet": "def choose_num(x, y):\n    # Your code here\n    if x < 0 or y < 0:\n        return -1\n    elif x == 0 or y == 0:\n        return 0\n    else:\n        return x if x % 2 == 0 else y\n"}, {"id": "1", "snippet": "def choose_num(x, y):\n    if x < 0 or y < 0:\n        return -1\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    while x % 2 == 0 and y % 2 == 0:\n        x = x // 2\n        y = y // 2\n    while x % 2 == 1 and y % 2 == 1:\n        x = x // 2\n        y = y // 2\n    return x if x == 0 else y\n"}, {"id": "2", "snippet": "def choose_num(x, y):\n    if x > y:\n        (x, y) = (y, x)\n\n    if x % 2 == 0:\n        return x\n\n    answer = 0\n    for i in range(x, 0, -1):\n        if y % i == 0:\n            answer = i\n            break\n    return answer\n"}, {"id": "3", "snippet": "def choose_num(x, y):\n    if x < 0 or y < 0 or x > y:\n        return -1\n\n    # Python's integers are sorted in lexical order by the digits at each position.\n    # The \"count\" attribute stores the total number of times a given digit is in the range of the number.\n    count = [0] * (y + 1)\n\n    for num in range(x + 1):\n        count[num] = count[num - x] + 1\n\n    return count[y] if count[y] % 2 == 0 else -1\n"}, {"id": "4", "snippet": "def choose_num(x, y):\n    # Replace the pass below with your own code.\n    x = max(x, 0)\n    y = max(y, 0)\n    max_num = 0\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            max_num = i\n    return max_num\n"}, {"id": "5", "snippet": "def choose_num(x, y):\n    # TODO: Write your code here\n    if x < 0 or y < 0:\n        return -1\n    elif x == 0 and y == 0:\n        return 0\n    elif x == 0:\n        return x\n    elif y == 0:\n        return y\n    else:\n        result = x if x % 2 == 0 else y\n        result2 = y if y % 2 == 0 else x\n        return result if result % 2 == result2 % 2 else -1\n"}, {"id": "6", "snippet": "def choose_num(x, y):\n    if x < 0 or y < 0 or x > y:\n        return -1\n\n    return max(x, y) // 2 + min(x, y) // 2\n"}, {"id": "7", "snippet": "def choose_num(x, y):\n    # hint: to find out if x is even or odd, you should use the following\n    #       line:\n    #         if x % 2 == 0:\n    #             return x\n    #         else:\n    #             return y\n\n    # TODO: implement this function\n\n    if x % 2 == 0:\n        return x\n    else:\n        return y\n"}, {"id": "8", "snippet": "def choose_num(x, y):\n    # Base Case\n    if x == 0 and y == 0:\n        return 0\n    if x == 0:\n        return -1\n    if y == 0:\n        return -1\n\n    # Divide and Conquer\n    while x % 2 == 0 and y % 2 == 0:\n        x = x // 2\n        y = y // 2\n\n    # Reverse the reversed result\n    return x if x % 2 == 0 or y % 2 == 0 else y\n"}, {"id": "9", "snippet": "def choose_num(x, y):\n    # Base Case: x is even\n    if x == y:\n        return x\n\n    # Recursive Case: x is odd\n    elif x % 2 == 0:\n        return choose_num(x // 2, y)\n    else:\n        return choose_num(x, y // 2)\n"}]}
{"question_id": "HumanEval/103", "language": "python", "prompt": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"\n", "signature": "def rounded_avg(n, m):", "solutions": [{"id": "0", "snippet": "def rounded_avg(n, m):\n    avg = (n + m - 1) // m\n    if n > m:\n        avg = (avg + n - 1) // m\n\n    return bin(avg)[2:]\n"}, {"id": "1", "snippet": "def rounded_avg(n, m):\n    return \"0b\" + bin((n + m - 1) >> 1)[2:]\n"}, {"id": "2", "snippet": "def rounded_avg(n, m):\n    answer = \"\"\n    while n > 0 and m > 0:\n        answer = str(n % 2) + answer\n        n = n // 2\n        m = m // 2\n\n    if n > m:\n        answer = \"0b\" + answer\n\n    return answer\n"}, {"id": "3", "snippet": "def rounded_avg(n, m):\n\n    # The answer is the form \"0b1111\"\n    answer = \"\"\n    if n >= m:\n        answer = \"0b\" + bin(n)[2:]\n    else:\n        answer = \"0b\" + bin(m)[2:]\n\n    # Convert the answer to binary\n    answer = answer.replace(\"0b\", \"\")\n    answer = int(answer, 2)\n\n    # Round the answer to the nearest integer\n    return bin(answer)[2:].zfill(8)\n"}, {"id": "4", "snippet": "def rounded_avg(n, m):\n\n    # Hint: the following line, \"s = str(n) + str(m)\", is O(n^2)\n    s = str(n) + str(m)\n\n    # This line is O(n^2) but the answer is O(n) so we need to make sure\n    # that n and m are integers\n    if not isinstance(n, int) or not isinstance(m, int):\n        raise TypeError(\"Both arguments must be integers\")\n\n    if n > m:\n        return int(s, 2)\n    else:\n        return int(bin(n ^ m), 2)\n"}, {"id": "5", "snippet": "def rounded_avg(n, m):\n    n_bin = bin(n)\n    m_bin = bin(m)\n\n    if len(n_bin) < len(m_bin):\n        return '0' * (len(m_bin) - len(n_bin)) + n_bin\n    elif len(n_bin) > len(m_bin):\n        return '1' * (len(m_bin) - len(n_bin))\n\n    avg_bin = ''\n    for i in range(len(n_bin) - len(m_bin) + 1):\n        avg_bin += str(int(n_bin[i:i+len(m_bin)]))\n\n    return '0b' + avg_bin\n"}, {"id": "6", "snippet": "def rounded_avg(n, m):\n\n    # If n is greater than m, return -1\n    if n > m:\n        return -1\n\n    # Compute the average of the two numbers\n    avg = (n + m) // 2\n\n    # Convert the average to binary\n    rounded_avg_binary = bin(avg)[2:]\n\n    # Return the binary representation of the average\n    return \"0b\" + rounded_avg_binary\n"}, {"id": "7", "snippet": "def rounded_avg(n, m):\n    answer = \"\"\n    while n > 0 and m > 0:\n        answer = str(int(n % 2) + answer)\n        n = n // 2\n        m = m // 2\n    if m > 0:\n        if n > 0:\n            return \"0b\" + answer\n        else:\n            return \"0b\" + answer\n    else:\n        if n > 0:\n            return \"0b\" + answer\n        else:\n            return \"0b0\" + answer\n"}, {"id": "8", "snippet": "def rounded_avg(n, m):\n    n = max(n, m)\n    m = min(n, m)\n    avg = (n + m // 2) // 2\n    bin_avg = bin(avg)[2:]\n    if len(bin_avg) < m:\n        bin_avg = \"0\" * (m - len(bin_avg)) + bin_avg\n    return bin_avg\n"}, {"id": "9", "snippet": "def rounded_avg(n, m):\n    if m < n:\n        return -1\n\n    return bin(n + m)[2:]\n"}]}
{"question_id": "HumanEval/104", "language": "python", "prompt": "Given a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\n\nNote: Returned list should be sorted in increasing order.\n\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\n", "signature": "def unique_digits(x):", "solutions": [{"id": "0", "snippet": "def unique_digits(x):\n\n    digits = []\n    for num in x:\n        if num not in digits:\n            digits.append(num)\n\n    digits.sort()\n    return digits\n"}, {"id": "1", "snippet": "def unique_digits(x):\n    return sorted(list(set(x)))\n"}, {"id": "2", "snippet": "def unique_digits(x):\n    result = []\n    for num in x:\n        if num % 2!= 0:\n            result.append(num)\n    result.sort()\n    return result\n"}, {"id": "3", "snippet": "def unique_digits(x):\n\n    # remove the '0' from the list\n    x = list(filter(lambda x: x!= 0, x))\n\n    # split the list into two halves\n    half = len(x) // 2\n\n    return sorted(x[:half]) + sorted(x[half:])\n"}, {"id": "4", "snippet": "def unique_digits(x):\n    result = []\n    for num in x:\n        if num % 2!= 0:\n            result.append(num)\n    result.sort()\n    return result\n"}, {"id": "5", "snippet": "def unique_digits(x):\n\n    x = sorted(list(set(x)))\n    return x\n"}, {"id": "6", "snippet": "def unique_digits(x):\n\n    return sorted(list(set(x)))\n"}, {"id": "7", "snippet": "def unique_digits(x):\n\n    return sorted(list(set(x)))\n"}, {"id": "8", "snippet": "def unique_digits(x):\n    result = []\n    for i in range(len(x)):\n        if x[i] % 2!= 0:\n            result.append(x[i])\n    return result\n"}, {"id": "9", "snippet": "def unique_digits(x):\n    x.sort()\n    result = []\n    for i in range(0, len(x)):\n        if x[i] % 2!= 0:\n            result.append(x[i])\n    return result\n"}]}
{"question_id": "HumanEval/105", "language": "python", "prompt": "\nGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\nIf the array is empty, return an empty array:\narr = []\nreturn []\n\nIf the array has any strange number ignore it:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = ['One']\n", "signature": "def by_length(arr):", "solutions": [{"id": "0", "snippet": "def by_length(arr):\n    sorted_arr = sorted(arr)\n    reversed_arr = []\n    for i in sorted_arr:\n        reversed_arr.append(str(i))\n    return reversed_arr\n"}, {"id": "1", "snippet": "def by_length(arr):\n    arr.sort()\n    arr = arr[::-1]\n    if len(arr) == 0:\n        return []\n    return arr\n"}, {"id": "2", "snippet": "def by_length(arr):\n\n    if not arr:\n        return []\n\n    arr.sort()\n    arr_len = len(arr)\n\n    if arr_len <= 1:\n        return arr\n\n    arr_rev = []\n    i = 0\n    while i < arr_len - 1:\n        if arr[i] == arr[i + 1]:\n            i += 2\n        else:\n            arr_rev.append(arr[i])\n            i += 1\n    arr_rev.reverse()\n    return arr_rev\n"}, {"id": "3", "snippet": "def by_length(arr):\n    arr = sorted(arr)\n    if len(arr) < 1:\n        return []\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[1]\n    elif len(arr) == 3:\n        return arr[2]\n    elif len(arr) == 4:\n        return arr[3]\n    elif len(arr) == 5:\n        return arr[4]\n    elif len(arr) == 6:\n        return arr[5]\n    elif len(arr) == 7:\n        return arr[6]\n    elif len(arr) == 8:\n        return arr[7]\n    elif len(arr) == 9:\n        return arr[8]\n    else:\n        return []\n"}, {"id": "4", "snippet": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    arr.sort()\n    arr = arr[::-1]\n    result = []\n    for i in arr:\n        result.append(chr(i))\n    return result\n"}, {"id": "5", "snippet": "def by_length(arr):\n    if len(arr) == 0:\n        return []\n    arr = sorted(arr)\n    reverse = []\n    for i in range(len(arr)):\n        reverse.append(arr[i] * (len(arr) - i - 1))\n    reverse.reverse()\n    return arr + reverse\n"}, {"id": "6", "snippet": "def by_length(arr):\n    if not arr:\n        return []\n    arr = sorted(arr, reverse=True)\n    return arr[::-1]\n"}, {"id": "7", "snippet": "def by_length(arr):\n\n    if len(arr) == 0:\n        return []\n\n    arr = sorted(arr, reverse=True)\n    arr = arr[::-1]\n\n    return arr\n"}, {"id": "8", "snippet": "def by_length(arr):\n    arr = sorted(arr)\n    lengths = []\n    for i in range(len(arr)):\n        lengths.append(len(str(arr[i])))\n\n    # reverse the lengths array so that the last digit is the smallest number\n    # e.g. [1, -1, 55] -> [55, 1, -1]\n    for i in range(len(lengths) - 1):\n        for j in range(i + 1, len(lengths)):\n            if lengths[j] > lengths[i]:\n                arr[i] = arr[i] * 10 + lengths[i]\n                lengths[i] = 0\n    return arr\n"}, {"id": "9", "snippet": "def by_length(arr):\n    if not arr:\n        return []\n\n    arr.sort()\n    arr.reverse()\n\n    result = []\n    for i, digit in enumerate(arr):\n        if i % 3 == 0 and i!= 0:\n            result.append('Two')\n        elif i % 3 == 0:\n            result.append('Three')\n        elif i % 3 == 1:\n            result.append('Four')\n        elif i % 3 == 2:\n            result.append('Five')\n        elif i % 3 == 1:\n            result.append('Six')\n        elif i % 3 == 0:\n            result.append('Seven')\n        else:\n            result.append(digit)\n\n    return result\n"}]}
{"question_id": "HumanEval/106", "language": "python", "prompt": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == [1, 2, 6, 24, 15]\n", "signature": "def f(n):", "solutions": [{"id": "0", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i - 1))\n    return result\n"}, {"id": "1", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i - 1))\n    return result\n"}, {"id": "2", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i - 1))\n    return result\n"}, {"id": "3", "snippet": "def f(n):\n\n    if n == 0:\n        return [1]\n\n    return [x * (n - 1) for x in range(1, n + 1)]\n"}, {"id": "4", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i if i % 2 == 0 else sum(range(1, i + 1))))\n    return result\n"}, {"id": "5", "snippet": "def f(n):\n    if n <= 0:\n        return []\n\n    result = [1]\n    for i in range(1, n + 1):\n        result.append(result[i - 1] * i)\n    return result\n"}, {"id": "6", "snippet": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        result.append(i * (i if i % 2 == 0 else sum(range(1, i + 1))))\n    return result\n"}, {"id": "7", "snippet": "def f(n):\n    if n == 0:\n        return [1]\n    else:\n        result = f(n - 1)\n        result.extend([1])\n        return result\n"}, {"id": "8", "snippet": "def f(n):\n    if n == 0:\n        return [1]\n    else:\n        return [1] + [i * f(n - 1) for i in range(1, n + 1)]\n"}, {"id": "9", "snippet": "def f(n):\n\n    answer = []\n    for i in range(1, n + 1):\n        answer.append(i * (i if i % 2 == 0 else sum(range(1, i + 1))))\n    return answer\n"}]}
{"question_id": "HumanEval/107", "language": "python", "prompt": "\nGiven a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.\n", "signature": "def even_odd_palindrome(n):", "solutions": [{"id": "0", "snippet": "def even_odd_palindrome(n):\n    count = 0\n    for number in range(1, n):\n        if is_palindrome(number) and number % 2 == 0:\n            count += 1\n        if is_palindrome(number) and number % 2!= 0:\n            count += 1\n    return count, count + 1\n"}, {"id": "1", "snippet": "def even_odd_palindrome(n):\n    # Create a list that will store even and odd integer palindromes in the tuple.\n    even = []\n    odd = []\n\n    # Iterate through the range of n.\n    for i in range(1, n + 1):\n\n        # If the number is even, add it to even.\n        if i % 2 == 0:\n            even.append(i)\n\n        # If the number is odd, add it to odd.\n        elif i % 2 == 1:\n            odd.append(i)\n\n    return (len(even), len(odd))\n"}, {"id": "2", "snippet": "def even_odd_palindrome(n):\n    if n < 0:\n        return None\n\n    # find the difference between the last two numbers in the range\n    diff = n - 1\n    while diff > 0:\n        # if the number is even and the number is not odd\n        if n % 10 == 2:\n            # if the difference is even, then it is a palindrome\n            if diff % 2 == 0:\n                return (diff, n)\n        # otherwise, move up one step\n        diff -= 1\n\n    # if the number is odd, it is not a palindrome\n    if n % 10 == 1:\n        return (n, 1)\n\n    # if the number is even, then it is a palindrome\n    if n % 10 == 3:\n        return (n, 3)\n\n    # otherwise, return None\n    return None\n"}, {"id": "3", "snippet": "def even_odd_palindrome(n):\n\n    evens = []\n    odds = []\n    if n <= 1:\n        return (1, 1)\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            evens.append(i)\n        else:\n            odds.append(i)\n\n    return (evens, odds)\n"}, {"id": "4", "snippet": "def even_odd_palindrome(n):\n    if n < 10:\n        return (0, 0)\n    elif n % 2 == 0:\n        return (1, n)\n    elif n % 2 == 1:\n        return (2, n)\n    else:\n        l = []\n        for i in range(3, n, 2):\n            if is_palindrome(i):\n                l.append(i)\n        return tuple(l)\n"}, {"id": "5", "snippet": "def even_odd_palindrome(n):\n    return tuple(filter(\n        lambda x: x % 2 == 0 or x % 4 == 0,\n        range(1, n + 1)\n    ))\n"}, {"id": "6", "snippet": "def even_odd_palindrome(n):\n\n    even_odd_palindromes = ()\n    for i in range(n):\n        if i % 2 == 0:\n            even_odd_palindromes += (i,)\n        if i % 2!= 0:\n            even_odd_palindromes += (i + 1,)\n\n    return (even_odd_palindromes,)\n"}, {"id": "7", "snippet": "def even_odd_palindrome(n):\n    result = []\n    for number in range(1, n + 1):\n        if is_palindrome(number) and number % 2 == 0:\n            result.append(number)\n    return tuple(result)\n"}, {"id": "8", "snippet": "def even_odd_palindrome(n):\n    if n < 1:\n        return (0, 0)\n    elif n == 1:\n        return (1, 1)\n    elif n % 2 == 0:\n        return (2, n)\n    elif n % 2!= 0:\n        return (3, n)\n    start = 1\n    end = n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if is_palindrome(mid):\n            if mid % 2 == 0:\n                end = mid - 1\n            else:\n                start = mid + 1\n        else:\n            if mid % 2 == 1:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return (start, end)\n"}, {"id": "9", "snippet": "def even_odd_palindrome(n):\n    result = ()\n    if n < 2:\n        return result\n    for number in range(1, n + 1):\n        if is_palindrome(number):\n            result += (number,)\n    return result\n"}]}
{"question_id": "HumanEval/108", "language": "python", "prompt": "\nWrite a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([]) == 0\n>>> count_nums([-1, 11, -11]) == 1\n>>> count_nums([1, 1, 2]) == 3\n", "signature": "def count_nums(arr):", "solutions": [{"id": "0", "snippet": "def count_nums(arr):\n    total = 0\n    for i in arr:\n        if sum([int(j) for j in str(i)]) > 0:\n            total += 1\n    return total\n"}, {"id": "1", "snippet": "def count_nums(arr):\n    tot = 0\n    for num in arr:\n        if sum([int(x) for x in str(num)]) > 0:\n            tot += 1\n    return tot\n"}, {"id": "2", "snippet": "def count_nums(arr):\n    total = 0\n    for i in arr:\n        if i > 0:\n            total += i\n    return total\n"}, {"id": "3", "snippet": "def count_nums(arr):\n    if len(arr) == 0:\n        return 0\n    total = 0\n    for i in arr:\n        total += i\n        if total > 0:\n            total = -total\n    return total\n"}, {"id": "4", "snippet": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum([int(d) for d in str(num)]) > 0:\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def count_nums(arr):\n\n    if not arr:\n        return 0\n\n    total = 0\n\n    for digit in arr:\n        total += digit * (10 - digit)\n\n    return total\n"}, {"id": "6", "snippet": "def count_nums(arr):\n    if not arr:\n        return 0\n    total = 0\n    for num in arr:\n        total += num * (10 - num)\n    return total\n"}, {"id": "7", "snippet": "def count_nums(arr):\n    if not arr:\n        return 0\n\n    tot = 0\n    for n in arr:\n        if sum([int(x) for x in str(n)]) > 0:\n            tot += 1\n    return tot\n"}, {"id": "8", "snippet": "def count_nums(arr):\n    total = 0\n    for num in arr:\n        if sum([int(d) for d in str(num)]) > 0:\n            total += 1\n    return total\n"}, {"id": "9", "snippet": "def count_nums(arr):\n    tot = 0\n    for x in arr:\n        if x > 0:\n            tot += x % 10\n        else:\n            tot -= x % 10\n    return tot\n"}]}
{"question_id": "HumanEval/109", "language": "python", "prompt": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\n\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\n\nNote: The given list is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball([3, 4, 5, 1, 2])==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball([3, 5, 4, 1, 2])==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.\n\n", "signature": "def move_one_ball(arr):", "solutions": [{"id": "0", "snippet": "def move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n\n    last = arr[0]\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] >> 1\n        if arr[i] == last:\n            arr[i] = 0\n        else:\n            arr[i] = arr[i] + 1\n        last = arr[i]\n    return True\n"}, {"id": "1", "snippet": "def move_one_ball(arr):\n    if not arr:\n        return True\n    start = arr[0]\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] >> 1\n        if arr[i] == start:\n            arr[i] = start + 1\n            return False\n    arr[-1] = start + 1\n    return True\n"}, {"id": "2", "snippet": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    if len(arr) == 1:\n        arr.insert(0, arr.pop())\n        return move_one_ball(arr)\n\n    mid = len(arr) // 2\n    first = arr[0]\n    second = arr[mid]\n\n    if second > first:\n        return move_one_ball(arr[mid:])\n    else:\n        arr[0] = second\n        arr[mid] = first\n        return True\n"}, {"id": "3", "snippet": "def move_one_ball(arr):\n    return sorted(arr)[-1] >> 1\n"}, {"id": "4", "snippet": "def move_one_ball(arr):\n\n    # Check if the given array is empty\n    if not arr:\n        return True\n\n    # The given array should have at least one element\n    if len(arr) == 1:\n        return arr[0]\n\n    # The given array should have at least two elements\n    if len(arr) < 2:\n        return False\n\n    # The array starts from the first element of the array\n    start = arr[0]\n\n    # The given array is sorted\n    is_sorted = True\n\n    # The first element of the array is at the start of the array\n    current = start\n\n    # The array is not empty\n    if arr[0] == start:\n        # The first element of the array is the same as the starting element\n        is_sorted = False\n    else:\n        # The second element of the array is the same as the starting element\n        for i in range(1, len(arr)):\n            # If the current element is equal t"}, {"id": "5", "snippet": "def move_one_ball(arr):\n    counter = 0\n    n = len(arr)\n    arr_copy = arr[:]\n    while counter < n:\n        i = randint(0, n - 1)\n        arr[i] = arr_copy[i + counter]\n        arr[i + counter] = arr_copy[i]\n        counter += 1\n    if arr == arr_copy:\n        return True\n    else:\n        return False\n"}, {"id": "6", "snippet": "def move_one_ball(arr):\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n\n    if arr[0] > arr[-1]:\n        arr.reverse()\n        return move_one_ball(arr)\n    return False\n"}, {"id": "7", "snippet": "def move_one_ball(arr):\n    if not arr:\n        return True\n    if len(arr) == 1:\n        return arr[0] == arr[0]\n    last = arr[-1]\n    i = len(arr) - 1\n    while i >= 0:\n        arr[i] = arr[i + 1]\n        if arr[i] > last:\n            arr[i + 1] = last\n            return True\n        i -= 1\n    return False\n"}, {"id": "8", "snippet": "def move_one_ball(arr):\n    n = len(arr)\n    if n < 2:\n        return True\n\n    i = 0\n    while i < n:\n        i += 1\n\n        if arr[i] > arr[i - 1]:\n            arr[i - 1], arr[i] = arr[i], arr[i - 1]\n            return True\n\n    return False\n"}, {"id": "9", "snippet": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n\n    if arr[0] < arr[-1]:\n        return False\n\n    i = 0\n    while i!= len(arr) - 1 and arr[i + 1] < arr[i]:\n        i += 1\n\n    if i == len(arr) - 1:\n        return False\n\n    arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return True\n"}]}
{"question_id": "HumanEval/11", "language": "python", "prompt": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'\n", "signature": "def string_xor(a: str, b: str):", "solutions": [{"id": "0", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "1", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "2", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "3", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result\n"}, {"id": "4", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "5", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i, x in enumerate(a):\n        for j, y in enumerate(b):\n            if i < j:\n                result += str(int(x) ^ int(y))\n            elif i == j:\n                result += '1'\n            else:\n                result += '0'\n    return result\n"}, {"id": "6", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "7", "snippet": "def string_xor(a: str, b: str):\n\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "8", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}, {"id": "9", "snippet": "def string_xor(a: str, b: str):\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n"}]}
{"question_id": "HumanEval/110", "language": "python", "prompt": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nIt is assumed that the input lists will be non-empty.\n", "signature": "def exchange(lst1, lst2):", "solutions": [{"id": "0", "snippet": "def exchange(lst1, lst2):\n    # Base case. If both lists are empty, return \"YES\"\n    if lst1 == [] and lst2 == []:\n        return \"YES\"\n\n    # Determine if there are any elements in both lists\n    if lst1 == []:\n        return \"NO\"\n    if lst2 == []:\n        return \"NO\"\n\n    # Exchange the first element if any of the elements in the lists are even\n    if lst1[0] % 2 == 0:\n        return exchange(lst1[1:], lst2)\n    else:\n        return \"NO\"\n"}, {"id": "1", "snippet": "def exchange(lst1, lst2):\n    if lst1 == [] or lst2 == []:\n        return \"NO\"\n    if lst1[0] % 2!= lst2[0] % 2:\n        return \"YES\"\n    return \"NO\"\n"}, {"id": "2", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) < 2 or len(lst2) < 2:\n        return \"NO\"\n    if lst1[0] % 2!= 0 or lst2[0] % 2!= 0:\n        return \"NO\"\n    if lst1[1] % 2!= 0:\n        return \"NO\"\n    if lst2[1] % 2!= 0:\n        return \"NO\"\n    for i in range(2, len(lst1)):\n        if lst1[i] % 2!= 0 and lst2[i] % 2 == 0:\n            return \"YES\"\n    return \"NO\"\n"}, {"id": "3", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) > 0 and len(lst2) > 0:\n        if lst1[0] % 2 == 0:\n            for i in range(len(lst2)):\n                if lst2[i] % 2 == 0:\n                    lst1.pop(0)\n                    lst2.pop(0)\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"}, {"id": "4", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) < 2 or len(lst2) < 2:\n        return \"NO\"\n    if lst1[0] % 2!= 0 or lst2[0] % 2!= 0:\n        return \"YES\"\n    even_lst = []\n    odd_lst = []\n    for i in range(len(lst1)):\n        if lst1[i] % 2 == 0:\n            even_lst.append(lst1[i])\n        else:\n            odd_lst.append(lst2[i])\n    return exchange(even_lst, odd_lst)\n"}, {"id": "5", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) == 0:\n        return \"YES\"\n    elif len(lst2) == 0:\n        return \"NO\"\n    elif lst1[0] % 2 == 0:\n        return exchange(lst1[1:], lst2[1:])\n    elif lst2[0] % 2 == 0:\n        return exchange(lst1, lst2[1:])\n    else:\n        return \"NO\"\n"}, {"id": "6", "snippet": "def exchange(lst1, lst2):\n\n    if len(lst1) == 0:\n        return \"YES\"\n    if len(lst2) == 0:\n        return \"NO\"\n    if lst1[0] % 2 == 0 and lst2[0] % 2 == 0:\n        return \"NO\"\n    if lst1[0] % 2 == 0:\n        return \"YES\"\n    if lst2[0] % 2 == 0:\n        return \"NO\"\n\n    return \"YES\"\n"}, {"id": "7", "snippet": "def exchange(lst1, lst2):\n\n    if lst1 == [] or lst2 == []:\n        return \"YES\"\n    if lst1[0] % 2!= lst2[0] % 2:\n        return \"NO\"\n    else:\n        return exchange(lst1[1:], lst2)\n"}, {"id": "8", "snippet": "def exchange(lst1, lst2):\n    if len(lst1) < len(lst2):\n        smaller = lst1\n        bigger = lst2\n    else:\n        smaller = lst2\n        bigger = lst1\n\n    for i in range(len(smaller)):\n        if smaller[i] % 2!= 0:\n            if bigger[i] % 2 == 0:\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            if bigger[i] % 2 == 0:\n                return \"NO\"\n            else:\n                return \"YES\"\n"}, {"id": "9", "snippet": "def exchange(lst1, lst2):\n\n    # Base Case: Even numbers are in lst2\n    if lst2 == []:\n        return \"NO\"\n\n    # Recursive Case: Even numbers are in lst1\n    elif lst1 == []:\n        return \"YES\"\n\n    # Recursive Case: lst1 is even\n    else:\n        if lst1[0] % 2 == 0:\n            return exchange(lst1[1:], lst2[1:])\n        else:\n            return \"NO\"\n"}]}
{"question_id": "HumanEval/111", "language": "python", "prompt": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n", "signature": "def histogram(test):", "solutions": [{"id": "0", "snippet": "def histogram(test):\n    result = {}\n    for letter in test:\n        if letter in result:\n            result[letter] += 1\n        else:\n            result[letter] = 1\n    return result\n"}, {"id": "1", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"}, {"id": "2", "snippet": "def histogram(test):\n    result = {}\n\n    for i in test:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n\n    return result\n"}, {"id": "3", "snippet": "def histogram(test):\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n"}, {"id": "4", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n"}, {"id": "5", "snippet": "def histogram(test):\n    d = {}\n    for letter in test:\n        if letter not in d:\n            d[letter] = 1\n        else:\n            d[letter] += 1\n    return d\n"}, {"id": "6", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter in hist:\n            hist[letter] = hist[letter] + 1\n        else:\n            hist[letter] = 1\n\n    max_count = max(hist.values())\n    for letter in hist:\n        if hist[letter] == max_count:\n            print('{}: {}'.format(letter, hist[letter]))\n\n    return hist\n"}, {"id": "7", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n"}, {"id": "8", "snippet": "def histogram(test):\n    hist = {}\n    for letter in test:\n        if letter not in hist:\n            hist[letter] = 1\n        else:\n            hist[letter] += 1\n    return hist\n"}, {"id": "9", "snippet": "def histogram(test):\n    d = {}\n    for letter in test:\n        if letter in d:\n            d[letter] += 1\n        else:\n            d[letter] = 1\n    return d\n"}]}
{"question_id": "HumanEval/112", "language": "python", "prompt": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n", "signature": "def reverse_delete(s, c):", "solutions": [{"id": "0", "snippet": "def reverse_delete(s, c):\n\n    if len(s) == 0:\n        return s, False\n\n    if s[0] == c:\n        s = s[1:]\n        return s, True\n\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n        if s[i]!= c:\n            return s[i + 1:j], False\n        i += 2\n        j -= 2\n\n    return s, True\n"}, {"id": "1", "snippet": "def reverse_delete(s, c):\n\n    if not s or not c:\n        return s, False\n\n    left, right = 0, len(s) - 1\n\n    while left <= right:\n        if s[left]!= c[right]:\n            return s[:left], True\n        left += 1\n        right -= 1\n\n    return s[:left], False\n"}, {"id": "2", "snippet": "def reverse_delete(s, c):\n    if len(s) <= 1 or len(c) <= 1:\n        return s, False\n    if s[-1] == c[-1]:\n        return s[:-1], True\n    return reverse_delete(s[1:], c[:-1])\n"}, {"id": "3", "snippet": "def reverse_delete(s, c):\n    if len(s) == 0:\n        return (c, True)\n    elif len(s) == 1:\n        return (s, False)\n    elif s[0] == c[-1]:\n        return reverse_delete(s[1:], c[:-1])\n    else:\n        return (s[0], False) + reverse_delete(s[1:], c)\n"}, {"id": "4", "snippet": "def reverse_delete(s, c):\n    if s == \"\":\n        return (\"\", True)\n    if c == \"\":\n        return (s, True)\n\n    start = 0\n    end = len(s) - 1\n\n    while start <= end:\n        if s[start] == c[end]:\n            start += 1\n            end -= 1\n        else:\n            return (s[:start], False)\n\n    return (s[:start], True)\n"}, {"id": "5", "snippet": "def reverse_delete(s, c):\n    if not s or not c:\n        return s, False\n\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == c[i]:\n            s[i], c[i] = c[i], s[i]\n\n    return s, True\n"}, {"id": "6", "snippet": "def reverse_delete(s, c):\n    if len(s) <= 1:\n        return s, False\n    if len(c) <= 1:\n        return s[::-1], False\n    if s[0] == c[0]:\n        return reverse_delete(s[1:], c[1:])\n    return reverse_delete(s[1:], c), True\n"}, {"id": "7", "snippet": "def reverse_delete(s, c):\n    if len(s) == 0:\n        return (\"\", True)\n    if len(c) == 0:\n        return (s, True)\n    if s[0] == c[0]:\n        s = s[1:]\n        c = c[1:]\n        return (s, reverse_delete(s, c))\n    return (s[0], False)\n"}, {"id": "8", "snippet": "def reverse_delete(s, c):\n    # Iterate through string s and delete every character in c that is not in s\n    # and check if s == c and return result\n    for i in range(len(s)):\n        if s[i] not in c:\n            result = s[:i] + s[i+1:]\n            return result, True\n    return s, False\n"}, {"id": "9", "snippet": "def reverse_delete(s, c):\n    if s == \"\":\n        return \"\", True\n    elif s[0] == c:\n        return s[1:], False\n    else:\n        return reverse_delete(s[1:], c) + s, True\n"}]}
{"question_id": "HumanEval/113", "language": "python", "prompt": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n", "signature": "def odd_count(lst):", "solutions": [{"id": "0", "snippet": "def odd_count(lst):\n    result = []\n    for string in lst:\n        result += [\"the number of odd elements \" + str(len(string)) + \"n the str\" + string[0:len(string) // 2] + \" of the \" + string[0:len(string) // 2] + \"nput.\"]\n    return result\n"}, {"id": "1", "snippet": "def odd_count(lst):\n    output = []\n    for i in lst:\n        output.append(\"the number of odd elements \"+str(len(i)%2)+\"n the \"+i)\n    return output\n"}, {"id": "2", "snippet": "def odd_count(lst):\n\n    result = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            result.append(i)\n\n    return result\n"}, {"id": "3", "snippet": "def odd_count(lst):\n\n    output = []\n    for item in lst:\n        if len(item) % 2 == 1:\n            output.append(item)\n    return output\n"}, {"id": "4", "snippet": "def odd_count(lst):\n    output = []\n\n    for string in lst:\n        if len(string) % 2 == 0:\n            string = string + 'n'\n\n        output.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(len(string), string[0], len(string)))\n\n    return output\n"}, {"id": "5", "snippet": "def odd_count(lst):\n\n    output = []\n    for i in lst:\n        for j in i:\n            if int(j) % 2 == 0:\n                output.append(j)\n    return output\n"}, {"id": "6", "snippet": "def odd_count(lst):\n\n    output = []\n\n    for s in lst:\n        n = len(s)\n        if n % 2 == 0:\n            output.append(s)\n\n    return output\n"}, {"id": "7", "snippet": "def odd_count(lst):\n    result = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(\n                len(i), \" of \" if len(i) > 1 else \"\", len(i)))\n        else:\n            result.append(\"the number of odd elements {}n the str{} of the {}nput.\".format(\n                len(i), \" of \" if len(i) > 1 else \"\", len(i)))\n    return result\n"}, {"id": "8", "snippet": "def odd_count(lst):\n    result = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            result.append(i)\n    return result\n"}, {"id": "9", "snippet": "def odd_count(lst):\n    result = []\n    for i in lst:\n        num = 0\n        for j in i:\n            if j == '1':\n                num += 1\n        if num % 2!= 0:\n            result.append(i)\n    return result\n"}]}
{"question_id": "HumanEval/114", "language": "python", "prompt": "\nGiven an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n", "signature": "def minSubArraySum(nums):", "solutions": [{"id": "0", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    total = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = num if num < 0 else current_sum + num\n        if current_sum < 0:\n            current_sum = 0\n        if current_sum > total:\n            total = current_sum\n    return total\n"}, {"id": "1", "snippet": "def minSubArraySum(nums):\n\n    total = 0\n    mx = float('inf')\n\n    for num in nums:\n        total += num\n\n        if total < 0:\n            res = total\n            mx = total\n            total = 0\n\n    return mx if mx < 0 else res\n"}, {"id": "2", "snippet": "def minSubArraySum(nums):\n\n    # base case\n    if not nums:\n        return 0\n\n    # start at the end\n    lo, hi = 0, len(nums) - 1\n\n    # keep going until we hit the end\n    while hi >= lo:\n        # subtract the current sum from the number of remaining elements\n        # and update the hi index\n        lo -= 1\n        hi -= 1\n        sum = nums[hi] + nums[lo]\n        if sum < 0:\n            lo += 1\n        elif sum > 0:\n            hi += 1\n    return hi\n"}, {"id": "3", "snippet": "def minSubArraySum(nums):\n\n    # base cases\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n\n    prefix_sum = nums[0]\n    sum = nums[0]\n\n    for num in nums[1:]:\n        sum = num + sum\n        prefix_sum = min(prefix_sum, sum)\n\n    return prefix_sum\n"}, {"id": "4", "snippet": "def minSubArraySum(nums):\n    current_sum = 0\n    min_sum = float('inf')\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum - min_sum)\n    return min_sum\n"}, {"id": "5", "snippet": "def minSubArraySum(nums):\n    # special cases\n    if not nums:\n        return 0\n\n    start, end = 0, len(nums) - 1\n\n    # can only sum up to len(nums)\n    if end == 0:\n        return nums[0]\n\n    # find the middle element in the array\n    mid = (start + end) // 2\n\n    # can only sum up to mid index\n    if nums[mid] > 0:\n        return min(nums[mid] + minSubArraySum(nums[:mid]), nums[mid])\n    else:\n        return minSubArraySum(nums[:mid])\n"}, {"id": "6", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    preSum = nums[0]\n    result = nums[0]\n    for num in nums[1:]:\n        result = num if result < 0 else min(result, num)\n        preSum = min(preSum + num, result)\n    return preSum\n"}, {"id": "7", "snippet": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    target = nums[0]\n    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n        if total < 0:\n            total = 0\n            target = nums[i]\n\n        if total > target:\n            return 0\n\n    return target\n"}, {"id": "8", "snippet": "def minSubArraySum(nums):\n    current_sum = 0\n    min_sum = 0\n    for i in range(len(nums)):\n        if i == 0:\n            continue\n        current_sum += nums[i]\n        if current_sum < 0:\n            min_sum = min(min_sum, i - 1)\n        if current_sum > 0:\n            min_sum = min(min_sum, i + 1)\n    return min_sum\n"}, {"id": "9", "snippet": "def minSubArraySum(nums):\n\n    # base case\n    if not nums:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    result = nums[0]\n    sum = nums[0]\n\n    for i in range(1, len(nums)):\n        sum = nums[i] + min(sum, nums[i])\n        result = min(result, sum)\n\n    return result\n"}]}
{"question_id": "HumanEval/115", "language": "python", "prompt": "\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\nInput:\ngrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity : 1\nOutput: 6\n\nExample 2:\nInput:\ngrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity : 2\nOutput: 5\n\nExample 3:\nInput:\ngrid : [[0,0,0], [0,0,0]]\nbucket_capacity : 5\nOutput: 0\n\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n", "signature": "def max_fill(grid, capacity):", "solutions": [{"id": "0", "snippet": "def max_fill(grid, capacity):\n    # Create empty buckets\n    buckets = [[0] * capacity for _ in range(len(grid))]\n\n    # Loop through rows of grid\n    for r in range(len(grid)):\n        # Loop through columns of grid\n        for c in range(len(grid[0])):\n            # Insert empty buckets at the current location\n            buckets[r][c] = grid[r][c]\n\n            # Insert buckets at the current location until the next empty bucket\n            while buckets[r][c] == 0:\n                # Insert empty buckets at the next location\n                buckets[r][c] = grid[r + 1][c]\n\n                # Increment location and update capacity\n                r += 1\n                c += 1\n\n    # Find the max capacity that can be used to fill all buckets"}, {"id": "1", "snippet": "def max_fill(grid, capacity):\n    if grid.shape[0] <= capacity or grid.shape[1] <= capacity:\n        return 0\n\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == 1:\n                bucket_capacity = len(buckets(grid, i, j, 1))\n                if bucket_capacity > capacity:\n                    grid[i][j] = 1\n                    grid[i][j - 1] = 1\n                    grid[i - 1][j] = 1\n                    grid[i + 1][j] = 1\n                    grid[i + 1][j - 1] = 1\n                    grid[i + 1][j + 1] = 1\n                    bucket_capacity -= 1\n\n    return grid.sum()\n"}, {"id": "2", "snippet": "def max_fill(grid, capacity):\n    bucket_capacity = len(grid[0]) * len(grid)\n    if bucket_capacity < capacity:\n        return 0\n    elif bucket_capacity > capacity:\n        return 1\n    else:\n        return sum([1 for i in range(len(grid)) if grid[i][0] and grid[i][-1]])\n"}, {"id": "3", "snippet": "def max_fill(grid, capacity):\n    return 0 if sum([len(w) for w in grid]) <= capacity else 1\n"}, {"id": "4", "snippet": "def max_fill(grid, capacity):\n    if capacity <= 0:\n        return 0\n    elif grid.length <= capacity:\n        return grid.length\n    else:\n        return max([grid.length, max_fill(grid[1:], capacity)])\n"}, {"id": "5", "snippet": "def max_fill(grid, capacity):\n    bucket_capacity = len(grid[0]) * 1\n    if capacity <= bucket_capacity:\n        return 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 0:\n                grid[i][j] = 1\n                for k in range(len(grid)):\n                    if grid[k][j] == 0:\n                        grid[k][j] = 1\n                        break\n                for l in range(len(grid)):\n                    if grid[l][i] == 0:\n                        grid[l][i] = 1\n                        break\n                for m in range(len(grid)):\n                    if grid[m][l"}, {"id": "6", "snippet": "def max_fill(grid, capacity):\n    if grid.shape[0] <= grid.shape[1] and grid.shape[0] >= 1 and grid.shape[1] >= 1:\n        # this is a rectangular grid\n        return 0\n\n    if grid.shape[0] == 0:\n        return 0\n\n    buckets = [[0 for _ in range(grid.shape[1])] for _ in range(grid.shape[1])]\n\n    for i in range(grid.shape[1]):\n        for j in range(grid.shape[1]):\n            if grid[0][i] and grid[1][j] and grid[2][i] and grid[3][j]:\n                buckets[i][j] = 1\n            elif not grid[0][i] and not grid[1][j] and not grid[2][i]:\n                buckets[i][j] = 1\n            elif not grid[0][i] and grid[1][j] and not grid[2][i]:\n                buckets[i][j] ="}, {"id": "7", "snippet": "def max_fill(grid, capacity):\n    if len(grid) < 2:\n        return 0\n\n    num_buckets = len(grid[0])\n    result = 0\n    for i in range(num_buckets):\n        for j in range(num_buckets):\n            if grid[0][i] and grid[1][j]:\n                result = max(result, 1 * grid[0][i] + 1 * grid[1][j] + grid[0][i] + grid[1][j])\n\n    return result + max_fill(grid, capacity - grid[0][0].sum())\n"}, {"id": "8", "snippet": "def max_fill(grid, capacity):\n    if not all([len(row) == len(grid[0]) for row in grid]):\n        raise ValueError(\"Input grid is not a rectangular grid\")\n\n    # TODO: Implement this function\n    return 0\n"}, {"id": "9", "snippet": "def max_fill(grid, capacity):\n    if grid.shape[0] <= 2 or grid.shape[1] <= 2:\n        return 0\n\n    count = 0\n    for i in range(grid.shape[0]):\n        for j in range(grid.shape[1]):\n            if grid[i][j] == 1:\n                bucket = get_bucket(grid, i, j, capacity)\n                if bucket is not None:\n                    grid[i][j] = bucket\n                    count += 1\n\n    return count\n"}]}
{"question_id": "HumanEval/116", "language": "python", "prompt": "\nIn this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n", "signature": "def sort_array(arr):", "solutions": [{"id": "0", "snippet": "def sort_array(arr):\n    arr_len = len(arr)\n    bin_str = '{:b}'.format(arr_len)\n    sorted_arr = []\n    for i in range(arr_len):\n        binary_idx = int(bin_str[i])\n        if binary_idx < 0:\n            binary_idx += arr_len\n        sorted_arr.append(binary_idx)\n    return sorted_arr\n"}, {"id": "1", "snippet": "def sort_array(arr):\n    if not arr:\n        return arr\n    k = len(arr) // 2\n    arr = sorted(arr, key=lambda x: bin(x).count(\"1\"))\n    return arr[k:] + arr[:k]\n"}, {"id": "2", "snippet": "def sort_array(arr):\n    sort_array_helper(arr, 0, len(arr))\n    return arr\n"}, {"id": "3", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count(\"1\"))\n"}, {"id": "4", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n"}, {"id": "5", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(int(x)).count(\"1\"))\n"}, {"id": "6", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(int(x)).count('1'))\n"}, {"id": "7", "snippet": "def sort_array(arr):\n    result = []\n\n    for num in arr:\n        if num == 0:\n            result.append(0)\n            continue\n\n        for digit in sorted(str(num), reverse=True):\n            result.append(int(digit))\n            result.pop(0)\n\n    return result\n"}, {"id": "8", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n"}, {"id": "9", "snippet": "def sort_array(arr):\n    return sorted(arr, key=lambda x: bin(int(x)).count(\"1\"))\n"}]}
{"question_id": "HumanEval/117", "language": "python", "prompt": "Given a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n", "signature": "def select_words(s, n):", "solutions": [{"id": "0", "snippet": "def select_words(s, n):\n    return [w for w in s.split() if len(w) == n]\n"}, {"id": "1", "snippet": "def select_words(s, n):\n    return [word for word in s.split() if len(word) == n]\n"}, {"id": "2", "snippet": "def select_words(s, n):\n    if n == 0:\n        return []\n    return [word for word in s.split() if len(word) == n]\n"}, {"id": "3", "snippet": "def select_words(s, n):\n    return [w for w in s.split(\" \") if \" \".join(w).count(\"a\") == n]\n"}, {"id": "4", "snippet": "def select_words(s, n):\n\n    if s == \"\":\n        return []\n\n    return [w for w in s.split(\" \") if len(w) == n]\n"}, {"id": "5", "snippet": "def select_words(s, n):\n    result = []\n\n    for i in range(len(s)):\n        if s[i:i+n] == \" \":\n            result.append(s[i:i+n])\n\n    return result\n"}, {"id": "6", "snippet": "def select_words(s, n):\n    return [w for w in s.split() if len(w) == n]\n"}, {"id": "7", "snippet": "def select_words(s, n):\n    return [w for w in s.split() if len(w) == n]\n"}, {"id": "8", "snippet": "def select_words(s, n):\n\n    return [w for w in s.split() if n == s.count(w)]\n"}, {"id": "9", "snippet": "def select_words(s, n):\n    return [word for word in s.split(\" \") if len(word) == n]\n"}]}
{"question_id": "HumanEval/118", "language": "python", "prompt": "You are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n", "signature": "def get_closest_vowel(word):", "solutions": [{"id": "0", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n\n    index = []\n\n    for i in range(len(word)):\n        if word[i] in vowels:\n            index.append(i)\n\n    if index == []:\n        return \"\"\n\n    return word[index[0] + 1: index[-1]]\n"}, {"id": "1", "snippet": "def get_closest_vowel(word):\n    vowels = \"AEIOUaeiou\"\n    i = len(word)\n    while i > 0 and word[i - 1] in vowels and i > 0:\n        i -= 1\n    return word[:i]\n"}, {"id": "2", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n\n    def get_distance(i, j):\n        return abs(ord(word[i]) - ord(word[j]))\n\n    i, j = 0, len(word) - 1\n\n    while i < j:\n        i += 1\n        j -= 1\n\n        while i >= 0 and j >= 0:\n            if get_distance(i, j) < get_distance(i, j - 1):\n                return vowels[j]\n            j -= 1\n            i -= 1\n\n    return \"\"\n"}, {"id": "3", "snippet": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = vowels.index(word[0])\n\n    if index == 0:\n        return word[1:]\n\n    for i in range(1, index):\n        if word[i] not in vowels:\n            return word[0:i]\n\n    return \"\"\n"}, {"id": "4", "snippet": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    index = []\n    for i in range(len(word)):\n        if word[i].lower() not in vowels:\n            index.append(i)\n    if index:\n        return word[index[0]] + word[index[-1]]\n    return \"\"\n"}, {"id": "5", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    left, right = 0, len(word) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if word[mid] not in vowels:\n            left = mid + 1\n        elif word[mid] in vowels:\n            right = mid - 1\n    return word[left: right + 1]\n"}, {"id": "6", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    index = 0\n    max_distance = len(word)\n\n    for index, letter in enumerate(word):\n        if letter not in vowels:\n            continue\n        distance = abs(index - index % max_distance)\n        if distance < max_distance:\n            max_distance = distance\n            vowel = letter\n\n    return vowel\n"}, {"id": "7", "snippet": "def get_closest_vowel(word):\n    vowel_index = -1\n    for i, char in enumerate(word):\n        if char.lower() in 'aeiouAEIOU':\n            vowel_index = i\n    if vowel_index == -1:\n        return \"\"\n    else:\n        return word[:vowel_index + 1]\n"}, {"id": "8", "snippet": "def get_closest_vowel(word):\n    vowel_dict = {\n        \"a\": \"aeiou\",\n        \"e\": \"euiou\",\n        \"i\": \"iuiou\",\n        \"o\": \"uoiou\",\n        \"u\": \"ubiou\",\n    }\n    if not word:\n        return \"\"\n    if word[0] in vowel_dict:\n        return word[1:] + vowel_dict[word[0]]\n    if word[-1] in vowel_dict:\n        return word[:-1] + vowel_dict[word[-1]]\n    return word\n"}, {"id": "9", "snippet": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    i = 0\n    l = len(word)\n    while i < l and word[i] not in vowels:\n        i += 1\n    return word[:i]\n"}]}
{"question_id": "HumanEval/119", "language": "python", "prompt": "\nYou are given a list of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\nExamples:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n", "signature": "def match_parens(lst):", "solutions": [{"id": "0", "snippet": "def match_parens(lst):\n    if not lst:\n        return \"No\"\n    if len(lst) == 1:\n        return \"Yes\" if lst[0] == '(' else \"No\"\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return \"Yes\"\n        return \"No\"\n    return \"No\"\n"}, {"id": "1", "snippet": "def match_parens(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == '(' and lst[i+1] == ')':\n            return 'Yes'\n    return 'No'\n"}, {"id": "2", "snippet": "def match_parens(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] == '(' and lst[i + 1] == ')':\n            return 'Yes'\n    return 'No'\n"}, {"id": "3", "snippet": "def match_parens(lst):\n    for i, c in enumerate(lst):\n        if c == '(':\n            lst[i] = 'No'\n        elif c == ')':\n            lst[i] = 'Yes'\n    return 'Yes' if all([x == 'Yes' for x in lst]) else 'No'\n"}, {"id": "4", "snippet": "def match_parens(lst):\n    for i in range(len(lst)-1):\n        if lst[i] == '(' and lst[i+1]!= ')':\n            return 'Yes'\n    return 'No'\n"}, {"id": "5", "snippet": "def match_parens(lst):\n    if len(lst) < 2:\n        return 'No'\n\n    for i in range(len(lst) - 1):\n        if lst[i] == '(' and lst[i + 1]!= ')':\n            return 'Yes'\n    return 'No'\n"}, {"id": "6", "snippet": "def match_parens(lst):\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return lst[0]\n\n    # Create a list of all the open parentheses in the string\n    # and the string without them\n    open_parens = [p for p in lst if p == '(']\n    close_parens = [p for p in lst if p == ')']\n\n    if len(open_parens) > 1 or len(close_parens) > 1:\n        return 'No'\n\n    if len(open_parens) == 1:\n        return 'Yes'\n\n    if len(close_parens) == 1:\n        return 'No'\n\n    return ''\n"}, {"id": "7", "snippet": "def match_parens(lst):\n    s = ''\n    for i in lst:\n        if i == '(':\n            s += '('\n        elif i == ')':\n            s += ')'\n    return s\n"}, {"id": "8", "snippet": "def match_parens(lst):\n    return 'No' if all([paren_match(x) for x in lst]) else 'Yes'\n"}, {"id": "9", "snippet": "def match_parens(lst):\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == '(' else 'No'\n    if len(lst) > 1:\n        return 'No' if '(' in lst[1:] else 'Yes'\n"}]}
{"question_id": "HumanEval/12", "language": "python", "prompt": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest([])\n\n>>> longest(['a', 'b', 'c'])\n'a'\n>>> longest(['a', 'bb', 'ccc'])\n'ccc'\n", "signature": "def longest(strings: List[str]):", "solutions": [{"id": "0", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n\n    string_lengths = [len(s) for s in strings]\n    max_length = max(string_lengths)\n\n    for index, value in enumerate(strings):\n        if len(value) == max_length:\n            return value\n        elif len(value) > max_length:\n            return strings[index]\n    return None\n"}, {"id": "1", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return None\n    return max(strings, key=len)\n"}, {"id": "2", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}, {"id": "3", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n\n    return max(strings, key=len)\n"}, {"id": "4", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n"}, {"id": "5", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n\n    shortest = strings[0]\n    for string in strings[1:]:\n        if len(string) < len(shortest):\n            shortest = string\n\n    return shortest\n"}, {"id": "6", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}, {"id": "7", "snippet": "def longest(strings: List[str]):\n    if len(strings) > 0:\n        longest = strings[0]\n        for string in strings[1:]:\n            if len(string) > len(longest):\n                longest = string\n        return longest\n    else:\n        return None\n"}, {"id": "8", "snippet": "def longest(strings: List[str]):\n    if not strings:\n        return None\n\n    return max(strings, key=len)\n"}, {"id": "9", "snippet": "def longest(strings: List[str]):\n    if len(strings) == 0:\n        return ''\n    if len(strings) == 1:\n        return strings[0]\n    longest_length = 0\n    longest_string = None\n    for string in strings:\n        if len(string) > longest_length:\n            longest_length = len(string)\n            longest_string = string\n    return longest_string\n"}]}
{"question_id": "HumanEval/120", "language": "python", "prompt": "\nGiven an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\n\nExample 1:\n\nInput: arr = [-3, -4, 5], k = 3\nOutput: [-4, -3, 5]\n\nExample 2:\n\nInput: arr = [4, -4, 4], k = 2\nOutput: [4, 4]\n\nExample 3:\n\nInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nOutput: [2]\n\nNote:\n1. The length of the array will be in the range of [1, 1000].\n2. The elements in the array will be in the range of [-1000, 1000].\n3. 0 <= k <= len(arr)\n", "signature": "def maximum(arr, k):", "solutions": [{"id": "0", "snippet": "def maximum(arr, k):\n    arr_len = len(arr)\n    if arr_len < k:\n        return []\n\n    arr_k_len = arr_len - k\n\n    arr_sorted = sorted(arr)\n    max_k = arr_sorted[k - 1]\n\n    if arr_k_len > 0:\n        max_k_sub_arr = [arr_sorted[idx] for idx in range(arr_k_len) if arr_sorted[idx] >= max_k]\n        max_k_sub_arr = sorted(max_k_sub_arr)\n        return max_k_sub_arr\n    else:\n        return [max_k]\n"}, {"id": "1", "snippet": "def maximum(arr, k):\n    max_arr = []\n    for i in range(len(arr)):\n        if len(max_arr) < k:\n            max_arr.append(arr[i])\n        elif max_arr[i] < arr[i]:\n            max_arr = [arr[i]]\n        elif arr[i] == max_arr[i]:\n            max_arr.append(arr[i])\n\n    return max_arr\n"}, {"id": "2", "snippet": "def maximum(arr, k):\n    arr = sorted(arr)\n    length = len(arr)\n    if length < k:\n        return arr\n\n    mid = length // 2\n\n    if length % 2 == 1:\n        return arr[mid - 1: mid + 1]\n    else:\n        return arr[mid: mid + 1]\n"}, {"id": "3", "snippet": "def maximum(arr, k):\n    result = []\n    arr = sorted(arr)\n\n    if k < 0:\n        return arr\n\n    for i in range(len(arr)):\n        if i + k >= len(arr):\n            break\n        if arr[i + k] > arr[i]:\n            result.append(arr[i])\n\n    return result\n"}, {"id": "4", "snippet": "def maximum(arr, k):\n\n    arr = sorted(arr)\n    k = k - 1\n    if len(arr) < k:\n        return arr\n    arr = arr[-k:]\n    return arr\n"}, {"id": "5", "snippet": "def maximum(arr, k):\n    arr = sorted(arr)\n    length = len(arr)\n    return arr[length-k+1:length]\n"}, {"id": "6", "snippet": "def maximum(arr, k):\n    return sorted(arr[0:k])\n"}, {"id": "7", "snippet": "def maximum(arr, k):\n    if len(arr) < k:\n        return arr\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    max_k = arr[0]\n    while i < j:\n        if arr[i] <= max_k:\n            max_k = arr[i]\n            i += 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n    return arr[:k]\n"}, {"id": "8", "snippet": "def maximum(arr, k):\n    arr = sorted(arr)\n    max_k = arr[k - 1]\n    idx = arr.index(max_k)\n\n    return arr[:idx]\n"}, {"id": "9", "snippet": "def maximum(arr, k):\n\n    if len(arr) < k:\n        return arr\n\n    arr.sort()\n\n    max_k = arr[k]\n\n    result = [max_k]\n\n    for i in range(k, len(arr)):\n        if arr[i] > max_k:\n            max_k = arr[i]\n            result.append(max_k)\n\n    return result\n"}]}
{"question_id": "HumanEval/121", "language": "python", "prompt": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n", "signature": "def solution(lst):", "solutions": [{"id": "0", "snippet": "def solution(lst):\n\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += i\n\n    return result\n"}, {"id": "1", "snippet": "def solution(lst):\n\n    total = 0\n\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] % 2 == 0:\n                total += lst[i]\n\n    return total\n"}, {"id": "2", "snippet": "def solution(lst):\n\n    total = 0\n    for i in lst:\n        if i % 2 == 0:\n            total += i\n\n    return total\n"}, {"id": "3", "snippet": "def solution(lst):\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i\n    return sum\n"}, {"id": "4", "snippet": "def solution(lst):\n\n    if not lst:\n        return 0\n\n    return sum([x for x in lst if x % 2 == 0])\n"}, {"id": "5", "snippet": "def solution(lst):\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += i\n    return result\n"}, {"id": "6", "snippet": "def solution(lst):\n    result = 0\n\n    for i in lst:\n        if i % 2 == 0:\n            result += i\n\n    return result\n"}, {"id": "7", "snippet": "def solution(lst):\n\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += i\n\n    return result\n"}, {"id": "8", "snippet": "def solution(lst):\n\n    # base case\n    if len(lst) < 2:\n        return 0\n\n    even_positions = []\n    for number in lst:\n        if number % 2 == 0:\n            even_positions.append(number)\n\n    return sum(even_positions)\n"}, {"id": "9", "snippet": "def solution(lst):\n    total = 0\n    for number in lst:\n        if number % 2 == 0:\n            total += number\n    return total\n"}]}
{"question_id": "HumanEval/122", "language": "python", "prompt": "\nGiven a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\nInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24 # sum of 21 + 3\n\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n", "signature": "def add_elements(arr, k):", "solutions": [{"id": "0", "snippet": "def add_elements(arr, k):\n    k_arr = [k] * len(arr)\n    return sum(arr) + sum(k_arr) - sum(k * k_arr)\n"}, {"id": "1", "snippet": "def add_elements(arr, k):\n    k = min(k, len(arr))\n    sum = 0\n\n    for i in range(len(arr)):\n        sum += int(arr[i])\n\n        if sum > 10 and sum <= k:\n            sum = sum - 10\n\n    return sum\n"}, {"id": "2", "snippet": "def add_elements(arr, k):\n    k_len = len(k)\n    if k_len < 1:\n        return 0\n\n    arr_len = len(arr)\n\n    arr_sum = 0\n\n    if arr_len == 0:\n        return 0\n\n    for i in range(arr_len):\n        arr_sum += arr[i]\n        if k_len > 1 and arr_sum >= 10:\n            return arr_sum\n\n        if k_len > 1 and arr_sum <= 10:\n            arr_sum += arr[i]\n\n    return arr_sum\n"}, {"id": "3", "snippet": "def add_elements(arr, k):\n    return sum([int(arr[i]) for i in range(0, k) if len(str(arr[i])) == 2 and len(str(arr[i])) <= 10])\n"}, {"id": "4", "snippet": "def add_elements(arr, k):\n    pass\n"}, {"id": "5", "snippet": "def add_elements(arr, k):\n    k = k % len(arr)\n    return sum(arr[0:k])\n"}, {"id": "6", "snippet": "def add_elements(arr, k):\n    count = 0\n    k_len = len(k)\n    arr_len = len(arr)\n\n    if arr_len < k_len:\n        return 0\n\n    arr_sorted = sorted(arr)\n\n    for i in range(arr_len):\n        if i < k_len - 1:\n            if arr_sorted[i + 1] + arr_sorted[i] < 10:\n                count += arr_sorted[i + 1] + arr_sorted[i]\n            else:\n                count += arr_sorted[i + 1] + arr_sorted[i]\n        else:\n            count += arr_sorted[i + 1]\n\n    return count\n"}, {"id": "7", "snippet": "def add_elements(arr, k):\n    k = k % len(arr)\n\n    return sum(arr[0:k])\n"}, {"id": "8", "snippet": "def add_elements(arr, k):\n\n    return sum([int(x) for x in arr[:k]])\n"}, {"id": "9", "snippet": "def add_elements(arr, k):\n    k = k % len(arr)\n    return sum([int(x) for x in arr[0:k]]) + sum([int(x) for x in arr[k:len(arr)]])\n"}]}
{"question_id": "HumanEval/123", "language": "python", "prompt": "\nGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote:\n1. Collatz(1) is [1].\n2. returned list sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n", "signature": "def get_odd_collatz(n):", "solutions": [{"id": "0", "snippet": "def get_odd_collatz(n):\n    if n < 1:\n        return []\n\n    prev_term = 1\n    current_term = n\n\n    while current_term % 2 == 0:\n        prev_term = current_term\n        current_term = current_term // 2\n\n    while prev_term % 2 == 0:\n        yield prev_term\n        prev_term = prev_term // 2\n\n    yield current_term\n"}, {"id": "1", "snippet": "def get_odd_collatz(n):\n\n    # if n is even, return [1, 1, 2, 1, 2]\n    if n % 2 == 0:\n        return [1, 1]\n\n    # get previous and next terms\n    prev = get_odd_collatz(n // 2)\n    next = n % 2\n\n    # and return their result\n    return [prev[0] + next, prev[1] + next]\n"}, {"id": "2", "snippet": "def get_odd_collatz(n):\n\n    if n % 2 == 0:\n        n = n // 2\n        result = [n]\n        while n > 1:\n            if n % 2 == 0:\n                result.append(n)\n            n = n // 2\n        return result\n    else:\n        return [n]\n"}, {"id": "3", "snippet": "def get_odd_collatz(n):\n    if n % 2 == 0:\n        result = [n]\n        while n > 1:\n            n = n // 2\n            result.append(n)\n        return result\n    else:\n        return [n]\n"}, {"id": "4", "snippet": "def get_odd_collatz(n):\n\n    result = []\n    while n!= 1:\n        if n % 2 == 0:\n            result.append(n)\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n    result.append(n)\n    return result\n"}, {"id": "5", "snippet": "def get_odd_collatz(n):\n\n    if n % 2 == 0:\n        return [n]\n    else:\n        return [int(n / 2)] + get_odd_collatz(int(n / 2))\n"}, {"id": "6", "snippet": "def get_odd_collatz(n):\n\n    if n == 1:\n        return [1]\n    elif n % 2 == 0:\n        return [n] + get_odd_collatz(n // 2)\n    else:\n        return [n * 3 + 1] + get_odd_collatz(n // 2)\n"}, {"id": "7", "snippet": "def get_odd_collatz(n):\n    result = []\n    while n > 1:\n        if n % 2 == 0:\n            result.append(n)\n        n = n // 2\n    return result\n"}, {"id": "8", "snippet": "def get_odd_collatz(n):\n\n    answer = []\n    previous_term = 1\n    for term in range(1, n + 1):\n        if term % 2 == 0:\n            answer.append(term)\n            answer.append(previous_term)\n            previous_term = term * 3\n    return answer\n"}, {"id": "9", "snippet": "def get_odd_collatz(n):\n    if n < 2:\n        return []\n    result = []\n    previous_term = 1\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(previous_term)\n        previous_term = i\n    return result\n"}]}
{"question_id": "HumanEval/124", "language": "python", "prompt": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example:\nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n", "signature": "def valid_date(date):", "solutions": [{"id": "0", "snippet": "def valid_date(date):\n    if date == '' or date is None:\n        return False\n\n    if len(date)!= 13:\n        return False\n\n    if date[0:2] not in ['00', '11']:\n        return False\n\n    if len(date) > 13:\n        return False\n\n    if int(date[2]) < 1 or int(date[2]) > 30:\n        return False\n\n    if int(date[3]) < 1 or int(date[3]) > 12:\n        return False\n\n    if int(date[4]) < 1 or int(date[4]) > 12:\n        return False\n\n    if int(date[5]) < 1 or int(date[5]) > 30:\n        return False\n\n    if int(date[6]) < 1 or int(date[6]) > 12:\n        return False\n\n    return True\n"}, {"id": "1", "snippet": "def valid_date(date):\n    if (not date):\n        return False\n    if (len(date) < 7):\n        return False\n    if (not date[5:7]):\n        return False\n    if (not date[0:5]):\n        return False\n    if (not date[6:6]):\n        return False\n    if (not date[0:6]):\n        return False\n    if (not date[6:]):\n        return False\n    if (date[0:5] not in ['00', '11']):\n        return False\n    if (date[6:6] not in ['00', '11']):\n        return False\n    if (date[6:] not in ['12', '12']):\n        return False\n    if (len(date) < 13):\n        return False\n    if (int(date[0:2]) not in [1, 3, 5, 7, 8, 10, 12]):\n        return False\n    if (int(date[2:4]) not in [1, 3, 5, 7, 8, 10, 12]):\n   "}, {"id": "2", "snippet": "def valid_date(date):\n\n    if not date or not date.strip():\n        return False\n\n    days = int(date[:3])\n    months = int(date[3:6])\n    years = int(date[6:10])\n    days_in_month = calendar.monthrange(years, months)[1]\n\n    if days!= 0 and days_in_month!= days:\n        return False\n\n    days_in_year = calendar.monthrange(years, years)[1]\n\n    if days_in_month < days:\n        return False\n\n    if months < 1 or months > 12:\n        return False\n\n    if years < 1 or years > days_in_year:\n        return False\n\n    if months < 1 or months > months:\n        return False\n\n    return True\n"}, {"id": "3", "snippet": "def valid_date(date):\n    if not date or not date.strip():\n        return False\n    if len(date.split(\"-\"))!= 3:\n        return False\n    if not all([i in range(1, 13) for i in date.split(\"-\")]):\n        return False\n    if not all([i in range(1, 30) for i in date.split(\"-\")]):\n        return False\n    if not all([i in range(1, monthrange(int(date.split(\"-\")[0]), int(date.split(\"-\")[1]))[1]) for i in range(1, 12)]):\n        return False\n    if not all([i in range(1, monthrange(int(date.split(\"-\")[0]), int(date.split(\"-\")[1]))[1]) for i in range(1, 13)]):\n        return False\n    return True\n"}, {"id": "4", "snippet": "def valid_date(date):\n    valid = True\n    if len(date)!= 7:\n        valid = False\n    elif date[0]!= \"0\" and date[2]!= \"0\" and date[4]!= \"0\" and date[6]!= \"0\" and date[8]!= \"0\":\n        valid = False\n    elif date[0]!= \"\" and date[2]!= \"00\" and date[4]!= \"0\" and date[6]!= \"0\" and date[10]!= \"0\":\n        valid = False\n    elif date[0]!= \"\" and date[2]!= \"12\" and date[4]!= \"12\" and date[6]!= \"12\" and date[10]!= \"12\":\n        valid = False\n    elif date[0]!= \"\" and date[2]!= \"31\" and date[4]!= \"31\" and date[6]!= \"31\" and date[12]!= \"31\":\n        valid = False\n    return valid\n"}, {"id": "5", "snippet": "def valid_date(date):\n    if date == '' or date is None:\n        return False\n\n    if len(date) < 7 or len(date) > 30:\n        return False\n\n    if date[0:7]!= '03':\n        return False\n\n    if int(date[7:]) not in range(1, 13):\n        return False\n\n    if int(date[8:]) not in range(1, 30):\n        return False\n\n    if int(date[9:]) not in range(1, 29):\n        return False\n\n    days = int(date[10:])\n    if days not in range(1, 30):\n        return False\n\n    months = [1, 3, 5, 7, 8, 10, 12]\n    if int(date[4:6]) not in months:\n        return False\n\n    if int(date[6:]) not in months:\n        return False\n\n    if int(date[0:2]) not in range(1, 2):\n        return False\n\n    if int(date[2:4]) not in range(1, 4):\n        r"}, {"id": "6", "snippet": "def valid_date(date):\n\n    if not date or not date.strip():\n        return False\n\n    if len(date) < 3 or len(date) > 30:\n        return False\n\n    if not datetime.date.today().day % int(date[0]) or \\\n            not re.match(r'\\d{1,2}', date[1]) or \\\n            not re.match(r'\\d{1,2}', date[2]) or \\\n            not re.match(r'\\d{4}', date[3]) or \\\n            not re.match(r'\\d{6,9}', date[4]) or \\\n            not re.match(r'\\d{7,10,12}', date[5]) or \\\n            not re.match(r'\\d{1,2}', date[6]) or \\\n            not re.match(r'\\d{1,2}', date[8]):\n        return False\n\n    return True\n"}, {"id": "7", "snippet": "def valid_date(date):\n    if date is None or len(date) == 0:\n        return False\n\n    if len(date) > 13:\n        return False\n\n    if len(date) < 1 or len(date) > 30:\n        return False\n\n    if date[0].lower() in ['m','march', 'a', 'al']:\n        return False\n\n    if len(set([int(x) for x in date.split('-')]))!= 3:\n        return False\n\n    for month in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n        if month not in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n\n    days = [int(x) for x in date.split('-')]\n\n    if days[0] > 31 or days[1] > 30:\n        return False\n\n    if days[2] > 12 or days[3] > 12:\n        return Fals"}, {"id": "8", "snippet": "def valid_date(date):\n\n    if not date:\n        return False\n\n    if len(date)!= 10:\n        return False\n\n    days = int(date[6:10])\n    months = int(date[:6])\n\n    if days < 1 or days > 30:\n        return False\n\n    if months < 1 or months > 12:\n        return False\n\n    if date[8] not in '12':\n        return False\n\n    return True\n"}, {"id": "9", "snippet": "def valid_date(date):\n\n    if not date:\n        return False\n\n    if len(date)!= 8:\n        return False\n\n    # Check if the number of days is not less than 1 or higher than 30\n    if not isinstance(date[3], int) or not isinstance(date[5], int) or not isinstance(date[7], int):\n        return False\n\n    # Check if the number of days is less than 1 or higher than 30\n    if not isinstance(date[1], int) or not isinstance(date[2], int):\n        return False\n\n    if date[1] < 1 or date[2] < 1:\n        return False\n\n    if date[4] < 1 or date[5] < 1:\n        return False\n\n    if date[0] < 1 or date[4] < 1:\n        return False\n\n    if date[6] < 1 or date[7] < 1:\n        return False\n\n    if date[0] > 30 or date[6] > 30:\n        return False\n\n    if date[9] < 1 or date"}]}
{"question_id": "HumanEval/125", "language": "python", "prompt": "\nGiven a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\nsplit_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3\n", "signature": "def split_words(txt):", "solutions": [{"id": "0", "snippet": "def split_words(txt):\n    if txt is None:\n        return None\n\n    if not isinstance(txt, str):\n        return None\n\n    # First, deal with any single space or comma separated words\n    txt = txt.replace(' ', '').replace(',', '')\n\n    # Now deal with any odd order of commas\n    result = []\n    for item in txt.split(','):\n        if item.count('(') % 2!= 0 or item.count(')') % 2!= 0:\n            result.append(item.strip().lower())\n\n    return result\n"}, {"id": "1", "snippet": "def split_words(txt):\n    return [w.strip() for w in txt.split(\",\") if w.strip()]\n"}, {"id": "2", "snippet": "def split_words(txt):\n    if txt == \"\":\n        return []\n    return [word.strip() for word in txt.split(\",\") if word.strip()]\n"}, {"id": "3", "snippet": "def split_words(txt):\n    if not txt:\n        return []\n\n    return [w.strip() for w in re.split(r\"\\s*,\\s*\", txt) if w.strip()]\n"}, {"id": "4", "snippet": "def split_words(txt):\n    if not txt:\n        return []\n    return [w.strip() for w in txt.split(',') if w.strip()]\n"}, {"id": "5", "snippet": "def split_words(txt):\n    return [word.strip() for word in txt.split(',')]\n"}, {"id": "6", "snippet": "def split_words(txt):\n    return [w.lower().strip() for w in txt.split(\",\") if w.strip()]\n"}, {"id": "7", "snippet": "def split_words(txt):\n    return [w.strip() for w in txt.split(',') if w.strip()]\n"}, {"id": "8", "snippet": "def split_words(txt):\n    return [w.strip() for w in re.split(r\"[,]+\", txt) if w.strip()]\n"}, {"id": "9", "snippet": "def split_words(txt):\n    # TODO: split on whitespace\n    if txt:\n        return txt.split(',')\n    return []\n"}]}
{"question_id": "HumanEval/126", "language": "python", "prompt": "\nGiven a list of numbers, return whether or not they are sorted\nin ascending order. If list has more than 1 duplicate of the same\nnumber, return False. Assume no negative numbers and only integers.\n\nExamples\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n", "signature": "def is_sorted(lst):", "solutions": [{"id": "0", "snippet": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                return False\n    return True\n"}, {"id": "1", "snippet": "def is_sorted(lst):\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"}, {"id": "2", "snippet": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}, {"id": "3", "snippet": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            return False\n    return True\n"}, {"id": "5", "snippet": "def is_sorted(lst):\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def is_sorted(lst):\n    seen = set()\n    for item in lst:\n        if item in seen:\n            return True\n        seen.add(item)\n    return False\n"}, {"id": "7", "snippet": "def is_sorted(lst):\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n"}, {"id": "8", "snippet": "def is_sorted(lst):\n    unique_lst = []\n    for number in lst:\n        if number not in unique_lst:\n            unique_lst.append(number)\n        elif number in unique_lst:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def is_sorted(lst):\n    # unpack the list\n    nums = list(map(int, lst))\n\n    # check for duplicates\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            return False\n\n    return True\n"}]}
{"question_id": "HumanEval/127", "language": "python", "prompt": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n", "signature": "def intersection(interval1, interval2):", "solutions": [{"id": "0", "snippet": "def intersection(interval1, interval2):\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        return \"NO\"\n    # return \"YES\" if not is_prime(interval1[0] + interval2[0]) or not is_prime(interval1[1] + interval2[1]) else \"NO\"\n    return \"NO\" if not is_prime(max(interval1[0], interval2[0])) or not is_prime(min(interval1[1], interval2[1])) else \"YES\"\n"}, {"id": "1", "snippet": "def intersection(interval1, interval2):\n\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"Please provide a tuple of two integers.\")\n\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        raise ValueError(\"Please provide two tuple of two integers.\")\n\n    if interval1[0] < interval2[1]:\n        return \"NO\"\n\n    i, j = interval1\n    k, l = interval2\n\n    if i < k or j < l:\n        return \"NO\"\n\n    if i == k and j == l:\n        return \"YES\"\n\n    return \"NO\"\n"}, {"id": "2", "snippet": "def intersection(interval1, interval2):\n    if len(interval1)!= len(interval2):\n        return \"NO\"\n\n    if not interval1:\n        return \"YES\"\n\n    if not interval2:\n        return \"NO\"\n\n    # Because the first interval is prime, it can be the only one that is not a prime number\n    if not any(i % j == 0 for i, j in zip(interval1, interval2)):\n        return \"NO\"\n\n    return \"YES\"\n"}, {"id": "3", "snippet": "def intersection(interval1, interval2):\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"interval1 and interval2 must be tuple\")\n\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        raise ValueError(\"interval1 and interval2 must be tuples\")\n\n    # first point is less than second point\n    if interval1[0] < interval2[1]:\n        return \"NO\"\n\n    # second point is greater than first\n    if interval2[0] > interval1[1]:\n        return \"NO\"\n\n    # first point is equal to second point\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n\n    # second point is not equal to first\n    if interval2[1] == interval1[0]:\n        return \"NO\"\n"}, {"id": "4", "snippet": "def intersection(interval1, interval2):\n    if not is_interval(interval1) or not is_interval(interval2):\n        return \"NO\"\n    else:\n        (lower, upper) = interval1\n        (lower_i, upper_i) = interval2\n        if lower <= lower_i <= upper or lower_i <= upper_i <= upper:\n            return \"YES\"\n        else:\n            return \"NO\"\n"}, {"id": "5", "snippet": "def intersection(interval1, interval2):\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        return \"NO\"\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    if interval1[1] > interval2[0]:\n        return \"NO\"\n    return \"YES\" if interval1[0] == interval2[1] else \"NO\"\n"}, {"id": "6", "snippet": "def intersection(interval1, interval2):\n\n    if len(interval1)!= len(interval2):\n        return \"NO\"\n\n    # return \"YES\" if (not any(i <= j for i, j in zip(interval1, interval2))) else \"NO\"\n    return \"YES\" if (all(i <= j for i, j in zip(interval1, interval2))) else \"NO\"\n"}, {"id": "7", "snippet": "def intersection(interval1, interval2):\n\n    if not (isinstance(interval1[0], int) and isinstance(interval1[1], int)):\n        return \"NO\"\n\n    if not (isinstance(interval2[0], int) and isinstance(interval2[1], int)):\n        return \"NO\"\n\n    if interval1[0] < interval2[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}, {"id": "8", "snippet": "def intersection(interval1, interval2):\n\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple):\n        raise TypeError(\"interval1 and interval2 must be tuples\")\n\n    if len(interval1)!= 2 or len(interval2)!= 2:\n        raise ValueError(\"length of the intervals must be 2\")\n\n    if not is_prime(interval1[0]) or not is_prime(interval1[1]):\n        raise ValueError(\"interval1 and interval2 must be prime\")\n\n    if not is_prime(interval2[0]) or not is_prime(interval2[1]):\n        raise ValueError(\"interval2 and interval1 must be prime\")\n\n    if interval1[0] < interval2[0]:\n        return \"YES\"\n    elif interval1[1] < interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}, {"id": "9", "snippet": "def intersection(interval1, interval2):\n    if not isinstance(interval1[0], int) or not isinstance(interval1[1], int):\n        raise TypeError(\"First argument must be an integer\")\n    if not isinstance(interval2[0], int) or not isinstance(interval2[1], int):\n        raise TypeError(\"Second argument must be an integer\")\n    if interval1[0] < interval2[0]:\n        first, second = interval2[0], interval1[0]\n        middle = (second + first) // 2\n        if middle * second < interval1[1]:\n            return \"YES\"\n        elif middle * second > interval1[1]:\n            return \"NO\"\n        else:\n            return \"NO\"\n    elif interval1[0] > interval2[1]:\n        return \"NO\"\n    else:\n        return \"YES\"\n"}]}
{"question_id": "HumanEval/128", "language": "python", "prompt": "\nYou are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\n\nExample:\n>>> prod_signs([1, 2, 2, -4]) == -9\n>>> prod_signs([0, 1]) == 0\n>>> prod_signs([]) == None\n", "signature": "def prod_signs(arr):", "solutions": [{"id": "0", "snippet": "def prod_signs(arr):\n\n    if not arr:\n        return None\n\n    product = 1\n    for num in arr:\n        product *= -1 * num\n\n    return product\n"}, {"id": "1", "snippet": "def prod_signs(arr):\n    product = 1\n    for val in arr:\n        if val!= 0:\n            product *= val\n    return product\n"}, {"id": "2", "snippet": "def prod_signs(arr):\n    result = None\n    if arr == []:\n        return result\n    magnitude = []\n    for num in arr:\n        magnitude.append(abs(num))\n    result = sum(magnitude) * product_signs(magnitude)\n    return result\n"}, {"id": "3", "snippet": "def prod_signs(arr):\n    if arr == []:\n        return None\n    mag_sum = 0\n    for i in arr:\n        if i!= 0:\n            mag_sum += i*(1 if i > 0 else -1)\n    return mag_sum\n"}, {"id": "4", "snippet": "def prod_signs(arr):\n    product = 1\n    for i in arr:\n        if i!= 0:\n            product *= i\n\n    return product\n"}, {"id": "5", "snippet": "def prod_signs(arr):\n\n    product = 1\n    for num in arr:\n        product *= abs(num)\n\n    if product == 0:\n        return None\n\n    return product\n"}, {"id": "6", "snippet": "def prod_signs(arr):\n    product = 1\n    for i in arr:\n        if i:\n            product *= i\n\n    return product\n"}, {"id": "7", "snippet": "def prod_signs(arr):\n\n    products = []\n    for i in arr:\n        if i!= 0:\n            products.append(i*1.0/i)\n\n    if products:\n        return sum(products)\n    else:\n        return None\n"}, {"id": "8", "snippet": "def prod_signs(arr):\n\n    product = 1\n    for val in arr:\n        if val:\n            product *= val * val\n            product = product if product > 0 else 0\n    return product\n"}, {"id": "9", "snippet": "def prod_signs(arr):\n    sum_signs = 0\n    product_signs = 1\n    for num in arr:\n        if num!= 0:\n            sum_signs += product_signs\n            product_signs *= num\n    return sum_signs\n"}]}
{"question_id": "HumanEval/129", "language": "python", "prompt": "\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\n\nExamples:\n\nInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\nOutput: [1, 2, 1]\n\nInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\nOutput: [1]\n", "signature": "def minPath(grid, k):", "solutions": [{"id": "0", "snippet": "def minPath(grid, k):\n    m = len(grid)\n    n = len(grid[0])\n\n    # make a list of all the indices we can go through\n    all_indices = []\n\n    for i in range(m):\n        for j in range(n):\n            if i + j < k and grid[i][j] == 1:\n                all_indices.append((i, j))\n\n    # return the path to all the indices that we can go through\n    return sorted(all_indices, key=lambda p: p[0] * n + p[1])\n"}, {"id": "1", "snippet": "def minPath(grid, k):\n    # Make a copy of the original grid\n    original_grid = grid[:]\n\n    # Iterate over every row in the original grid\n    for r in range(len(grid)):\n\n        # Iterate over every column in the original grid\n        for c in range(len(grid[r])):\n\n            # Iterate over every cell of the row in the original grid\n            for a in range(len(grid[r][c])):\n\n                # Iterate over every cell in the column in the original grid\n                for b in range(len(grid[r][c][a])):\n\n                    # Iterate over every value in the cell in the cell\n                    for k in range(len(grid[r][c][a][b])):\n\n                        # Increment the row and column and step by 1\n                        grid[r][c][a][b] += "}, {"id": "2", "snippet": "def minPath(grid, k):\n    if k == 0:\n        return []\n\n    m, n = len(grid), len(grid[0])\n\n    lst_A = [[1] * n] * m\n    lst_B = [[1] * k] * m\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if i == 0 or j == 0:\n                lst_A[i][j] = grid[i][j]\n            elif grid[i - 1][j] < grid[i][j - 1]:\n                lst_A[i][j] = grid[i][j]\n            else:\n                lst_A[i][j] = grid[i - 1][j]\n            if grid[i][j - 1] < grid[i][j]:\n                lst_B[i][j] = grid[i][j]\n            else:\n                lst_B[i][j] = grid[i][j - "}, {"id": "3", "snippet": "def minPath(grid, k):\n\n    # TODO: Task 1: implement this function\n    # Task 2: test if the grid is square and if it contains at least k values\n    # Task 3: make a list of all the rows and columns\n    # Task 4: do a loop to get all possible values that can be used to build the grid\n\n    pass\n"}, {"id": "4", "snippet": "def minPath(grid, k):\n    if len(grid) < 2:\n        return []\n\n    m = len(grid)\n    n = len(grid[0])\n\n    # Create an empty list\n    answer = []\n\n    # Store the values on the answer\n    # This is so we don't run out of memory\n    # and we can guarantee that the answer is unique\n    # when you run out of memory\n    lst_A = []\n    lst_B = []\n\n    for i in range(m):\n        for j in range(n):\n            if i < k and grid[i][j] == 1:\n                lst_A.append(i)\n                lst_B.append(j)\n\n    for i in range(m):\n        for j in range(n):\n            if i >= k and grid[i][j] == 1:\n                answer.append(lst_A[i])\n                answer.append(lst_B[j])\n\n   "}, {"id": "5", "snippet": "def minPath(grid, k):\n\n    # Make sure that the input grid is square\n    if len(grid)!= len(grid[0]):\n        raise ValueError(\"Input grid must be square\")\n\n    # Make sure that the input grid is a list of lists\n    if not isinstance(grid, list):\n        raise TypeError(\"Input grid must be a list\")\n\n    # Initialize the output list\n    path = []\n\n    # Loop through the rows\n    for r in range(len(grid)):\n\n        # Loop through the columns\n        for c in range(len(grid[r])):\n\n            # If the cell is equal to the minimum path go through it\n            if grid[r][c] == 1 and len(path) < k:\n                path.append(grid[r][c])\n\n            # If the cell is equal to the maximum path go through it\n            elif grid[r][c] == k - 1 and len(path) > 0:\n      "}, {"id": "6", "snippet": "def minPath(grid, k):\n    if k >= len(grid[0]):\n        return []\n\n    min_lst = [1]\n    for row in grid:\n        min_lst = [min(row[i:i+k]) for i in range(len(row)-k+1)] + min_lst\n\n    return min_lst\n"}, {"id": "7", "snippet": "def minPath(grid, k):\n\n    # make sure that the grid is square\n    if len(grid)!= len(grid[0]):\n        raise ValueError(\"grid must be square\")\n\n    m = len(grid)\n    n = len(grid[0])\n\n    # initialize answer to be zeroes\n    answer = [0] * n\n\n    # loop through all cells on the grid\n    for i in range(m):\n        for j in range(n):\n            # if it is not a mine, then we do not go through it\n            if not grid[i][j]:\n                # find the index of the closest cell to the value on the grid\n                idx = lst_dist(grid, i, j, k)\n                # and place it in the answer\n                answer[idx] = grid[i][j]\n\n    return answer\n"}, {"id": "8", "snippet": "def minPath(grid, k):\n    # to do\n    pass\n"}, {"id": "9", "snippet": "def minPath(grid, k):\n    m = len(grid)\n    n = len(grid[0])\n\n    if m * n < k:\n        return []\n\n    dp = [[0 for _ in range(k)] for _ in range(m * n)]\n\n    for i in range(m):\n        dp[0][i] = 1\n\n    for j in range(n):\n        dp[m - 1][j] = 1\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i - 1][j] == grid[i][j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n"}]}
{"question_id": "HumanEval/13", "language": "python", "prompt": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n", "signature": "def greatest_common_divisor(a: int, b: int):", "solutions": [{"id": "0", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a % b\n    return a\n"}, {"id": "1", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a % b\n    return a\n"}, {"id": "2", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a%b\n    return a\n"}, {"id": "3", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a % b\n    return a\n"}, {"id": "4", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    if a < b:\n        a, b = b, a\n\n    while a % b!= 0:\n        a, b = b, a % b\n\n    return b\n"}, {"id": "5", "snippet": "def greatest_common_divisor(a: int, b: int):\n    if a < b:\n        (a, b) = (b, a)\n    while a % b!= 0:\n        a += 1\n    return a\n"}, {"id": "6", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a % b\n    return a\n"}, {"id": "7", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b:\n        a, b = b, a % b\n    return a\n"}, {"id": "8", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    while b!= 0:\n        a, b = b, a % b\n    return a\n"}, {"id": "9", "snippet": "def greatest_common_divisor(a: int, b: int):\n\n    # If there is no GCD, return the original value\n    if a == 0 or b == 0:\n        return a\n\n    # If there is a GCD, multiply the result by the GCD\n    while b!= 0:\n        (a, b) = (b, a % b)\n\n    return a\n"}]}
{"question_id": "HumanEval/130", "language": "python", "prompt": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = [1, 3, 2, 8]\n", "signature": "def tri(n):", "solutions": [{"id": "0", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError('n should be a non-negative integer')\n\n    if n == 0:\n        return []\n\n    previous, current = 0, 1\n    result = []\n    while previous < n:\n        result.append(previous)\n        previous, current = current, previous + current\n    return result\n"}, {"id": "1", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError('Negative value passed to tri()')\n    elif n == 0:\n        return []\n    else:\n        return [n + 1] + tri(n - 1)\n"}, {"id": "2", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError('n should be a non-negative integer.')\n\n    if n == 0:\n        return []\n\n    a, b = 0, 1\n    result = []\n    while a < n:\n        result.append(a)\n        a, b = b, a + b\n    return result\n"}, {"id": "3", "snippet": "def tri(n):\n\n    if n == 0:\n        return []\n    else:\n        return [n + 1] + tri(n - 1)\n"}, {"id": "4", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return []\n    result = [1]\n    previous_number = 0\n    current_number = 1\n    while current_number < n:\n        current_number += previous_number\n        result.append(previous_number)\n        previous_number = current_number\n    return result\n"}, {"id": "5", "snippet": "def tri(n):\n    if n == 0:\n        return []\n    elif n < 0:\n        raise ValueError('The number of sequences must be non-negative!')\n    else:\n        result = [0]\n        result.extend([1])\n        while len(result) < n:\n            result.extend([result[-1] + result[-2]])\n        return result[:n]\n"}, {"id": "6", "snippet": "def tri(n):\n    if n == 0:\n        return []\n    result = []\n    previous_number = 0\n    current_number = 1\n    while current_number < n:\n        result.append(current_number)\n        previous_number, current_number = current_number, previous_number + current_number\n    return result\n"}, {"id": "7", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n should be non-negative\")\n    if n == 0:\n        return []\n    a, b = 0, 1\n    result = []\n    while b < n:\n        result.append(b)\n        a, b = b, a + b\n    return result\n"}, {"id": "8", "snippet": "def tri(n):\n    if n < 0:\n        raise ValueError('n should be non-negative')\n    if n == 0:\n        return []\n    a, b = 0, 1\n    result = []\n    while b < n:\n        result.append(b)\n        a, b = b, a + b\n    return result\n"}, {"id": "9", "snippet": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        return tri(n - 1) + [n + 1]\n"}]}
{"question_id": "HumanEval/131", "language": "python", "prompt": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n", "signature": "def digits(n):", "solutions": [{"id": "0", "snippet": "def digits(n):\n\n    if n == 0:\n        return 0\n\n    return n % 2 * (n % 10 ** 2) % 10\n"}, {"id": "1", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return digits(n // 2) * 2\n"}, {"id": "2", "snippet": "def digits(n):\n    if n < 10:\n        return 0\n    return int(str(n) + str(n % 2))\n"}, {"id": "3", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 * (n % 10 ** 2) % 10\n"}, {"id": "4", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n * 2\n    else:\n        return n * 2 + 1\n"}, {"id": "5", "snippet": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    return 10 * n % 10\n"}, {"id": "6", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    return (10 * n) % 10\n"}, {"id": "7", "snippet": "def digits(n):\n    if n == 0:\n        return 0\n    return n % 2 * (n % 10 ** 2)\n"}, {"id": "8", "snippet": "def digits(n):\n    if n < 10:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return digits(n // 2) * 2\n"}, {"id": "9", "snippet": "def digits(n):\n    if n % 2 == 0:\n        return 0\n    else:\n        return int(n / 2)\n"}]}
{"question_id": "HumanEval/132", "language": "python", "prompt": "\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return True if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n", "signature": "def is_nested(string):", "solutions": [{"id": "0", "snippet": "def is_nested(string):\n    if len(string) < 2:\n        return False\n    for i in range(1, len(string)):\n        if string[i]!= '[' and string[i]!= ']' and string[i]!= ']]]' and string[i]!= '[[':\n            return False\n    return True\n"}, {"id": "1", "snippet": "def is_nested(string):\n    bracket_count = 0\n    for char in string:\n        if char == '[':\n            bracket_count += 1\n        elif char == ']]':\n            bracket_count -= 1\n        if bracket_count == 0:\n            return True\n    return False\n"}, {"id": "2", "snippet": "def is_nested(string):\n    if len(string) <= 1:\n        return True\n    for i in range(len(string)-1):\n        if string[i] == '[' and string[i+1] == ']':\n            return False\n    return True\n"}, {"id": "3", "snippet": "def is_nested(string):\n    brackets = ']]][[['\n    for bracket in brackets:\n        if string.startswith(bracket) and string.endswith(bracket):\n            return True\n    return False\n"}, {"id": "4", "snippet": "def is_nested(string):\n    is_nested_sq = lambda s: s == '[[' or s == ']]]][[[[]]]][[[]]]'\n\n    return filter(is_nested_sq, string.split('[['))\n"}, {"id": "5", "snippet": "def is_nested(string):\n    nested_list = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            nested_list.append(string[i])\n        elif string[i] == ']':\n            if len(nested_list) > 0 and nested_list[-1] == '[':\n                nested_list.pop()\n            else:\n                return False\n    if len(nested_list) == 0:\n        return True\n    else:\n        return False\n"}, {"id": "6", "snippet": "def is_nested(string):\n    is_nested_result = True\n\n    for i in range(len(string)):\n        if i >= len(string) or string[i]!= '[':\n            is_nested_result = False\n            break\n\n    return is_nested_result\n"}, {"id": "7", "snippet": "def is_nested(string):\n    bracket_count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            bracket_count += 1\n        elif string[i] == ']':\n            bracket_count -= 1\n        if bracket_count == 0:\n            return True\n    return False\n"}, {"id": "8", "snippet": "def is_nested(string):\n    bracket_count = 0\n    for i in range(len(string)):\n        if string[i] == '[':\n            bracket_count += 1\n        elif string[i] == ']':\n            bracket_count -= 1\n        if bracket_count == 0:\n            return True\n    return False\n"}, {"id": "9", "snippet": "def is_nested(string):\n    if len(string) == 0:\n        return False\n\n    for i in range(len(string)):\n        if string[i] == '[':\n            string = string[0:i] + '[' + string[i + 1:]\n        elif string[i] == ']':\n            string = string[0:i] + '[]]' + string[i + 1:]\n        elif string[i] == ']]':\n            string = string[0:i] + '[]]]][[[[]]]'\n        elif string[i] == ']]]][[[[]]':\n            string = string[0:i] + '[][[]]]]][[[[]]]'\n        else:\n            return False\n\n    return True\n"}]}
{"question_id": "HumanEval/133", "language": "python", "prompt": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = [1,2,3] the output should be 14\nFor lst = [1,4,9] the output should be 98\nFor lst = [1,3,5,7] the output should be 84\nFor lst = [1.4,4.2,0] the output should be 29\nFor lst = [-2.4,1,1] the output should be 6\n\n\n", "signature": "def sum_squares(lst):", "solutions": [{"id": "0", "snippet": "def sum_squares(lst):\n    if not isinstance(lst, list):\n        return 0\n    result = 0\n    for number in lst:\n        result += number**2\n    return result\n"}, {"id": "1", "snippet": "def sum_squares(lst):\n    tot = 0\n    for number in lst:\n        tot += number ** 2\n    return tot\n"}, {"id": "2", "snippet": "def sum_squares(lst):\n    ss = 0\n    for item in lst:\n        ss += item ** 2\n\n    return ss\n"}, {"id": "3", "snippet": "def sum_squares(lst):\n    return sum([x**2 for x in lst])\n"}, {"id": "4", "snippet": "def sum_squares(lst):\n    ss = 0\n    for num in lst:\n        ss += num**2\n    return ss\n"}, {"id": "5", "snippet": "def sum_squares(lst):\n    # Hint: the following line, \"s = [1,2,3]\" will give the sum of the squares\n    # of the elements in the list\n    s = [x**2 for x in lst]\n    s = sum(s)\n    s = int(round(s))\n\n    return s\n"}, {"id": "6", "snippet": "def sum_squares(lst):\n    # return sum([x**2 for x in lst])\n    return sum([int(x) for x in lst])\n"}, {"id": "7", "snippet": "def sum_squares(lst):\n    if lst == []:\n        return 0\n    result = 0\n    for number in lst:\n        result += number**2\n    return result\n"}, {"id": "8", "snippet": "def sum_squares(lst):\n    pass\n"}, {"id": "9", "snippet": "def sum_squares(lst):\n    if not isinstance(lst, list):\n        return None\n\n    result = 0\n    for i in lst:\n        result += i**2\n\n    return result\n"}]}
{"question_id": "HumanEval/134", "language": "python", "prompt": "\nCreate a function that returns True if the last character\nof a given string is an alphabetical character and is not\na part of a word, and False otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False\n", "signature": "def check_if_last_char_is_a_letter(txt):", "solutions": [{"id": "0", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda word: word.rstrip()[-1] in string.ascii_letters\n"}, {"id": "1", "snippet": "def check_if_last_char_is_a_letter(txt):\n    def is_letter(char):\n        return (len(char) == 1 and char.isalpha()) or (len(char) > 1 and char.isalpha() and char[-1].isalpha())\n\n    return is_letter\n"}, {"id": "2", "snippet": "def check_if_last_char_is_a_letter(txt):\n    def is_last_char_a_letter(ch):\n        return ch.isalpha() and ch!='' and ch!= \"\"\n\n    return is_last_char_a_letter\n"}, {"id": "3", "snippet": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return lambda x: x == \"\"\n    if txt[-1] == \" \" and txt[-1]!= \"e\":\n        return lambda x: x!= \"\" and txt[-1] in ascii_letters\n    return lambda x: txt[-1] in ascii_letters\n"}, {"id": "4", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda word: word[-1] =='' and not word.isalpha()\n"}, {"id": "5", "snippet": "def check_if_last_char_is_a_letter(txt):\n    # return a function that takes a string as input and returns True if the last\n    # character is a letter and is not a part of a word\n    def last_char_is_a_letter(txt):\n        if len(txt) == 0:\n            return True\n        elif txt[-1]!='':\n            return False\n        else:\n            return txt[-1] in 'abcdefghijklmnopqrstuvwxyz'\n\n    return last_char_is_a_letter\n"}, {"id": "6", "snippet": "def check_if_last_char_is_a_letter(txt):\n    # TODO: test on list of strings\n    return lambda x: x[-1] == x[-2] and x[-1] not in \" \\n\"\n"}, {"id": "7", "snippet": "def check_if_last_char_is_a_letter(txt):\n    if len(txt) == 0:\n        return lambda x: x == \"\"\n    if txt[-1] == \" \":\n        return lambda x: x!= \" \" and txt[-1] in ascii_letters\n    return lambda x: txt[-1] in ascii_letters and txt[-1]!= \" \"\n"}, {"id": "8", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda word: txt[-1].isalpha() and txt[-1]!= \" \" and \\\n                                                                                len(txt) == len(word)\n"}, {"id": "9", "snippet": "def check_if_last_char_is_a_letter(txt):\n    return lambda x: txt[-1] in x and txt[-(len(txt)) - 1]!= \" \"\n"}]}
{"question_id": "HumanEval/135", "language": "python", "prompt": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\n\nExamples:\ncan_arrange([1,2,4,3,5]) = 3\ncan_arrange([1,2,3]) = -1\n", "signature": "def can_arrange(arr):", "solutions": [{"id": "0", "snippet": "def can_arrange(arr):\n    if not arr:\n        return -1\n    return max(arr)\n"}, {"id": "1", "snippet": "def can_arrange(arr):\n    return lambda i: arr[i] if i >= arr[i - 1] else -1\n"}, {"id": "2", "snippet": "def can_arrange(arr):\n    return max(range(len(arr)), key=arr.__getitem__)\n"}, {"id": "3", "snippet": "def can_arrange(arr):\n    i = 0\n    j = len(arr) - 1\n    max_idx = -1\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] > arr[max_idx]:\n            max_idx = mid\n        if i == max_idx or arr[mid] < arr[max_idx]:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return max_idx\n"}, {"id": "4", "snippet": "def can_arrange(arr):\n    pos = -1\n    for i, x in enumerate(arr):\n        if x >= arr[pos]:\n            pos = i\n    return pos\n"}, {"id": "5", "snippet": "def can_arrange(arr):\n    return lambda x: x if x >= arr[x] else -1\n"}, {"id": "6", "snippet": "def can_arrange(arr):\n\n    if not arr:\n        return -1\n\n    pivot = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] <= pivot:\n            if i == 1:\n                return i\n            pivot = arr[i]\n        else:\n            return i\n"}, {"id": "7", "snippet": "def can_arrange(arr):\n\n    # Initialize the result array.\n    result = [-1] * len(arr)\n\n    # Iterate through the array and find the index where the element is not\n    # greater than or equal to itself.\n    for i, x in enumerate(arr):\n        index = i\n        while index >= 0 and arr[index] >= x:\n            index -= 1\n        result[i] = index\n\n    return result\n"}, {"id": "8", "snippet": "def can_arrange(arr):\n    # return lambda i: arr[max(i-1, 0)] if i > 0 else -1\n    return lambda i: max(i-1, 0) if i >= 0 else -1\n"}, {"id": "9", "snippet": "def can_arrange(arr):\n    return -1 if len(arr) < 2 else max(arr)\n"}]}
{"question_id": "HumanEval/136", "language": "python", "prompt": "\nCreate a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a list.\nIf there is no negative or positive integers, return them as None.\n\nExamples:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n", "signature": "def largest_smallest_integers(lst):", "solutions": [{"id": "0", "snippet": "def largest_smallest_integers(lst):\n    if lst:\n        a, b = max(lst), min(lst)\n        return (a, b)\n    else:\n        return (None, None)\n"}, {"id": "1", "snippet": "def largest_smallest_integers(lst):\n    # Use a stack to store the results\n    results = []\n\n    # Create a function to return the largest and smallest numbers in a list\n    def largest_and_smallest_numbers(numbers):\n        largest = numbers[0]\n        smallest = numbers[0]\n\n        # If there is no negative or positive integers, return the largest number and smallest number\n        if len(numbers) == 0:\n            return (largest, smallest)\n\n        # Otherwise, take the largest number and find the smallest number in a stack\n        for number in numbers[1:]:\n            if number > largest:\n                largest = number\n            elif number < smallest:\n                smallest = number\n\n        results.append((largest, smallest))\n        return results[-1]\n\n    # Return the largest and smallest numbers in a list\n    return large"}, {"id": "2", "snippet": "def largest_smallest_integers(lst):\n    # TODO: implement this function\n    if lst == []:\n        return (None, None)\n    elif lst == [1]:\n        return (1, 1)\n    a = max(lst)\n    b = min(lst)\n    for i in lst:\n        if i > b:\n            return (a, b)\n        elif i < a:\n            return (None, b)\n        a = i\n"}, {"id": "3", "snippet": "def largest_smallest_integers(lst):\n    # return (None, None) if lst is empty or has no positive integers\n    if not lst or len(lst) < 2:\n        return (None, None)\n\n    # get the largest number in the list\n    largest = max(lst)\n\n    # get the smallest number in the list\n    smallest = min(lst)\n\n    for num in lst:\n        if num < largest:\n            return (largest, num)\n        elif num > smallest:\n            return (smallest, num)\n    return (largest, None)\n"}, {"id": "4", "snippet": "def largest_smallest_integers(lst):\n    # hint: to find out if something is a largest and smallest or not,\n    # we should use a list comprehension.\n    # >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    # (None, None)\n    #\n    return lambda x: (-x[0], x[1]) if x[0] > 0 else (x[0], None)\n"}, {"id": "5", "snippet": "def largest_smallest_integers(lst):\n    # Based on https://stackoverflow.com/a/45091961\n    if not lst:\n        return (None, None)\n\n    a_max = max(lst)\n    a_min = min(lst)\n\n    for a in lst:\n        if a < a_min or a > a_max:\n            return (a, None)\n\n    return (a_max, a_max)\n"}, {"id": "6", "snippet": "def largest_smallest_integers(lst):\n    # return (None, None) if lst == [] else (max(lst), min(lst))\n    lst = list(set(lst))\n    if lst == []:\n        return (None, None)\n    if len(lst) == 1:\n        return (lst[0], lst[0])\n    a, b = lst[-1], lst[0]\n    for x in lst[1:]:\n        if x < a:\n            a, b = b, x\n        if x > b:\n            return (a, b)\n    return (a, b)\n"}, {"id": "7", "snippet": "def largest_smallest_integers(lst):\n    if lst:\n        a, b = max(lst), min(lst)\n        return (a, b)\n    else:\n        return (None, None)\n"}, {"id": "8", "snippet": "def largest_smallest_integers(lst):\n\n    # Use function defined in module 'functools'\n    gcd_result = gcd(*map(max, zip(*lst)))\n\n    # Return tuple (largest, smallest) where 'largest' is the largest number\n    # and'smallest' is the smallest number that is greater than or equal\n    # to 'largest'.\n    return gcd_result\n"}, {"id": "9", "snippet": "def largest_smallest_integers(lst):\n\n    # Base case, empty list\n    if not lst:\n        return (None, None)\n\n    # Recursive case\n    (largest, smallest) = largest_smallest_integers(lst[1:])\n    if largest < smallest:\n        return (lst[0], largest)\n    return (largest, smallest)\n"}]}
{"question_id": "HumanEval/137", "language": "python", "prompt": "\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n", "signature": "def compare_one(a, b):", "solutions": [{"id": "0", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        if isinstance(a, float) and isinstance(b, float):\n            return float(a) > float(b)\n        elif isinstance(a, int) and isinstance(b, int):\n            return a > b\n        elif isinstance(a, float):\n            return a > b\n        elif isinstance(b, float):\n            return b > a\n        elif isinstance(a, int):\n            return a > b\n        else:\n            return None\n    elif isinstance(a, Real) and isinstance(b, Real):\n        return abs(a - b) > 10e-6\n    else:\n        return None\n"}, {"id": "1", "snippet": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a)\n    if isinstance(b, str):\n        b = float(b)\n    if a == b:\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return (a > b) - (a < b)\n    elif isinstance(a, float) and isinstance(b, float):\n        return (a > 0) - (a < 0)\n    else:\n        return None\n"}, {"id": "2", "snippet": "def compare_one(a, b):\n    try:\n        if a == b:\n            return None\n        elif a == float(b):\n            return 0.0\n        elif a == int(b):\n            return 1.0\n        elif isinstance(a, str) and isinstance(b, str):\n            if a.strip() == \"\":\n                return 0.0\n            if b.strip() == \"\":\n                return 1.0\n        else:\n            return min(a, b)\n    except (TypeError, ValueError):\n        return None\n"}, {"id": "3", "snippet": "def compare_one(a, b):\n\n    if a == b:\n        return None\n\n    elif isinstance(a, str):\n        a = parse_number(a)\n\n    if isinstance(b, str):\n        b = parse_number(b)\n\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return (max(a, b))\n\n    else:\n        return None\n"}, {"id": "4", "snippet": "def compare_one(a, b):\n    if type(a) == str:\n        a = float(a)\n    if type(b) == str:\n        b = float(b)\n    if a == b:\n        return None\n    elif a > b:\n        return 1\n    elif a < b:\n        return -1\n    else:\n        return 0\n"}, {"id": "5", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) or isinstance(b, str):\n        return None\n    elif isinstance(a, int) and isinstance(b, int):\n        return a if a > b else b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a if a > 0 else b\n    elif isinstance(a, complex) and isinstance(b, complex):\n        return (a.real - b.real) / (a.imag - b.imag)\n    else:\n        return None\n"}, {"id": "6", "snippet": "def compare_one(a, b):\n\n    if type(a) is float or type(b) is float:\n        if a == b:\n            return None\n        else:\n            return a\n    elif type(a) is str:\n        try:\n            a = float(a)\n        except ValueError:\n            return None\n    elif type(b) is str:\n        try:\n            b = float(b)\n        except ValueError:\n            return None\n\n    if a > b:\n        return 1\n    elif a < b:\n        return -1\n    else:\n        return 0\n"}, {"id": "7", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a, b = map(float, a.split(\",\"))\n    if isinstance(a, float) and isinstance(b, float):\n        return abs(a - b)\n    elif isinstance(a, int) and isinstance(b, int):\n        return max(a, b)\n    elif isinstance(a, (str, float)) and isinstance(b, str):\n        return \"{0}\".format(max(a, b))\n    elif isinstance(a, (str, float)):\n        return \"{0}\".format(a)\n    elif isinstance(a, complex) and isinstance(b, complex):\n        return \"{0}+{1}i\".format(a, b)\n    else:\n        return None\n"}, {"id": "8", "snippet": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        # special case for strings (e.g. \"1e20\")\n        if a == b:\n            return None\n        else:\n            return (a, b)\n    if a == b:\n        return a\n    elif isinstance(a, int) and isinstance(b, int):\n        # compare reals\n        return (a, b)\n    elif isinstance(a, float) and isinstance(b, float):\n        # compare integers\n        return (a, b)\n    elif isinstance(a, complex) and isinstance(b, complex):\n        # compare complex numbers\n        return (a.real, b.real)\n    else:\n        # compare strings\n        return (a, b)\n"}, {"id": "9", "snippet": "def compare_one(a, b):\n    try:\n        return lambda x: x > a and x < b\n    except TypeError:\n        # If a is not a number, assume it's equal\n        return lambda x: x == a or x < b\n"}]}
{"question_id": "HumanEval/138", "language": "python", "prompt": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n", "signature": "def is_equal_to_sum_even(n):", "solutions": [{"id": "0", "snippet": "def is_equal_to_sum_even(n):\n    return (n & (n - 1) == 0) and (n & 0x80 == 0)\n"}, {"id": "1", "snippet": "def is_equal_to_sum_even(n):\n    return (n + n + n >= 4)\n"}, {"id": "2", "snippet": "def is_equal_to_sum_even(n):\n    return (n + n >= 4) and (n + n <= 6)\n"}, {"id": "3", "snippet": "def is_equal_to_sum_even(n):\n    # Based on http://stackoverflow.com/a/45091961\n    return n & (n - 1) == 0\n"}, {"id": "4", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum(filter(lambda x: x % 2 == 0, range(3, n, 2)))\n"}, {"id": "5", "snippet": "def is_equal_to_sum_even(n):\n    return n == sum(range(4, n, 2))\n"}, {"id": "6", "snippet": "def is_equal_to_sum_even(n):\n    return n % 4 == 0 and n >= 2\n"}, {"id": "7", "snippet": "def is_equal_to_sum_even(n):\n    return n >= 0 and (n + 4 % 2 == 0)\n"}, {"id": "8", "snippet": "def is_equal_to_sum_even(n):\n    if n == 0:\n        return True\n    if n < 0:\n        return False\n\n    result = 0\n    for x in range(1, int(n**0.5)+1):\n        if n % x == 0:\n            result += x\n            result += n % x\n\n    return result == n\n"}, {"id": "9", "snippet": "def is_equal_to_sum_even(n):\n    return n > 0 and ((n + 1) % 4 == 0)\n"}]}
{"question_id": "HumanEval/139", "language": "python", "prompt": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n", "signature": "def special_factorial(n):", "solutions": [{"id": "0", "snippet": "def special_factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"}, {"id": "1", "snippet": "def special_factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "2", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "3", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return n * special_factorial(n-1)\n"}, {"id": "4", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n"}, {"id": "5", "snippet": "def special_factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "6", "snippet": "def special_factorial(n):\n    if n <= 0:\n        return 0\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "7", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}, {"id": "8", "snippet": "def special_factorial(n):\n    if n == 0:\n        return 1\n    return n * special_factorial(n - 1)\n"}, {"id": "9", "snippet": "def special_factorial(n):\n\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n"}]}
{"question_id": "HumanEval/14", "language": "python", "prompt": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n['a', 'ab', 'abc']\n", "signature": "def all_prefixes(string: str):", "solutions": [{"id": "0", "snippet": "def all_prefixes(string: str):\n    all_prefixes = []\n    prefixes = []\n    for i in range(len(string)):\n        if i == 0 or string[i]!= string[i-1]:\n            all_prefixes.append(string[i:])\n            prefixes.append(string[:i])\n    return all_prefixes, prefixes\n"}, {"id": "1", "snippet": "def all_prefixes(string: str):\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}, {"id": "2", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}, {"id": "3", "snippet": "def all_prefixes(string: str):\n    return [s[0] for s in shortest_paths(string)]\n"}, {"id": "4", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        prefixes.append(prefix)\n        prefixes.append(prefix + string[i + 1:])\n    return prefixes\n"}, {"id": "5", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            prefixes.append(string[i:j])\n    return prefixes\n"}, {"id": "6", "snippet": "def all_prefixes(string: str):\n    all_prefixes = []\n    for i in range(len(string)):\n        all_prefixes.append(string[:i+1])\n    return all_prefixes\n"}, {"id": "7", "snippet": "def all_prefixes(string: str):\n    return [prefix for prefix, _ in shortest_paths(string)]\n"}, {"id": "8", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}, {"id": "9", "snippet": "def all_prefixes(string: str):\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i])\n    return prefixes\n"}]}
{"question_id": "HumanEval/140", "language": "python", "prompt": "\nGiven a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n", "signature": "def fix_spaces(text):", "solutions": [{"id": "0", "snippet": "def fix_spaces(text):\n    return re.sub(r\"  +\", \"_\", text)\n"}, {"id": "1", "snippet": "def fix_spaces(text):\n    return re.sub(r'  +', '_', text)\n"}, {"id": "2", "snippet": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_ \", \"_\").replace(\"  \", \"_\")\n"}, {"id": "3", "snippet": "def fix_spaces(text):\n    return re.sub(r\"  +\", \"_\", text)\n"}, {"id": "4", "snippet": "def fix_spaces(text):\n    return re.sub(r\"  +\", \"_\", text)\n"}, {"id": "5", "snippet": "def fix_spaces(text):\n    return text.replace(' ', '_')\n"}, {"id": "6", "snippet": "def fix_spaces(text):\n    return re.sub('  ', '_', text)\n"}, {"id": "7", "snippet": "def fix_spaces(text):\n    return re.sub(r\"  +\", \"_\", text)\n"}, {"id": "8", "snippet": "def fix_spaces(text):\n    return re.sub('  ', '_', text)\n"}, {"id": "9", "snippet": "def fix_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"\\n\", \"_\")\n"}]}
{"question_id": "HumanEval/141", "language": "python", "prompt": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n", "signature": "def file_name_check(file_name):", "solutions": [{"id": "0", "snippet": "def file_name_check(file_name):\n    if len(file_name)!= 3 or file_name[0].isdigit() or file_name[1].isalpha():\n        return 'No'\n\n    if not file_name[1].isalpha() or file_name[1] == '.':\n        return 'No'\n\n    if not file_name[0].isalpha():\n        return 'No'\n\n    for dot in file_name[1:]:\n        if not dot.isalpha() or dot == '.':\n            return 'No'\n\n    return 'Yes'\n"}, {"id": "1", "snippet": "def file_name_check(file_name):\n    if not re.match(r'^[0-9a-zA-Z][0-9a-zA-Z][0-9a-zA-Z]\\.[txt|exe|dll]$', file_name):\n        return 'Invalid File Name'\n\n    if len(file_name) < 3:\n        return 'Invalid File Name'\n\n    for dot_index in range(len(file_name) - 2):\n        if not file_name[dot_index].isalpha() or not file_name[dot_index + 1].isalpha() or \\\n                not file_name[dot_index + 2].isalpha():\n            return 'Invalid File Name'\n\n    valid_file_name = ['txt', 'exe', 'dll']\n    return 'Yes' if file_name[0].lower() in valid_file_name and \\\n           file_name[1:].lower() in valid_file_name and \\\n           file_name[2:].lower() in valid_file_name else 'No'\n"}, {"id": "2", "snippet": "def file_name_check(file_name):\n    if re.match(r'^[0-9a-zA-Z]{3,}\\.[0-9a-zA-Z]{3,}$', file_name):\n        if len(file_name.split(\".\"))!= 2:\n            return 'No'\n        if not re.match(r'^[a-zA-Z]{3,}\\.[0-9a-zA-Z]{3,}$', file_name.split(\".\")[0]):\n            return 'No'\n        if file_name.split(\".\")[1] not in ['txt', 'exe', 'dll']:\n            return 'No'\n        if file_name.strip()!= '':\n            return 'Yes'\n    else:\n        return 'No'\n"}, {"id": "3", "snippet": "def file_name_check(file_name):\n    # type: (Text) -> Callable[[Text], Text]\n    \"\"\"\n    Create a function which takes a string representing a file's name,\n    and returns 'Yes' if the file's name is valid, and returns 'No' otherwise.\n\n    A file's name is considered to be valid if and only if all the following\n    conditions are met:  There should not be more than three digits ('0'-'9') in the\n    file's name.  The file's name contains exactly one dot '.' - The substring before\n    the dot should not be empty, and it starts with a letter from the latin alphapet\n    ('a'-'z' and 'A'-'Z').  The substring after the dot should be one of these:\n    ['txt', 'exe', 'dll']\n\n    Examples:\n        file_name_check(\"example.txt\")  # => 'Yes' file_name_check(\"1example.dll\")\n        => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if not re.match(r'^[0-9][A-Za-z]{3,}\\.[0-9]["}, {"id": "4", "snippet": "def file_name_check(file_name):\n\n    # Create a function which takes a string representing the file's name, and\n    # returns 'Yes' if the file's name is valid, and returns 'No' (the name\n    # is considered to be valid if and only if there should not be more than\n    # three digits ('0'-'9') in the file's name.  A file's name is considered\n    # to be valid if and only if there should not be exactly three digits in\n    # the file's name.  The substring before the dot should not be empty,\n    # and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    #  The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    if len(file_name) < 3 or file_name[0].isalpha() or file_name[1].isalpha():\n        return 'No'\n    elif file_name[0].isdigit() and file_name[1].isalpha():\n        return 'Yes'\n    else:\n        return 'No'\n"}, {"id": "5", "snippet": "def file_name_check(file_name):\n    if len(file_name) < 3 or file_name[0] not in string.ascii_letters or len(file_name) < 3:\n        return 'No'\n\n    if \".\" not in file_name or file_name[-1] not in string.ascii_letters:\n        return 'No'\n\n    return 'Yes' if file_name[:-1].count(\".\") == 1 and file_name[-1] in [\"txt\", \"exe\", \"dll\"] else 'No'\n"}, {"id": "6", "snippet": "def file_name_check(file_name):\n    if len(file_name) < 3 or file_name[0] not in '0123456789.':\n        return 'No'\n    if '.' in file_name or len(file_name) < 3:\n        return 'No'\n    if file_name[-1] not in '.':\n        return 'No'\n    if 'a' <= file_name[0] <= 'z' or 'A' <= file_name[0] <= 'Z':\n        return 'Yes'\n    return 'No'\n"}, {"id": "7", "snippet": "def file_name_check(file_name):\n    if re.match(r'^[0-9][A-Za-z]{3}[.][a-zA-Z0-9]{1,}$', file_name):\n        return 'Yes' if re.match(r'^[0-9][A-Za-z]{3}[.][a-zA-Z0-9]{1,}$', file_name) else 'No'\n    else:\n        return 'Invalid File Name'\n"}, {"id": "8", "snippet": "def file_name_check(file_name):\n    if len(file_name) < 3 or file_name[0]!= \"0\" or file_name[-1]!= \".\" or file_name[-3:]!= [\"txt\", \"exe\", \"dll\"]:\n        return \"No\"\n    else:\n        return \"Yes\" if not re.match(\"^[a-zA-Z0-9\\.\\-_]+$\", file_name) else \"No\"\n"}, {"id": "9", "snippet": "def file_name_check(file_name):\n    # type: (str) -> str\n    \"\"\"\n    Create a function which takes a string representing a file's name,\n    and returns 'Yes' if the file's name is valid, and returns 'No'\n    otherwise. A file's name is considered to be valid if and only if\n    all the following conditions are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.' - The substring before\n      the dot should not be empty, and it starts with a letter from the\n      latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dot\n      should be one of these: ['txt', 'exe', 'dll']\n\n    Examples:\n        file_name_check(\"example.txt\")\n        => 'Yes' file_name_check(\"1example.dll\")\n        => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    if not re.match('[0-9]{3}[.][a-zA-Z]{3"}]}
{"question_id": "HumanEval/142", "language": "python", "prompt": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\nExamples:\nFor lst = [1,2,3] the output should be 6\nFor lst = []  the output should be 0\nFor lst = [-1,-5,2,-1,-5]  the output should be -126\n", "signature": "def sum_squares(lst):", "solutions": [{"id": "0", "snippet": "def sum_squares(lst):\n    return sum([int(i) ** 3 for i in lst]) ** 4\n"}, {"id": "1", "snippet": "def sum_squares(lst):\n\n    if not isinstance(lst, list):\n        raise TypeError(\"lst should be a list\")\n\n    if not all(isinstance(i, int) for i in lst):\n        raise TypeError(\"lst should be a list of integers\")\n\n    if len(lst) % 3 == 0 and len(lst) % 4 == 0:\n        result = 0\n        for i in lst:\n            result += i**3\n        return result\n\n    return -126\n"}, {"id": "2", "snippet": "def sum_squares(lst):\n\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    elif len(lst) % 3 == 0 and len(lst) % 4 == 0:\n        return (lst[0] * lst[0] + lst[1] * lst[1] + lst[2] * lst[2] + lst[3] * lst[3]) % 1337\n    else:\n        return (lst[0] * lst[0] + lst[1] * lst[1] + lst[2] * lst[2] + lst[3] * lst[3] + lst[4] * lst[4]) % 1337\n"}, {"id": "3", "snippet": "def sum_squares(lst):\n\n    # base case\n    if (len(lst) == 0):\n        return 0\n\n    if (len(lst) % 3 == 0):\n        if (len(lst) % 4 == 0):\n            return -126\n        else:\n            return sum(lst)\n\n    # recursive case\n    result = 0\n    for i in range(0, len(lst)):\n        if (i % 3 == 0 or i % 4 == 0):\n            result += lst[i]**2\n\n    return result\n"}, {"id": "4", "snippet": "def sum_squares(lst):\n\n    if not isinstance(lst, list):\n        return None\n\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 3 == 0:\n            lst[i] = lst[i] ** 3\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 4\n    return lst[0]\n"}, {"id": "5", "snippet": "def sum_squares(lst):\n    if lst == []:\n        return 0\n\n    if len(lst) % 3 == 0 and len(lst) % 4 == 0:\n        return (lst[0] ** 2) + (lst[1] ** 2) + (lst[2] ** 2) + (lst[3] ** 2)\n    elif len(lst) % 3 == 0:\n        return (lst[0] ** 2)\n    elif len(lst) % 4 == 0:\n        return (lst[1] ** 2)\n    else:\n        return -126\n"}, {"id": "6", "snippet": "def sum_squares(lst):\n\n    if type(lst) is not list:\n        return -1\n\n    if len(lst) < 3:\n        return 0\n\n    if lst[0] % 3 == 0 and lst[1] % 4 == 0:\n        return lst[0] ** 2 + lst[1] ** 2\n    elif lst[0] % 3 == 0:\n        return -(lst[0] ** 2)\n    elif lst[1] % 4 == 0:\n        return -(lst[1] ** 2)\n    else:\n        return 0\n"}, {"id": "7", "snippet": "def sum_squares(lst):\n\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n\n    return lst[0] + sum_squares(lst[1:])\n"}, {"id": "8", "snippet": "def sum_squares(lst):\n\n    if len(lst) == 0:\n        return 0\n\n    if len(lst) == 1:\n        return lst[0]\n\n    index_a = 0\n    index_b = 0\n\n    index_c = 0\n    index_d = 0\n\n    if lst[0] % 3 == 0 and lst[1] % 4 == 0:\n        index_a = lst[0]\n        index_b = lst[1]\n        index_c = lst[2]\n        index_d = lst[3]\n    else:\n        index_a = lst[0]\n        index_b = lst[1]\n\n    if lst[2] % 3 == 0:\n        index_c = lst[2]\n        index_d = lst[3]\n    else:\n        index_c = lst[2]\n        index_d = lst[3]\n\n    return lst[index_a] + lst[index_b] + lst[index_c] + lst[index_d]\n"}, {"id": "9", "snippet": "def sum_squares(lst):\n\n    # make sure the input is a list\n    if not isinstance(lst, list):\n        return None\n\n    # loop through the list\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 == 0:\n            result = result * 3\n        elif i % 3 == 0:\n            result = result * 3 - 4\n        elif i % 4 == 0:\n            result = result * 4\n\n    return result\n"}]}
{"question_id": "HumanEval/143", "language": "python", "prompt": "\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\n\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\n\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters\n", "signature": "def words_in_sentence(sentence):", "solutions": [{"id": "0", "snippet": "def words_in_sentence(sentence):\n    words = sentence.split()\n    prime_numbers = []\n    for i in range(1, len(words)):\n        if is_prime(words[i]):\n            prime_numbers.append(words[i])\n    return \" \".join(prime_numbers)\n"}, {"id": "1", "snippet": "def words_in_sentence(sentence):\n    return \" \".join(sentence.split())\n"}, {"id": "2", "snippet": "def words_in_sentence(sentence):\n    words = sentence.split()\n    l = len(words)\n    prime_numbers = [2]\n    for i in range(3, l, 2):\n        if (words[i] in prime_numbers):\n            prime_numbers.append(words[i] + 1)\n        else:\n            prime_numbers.append(words[i])\n    return \" \".join([i for i in words if i in prime_numbers])\n"}, {"id": "3", "snippet": "def words_in_sentence(sentence):\n    # your code here\n    return \" \".join(sentence.split())\n"}, {"id": "4", "snippet": "def words_in_sentence(sentence):\n    words = sentence.split()\n    primes = [2]\n    result = \"\"\n    for i in words:\n        for j in range(len(i)):\n            if i[j] not in primes:\n                break\n        else:\n            result += i\n            primes += i[j:]\n    return result\n"}, {"id": "5", "snippet": "def words_in_sentence(sentence):\n    sentence_list = sentence.split()\n    length_of_sentence = len(sentence_list)\n\n    for i in range(length_of_sentence):\n        for j in range(1, 10):\n            if j not in sentence_list[i]:\n                return str(i) + \" \" + str(j) + \" is \" + sentence_list[i]\n    return \"Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters\"\n"}, {"id": "6", "snippet": "def words_in_sentence(sentence):\n    words_list = sentence.split()\n    primes = []\n    order_of_words = []\n    for word in words_list:\n        if is_prime(word):\n            primes.append(word)\n        else:\n            order_of_words.append(len(word))\n    return \" \".join(primes), \" \".join(order_of_words)\n"}, {"id": "7", "snippet": "def words_in_sentence(sentence):\n    sentence_list = sentence.split()\n    sentence_list_length = len(sentence_list)\n\n    for i in range(sentence_list_length):\n        if is_prime(sentence_list[i]) and i + 1 < sentence_list_length:\n            return sentence_list[i]\n"}, {"id": "8", "snippet": "def words_in_sentence(sentence):\n    return \" \".join(sentence.split())\n"}, {"id": "9", "snippet": "def words_in_sentence(sentence):\n    # your code here\n    sentence_list = sentence.split()\n    words = []\n    for word in sentence_list:\n        if len(word) == 2 and word.isalpha():\n            if words:\n                words.append(word)\n            else:\n                words = [word]\n    return \" \".join(words)\n"}]}
{"question_id": "HumanEval/144", "language": "python", "prompt": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\n", "signature": "def simplify(x, n):", "solutions": [{"id": "0", "snippet": "def simplify(x, n):\n    # Your code here\n    if n == 0:\n        return False\n    elif n == 1:\n        return x\n    elif x == 0:\n        return n\n    elif x % n == 0:\n        return n\n    else:\n        return simplify(x * n, n - x)\n"}, {"id": "1", "snippet": "def simplify(x, n):\n    # return False if n == 0 else not simplify(x, n / 2)\n    if n == 0:\n        return True\n    else:\n        return x * int(n)\n"}, {"id": "2", "snippet": "def simplify(x, n):\n    numerator = eval(str(x) + str(n))\n    denominator = eval(str(n) + \"/\" + str(x))\n    return numerator // denominator == 0\n"}, {"id": "3", "snippet": "def simplify(x, n):\n    if x.is_integer() and n.is_integer():\n        if x * n == int(x) * int(n):\n            # if x * n == int(x) * int(n) and n!= 0:\n            #     return True\n            if x == int(x) * int(n):\n                return False\n            if n == 0:\n                return True\n            return simplify(int(x), int(n))\n        else:\n            return False\n    else:\n        return False\n"}, {"id": "4", "snippet": "def simplify(x, n):\n    numerator = x * int(n)\n    denominator = int(numerator)\n    if denominator == 0:\n        return False\n    return numerator / denominator\n"}, {"id": "5", "snippet": "def simplify(x, n):\n    numerator = x * int(n)\n    denominator = int(x) * int(n)\n    if numerator == 0 or denominator == 0:\n        return False\n    return numerator / denominator\n"}, {"id": "6", "snippet": "def simplify(x, n):\n\n    # return False if the result is 0\n    if n == 0:\n        return False\n\n    # if n is a fraction, we can simplify it\n    if isinstance(n, Fraction):\n        return x * n.denominator / n.numerator\n\n    # otherwise, we can just do x * n with the initial denominator\n    return x * n\n"}, {"id": "7", "snippet": "def simplify(x, n):\n    return x * int(n)\n"}, {"id": "8", "snippet": "def simplify(x, n):\n    return True if x * n > 0 else False\n"}, {"id": "9", "snippet": "def simplify(x, n):\n    if type(x) is not str or type(n) is not str:\n        return False\n    numerator = int(x)\n    denominator = int(n)\n    if numerator == 0:\n        return False\n    if denominator == 0:\n        return False\n    if numerator == 1:\n        return True\n    if denominator == 1:\n        return x\n    while numerator!= 0:\n        if numerator % denominator == 0:\n            numerator /= denominator\n        else:\n            break\n    return x // numerator * numerator\n"}]}
{"question_id": "HumanEval/145", "language": "python", "prompt": "\nWrite a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\n\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n>>> order_by_points([]) == []\n", "signature": "def order_by_points(nums):", "solutions": [{"id": "0", "snippet": "def order_by_points(nums):\n\n    sorted_nums = sorted(nums, key=sum_digits)\n\n    return sorted_nums\n"}, {"id": "1", "snippet": "def order_by_points(nums):\n\n    nums.sort(key=lambda x: sum(x))\n    return nums\n"}, {"id": "2", "snippet": "def order_by_points(nums):\n    nums = sorted(nums, key=sum)\n    return nums\n"}, {"id": "3", "snippet": "def order_by_points(nums):\n    nums = sorted(nums, key=sum)\n    return nums\n"}, {"id": "4", "snippet": "def order_by_points(nums):\n\n    if not nums:\n        return nums\n\n    nums.sort(key=lambda x: sum([int(digit) for digit in str(x)]))\n    return nums\n"}, {"id": "5", "snippet": "def order_by_points(nums):\n\n    sorted_nums = sorted(nums, key=sum)\n\n    return sorted_nums\n"}, {"id": "6", "snippet": "def order_by_points(nums):\n\n    nums_len = len(nums)\n\n    if nums_len == 0:\n        return []\n\n    sorted_nums = sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n    sorted_nums.reverse()\n\n    return sorted_nums\n"}, {"id": "7", "snippet": "def order_by_points(nums):\n    nums.sort()\n    return nums\n"}, {"id": "8", "snippet": "def order_by_points(nums):\n\n    if not nums:\n        return nums\n\n    result = []\n    nums.sort()\n    previous_digit = nums[0]\n    for i in nums:\n        if i!= previous_digit:\n            result.append(i)\n        previous_digit = i\n\n    return result\n"}, {"id": "9", "snippet": "def order_by_points(nums):\n\n    if not nums:\n        return nums\n\n    nums.sort()\n    points = []\n\n    for index, num in enumerate(nums):\n        current_point = index\n        while current_point!= 0 and nums[current_point - 1] + nums[current_point] < num:\n            nums[current_point], nums[current_point - 1] = nums[current_point - 1], nums[current_point]\n            current_point -= 1\n\n        if current_point == 0:\n            points.append(current_point)\n\n    return points\n"}]}
{"question_id": "HumanEval/146", "language": "python", "prompt": "Write a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter([15, -73, 14, -15]) => 1\nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n", "signature": "def specialFilter(nums):", "solutions": [{"id": "0", "snippet": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 2 == 0:\n            count += 1\n        if num > 10 and num % 2!= 0:\n            count += 1\n    return count\n"}, {"id": "1", "snippet": "def specialFilter(nums):\n    count = 0\n    for i in nums:\n        if i > 10:\n            count += 1\n        elif i == 10:\n            if count % 2 == 0:\n                count += 1\n        elif i % 2 == 0:\n            count += 1\n    return count\n"}, {"id": "2", "snippet": "def specialFilter(nums):\n    result = 0\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            result += 1\n    return result\n"}, {"id": "3", "snippet": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10 and nums[i] % 2 == 1:\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def specialFilter(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 10:\n            if nums[i] % 2 == 0:\n                count += 1\n            if i == 0 or nums[i] % 2!= 0:\n                if nums[i] % 2 == 1:\n                    count += 1\n    return count\n"}, {"id": "5", "snippet": "def specialFilter(nums):\n    result = 0\n    first = -1\n    second = -1\n    for num in nums:\n        if num > 10:\n            first = num\n        elif num > 3:\n            second = num\n        elif num > 5:\n            result += 1\n    return result + first + second\n"}, {"id": "6", "snippet": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 == 1:\n                count += 1\n            if num % 2 == 0:\n                count += 2\n    return count\n"}, {"id": "7", "snippet": "def specialFilter(nums):\n    if len(nums) < 2:\n        return 0\n    first = nums[0]\n    last = nums[-1]\n    if first > 10 and last % 2!= 0:\n        return 1\n    elif last > 10 and first % 2 == 0:\n        return 2\n    elif first > 10 and last % 2 == 1:\n        return 3\n    elif first > 10 and last % 2 == -1:\n        return 4\n    elif first > 10 and last % 2!= 0:\n        return 5\n"}, {"id": "8", "snippet": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num%2 == 0 and num > 10:\n            count += 1\n    return count\n"}, {"id": "9", "snippet": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            if num % 2 == 1:\n                count += 1\n            if num % 2 == 0:\n                count -= 1\n    return count\n"}]}
{"question_id": "HumanEval/147", "language": "python", "prompt": "\nYou are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k,\nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n", "signature": "def get_max_triples(n):", "solutions": [{"id": "0", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n\n    return sum([max(a[i:i+3]) * 3 - max(a[i:i+2]) + 1 for i in range(0, n)])\n"}, {"id": "1", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n\n    for i in range(n):\n        a[i] = i * i - i + 1\n\n    return a\n"}, {"id": "2", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    return sum([a[i] * a[i] - a[j] + a[k] for i in range(n) if i < j < k]) % 3\n"}, {"id": "3", "snippet": "def get_max_triples(n):\n\n    a = [1, 3, 7, 13, 21]\n\n    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n\n    return a\n"}, {"id": "4", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if i < j < k:\n                    result = max(result, a[i] * a[j] + a[j] * a[k] + 1)\n    return result\n"}, {"id": "5", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n\n    for i in range(1, n):\n        a[i] = a[i] * i - i + 1\n\n    return a[-1] * (a[-1] + a[-2]) // 3\n"}, {"id": "6", "snippet": "def get_max_triples(n):\n\n    a = [1, 3, 7, 13, 21]\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if i < j < k:\n                    a[i] = max(a[i], a[j] * 3 - a[i] + 1)\n                    a[j] = max(a[j], a[k] * 3 - a[j] + 1)\n                    a[k] = max(a[k], a[i] * 3 - a[k] + 1)\n    return a[-1]\n"}, {"id": "7", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    return sum([a[i] * a[i] - a[j] + a[k] for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n)]) % 3\n"}, {"id": "8", "snippet": "def get_max_triples(n):\n\n    a = [1, 3, 7, 13, 21]\n\n    for i in range(3, n):\n        a.append(a[i - 1] * 3 - a[i - 2] + a[i - 3])\n\n    return a[n - 1] * 3 - a[n - 2] + a[n - 3]\n"}, {"id": "9", "snippet": "def get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    result = 0\n    for i in range(1, n + 1):\n        a[i] = i * i - i + 1\n        a[j] = i * i + i + 1\n        a[k] = i * i - i + 1\n        if a[i] * a[j] * a[k] == 0:\n            result = i\n    return result\n"}]}
{"question_id": "HumanEval/148", "language": "python", "prompt": "\nThere are eight planets in our solar system: the closerst to the Sun\nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2.\nThe function should return a tuple containing all planets whose orbits are\nlocated between the orbit of planet1 and the orbit of planet2, sorted by\nthe proximity to the sun.\nThe function should return an empty tuple if planet1 or planet2\nare not correct planet names.\nExamples\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n", "signature": "def bf(planet1, planet2):", "solutions": [{"id": "0", "snippet": "def bf(planet1, planet2):\n\n    # If the names of the two planets are not the same, return an empty tuple\n    if not equal(planet1, planet2):\n        return ()\n\n    # Iterate through all the planets in our solar system and see if they are closest\n    # to each other\n    planets_distances = []\n    for i in range(len(planet1.name)):\n        distance = abs(planet1.name[i] - planet2.name[i])\n        planets_distances.append((planet1.name[i], planet2.name[i], distance))\n\n    # Sort the distances in alphabetical order\n    planets_distances.sort()\n\n    # Return the first and second planets\n    return planets_distances[0]\n"}, {"id": "1", "snippet": "def bf(planet1, planet2):\n\n    if planet1 == \"Sun\" and planet2 == \"Venus\":\n        return (\"Sun\", \"Venus\")\n    elif planet1 == \"Sun\" or planet2 == \"Venus\":\n        return (\"Saturn\", \"Uranus\")\n    elif planet1 == \"Mercury\" and planet2 == \"Earth\":\n        return (\"Mercury\", \"Uranus\")\n    elif planet1 == \"Mercury\" or planet2 == \"Earth\":\n        return (\"Saturn\", \"Neptune\")\n    elif planet1 == \"Saturn\" or planet2 == \"Neptune\":\n        return (\"Sun\", \"Venus\")\n    else:\n        return ()\n"}, {"id": "2", "snippet": "def bf(planet1, planet2):\n    return sorted([planet1, planet2], key=lambda x: (SUN_ORIENTATION[x], x))\n"}, {"id": "3", "snippet": "def bf(planet1, planet2):\n\n    return sorted([planet1, planet2], key=lambda x: (orbital_angle(x, planet1), orbital_angle(x, planet2)))\n"}, {"id": "4", "snippet": "def bf(planet1, planet2):\n\n    return tuple(sorted(set([planet1, planet2]).difference({\"Neptune\", \"Mercury\"})))\n"}, {"id": "5", "snippet": "def bf(planet1, planet2):\n    # assume that the given strings are correct\n    if type(planet1)!= str:\n        return \"The given strings are not correct.\"\n    if type(planet2)!= str:\n        return \"The given strings are not correct.\"\n    if planet1 == planet2:\n        return \"The given strings are correct.\"\n    distance = 0\n    for index, planet in enumerate(planet1.split(\" \")):\n        if planet == planet2:\n            distance += 2 ** index\n            if index == len(planet1.split(\" \")) - 1:\n                return \"The given strings are correct.\"\n            if planet1 == planet2:\n                return (planet1, planet2)\n            if planet1 == planet2 + \" Sun\":\n                return (\"Saturn\", \"Venus\")\n            if planet1 == planet2 + \" Mars\":\n       "}, {"id": "6", "snippet": "def bf(planet1, planet2):\n\n    # A simple hack for the case where the names of the two planets are the same\n    if planet1 == planet2:\n        return \"Saturn\"\n\n    if planet1 in (\"Sun\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return (\"Sun\", \"Uranus\")\n\n    if planet2 in (\"Sun\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"):\n        return (\"Sun\", \"Mercury\")\n\n    return sorted(\n        [planet1, planet2],\n        key=lambda x: orbital_angle(x.name, planet1.name))\n"}, {"id": "7", "snippet": "def bf(planet1, planet2):\n    pass\n"}, {"id": "8", "snippet": "def bf(planet1, planet2):\n\n    return sorted((planet1, planet2), key=lambda x: sun_angle(x))\n"}, {"id": "9", "snippet": "def bf(planet1, planet2):\n    return sorted([planet1, planet2], key=lambda p: get_angle(p, planet2))\n"}]}
{"question_id": "HumanEval/149", "language": "python", "prompt": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n", "signature": "def sorted_list_sum(lst):", "solutions": [{"id": "0", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst)\n"}, {"id": "1", "snippet": "def sorted_list_sum(lst):\n    # write your solution here\n    lst.sort()\n    output = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            output.append(i)\n    return output\n"}, {"id": "2", "snippet": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) == len(result):\n            result.append(word)\n    result.sort()\n    return result\n"}, {"id": "3", "snippet": "def sorted_list_sum(lst):\n    result = []\n    for item in lst:\n        if len(item) > 1 and len(item) % 2 == 0:\n            result.append(item)\n    return result\n"}, {"id": "4", "snippet": "def sorted_list_sum(lst):\n\n    # your code here\n    new_list = []\n    for i in lst:\n        if len(i) % 2!= 0:\n            for j in range(len(i)):\n                if i[j]!= i[j+1]:\n                    new_list.append(i[:j] + i[j+1:])\n                    break\n        else:\n            new_list.append(i)\n    return new_list\n"}, {"id": "5", "snippet": "def sorted_list_sum(lst):\n    return sorted(lst, key=len)\n"}, {"id": "6", "snippet": "def sorted_list_sum(lst):\n    if not lst:\n        return []\n    if len(lst) % 2!= 0:\n        return lst\n\n    result = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result.append(lst[i])\n        else:\n            result.append(lst[i] + lst[i + 1])\n    return result\n"}, {"id": "7", "snippet": "def sorted_list_sum(lst):\n    return sorted(list(set(lst)))\n"}, {"id": "8", "snippet": "def sorted_list_sum(lst):\n    result = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort()\n    return result\n"}, {"id": "9", "snippet": "def sorted_list_sum(lst):\n    result = []\n    for item in lst:\n        if len(item) % 2 == 0:\n            result.append(item)\n    result.sort()\n    return result\n"}]}
{"question_id": "HumanEval/15", "language": "python", "prompt": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'\n", "signature": "def string_sequence(n: int):", "solutions": [{"id": "0", "snippet": "def string_sequence(n: int):\n    result = ''\n    while n > 0:\n        result = '%s %s %s' % (result, str(n % 10), str(n // 10))\n        n = n // 10\n    return result\n"}, {"id": "1", "snippet": "def string_sequence(n: int):\n    return \"{0:0{1}}\".format(0, n)\n"}, {"id": "2", "snippet": "def string_sequence(n: int):\n    s = \"\"\n    while n > 0:\n        s += \"%s \" % n\n        n -= 1\n    return s\n"}, {"id": "3", "snippet": "def string_sequence(n: int):\n    result = ''\n    while n > 0:\n        result = '%s %s %s' % (result, str(n % 10), str(n // 10))\n        n //= 10\n    return result\n"}, {"id": "4", "snippet": "def string_sequence(n: int):\n    s = ''\n    while n > 0:\n        s = '%s %s %s' % (s, n % 3, n // 3)\n        n = n // 3\n    return s\n"}, {"id": "5", "snippet": "def string_sequence(n: int):\n    s = ''\n    while n > 0:\n        s = '%s %s %s' % (s, n % 10, n // 10)\n        n //= 10\n    return s\n"}, {"id": "6", "snippet": "def string_sequence(n: int):\n    s = \"\"\n    while n > 0:\n        s += str(n % 10)\n        n = n // 10\n    return s[::-1]\n"}, {"id": "7", "snippet": "def string_sequence(n: int):\n    s = \"\"\n    while n > 0:\n        s = \"%s %s %s\" % (s, n % 10, n // 10)\n        n //= 10\n    return s\n"}, {"id": "8", "snippet": "def string_sequence(n: int):\n    seq = []\n    while n > 0:\n        seq.insert(0, n % 10)\n        n //= 10\n    return''.join(str(x) for x in seq)\n"}, {"id": "9", "snippet": "def string_sequence(n: int):\n    seq = \"\"\n    while n > 0:\n        seq += \"%s \" % n\n        n -= 1\n    return seq\n"}]}
{"question_id": "HumanEval/150", "language": "python", "prompt": "A simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n", "signature": "def x_or_y(n, x, y):", "solutions": [{"id": "0", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x * 2, y)\n    else:\n        return x_or_y(n * 3 // 2, x * 3 // 2, y)\n"}, {"id": "1", "snippet": "def x_or_y(n, x, y):\n    if n == 2:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x + y\n"}, {"id": "2", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y * 2)\n    else:\n        return x_or_y(n * 3 + 1, x, y * 5)\n"}, {"id": "3", "snippet": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x * 2, y)\n    else:\n        return y * 2 + x_or_y(n // 2, x, y * 2)\n"}, {"id": "4", "snippet": "def x_or_y(n, x, y):\n    if is_prime(n):\n        return n\n    else:\n        return x_or_y(n - 1, x, y)\n"}, {"id": "5", "snippet": "def x_or_y(n, x, y):\n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x, y)\n    else:\n        return y\n"}, {"id": "6", "snippet": "def x_or_y(n, x, y):\n    return y if n % x == 0 else x\n"}, {"id": "7", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return x\n    elif n % 2 == 0:\n        return y\n    else:\n        return x + x_or_y(n // 2, x, y)\n"}, {"id": "8", "snippet": "def x_or_y(n, x, y):\n    if n == 0:\n        return y\n    elif n % 2 == 0:\n        return x_or_y(n // 2, x * 2, y * 2)\n    else:\n        return x_or_y(n // 2, x, y * 2)\n"}, {"id": "9", "snippet": "def x_or_y(n, x, y):\n    if n == 2 and x == y:\n        return 2\n    elif n % 2 == 0:\n        return x\n    else:\n        return y\n"}]}
{"question_id": "HumanEval/151", "language": "python", "prompt": "\nGiven a list of numbers, return the sum of squares of the numbers\nin the list that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\n\nIf the input list is empty, return 0.\n", "signature": "def double_the_difference(lst):", "solutions": [{"id": "0", "snippet": "def double_the_difference(lst):\n    if len(lst) <= 0:\n        return 0\n    return sum([(x - 1) ** 2 for x in lst if x % 2 == 0])\n"}, {"id": "1", "snippet": "def double_the_difference(lst):\n    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number ** 2\n    return result\n"}, {"id": "2", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    result = 0\n    for number in lst:\n        if number % 2!= 0:\n            result += number ** 2\n    return result\n"}, {"id": "3", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    s = 0\n    for number in lst:\n        if number % 2!= 0:\n            s += number ** 2\n    return s\n"}, {"id": "4", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return sum([x for x in lst if x % 2!= 0]) ** 2\n"}, {"id": "5", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + double_the_difference(lst[1:])\n"}, {"id": "6", "snippet": "def double_the_difference(lst):\n    if lst == []:\n        return 0\n\n    result = 0\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            result += lst[i]**2\n\n    return result\n"}, {"id": "7", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return sum([lst[i] for i in range(len(lst)) if lst[i] % 2!= 0])\n"}, {"id": "8", "snippet": "def double_the_difference(lst):\n    # TODO: Write function to double the difference.\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum([i for i in lst if i % 2!= 0]) ** 2 - sum(lst) ** 2\n"}, {"id": "9", "snippet": "def double_the_difference(lst):\n    if len(lst) == 0:\n        return 0\n    return sum([lst[i] for i in range(1, len(lst)) if lst[i] % 2!= 0])\n"}]}
{"question_id": "HumanEval/152", "language": "python", "prompt": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\ncompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n", "signature": "def compare(game, guess):", "solutions": [{"id": "0", "snippet": "def compare(game, guess):\n\n    # Compute the distance between each guess\n    distance = [abs(g - m) for g, m in zip(guess, game)]\n\n    # Return the result of the distance calculation\n    return distance\n"}, {"id": "1", "snippet": "def compare(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"}, {"id": "2", "snippet": "def compare(game, guess):\n    # TODO: I think we are dealing with arrays of scores\n    #       and arrays of guesses (not the same length)\n    #       and the same length. I think we should make it more performant\n    if len(game)!= len(guess):\n        return None\n\n    # TODO: I think we are dealing with the array of scores\n    #       and the array of guesses (not the same length)\n    #       and the same length. I think we should make it more performant\n\n    # TODO: I think we are dealing with the array of scores\n    #       and the array of guesses (not the same length)\n    #       and the same length. I think we should make it more performant\n    if game is None or guess is None:\n        return None\n\n    scores = [game[i] for i in range(len(game))]\n    guesses = [guess[i] for i in range(len(guess))]\n\n    diff = 0\n    for i in range("}, {"id": "3", "snippet": "def compare(game, guess):\n    # TODO: make sure that this works on both arrays\n    return [abs(g - gm) for g, gm in zip(game, guess)]\n"}, {"id": "4", "snippet": "def compare(game, guess):\n    # game = [2, 0, 0, 1, 1]\n    # guess = [2, 0, 0, 1, 1]\n    # return [abs(g-g1) for g in game for g1 in guess]\n    return [abs(g-g1) for g in game for g1 in guess]\n"}, {"id": "5", "snippet": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n"}, {"id": "6", "snippet": "def compare(game, guess):\n    return [abs(guess[i] - game[i]) for i in range(len(guess))]\n"}, {"id": "7", "snippet": "def compare(game, guess):\n    return np.absolute(game - guess) == 0\n"}, {"id": "8", "snippet": "def compare(game, guess):\n    scores = []\n    for i in range(len(game)):\n        scores.append(0)\n        for j in range(len(game[0])):\n            if game[i][j] == guess[i][j]:\n                scores[i] += 1\n            else:\n                scores[i] -= 1\n    return scores\n"}, {"id": "9", "snippet": "def compare(game, guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n"}]}
{"question_id": "HumanEval/153", "language": "python", "prompt": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n", "signature": "def Strongest_Extension(class_name, extensions):", "solutions": [{"id": "0", "snippet": "def Strongest_Extension(class_name, extensions):\n    if len(extensions) == 0:\n        return class_name\n    elif len(extensions) == 1:\n        return extensions[0]\n    else:\n        strength = 0\n        strongest_extension = \"\"\n        for extension in extensions:\n            if extension.lower().endswith(class_name.lower()):\n                strength += 1\n            if strength > len(extensions) / 2:\n                strongest_extension = extension\n        return strongest_extension\n"}, {"id": "1", "snippet": "def Strongest_Extension(class_name, extensions):\n    if len(extensions) == 1:\n        return extensions[0]\n\n    strongest_extension = \"\"\n    strongest_extension_strength = 0\n\n    for extension in extensions:\n        strength = len(extension)\n        if strength > strongest_extension_strength:\n            strongest_extension_strength = strength\n            strongest_extension = extension\n\n    return \"{}.{}\".format(class_name, strongest_extension)\n"}, {"id": "2", "snippet": "def Strongest_Extension(class_name, extensions):\n    strength = 0\n    strongest_extension = ''\n\n    for extension in extensions:\n        strength += len(extension)\n        if extension.lower() in class_name.lower():\n            if strength > strongest_extension:\n                strongest_extension = extension.lower()\n\n    return strongest_extension\n"}, {"id": "3", "snippet": "def Strongest_Extension(class_name, extensions):\n    string = \"\"\n    strength = 0\n    for extension in extensions:\n        if extension.name.lower() == class_name.lower():\n            string += extension.name.upper()\n            strength = extension.strength\n    if strength > len(string) / 2:\n        string = string[0:len(string) / 2]\n    return string\n"}, {"id": "4", "snippet": "def Strongest_Extension(class_name, extensions):\n    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        strength = extension.strength\n        if strength > extension.strength:\n            strongest_extension = extension.name\n    return \"{}.{}\".format(class_name, strongest_extension)\n"}, {"id": "5", "snippet": "def Strongest_Extension(class_name, extensions):\n    # TODO: Write your solution here\n    return \"\"\n"}, {"id": "6", "snippet": "def Strongest_Extension(class_name, extensions):\n    # Create a new list of all the extensions with the same strength\n    extensions_with_same_strength = []\n    for extension in extensions:\n        if extension[0].lower() == class_name.lower() and extension[1] == extension[0].lower():\n            extensions_with_same_strength.append(extension)\n\n    if len(extensions_with_same_strength) > 0:\n        return max(extensions_with_same_strength, key=lambda x: x[1])[0]\n    else:\n        return None\n"}, {"id": "7", "snippet": "def Strongest_Extension(class_name, extensions):\n    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = Extension_Length(class_name, extension)\n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    return strongest_extension\n"}, {"id": "8", "snippet": "def Strongest_Extension(class_name, extensions):\n    strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        if extension.name.lower().count(class_name.lower()) > strength:\n            strength = extension.name.lower().count(class_name.lower())\n            strongest_extension = extension.name\n\n    return strongest_extension\n"}, {"id": "9", "snippet": "def Strongest_Extension(class_name, extensions):\n    strength = 0\n    strongest_extension = ''\n\n    for extension in extensions:\n        if extension.lower() == class_name.lower():\n            strength = extension.count(extension.lower())\n            if strength > strongest_extension:\n                strongest_extension = extension\n\n    return strongest_extension\n"}]}
{"question_id": "HumanEval/154", "language": "python", "prompt": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n", "signature": "def cycpattern_check(a, b):", "solutions": [{"id": "0", "snippet": "def cycpattern_check(a, b):\n    return len(a) - cycpattern_length(a) < len(b) - cycpattern_length(b)\n"}, {"id": "1", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n    return a == b\n"}, {"id": "2", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n    return a == b or all(\n        cycpattern_check(a[i:i + len(b)], b) for i in range(0, len(a) - len(b) + 1)\n    )\n"}, {"id": "3", "snippet": "def cycpattern_check(a, b):\n    return (cycpattern_check(a[1:], b[1:]) or\n            (cycpattern_check(a, b[1:]) and\n             a[0] == b[0]))\n"}, {"id": "4", "snippet": "def cycpattern_check(a, b):\n    return any(cycpattern_check(c1, c2) for c1, c2 in zip(a, b))\n"}, {"id": "5", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n\n    return set(a) <= set(b) and a.translate(str.maketrans('', '', a)) == b\n"}, {"id": "6", "snippet": "def cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n\n    return a == b\n"}, {"id": "7", "snippet": "def cycpattern_check(a, b):\n\n    return (a in b) or (b in a)\n"}, {"id": "8", "snippet": "def cycpattern_check(a, b):\n    return a in cycpattern(b)\n"}, {"id": "9", "snippet": "def cycpattern_check(a, b):\n\n    return not any([a[i] == b[i] for i in range(len(a))])\n"}]}
{"question_id": "HumanEval/155", "language": "python", "prompt": "Given an integer. return a tuple that has the number of even and odd digits respectively.\n\nExample:\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)\n", "signature": "def even_odd_count(num):", "solutions": [{"id": "0", "snippet": "def even_odd_count(num):\n\n    if num % 2 == 0:\n        even = num // 2\n        odd = num - even * 2\n    else:\n        even = 0\n        odd = num\n\n    return (even, odd)\n"}, {"id": "1", "snippet": "def even_odd_count(num):\n    num_string = str(num)\n    if num_string % 2 == 0:\n        even = num_string\n    else:\n        even = ''\n    if num_string % 3 == 0:\n        odd = num_string\n    else:\n        odd = ''\n    return (even, odd)\n"}, {"id": "2", "snippet": "def even_odd_count(num):\n    if num % 2 == 0:\n        even = num // 2\n        return (even, even + 1)\n    else:\n        odd = num // 2\n        return (odd, odd + 1)\n"}, {"id": "3", "snippet": "def even_odd_count(num):\n    if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (num // 2, num % 2 + 1)\n    else:\n        return (num // 2, num % 2 + 1)\n"}, {"id": "4", "snippet": "def even_odd_count(num):\n    result = []\n    while num > 0:\n        num, rem = divmod(num, 2)\n        result.append(rem)\n    result.reverse()\n    return tuple(result)\n"}, {"id": "5", "snippet": "def even_odd_count(num):\n    if num % 2 == 0:\n        return (num // 2, num % 2 + 1)\n    elif num % 2 == 1:\n        return (num // 2, num % 2 + 1)\n"}, {"id": "6", "snippet": "def even_odd_count(num):\n    num_str = str(num)\n    if len(num_str) % 2 == 0:\n        even_digits = num_str[len(num_str) // 2:]\n        odd_digits = num_str[: len(num_str) // 2]\n        return (int(even_digits), int(odd_digits))\n    else:\n        return (int(num_str), 0)\n"}, {"id": "7", "snippet": "def even_odd_count(num):\n\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n"}, {"id": "8", "snippet": "def even_odd_count(num):\n\n    if num % 2 == 0:\n        even = num // 2\n        return (even, even + 1)\n    else:\n        odd = num // 2 + 1\n        return (odd, odd + 1)\n"}, {"id": "9", "snippet": "def even_odd_count(num):\n    if num % 2 == 0:\n        odd = num // 2\n        even = num % 2 + 1\n        return (even, odd)\n    else:\n        even = num // 2\n        return (even, num % 2 + 1)\n"}]}
{"question_id": "HumanEval/156", "language": "python", "prompt": "\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'\n", "signature": "def int_to_mini_roman(number):", "solutions": [{"id": "0", "snippet": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise OutOfRangeError('number out of range (1 to 1000)')\n\n    numeral = [\n        'i', 'ii', 'iv', 'v', 'vii', 'x', 'xi', 'xi',\n        'l', 'li', 'lii', 'l', 'liii'\n    ]\n\n    result = ''\n\n    for index, numeral_index in enumerate(numeral):\n        while number >= numeral_index:\n            result += numeral[index]\n            number -= numeral_index\n\n    return result.lower()\n"}, {"id": "1", "snippet": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise OutOfRangeError('number out of range (must be 1 <= n <= 1000)')\n\n    numeral = ''\n    for numeral_char, integer in roman_numeral_map:\n        while number >= integer:\n            numeral += numeral_char\n            number -= integer\n    return numeral.lower()\n"}, {"id": "2", "snippet": "def int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise OutOfRangeError('number out of range (1, 1000)')\n\n    if number == 1:\n        return 'i'\n\n    result = ''\n    for integer, numeral in roman_numeral_map:\n        while number >= integer:\n            result += numeral\n            number -= integer\n    return result.lower()\n"}, {"id": "3", "snippet": "def int_to_mini_roman(number):\n\n    if not 1 <= number <= 1000:\n        raise OutOfRangeError('number out of range (1 to 1000)')\n\n    if number == 1:\n        return 'i'\n\n    numeral = [\n        'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII',\n        'IX', 'X'\n    ]\n\n    result = ''\n    index = 0\n    while number > 0:\n        result += numeral[index % len(numeral)]\n        number -= numeral[index % len(numeral)]\n        index += 1\n\n    return result\n"}, {"id": "4", "snippet": "def int_to_mini_roman(number):\n\n    if number < 1 or number > 1000:\n        raise OutOfRangeError('number out of range (< 1 to 1000)')\n\n    numeral = ''\n    for numeral_character in range(1, 39):\n        numeral += roman_numeral_table[number - 1 + numeral_character]\n\n    return numeral.lower()\n"}, {"id": "5", "snippet": "def int_to_mini_roman(number):\n\n    # Determine the Roman numeral representation\n    roman_numerals = []\n    for integer, numeral in roman_numerals_dict.items():\n        while number >= integer:\n            roman_numerals.append(numeral)\n            number -= integer\n    # Return the lowercased version\n    return ''.join(roman_numerals).lower()\n"}, {"id": "6", "snippet": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise OutOfRangeError('number out of range (1..4999)')\n\n    numeral_list = ['I', 'V', 'X', 'L', 'C', 'D', 'M', 'Z']\n    result = ''\n    for numeral in numeral_list:\n        while number >= numeral:\n            result += numeral\n            number -= numeral\n    return result\n"}, {"id": "7", "snippet": "def int_to_mini_roman(number):\n    if number < 1 or number > 1000:\n        raise OutOfRangeError('number out of range (must be 1 <= n <= 1000)')\n\n    def convert_to_uppercase(n):\n        return n if n >= 1 else n * 'I'\n\n    def convert_to_lowercase(n):\n        return n if n <= 1 else n * 'X'\n\n    roman_numeral = convert_to_uppercase(number) + convert_to_lowercase(number - 1)\n    return roman_numeral.lower()\n"}, {"id": "8", "snippet": "def int_to_mini_roman(number):\n\n    if not 1 <= number <= 1000:\n        raise OutOfRangeError('number out of range (must be 1 <= n <= 1000)')\n\n    if number == 1:\n        return 'i'\n\n    tens = number // 10\n    tens = int(tens)\n    ones = number % 10\n\n    roman_numerals = []\n    roman_numerals.append('X')\n    if tens > 0:\n        roman_numerals.append('C')\n        roman_numerals.append(tens)\n    if tens == 0 and ones > 0:\n        roman_numerals.append('IV')\n        roman_numerals.append(ones)\n    return ''.join(map(str, roman_numerals))\n"}, {"id": "9", "snippet": "def int_to_mini_roman(number):\n    numeral_list = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    if number < 1 or number > 1000:\n        raise OutOfRangeError('number out of range (must be 1 to 1000)')\n    if number == 1:\n        return 'I'\n    elif number == 2:\n        return 'VI'\n    else:\n        result = ''\n        for index, numeral in enumerate(numeral_list):\n            while number >= numeral:\n                result += numeral\n                number -= numeral\n        return result.lower()\n"}]}
{"question_id": "HumanEval/157", "language": "python", "prompt": "\nGiven the lengths of the three sides of a triangle. Return True if the three\nsides form a right-angled triangle, False otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or\n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n", "signature": "def right_angle_triangle(a, b, c):", "solutions": [{"id": "0", "snippet": "def right_angle_triangle(a, b, c):\n\n    return ((a * b) - (b * c)) >= 0\n"}, {"id": "1", "snippet": "def right_angle_triangle(a, b, c):\n    return ((a + b > c) or (a + c > b) or (b + c > a))\n"}, {"id": "2", "snippet": "def right_angle_triangle(a, b, c):\n    if (a + b > c and a + c < b and b + c > a) or (a + b < c and a + c > b and b + c < a):\n        return True\n    else:\n        return False\n"}, {"id": "3", "snippet": "def right_angle_triangle(a, b, c):\n    return ((a * b - (a * c) * min(b, c)) / (b * c)) >= 0\n"}, {"id": "4", "snippet": "def right_angle_triangle(a, b, c):\n    if a == b == c:\n        return True\n\n    if (a * b - c * a) > (b * c - a * c):\n        # Left side is a right-angled triangle\n        return True\n\n    return False\n"}, {"id": "5", "snippet": "def right_angle_triangle(a, b, c):\n    return ((a * b) - (b * c)) > 0\n"}, {"id": "6", "snippet": "def right_angle_triangle(a, b, c):\n    return (a * b > 0) ^ (a * c < 0) ^ (b * c > 0) ^ (b * a < 0)\n"}, {"id": "7", "snippet": "def right_angle_triangle(a, b, c):\n    return ((a + b > c) or (a + c > b) or (b + c > a))\n"}, {"id": "8", "snippet": "def right_angle_triangle(a, b, c):\n    if (a > b and a > c) or (b > a and b > c):\n        if (a > c) and (b > a):\n            return True\n        elif (a > c) and (c > b):\n            return True\n        elif (b > a) and (c > b):\n            return True\n    return False\n"}, {"id": "9", "snippet": "def right_angle_triangle(a, b, c):\n\n    return ((a + b > c) or (a + c > b) or (b + c > a))\n"}]}
{"question_id": "HumanEval/158", "language": "python", "prompt": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n", "signature": "def find_max(words):", "solutions": [{"id": "0", "snippet": "def find_max(words):\n    # TODO: Retrieve words with different lengths and compare them with the longest string\n    return \"\"\n"}, {"id": "1", "snippet": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n        count = len(word)\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word\n"}, {"id": "2", "snippet": "def find_max(words):\n    if len(words) == 0:\n        return \"\"\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(word)\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"}, {"id": "3", "snippet": "def find_max(words):\n    if len(words) == 0:\n        return \"\"\n\n    words_set = set(words)\n    return max(words_set, key=len)\n"}, {"id": "4", "snippet": "def find_max(words):\n    # TODO: LONGTERM IMPLEMENTATION\n    return \"\"\n"}, {"id": "5", "snippet": "def find_max(words):\n    max_word = \"\"\n    for word in words:\n        count = len(word)\n        if count > len(max_word):\n            max_word = word\n    return max_word\n"}, {"id": "6", "snippet": "def find_max(words):\n    # write your code here\n    result = \"\"\n    for word in words:\n        count = word_frequency(word)\n        if count > len(result):\n            result = word\n    return result\n"}, {"id": "7", "snippet": "def find_max(words):\n    if len(words) == 0:\n        return \"\"\n\n    word_lengths = [len(w) for w in words]\n    return max(words, key=word_lengths.__getitem__)\n"}, {"id": "8", "snippet": "def find_max(words):\n    max_word = words[0]\n    max_count = 0\n    for word in words:\n        count = len(word)\n        if count > max_count:\n            max_word = word\n            max_count = count\n    return max_word\n"}, {"id": "9", "snippet": "def find_max(words):\n    words = list(map(str, words))\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = len(word)\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"}]}
{"question_id": "HumanEval/159", "language": "python", "prompt": "\nYou're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of [ total number of eaten carrots after your meals,\nthe number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n", "signature": "def eat(number, need, remaining):", "solutions": [{"id": "0", "snippet": "def eat(number, need, remaining):\n\n    if remaining > 0:\n        remaining -= 1\n        need -= 1\n        return [need, remaining]\n    elif need > 0:\n        return [0, need]\n    elif remaining < 0:\n        return [0, 0]\n    else:\n        return [number, 0]\n"}, {"id": "1", "snippet": "def eat(number, need, remaining):\n    result = [0, 0]\n    for i in range(need):\n        result[0] += 1\n    for i in range(remaining):\n        if result[0] >= number:\n            result[0] = 0\n            result[1] += 1\n    return result\n"}, {"id": "2", "snippet": "def eat(number, need, remaining):\n\n    if number < 0 or need < 0:\n        raise ValueError(\"number and need must be >= 0 and <= 1000\")\n    if number + need < 0 or remaining < 0 or remaining + need < 0:\n        raise ValueError(\"number and remaining must be >= 0 and <= 1000\")\n\n    if remaining < number:\n        return [0, 0]\n\n    if remaining + need >= number:\n        return [0, 0]\n\n    remaining -= number\n    need -= number\n    remaining += need\n\n    total = number + need\n    remaining += remaining\n\n    return [total, remaining]\n"}, {"id": "3", "snippet": "def eat(number, need, remaining):\n    if need > remaining:\n        return [0, 0]\n    elif need < 0:\n        return [0, -1]\n    elif number < need:\n        return [-1, 0]\n    elif remaining == 0:\n        return [0, 0]\n    else:\n        return [number, need - remaining]\n"}, {"id": "4", "snippet": "def eat(number, need, remaining):\n\n    # return an array of [ total number of eaten carrots after your meals, the number of carrots left after your meals ]\n    return [remaining, 0]\n"}, {"id": "5", "snippet": "def eat(number, need, remaining):\n    result = [0, 0]\n    if need > 0:\n        remaining -= 1\n        result[0] = remaining\n        if remaining == 0:\n            result[1] = need\n    if remaining == 0:\n        result[1] = number\n    return result\n"}, {"id": "6", "snippet": "def eat(number, need, remaining):\n\n    if number > remaining or remaining == 0:\n        return [0, 0]\n\n    if need > number or need == 0:\n        return [0, 0]\n\n    remaining -= need\n\n    if remaining < 0:\n        remaining = 0\n\n    result = [ 0, 0 ]\n    if remaining < 0:\n        result[0] = -1\n        result[1] = number\n    elif remaining > 0:\n        result[0] = 1\n        result[1] = remaining\n    return result\n"}, {"id": "7", "snippet": "def eat(number, need, remaining):\n    result = [0, 0]\n\n    if need < remaining:\n        return result\n\n    # initialize results\n    result[0] = need\n    result[1] = remaining\n\n    for _ in range(number):\n        need -= 1\n        result[0] += 1\n        if need == 0:\n            result[1] = result[0]\n            need = result[1]\n\n    return result\n"}, {"id": "8", "snippet": "def eat(number, need, remaining):\n\n    # if remaining is < 0 or remaining is > 0, the carrot is hungry\n    if remaining < 0 or remaining > 0:\n        return [0, 0]\n\n    remaining -= need\n\n    # if remaining is 0, there is no carrot to eat\n    if remaining == 0:\n        return [0, 0]\n\n    return [number, remaining]\n"}, {"id": "9", "snippet": "def eat(number, need, remaining):\n\n    # your code goes here\n    if remaining < 0:\n        remaining = 0\n    elif remaining > 1000:\n        remaining = 1000\n\n    if need < 0:\n        need = 0\n    elif need > 1000:\n        need = 1000\n\n    if number <= need:\n        return [0, 1]\n    elif number > remaining:\n        return [1, 0]\n    else:\n        return [number, remaining]\n"}]}
{"question_id": "HumanEval/16", "language": "python", "prompt": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4\n", "signature": "def count_distinct_characters(string: str):", "solutions": [{"id": "0", "snippet": "def count_distinct_characters(string: str):\n    count = 0\n    for i in range(len(string)):\n        if string[i].isupper():\n            count += 1\n    return count\n"}, {"id": "1", "snippet": "def count_distinct_characters(string: str):\n    count = 0\n    for c in string:\n        if c.isupper():\n            count += 1\n    return count\n"}, {"id": "2", "snippet": "def count_distinct_characters(string: str):\n    distinct_characters = {}\n    for character in string:\n        if character.lower() in distinct_characters:\n            distinct_characters[character.lower()] += 1\n        else:\n            distinct_characters[character.lower()] = 1\n\n    return len(distinct_characters)\n"}, {"id": "3", "snippet": "def count_distinct_characters(string: str):\n    count = 0\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i >= j:\n                break\n            elif string[i] == string[j]:\n                count += 1\n    return count\n"}, {"id": "4", "snippet": "def count_distinct_characters(string: str):\n    char_list = list(string)\n    char_list.sort()\n    return len(char_list)\n"}, {"id": "5", "snippet": "def count_distinct_characters(string: str):\n    if not string:\n        return 0\n    if len(string) < 2:\n        return 1\n    return len(set(string))\n"}, {"id": "6", "snippet": "def count_distinct_characters(string: str):\n    distinct_characters = {}\n    for character in string:\n        if character.lower() in distinct_characters:\n            distinct_characters[character.lower()] += 1\n        else:\n            distinct_characters[character.lower()] = 1\n\n    return len(distinct_characters)\n"}, {"id": "7", "snippet": "def count_distinct_characters(string: str):\n    count = {}\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    return len(count)\n"}, {"id": "8", "snippet": "def count_distinct_characters(string: str):\n\n    count = 0\n    for i in range(len(string)):\n        if string[i].islower():\n            count += 1\n    return count\n"}, {"id": "9", "snippet": "def count_distinct_characters(string: str):\n    return len(set(string))\n"}]}
{"question_id": "HumanEval/160", "language": "python", "prompt": "\nGiven two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\n\nExample:\noperator['+', '*', '-']\narray = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.\n\n", "signature": "def do_algebra(operator, operand):", "solutions": [{"id": "0", "snippet": "def do_algebra(operator, operand):\n\n    if len(operator)!= len(operand):\n        raise Exception('The length of operator list is not equal to the length of operand list.')\n\n    result = 0\n\n    for i in range(len(operator)):\n        result += operator[i] * operand[i]\n\n    return result\n"}, {"id": "1", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        raise SchemeError(\"operator lists must have same length\")\n\n    if len(operator) == 1:\n        return operator[0]\n\n    result = 0\n\n    for i in range(len(operator)):\n        result += operator[i] * operand[i]\n\n    return result\n"}, {"id": "2", "snippet": "def do_algebra(operator, operand):\n\n    if len(operand) < 1:\n        raise SyntaxError('The length of operator list is equal to the length of operand list minus one.')\n    elif len(operator) < 2:\n        raise SyntaxError('The length of operator list is equal to the length of operand list minus one.')\n\n    operator_type = type(operator[0])\n\n    if operator_type is int or operator_type is float:\n        return operator[0] + operator[1] * operand[0]\n    elif operator_type is str:\n        return operator[0] + operand[0]\n    else:\n        result = []\n        for i in range(len(operator)):\n            result.append(operator[i] + operand[i])\n        return result\n"}, {"id": "3", "snippet": "def do_algebra(operator, operand):\n    result = 0\n    for i in range(len(operator)):\n        result += operator[i] * operand[i]\n    return result\n"}, {"id": "4", "snippet": "def do_algebra(operator, operand):\n    if len(operator) == 2 and len(operand) == 2:\n        return operator[0] + operator[1] * operand[0] - operator[1] * operand[1]\n\n    raise ShapeException(\"Do not know how to do algebra of length two\")\n"}, {"id": "5", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        raise Exception('The length of operator list is equal to the length of operand list.')\n\n    # Sort the operand list to ensure proper algebra operations.\n    operand.sort()\n\n    # Build the algebra expression using the basic algebra operations.\n    result = 0\n    for index, value in enumerate(operand):\n        if operator[index] == '+':\n            result += value\n        elif operator[index] == '-':\n            result -= value\n        elif operator[index] == '*':\n            result *= value\n        elif operator[index] == '/':\n            result //= value\n        else:\n            raise Exception('The operator {} is not a valid operator.'.format(operator[index]))\n\n    return result\n"}, {"id": "6", "snippet": "def do_algebra(operator, operand):\n    if operator == '+':\n        result = sum(operand)\n    elif operator == '-':\n        result = sum([-o for o in operand])\n    elif operator == '*':\n        result = sum(operand * 2)\n    elif operator == '/':\n        result = sum(operand / 2)\n    else:\n        result = 0\n    return result\n"}, {"id": "7", "snippet": "def do_algebra(operator, operand):\n    if operator == '+':\n        return sum(operand)\n    elif operator == '-':\n        return -sum(operand)\n    elif operator == '*':\n        return multiply(operand)\n    elif operator == '/':\n        return floordiv(operand)\n    elif operator == '**':\n        return exponentiation(operand)\n    else:\n        return 0\n"}, {"id": "8", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        raise Exception('operator length does not match operand length')\n    if operator[0] not in '+-*/':\n        raise Exception('operator starts with +, -, *, /')\n    if operator[0] == '-':\n        operator = ['-'] + operator\n    if operator[1] not in '+-*/':\n        raise Exception('operator starts with +, -, *, /')\n    if operator[1] == '-':\n        operator = operator[0:2] + ['1']\n    if operator[2] not in '+-*/':\n        raise Exception('operator starts with +, -, *, /')\n    if operator[2] == '*':\n        operator = operator[0:3] + ['1', '0']\n    if operator[2] == '/':\n        operator = operator[0:3] + ['1', '0', '0']\n    if operator[2] == '+':\n        operator = ope"}, {"id": "9", "snippet": "def do_algebra(operator, operand):\n    if len(operator)!= len(operand):\n        raise SyntaxError(\"The length of operator list is not equal to the length of operand list\")\n\n    # The operand is a list of non-negative integers\n    if not isinstance(operand, list):\n        raise SyntaxError(\"The operand list is not a list\")\n\n    # The operator list contains no operator, so the length of operator list is equal to the length of operand list\n    if not isinstance(operator, list):\n        raise SyntaxError(\"The operator list is not a list\")\n\n    # The operator list contains a single operator and operand is a single non-negative integer\n    if not isinstance(operator[0], int) or not isinstance(operand[0], int):\n        raise SyntaxError(\"The operator list contains a single operator and operand is not a single non-negative integer\")\n\n    result = 0\n    for i in range(len(operator)):\n        result += operator["}]}
{"question_id": "HumanEval/161", "language": "python", "prompt": "You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n", "signature": "def solve(s):", "solutions": [{"id": "0", "snippet": "def solve(s):\n    lower = 0\n    upper = len(s) - 1\n\n    if len(s) == 0:\n        return s\n\n    if len(s) == 1:\n        return s\n\n    while lower <= upper:\n        mid = lower + (upper - lower) // 2\n        if s[mid] == s[mid - 1]:\n            upper = mid - 1\n        else:\n            lower = mid + 1\n\n    return s[lower:upper]\n"}, {"id": "1", "snippet": "def solve(s):\n\n    result = \"\"\n\n    for i in range(len(s)):\n\n        if s[i] in string.ascii_lowercase:\n            result = s[:i] + result\n            s = s[i + 1:]\n        else:\n            s = s[:i] + s[i][::-1] + s[i + 1:]\n    return result\n"}, {"id": "2", "snippet": "def solve(s):\n    if s == \"\":\n        return s\n    if len(s) == 1:\n        return s\n    return reverse(s)\n"}, {"id": "3", "snippet": "def solve(s):\n    if not s:\n        return s\n\n    lower = 0\n    upper = len(s) - 1\n\n    result = ''\n\n    while lower <= upper:\n        if s[lower] == s[upper]:\n            result = result + s[lower]\n            lower += 1\n            upper -= 1\n        else:\n            result = result + s[upper]\n            upper -= 1\n\n    return result\n"}, {"id": "4", "snippet": "def solve(s):\n    s = list(s)\n    if len(s) == 0:\n        return s[:]\n    result = ''\n    for i in range(len(s)):\n        if s[i] == 'a':\n            s[i] = 'A'\n            result += s.pop(i)\n        elif s[i] == 'b':\n            s[i] = 'B'\n            result += s.pop(i)\n        elif s[i] == 'c':\n            s[i] = 'C'\n            result += s.pop(i)\n        else:\n            s[i] = s[i].upper()\n    return result\n"}, {"id": "5", "snippet": "def solve(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    return reverse_string(s)\n"}, {"id": "6", "snippet": "def solve(s):\n    result = ''\n    for i in range(len(s)):\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if i == len(s) - 1:\n                result = s[i] + result\n            else:\n                result = s[i] + 'A' + result\n        else:\n            result = s[i] + result\n    return result\n"}, {"id": "7", "snippet": "def solve(s):\n    if s == \"\":\n        return s\n    if len(s) == 1:\n        return s\n    result = \"\"\n    for i in range(len(s)-1, -1, -1):\n        if s[i] == \"a\":\n            result = result[0::-1]\n            s = s[0:i]\n        elif s[i] == \"b\":\n            result = result[0] + result\n            s = s[0:i]\n        elif s[i] == \"c\":\n            result = result[0] + result[::-1]\n            s = s[0] + s[0:i]\n        else:\n            result = result + s[i]\n    return result\n"}, {"id": "8", "snippet": "def solve(s):\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            result = result[::-1] + i.upper()\n        else:\n            result = result + i\n    return result\n"}, {"id": "9", "snippet": "def solve(s):\n\n    lower = 0\n    upper = len(s) - 1\n\n    # base case: no letters in the string\n    if len(s) == 0:\n        return s\n\n    # reverse case\n    if s[lower] == s[upper]:\n        return s[lower]\n    else:\n        return solve(s[lower:upper])\n"}]}
{"question_id": "HumanEval/162", "language": "python", "prompt": "\nGiven a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n", "signature": "def string_to_md5(text):", "solutions": [{"id": "0", "snippet": "def string_to_md5(text):\n    if text:\n        return md5(text.encode('utf-8')).hexdigest()\n    return None\n"}, {"id": "1", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "2", "snippet": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "3", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "4", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    return md5(text.encode('utf-8')).hexdigest()\n"}, {"id": "5", "snippet": "def string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    return None\n"}, {"id": "6", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"}, {"id": "7", "snippet": "def string_to_md5(text):\n    if text:\n        return md5(text.encode('utf-8')).hexdigest()\n    return None\n"}, {"id": "8", "snippet": "def string_to_md5(text):\n\n    if not text:\n        return None\n\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"}, {"id": "9", "snippet": "def string_to_md5(text):\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()\n"}]}
{"question_id": "HumanEval/163", "language": "python", "prompt": "\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => []\n", "signature": "def generate_integers(a, b):", "solutions": [{"id": "0", "snippet": "def generate_integers(a, b):\n\n    # Use built-in functions to get even numbers\n    if a % 2 == 0:\n        a = a + 1\n    if b % 2 == 0:\n        b = b + 1\n\n    # Use generator to get even numbers\n    even_numbers = []\n    while a < b:\n        number = a + next(generator)\n        if number % 2 == 0:\n            even_numbers.append(number)\n        a += 1\n    return even_numbers\n"}, {"id": "1", "snippet": "def generate_integers(a, b):\n    # Base Case\n    if a < b:\n        return []\n\n    # Divide and Conquer\n    while a % b!= 0:\n        a, b = b, a % b\n\n    # Reverse the result\n    return [a, b]\n"}, {"id": "2", "snippet": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n"}, {"id": "3", "snippet": "def generate_integers(a, b):\n    result = []\n    while a < b:\n        if a % 2 == 0:\n            result.append(a)\n        a += 1\n    return result\n"}, {"id": "4", "snippet": "def generate_integers(a, b):\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n\n    return result\n"}, {"id": "5", "snippet": "def generate_integers(a, b):\n\n    # Python has a list comprehension that can take two positive integers and return\n    # the even digits between them.\n    even_digits = [num for num in range(a, b + 1) if num % 2 == 0]\n\n    return even_digits\n"}, {"id": "6", "snippet": "def generate_integers(a, b):\n    even_digits = []\n    for number in range(a, b + 1):\n        if number % 2 == 0:\n            even_digits.append(number)\n    return even_digits\n"}, {"id": "7", "snippet": "def generate_integers(a, b):\n    a_digits = str(a)\n    b_digits = str(b)\n    if len(a_digits) < len(b_digits):\n        a_digits, b_digits = b_digits, a_digits\n\n    even_digits = [int(d) for d in a_digits[len(b_digits)::]]\n    return even_digits\n"}, {"id": "8", "snippet": "def generate_integers(a, b):\n    # import pdb; pdb.set_trace()\n    if a > b:\n        a, b = b, a\n\n    while True:\n        yield a % b # a is always even\n        a = a // b\n"}, {"id": "9", "snippet": "def generate_integers(a, b):\n\n    return [n for n in range(a, b + 1) if n % 2 == 0]\n"}]}
{"question_id": "HumanEval/17", "language": "python", "prompt": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n", "signature": "def parse_music(music_string: str):", "solutions": [{"id": "0", "snippet": "def parse_music(music_string: str):\n    music_list = []\n    for letter in music_string:\n        if letter == '.':\n            music_list.append(len(music_list))\n        elif letter == '|':\n            music_list.append(len(music_list) * 2)\n        else:\n            music_list.append(int(letter))\n    return music_list\n"}, {"id": "1", "snippet": "def parse_music(music_string: str):\n    music_string = music_string.strip()\n    if music_string[0] == '.':\n        music_string = music_string[1:]\n        num_of_octave = 4\n    else:\n        num_of_octave = 2\n    return [int(b) for b in music_string.split('|')[:num_of_octave]]\n"}, {"id": "2", "snippet": "def parse_music(music_string: str):\n    result = []\n    for note_string in music_string.split(' '):\n        if len(note_string) == 0:\n            continue\n        elif len(note_string) == 1:\n            result.append(int(note_string))\n        else:\n            result.append(int(note_string) - 4)\n    return result\n"}, {"id": "3", "snippet": "def parse_music(music_string: str):\n    return [ord(x) - ord('o') for x in music_string[::-1]]\n"}, {"id": "4", "snippet": "def parse_music(music_string: str):\n    return [ord(c) - ord('o') for c in music_string]\n"}, {"id": "5", "snippet": "def parse_music(music_string: str):\n    note_strings = music_string.split(\"|\")\n    result = []\n    for note_string in note_strings:\n        note_string = note_string.strip()\n        if not len(note_string):\n            continue\n        if len(result) == 0:\n            result.append(int(note_string[-1]))\n            continue\n        for i in range(len(result)):\n            result[i] += int(note_string[-1 - i])\n    return result\n"}, {"id": "6", "snippet": "def parse_music(music_string: str):\n    lst = []\n    for line in music_string.split('\\n'):\n        if line == '.':\n            lst.append(len(lst))\n        else:\n            lst.append(int(line))\n    return lst\n"}, {"id": "7", "snippet": "def parse_music(music_string: str):\n    result = []\n    for number in music_string.split('|'):\n        if len(number) == 1:\n            result.append(int(number))\n        else:\n            result.append(int(number) + int(number[-1]))\n    return result\n"}, {"id": "8", "snippet": "def parse_music(music_string: str):\n    return [int(b) for b in music_string.strip().split('|')]\n"}, {"id": "9", "snippet": "def parse_music(music_string: str):\n    music_string = music_string.strip()\n    if len(music_string) == 0:\n        return []\n    all_but_last, all_four_last, half_last, half_two, quarter_last = [], [], [], [], []\n    for i in music_string:\n        if i!= '|':\n            all_but_last.append(int(i))\n        else:\n            all_four_last.append(int(i))\n            half_last.append(int(i))\n            quarter_last.append(int(i))\n    return [all_but_last, all_four_last, half_last, half_two, quarter_last]\n"}]}
{"question_id": "HumanEval/18", "language": "python", "prompt": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3\n", "signature": "def how_many_times(string: str, substring: str):", "solutions": [{"id": "0", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "1", "snippet": "def how_many_times(string: str, substring: str):\n\n    if string == '' or substring == '':\n        return 0\n\n    return string.count(substring)\n"}, {"id": "2", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "3", "snippet": "def how_many_times(string: str, substring: str):\n    if string == '' or substring == '':\n        return 0\n    if substring not in string:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def how_many_times(string: str, substring: str):\n\n    return string.count(substring)\n"}, {"id": "5", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "6", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "7", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}, {"id": "9", "snippet": "def how_many_times(string: str, substring: str):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring == string[i:i+len(substring)]:\n            count += 1\n    return count\n"}]}
{"question_id": "HumanEval/19", "language": "python", "prompt": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'\n", "signature": "def sort_numbers(numbers: str):", "solutions": [{"id": "0", "snippet": "def sort_numbers(numbers: str):\n    return \" \".join(sorted(numbers.split(), reverse=True))\n"}, {"id": "1", "snippet": "def sort_numbers(numbers: str):\n    return''.join(sorted(numbers.split()))\n"}, {"id": "2", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n"}, {"id": "3", "snippet": "def sort_numbers(numbers: str):\n    return''.join(sorted(numbers.split()))\n"}, {"id": "4", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort(reverse=True)\n    return \" \".join(numbers)\n"}, {"id": "5", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort()\n    return \" \".join(numbers)\n"}, {"id": "6", "snippet": "def sort_numbers(numbers: str):\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return \" \".join(numbers)\n"}, {"id": "7", "snippet": "def sort_numbers(numbers: str):\n    return \" \".join(sorted(numbers.split()))\n"}, {"id": "8", "snippet": "def sort_numbers(numbers: str):\n    return''.join(sorted(numbers.split()))\n"}, {"id": "9", "snippet": "def sort_numbers(numbers: str):\n    return''.join(sorted(numbers.split()))\n"}]}
{"question_id": "HumanEval/2", "language": "python", "prompt": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n", "signature": "def truncate_number(number: float):", "solutions": [{"id": "0", "snippet": "def truncate_number(number: float):\n\n    # If number is positive, return the positive integer.\n    if number > 0:\n        return int(number)\n\n    # If number is negative, return the negative integer.\n    elif number < 0:\n        return -int(number)\n\n    # If number is zero, return the largest integer as result.\n    elif number == 0:\n        return 0\n\n    # If number is an integer, return the largest integer smaller than number.\n    elif isinstance(number, int):\n        return max(int(number), number)\n\n    # If number is a string, return the largest integer smaller than number.\n    else:\n        return max(int(number.replace(\",\", \"\")), number)\n"}, {"id": "1", "snippet": "def truncate_number(number: float):\n    return int(number * 10 ** (DECIMAL_PLACES - 1))\n"}, {"id": "2", "snippet": "def truncate_number(number: float):\n    number = int(number)\n    number_in_decimals = 10 ** (len(str(number)) - 2)\n    number_part = number // number_in_decimals\n    number_exponent = number % number_in_decimals\n    return number_part + number_exponent\n"}, {"id": "3", "snippet": "def truncate_number(number: float):\n    return int(number * 10.0)\n"}, {"id": "4", "snippet": "def truncate_number(number: float):\n    return int(number * Decimal(100.0))\n"}, {"id": "5", "snippet": "def truncate_number(number: float):\n    if number == 0.0:\n        return 0.0\n    number = abs(number)\n    if number < 10:\n        return number\n    else:\n        number = number - 10 ** (len(str(number)) - 1)\n        return int(number)\n"}, {"id": "6", "snippet": "def truncate_number(number: float):\n    return int(number * 10)\n"}, {"id": "7", "snippet": "def truncate_number(number: float):\n    return int(number * (10 ** (DECIMAL_PRECISION // 2)))\n"}, {"id": "8", "snippet": "def truncate_number(number: float):\n    number = int(number)\n    number_part = number - math.floor(number)\n    number_part = number_part * 100\n    number_part = number_part // 10\n    number_part = number_part + math.floor(number_part)\n    return int(number_part)\n"}, {"id": "9", "snippet": "def truncate_number(number: float):\n    number = int(number)\n    fraction = number - number % 1\n    return int(number) if fraction == 0 else int(number + fraction)\n"}]}
{"question_id": "HumanEval/20", "language": "python", "prompt": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\n", "signature": "def find_closest_elements(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "1", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "2", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "3", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return (numbers[0], numbers[-1])\n"}, {"id": "4", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "5", "snippet": "def find_closest_elements(numbers: List[float]):\n\n    # TODO: Write your code here\n\n    min_number = 9999\n    min_distance = 9999\n\n    for number in numbers:\n        distance = number - min_number\n        if distance < min_distance:\n            min_number = number\n            min_distance = distance\n\n    return min_number, min_distance\n"}, {"id": "6", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "7", "snippet": "def find_closest_elements(numbers: List[float]):\n\n    return sorted((number, abs(number)) for number in numbers)[-2:]\n"}, {"id": "8", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}, {"id": "9", "snippet": "def find_closest_elements(numbers: List[float]):\n    numbers.sort()\n    return numbers[0], numbers[-1]\n"}]}
{"question_id": "HumanEval/21", "language": "python", "prompt": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\n", "signature": "def rescale_to_unit(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def rescale_to_unit(numbers: List[float]):\n    num_len = len(numbers)\n    rescaled = []\n\n    if num_len < 2:\n        return numbers\n\n    # TODO: Find a way to do this without zero-indexing\n    for num in numbers:\n        rescaled.append(num / (num_len - 1))\n\n    return rescaled\n"}, {"id": "1", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"}, {"id": "2", "snippet": "def rescale_to_unit(numbers: List[float]):\n    numbers = sorted(numbers)\n    new_values = []\n    for num in numbers:\n        new_values.append((num - numbers[0]) / numbers[-1])\n    return new_values\n"}, {"id": "3", "snippet": "def rescale_to_unit(numbers: List[float]):\n    minimum = numbers[0]\n    maximum = numbers[-1]\n\n    for number in numbers:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n\n    return [(number - minimum) / (maximum - minimum) for number in numbers]\n"}, {"id": "4", "snippet": "def rescale_to_unit(numbers: List[float]):\n    minimum = numbers[0]\n    maximum = numbers[0]\n\n    for num in numbers:\n        if num < minimum:\n            minimum = num\n        if num > maximum:\n            maximum = num\n\n    return [num - minimum for num in numbers]\n"}, {"id": "5", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"}, {"id": "6", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(number - min(numbers)) / (max(numbers) - min(numbers)) for number in numbers]\n"}, {"id": "7", "snippet": "def rescale_to_unit(numbers: List[float]):\n    # TODO: Facilitate numpy functions to do this\n    return [x / (max(numbers) - min(numbers)) for x in numbers]\n"}, {"id": "8", "snippet": "def rescale_to_unit(numbers: List[float]):\n    return [(numbers[i] - min(numbers)) / (max(numbers) - min(numbers)) for i in range(len(numbers))]\n"}, {"id": "9", "snippet": "def rescale_to_unit(numbers: List[float]):\n    maximum = max(numbers)\n    minimum = min(numbers)\n\n    return [(number - minimum) / (maximum - minimum) for number in numbers]\n"}]}
{"question_id": "HumanEval/22", "language": "python", "prompt": "Filter given list of any python values only for integers\n>>> filter_integers(['a', 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, 'abc', {}, []])\n[1, 2, 3]\n", "signature": "def filter_integers(values: List[Any]):", "solutions": [{"id": "0", "snippet": "def filter_integers(values: List[Any]):\n    return [num for num in values if isinstance(num, int)]\n"}, {"id": "1", "snippet": "def filter_integers(values: List[Any]):\n    return [num for num in values if isinstance(num, int)]\n"}, {"id": "2", "snippet": "def filter_integers(values: List[Any]):\n    return [num for num in values if isinstance(num, int)]\n"}, {"id": "3", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "4", "snippet": "def filter_integers(values: List[Any]):\n    return [number for number in values if isinstance(number, int)]\n"}, {"id": "5", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if isinstance(value, int)]\n"}, {"id": "6", "snippet": "def filter_integers(values: List[Any]):\n    return [num for num in values if isinstance(num, int)]\n"}, {"id": "7", "snippet": "def filter_integers(values: List[Any]):\n    return [num for num in values if isinstance(num, int)]\n"}, {"id": "8", "snippet": "def filter_integers(values: List[Any]):\n    return [v for v in values if isinstance(v, int)]\n"}, {"id": "9", "snippet": "def filter_integers(values: List[Any]):\n    return [value for value in values if type(value) == int]\n"}]}
{"question_id": "HumanEval/23", "language": "python", "prompt": "Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3\n", "signature": "def strlen(string: str):", "solutions": [{"id": "0", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "1", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "2", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "3", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "4", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "5", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "6", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "7", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "8", "snippet": "def strlen(string: str):\n    return len(string)\n"}, {"id": "9", "snippet": "def strlen(string: str):\n    return len(string)\n"}]}
{"question_id": "HumanEval/24", "language": "python", "prompt": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n", "signature": "def largest_divisor(n: int):", "solutions": [{"id": "0", "snippet": "def largest_divisor(n: int):\n    divisors = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i > n:\n                divisors.append(i)\n                divisors.append(n // i)\n            if n // i > n:\n                divisors.append(n // i)\n    return max(divisors) if len(divisors) > 0 else 0\n"}, {"id": "1", "snippet": "def largest_divisor(n: int):\n    return max([x for x in range(1, n) if n % x == 0])\n"}, {"id": "2", "snippet": "def largest_divisor(n: int):\n    divisor = 1\n    while divisor <= n:\n        if n % divisor == 0:\n            n //= divisor\n        else:\n            divisor += 1\n    return divisor\n"}, {"id": "3", "snippet": "def largest_divisor(n: int):\n    return max(range(1, n + 1), key=lambda x: abs(x))\n"}, {"id": "4", "snippet": "def largest_divisor(n: int):\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return n\n"}, {"id": "5", "snippet": "def largest_divisor(n: int):\n    result = 0\n    for x in range(1, n):\n        if n % x == 0:\n            if x > result:\n                result = x\n    return result\n"}, {"id": "6", "snippet": "def largest_divisor(n: int):\n    return max([i for i in range(1, n + 1) if n % i == 0])\n"}, {"id": "7", "snippet": "def largest_divisor(n: int):\n    divisors = []\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            if divisor > n / divisor:\n                largest = divisor\n            else:\n                largest = n / divisor\n            divisors.append(largest)\n    return max(divisors)\n"}, {"id": "8", "snippet": "def largest_divisor(n: int):\n    # Reverse the list so n doesn't go into a divisor by itself\n    nums = list(reversed(range(1, n + 1)))\n    # Find the largest divisor of the numbers that divide n evenly\n    return max(nums)\n"}, {"id": "9", "snippet": "def largest_divisor(n: int):\n\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            largest = divisor\n        divisor += 1\n    return largest\n"}]}
{"question_id": "HumanEval/25", "language": "python", "prompt": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\n", "signature": "def factorize(n: int):", "solutions": [{"id": "0", "snippet": "def factorize(n: int):\n    factors = []\n\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return factors\n"}, {"id": "1", "snippet": "def factorize(n: int):\n\n    result = []\n\n    for p in primes:\n        if n % p == 0:\n            while n % p == 0:\n                result.append(p)\n                n //= p\n\n    if n > 1:\n        result.append(n)\n\n    return result\n"}, {"id": "2", "snippet": "def factorize(n: int):\n    factors = []\n\n    for prime in primes:\n        if prime > n:\n            break\n\n        while n % prime == 0:\n            factors.append(prime)\n            n //= prime\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n"}, {"id": "3", "snippet": "def factorize(n: int):\n\n    primes = []\n    factors = []\n    for prime in eratosthenes(int(n**0.5)+1):\n        if n % prime == 0:\n            while n % prime == 0:\n                n //= prime\n                primes.append(prime)\n            if n > 1:\n                factors.append(prime)\n    if n > 1:\n        factors.append(n)\n\n    return factors\n"}, {"id": "4", "snippet": "def factorize(n: int):\n    factors = []\n    i = 2\n    while n > 1:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n"}, {"id": "5", "snippet": "def factorize(n: int):\n    factors = []\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n"}, {"id": "6", "snippet": "def factorize(n: int):\n\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n"}, {"id": "7", "snippet": "def factorize(n: int):\n\n    primes = []\n\n    for p in eratosthenes(int(n**0.5) + 1):\n        if n % p == 0:\n            m = int(n / p)\n            if p * p!= n and m * m > n:\n                break\n            if p * p == n:\n                primes.append(p)\n            if p * p < n:\n                primes.append(p + 1)\n\n    return primes\n"}, {"id": "8", "snippet": "def factorize(n: int):\n    factors = []\n    for p in primes:\n        while n % p == 0:\n            n //= p\n            factors.append(p)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}, {"id": "9", "snippet": "def factorize(n: int):\n\n    result = []\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            result.extend([i, n // i])\n\n    return result\n"}]}
{"question_id": "HumanEval/26", "language": "python", "prompt": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\n", "signature": "def remove_duplicates(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def remove_duplicates(numbers: List[int]):\n    return list(set(numbers))\n"}, {"id": "1", "snippet": "def remove_duplicates(numbers: List[int]):\n    numbers_set = set()\n\n    for number in numbers:\n        if number not in numbers_set:\n            numbers_set.add(number)\n        else:\n            numbers.remove(number)\n\n    return numbers\n"}, {"id": "2", "snippet": "def remove_duplicates(numbers: List[int]):\n    return [number for number, count in Counter(numbers).items() if count > 1]\n"}, {"id": "3", "snippet": "def remove_duplicates(numbers: List[int]):\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"}, {"id": "4", "snippet": "def remove_duplicates(numbers: List[int]):\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"}, {"id": "5", "snippet": "def remove_duplicates(numbers: List[int]):\n    numbers = []\n    for i in numbers:\n        if i not in numbers:\n            numbers.append(i)\n    return numbers\n"}, {"id": "6", "snippet": "def remove_duplicates(numbers: List[int]):\n    seen = {}\n    return [] if len(numbers) == 0 else [numbers[i] for i in range(1, len(numbers)) if numbers[i] in seen and seen[numbers[i]] is False] + remove_duplicates(seen)\n"}, {"id": "7", "snippet": "def remove_duplicates(numbers: List[int]):\n    return list(set(numbers))\n"}, {"id": "8", "snippet": "def remove_duplicates(numbers: List[int]):\n    numbers = [number for number, count in Counter(numbers).items() if count > 1]\n    return numbers\n"}, {"id": "9", "snippet": "def remove_duplicates(numbers: List[int]):\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n"}]}
{"question_id": "HumanEval/27", "language": "python", "prompt": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'\n", "signature": "def flip_case(string: str):", "solutions": [{"id": "0", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "1", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "2", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "3", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "4", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "5", "snippet": "def flip_case(string: str):\n    return string.upper()\n"}, {"id": "6", "snippet": "def flip_case(string: str):\n    return string.upper()\n"}, {"id": "7", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "8", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}, {"id": "9", "snippet": "def flip_case(string: str):\n    return string.swapcase()\n"}]}
{"question_id": "HumanEval/28", "language": "python", "prompt": "Concatenate list of strings into a single string\n>>> concatenate([])\n''\n>>> concatenate(['a', 'b', 'c'])\n'abc'\n", "signature": "def concatenate(strings: List[str]):", "solutions": [{"id": "0", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "1", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "2", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "3", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "4", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "5", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}, {"id": "6", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "7", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "8", "snippet": "def concatenate(strings: List[str]):\n    return \"\".join(strings)\n"}, {"id": "9", "snippet": "def concatenate(strings: List[str]):\n    return ''.join(strings)\n"}]}
{"question_id": "HumanEval/29", "language": "python", "prompt": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], 'a')\n[]\n>>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n['abc', 'array']\n", "signature": "def filter_by_prefix(strings: List[str], prefix: str):", "solutions": [{"id": "0", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "1", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "2", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "3", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "4", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "5", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "6", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "7", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "8", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}, {"id": "9", "snippet": "def filter_by_prefix(strings: List[str], prefix: str):\n    return [s for s in strings if s.startswith(prefix)]\n"}]}
{"question_id": "HumanEval/3", "language": "python", "prompt": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero([1, 2, 3])\nFalse\n>>> below_zero([1, 2, -4, 5])\nTrue\n", "signature": "def below_zero(operations: List[int]):", "solutions": [{"id": "0", "snippet": "def below_zero(operations: List[int]):\n\n    if operations[0] < 0:\n        return True\n    else:\n        return False\n"}, {"id": "1", "snippet": "def below_zero(operations: List[int]):\n    for op in operations:\n        if op < 0:\n            return True\n    return False\n"}, {"id": "2", "snippet": "def below_zero(operations: List[int]):\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}, {"id": "3", "snippet": "def below_zero(operations: List[int]):\n    # note that this function does not take into account negative values\n    # and returns True if it should return False\n    for account in operations:\n        if account < 0:\n            return True\n    return False\n"}, {"id": "4", "snippet": "def below_zero(operations: List[int]):\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n"}, {"id": "5", "snippet": "def below_zero(operations: List[int]):\n    if operations[0] < 0:\n        return True\n    else:\n        return False\n"}, {"id": "6", "snippet": "def below_zero(operations: List[int]):\n    if operations[0] < 0:\n        return True\n    else:\n        return False\n"}, {"id": "7", "snippet": "def below_zero(operations: List[int]):\n    for i in range(len(operations)):\n        if operations[i] < 0:\n            return True\n    return False\n"}, {"id": "8", "snippet": "def below_zero(operations: List[int]):\n\n    for operation in operations:\n        if operation < 0:\n            return True\n\n    return False\n"}, {"id": "9", "snippet": "def below_zero(operations: List[int]):\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}]}
{"question_id": "HumanEval/30", "language": "python", "prompt": "Return only positive numbers in the list.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\n", "signature": "def get_positive(l: list):", "solutions": [{"id": "0", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "1", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "2", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "3", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "4", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}, {"id": "5", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "6", "snippet": "def get_positive(l: list):\n    return [n for n in l if n > 0]\n"}, {"id": "7", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "8", "snippet": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n"}, {"id": "9", "snippet": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n"}]}
{"question_id": "HumanEval/31", "language": "python", "prompt": "Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse\n", "signature": "def is_prime(n):", "solutions": [{"id": "0", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for x in range(3, n, 2):\n            if n % x == 0:\n                return False\n    return True\n"}, {"id": "1", "snippet": "def is_prime(n):\n    if n <= 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n\n    return True\n"}, {"id": "3", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    for element in range(2, n):\n        if n % element == 0:\n            return False\n    return True\n"}, {"id": "5", "snippet": "def is_prime(n):\n    if n <= 2:\n        return n == 2\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def is_prime(n):\n    if n <= 2:\n        return n == 2\n\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n\n    for x in range(3, n, 2):\n        if n % x == 0:\n            return False\n\n    return True\n"}, {"id": "8", "snippet": "def is_prime(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    for x in range(3, n, 2):\n        if n % x == 0:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"}]}
{"question_id": "HumanEval/32", "language": "python", "prompt": "xs are coefficients of a polynomial.\nfind_zero find x such that poly(x) = 0.\nfind_zero returns only only zero point, even if there are many.\nMoreover, find_zero only takes list xs having even number of coefficients\nand largest non zero coefficient as it guarantees\na solution.\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n-0.5\n>>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n1.0\n", "signature": "def find_zero(xs: list):", "solutions": [{"id": "0", "snippet": "def find_zero(xs: list):\n    for i in range(len(xs)):\n        if len(xs) - i == 0:\n            return xs[0]\n    return None\n"}, {"id": "1", "snippet": "def find_zero(xs: list):\n    n = len(xs)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return xs[0]\n    else:\n        xs.sort()\n        y = xs[0]\n        z = 0\n        for i in range(1, n):\n            if xs[i]!= 0:\n                y = y - xs[i] * (y - z)\n                z = i\n        return y\n"}, {"id": "2", "snippet": "def find_zero(xs: list):\n    for i, x in enumerate(xs):\n        if x == 0:\n            return i\n    return len(xs)\n"}, {"id": "3", "snippet": "def find_zero(xs: list):\n    for i, x in enumerate(xs):\n        if x == 0:\n            return i\n        if len(xs) > 1:\n            return find_zero(xs[xs.index(x):])\n"}, {"id": "4", "snippet": "def find_zero(xs: list):\n    result = []\n    for x in xs:\n        if x == 0:\n            result.append(x)\n            if len(result) == 2:\n                return sum(result) * (x**2 - 1)\n        else:\n            result.append(x)\n    return sum(result) * (x**2 - 1)\n"}, {"id": "5", "snippet": "def find_zero(xs: list):\n    x = 0\n    for coeff in xs:\n        if coeff == 0:\n            x = find_zero(xs[xs.index(x):])\n            break\n    return x\n"}, {"id": "6", "snippet": "def find_zero(xs: list):\n    zero = 0\n    for i, coef in enumerate(xs):\n        if coef == 0:\n            zero = i\n            break\n    return find_zero(xs[zero::])\n"}, {"id": "7", "snippet": "def find_zero(xs: list):\n    for x in xs:\n        if x == 0:\n            return x\n    return find_zero([-1] + xs)\n"}, {"id": "8", "snippet": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0. find_zero takes only zero points,\n    even if there are many.\n\n    Another alternative is find_zero([1, 2]) and find_zero takes list xs having\n    even number of coefficients and largest non zero coefficient as it may\n    take a solution.\n\n    >>> round(find_zero([1, 2]), 2)\n    2\n    >>> round(find_zero([-6, 11, -6, 1]), 2)\n    6\n    >>> round(find_zero([-6, 11, -6, 1]), 2)\n    11\n    \"\"\"\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return i\n    return -1\n"}, {"id": "9", "snippet": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n\n    find_zero finds x such that poly(x) = 0.\n\n    Find only zero point, even if there are many.\n\n    >>> round(find_zero([1, 2]), 2)\n    2\n    \"\"\"\n    xs = sorted(xs)\n    for i in range(len(xs)):\n        if xs[i]!= 0:\n            return xs[i]\n    return 0\n"}]}
{"question_id": "HumanEval/33", "language": "python", "prompt": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\n", "signature": "def sort_third(l: list):", "solutions": [{"id": "0", "snippet": "def sort_third(l: list):\n    return sort_divisible(l, 3)\n"}, {"id": "1", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] % 3 == l[j] % 3 and l[i] % 3!= 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "2", "snippet": "def sort_third(l: list):\n\n    return sort_divisible(3, l)\n"}, {"id": "3", "snippet": "def sort_third(l: list):\n\n    return sort_divisible(l, 3)\n"}, {"id": "4", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] % 3 == 0 and l[j] % 3 == 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "5", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        for j in range(i, len(l)):\n            if l[i] % 3 == l[j] % 3:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "6", "snippet": "def sort_third(l: list):\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] % 3!= l[j] % 3:\n                l[j], l[i] = l[i], l[j]\n    return l\n"}, {"id": "7", "snippet": "def sort_third(l: list):\n    return sort_divisible(3, l) + sort_divisible(3, l[1:])\n"}, {"id": "8", "snippet": "def sort_third(l: list):\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % 3!= 0 and l[j] % 3!= 0 and l[i] == l[j]:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}, {"id": "9", "snippet": "def sort_third(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[j] % 3!= 0 and l[j] % 3!= 0 and l[i] % 3!= 0:\n                l[i], l[j] = l[j], l[i]\n    return l\n"}]}
{"question_id": "HumanEval/34", "language": "python", "prompt": "Return sorted unique elements in a list\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\n", "signature": "def unique(l: list):", "solutions": [{"id": "0", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "1", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "2", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}, {"id": "3", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "4", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "5", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "6", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "7", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "8", "snippet": "def unique(l: list):\n    return sorted(set(l))\n"}, {"id": "9", "snippet": "def unique(l: list):\n    return sorted(list(set(l)))\n"}]}
{"question_id": "HumanEval/35", "language": "python", "prompt": "Return maximum element in the list.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\n", "signature": "def max_element(l: list):", "solutions": [{"id": "0", "snippet": "def max_element(l: list):\n    max_num = 0\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}, {"id": "1", "snippet": "def max_element(l: list):\n    return max(l)\n"}, {"id": "2", "snippet": "def max_element(l: list):\n    max_value = 0\n    for x in l:\n        if x > max_value:\n            max_value = x\n    return max_value\n"}, {"id": "3", "snippet": "def max_element(l: list):\n    max_element = 0\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"}, {"id": "4", "snippet": "def max_element(l: list):\n    max_number = l[0]\n    for number in l:\n        if number > max_number:\n            max_number = number\n    return max_number\n"}, {"id": "5", "snippet": "def max_element(l: list):\n    max_element = 0\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n"}, {"id": "6", "snippet": "def max_element(l: list):\n    max_number = 0\n    for number in l:\n        if number > max_number:\n            max_number = number\n    return max_number\n"}, {"id": "7", "snippet": "def max_element(l: list):\n    max_value = 0\n    for value in l:\n        if value > max_value:\n            max_value = value\n    return max_value\n"}, {"id": "8", "snippet": "def max_element(l: list):\n    if len(l) == 0:\n        return 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        return l[0] if l[0] > max_element(l[1:]) else max_element(l[1:])\n"}, {"id": "9", "snippet": "def max_element(l: list):\n    return max(l)\n"}]}
{"question_id": "HumanEval/36", "language": "python", "prompt": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n", "signature": "def fizz_buzz(n: int):", "solutions": [{"id": "0", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 11 == 0:\n            count += 1\n        if i % 3 == 0:\n            count += 2\n        if i % 5 == 0:\n            count += 3\n    return count\n"}, {"id": "1", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 11 == 0:\n            count += 1\n        if i % 10 == 7:\n            count += 2\n        yield count\n"}, {"id": "2", "snippet": "def fizz_buzz(n: int):\n    if n % 11 == 0:\n        return 0\n    elif n % 13 == 0:\n        return 2\n    else:\n        result = 0\n        for i in range(n, 0, -1):\n            if i % 10 == 7:\n                result += 1\n            elif i % 3 == 0:\n                result += 2\n            else:\n                result += 1\n        return result\n"}, {"id": "3", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 in [1, 3]:\n            i = i // 10\n            if i % 11 == 0:\n                count += 1\n            else:\n                count += 2\n        else:\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def fizz_buzz(n: int):\n    result = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 11 == 0:\n            result += 1\n        if i % 10 == 7:\n            result += 2\n        if i % 5 == 0:\n            result += 3\n    return result\n"}, {"id": "5", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 == 0 or i % 11 == 0:\n            count += 1\n        if i % 10 == 7:\n            count += 1\n        yield count\n"}, {"id": "6", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7:\n            count += 1\n        if i % 13 == 7:\n            count += 2\n        if count == 0:\n            return i\n"}, {"id": "7", "snippet": "def fizz_buzz(n: int):\n    result = 0\n    for i in range(1, n + 1):\n        if i % 7 in (0, 7):\n            result += 1\n        else:\n            result += 0\n    return result\n"}, {"id": "8", "snippet": "def fizz_buzz(n: int):\n    if n == 0:\n        return 0\n    count = 1\n    result = []\n    for i in range(1, n + 1):\n        if i % 11 == 7:\n            count += 1\n        elif i % 3 == 7:\n            count += 2\n        elif i % 5 == 7:\n            count += 3\n        result.append(count)\n    return sum(result)\n"}, {"id": "9", "snippet": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 7 in (1, 3, 5, 9, 11):\n            i = \"fizz\"\n        else:\n            i = \"buzz\"\n        count += 1\n    return count\n"}]}
{"question_id": "HumanEval/37", "language": "python", "prompt": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\n", "signature": "def sort_even(l: list):", "solutions": [{"id": "0", "snippet": "def sort_even(l: list):\n\n    even_odd = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_odd.append(l[i])\n\n    return even_odd\n"}, {"id": "1", "snippet": "def sort_even(l: list):\n\n    even_list = []\n\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_list.append(l[i])\n\n    return even_list\n"}, {"id": "2", "snippet": "def sort_even(l: list):\n    odd = []\n    even = []\n\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n    return sort_odd(odd) + even\n"}, {"id": "3", "snippet": "def sort_even(l: list):\n    even = []\n    odd = []\n\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n\n    return even + odd\n"}, {"id": "4", "snippet": "def sort_even(l: list):\n\n    even_index = []\n    odd_index = []\n    for i, num in enumerate(l):\n        if i % 2 == 0:\n            even_index.append(num)\n        else:\n            odd_index.append(num)\n\n    return sorted(even_index) + sorted(odd_index)\n"}, {"id": "5", "snippet": "def sort_even(l: list):\n    even_index = []\n    odd_index = []\n\n    for i, number in enumerate(l):\n        if number % 2 == 0:\n            even_index.append(i)\n        else:\n            odd_index.append(i)\n\n    for i in range(len(even_index) - 1, -1, -1):\n        for j in range(even_index[i], len(l)):\n            l[j] = l[j]\n\n    for i in range(odd_index):\n        odd_index[i] = l[i]\n\n    for i in range(even_index):\n        l[i] = odd_index[i]\n\n    return l\n"}, {"id": "6", "snippet": "def sort_even(l: list):\n    odd_list = []\n    even_list = []\n\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even_list.append(l[i])\n        else:\n            odd_list.append(l[i])\n\n    return even_list + odd_list\n"}, {"id": "7", "snippet": "def sort_even(l: list):\n\n    even_index = []\n    odd_index = []\n\n    for i, num in enumerate(l):\n        if num % 2 == 0:\n            even_index.append(i)\n        else:\n            odd_index.append(i)\n\n    return sort_even_recursive(even_index, odd_index, l)\n"}, {"id": "8", "snippet": "def sort_even(l: list):\n    odd_index = []\n    even_index = []\n    for i, num in enumerate(l):\n        if num % 2 == 0:\n            even_index.append(i)\n        else:\n            odd_index.append(i)\n    return even_index + odd_index\n"}, {"id": "9", "snippet": "def sort_even(l: list):\n    even = []\n    odd = []\n\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            even.append(l[i])\n        else:\n            odd.append(l[i])\n\n    return even + odd\n"}]}
{"question_id": "HumanEval/38", "language": "python", "prompt": "\ntakes as input string encoded with encode_cyclic function. Returns decoded string.\n", "signature": "def decode_cyclic(s: str):", "solutions": [{"id": "0", "snippet": "def decode_cyclic(s: str):\n    output = \"\"\n    for c in s:\n        output += cyclic_dict[c]\n    return output\n"}, {"id": "1", "snippet": "def decode_cyclic(s: str):\n    i = 0\n    result = \"\"\n    for c in s:\n        if i == 0 or c == '1':\n            result += c\n        i += 1\n    return result\n"}, {"id": "2", "snippet": "def decode_cyclic(s: str):\n    if not s:\n        return s\n\n    chars = []\n    i = 0\n    while i < len(s):\n        c = s[i]\n        i += 1\n        if c == '1':\n            chars.append(c)\n            i += 1\n        elif c == '0':\n            chars.append('0' * (len(chars) - 1) + c)\n            i += 1\n        else:\n            raise ValueError('cyclic decoding error')\n\n    return ''.join(chars)\n"}, {"id": "3", "snippet": "def decode_cyclic(s: str):\n    chars = []\n    for c in s:\n        chars.append(cyclic_lookup[c])\n    return ''.join(chars)\n"}, {"id": "4", "snippet": "def decode_cyclic(s: str):\n    result = \"\"\n    for c in s:\n        result += CYCLIC_TABLE[c]\n    return result\n"}, {"id": "5", "snippet": "def decode_cyclic(s: str):\n    if not s or s == '':\n        return s\n\n    chars = []\n    for c in s:\n        if c.isalpha():\n            chars.append(chr(ord(c) - 1))\n        else:\n            break\n    return ''.join(chars)\n"}, {"id": "6", "snippet": "def decode_cyclic(s: str):\n    return ''.join([CyclicCodec.decode(c) for c in s])\n"}, {"id": "7", "snippet": "def decode_cyclic(s: str):\n    if not s:\n        return ''\n\n    chars = list(s)\n    i = 0\n    j = len(chars) - 1\n    while i <= j:\n        t = ord(chars[i]) - ord('a')\n        j -= 1\n        i += 1\n\n    return chr(ord(chars[j]) + 1) + chars[i + 1:j]\n"}, {"id": "8", "snippet": "def decode_cyclic(s: str):\n    string = ''\n    chars = list(s)\n    i = 0\n    while i < len(chars):\n        if chars[i] == '[':\n            i += 1\n        elif chars[i] == ']':\n            i += 1\n        elif chars[i] == '(':\n            i += 1\n            string += chars[i]\n            i += 1\n        elif chars[i] == ')':\n            i += 1\n            string += chars[i]\n            i += 1\n    return string\n"}, {"id": "9", "snippet": "def decode_cyclic(s: str):\n    if s == '':\n        return s\n    if s[-1] == '1':\n        return decode_cyclic(s[:-1]) + '0'\n    return decode_cyclic(s[:-1]) + '1'\n"}]}
{"question_id": "HumanEval/39", "language": "python", "prompt": "\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n", "signature": "def prime_fib(n: int):", "solutions": [{"id": "0", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    a, b = 2, 1\n    while n > 1:\n        a, b = b, a + b\n        n -= 1\n    return a\n"}, {"id": "1", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "2", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return a\n"}, {"id": "3", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    result = [2, 3]\n    for i in range(4, n + 1):\n        result.append(result[i - 1] + result[i - 2])\n    return result[n]\n"}, {"id": "4", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    result = []\n    for i in range(2, n + 1):\n        result.append(n - i)\n        if is_prime(i):\n            result.appendi(i)\n    return result[-1]\n"}, {"id": "5", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 2):\n        a, b = b, a + b\n    return a\n"}, {"id": "6", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    else:\n        return n * prime_fib(n-1)\n"}, {"id": "7", "snippet": "def prime_fib(n: int):\n    a, b = 2, 3\n    while n > 2:\n        a, b = b, a + b\n        n -= 1\n    return a\n"}, {"id": "8", "snippet": "def prime_fib(n: int):\n    result = [2, 3]\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    while True:\n        result[0], result[1] = result[1], result[0] + result[1]\n        if result[0] > result[1]:\n            break\n        for i in range(2, n):\n            result[i] = result[i - 1] * i + result[i - 2]\n    return result[n]\n"}, {"id": "9", "snippet": "def prime_fib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a\n"}]}
{"question_id": "HumanEval/4", "language": "python", "prompt": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\n", "signature": "def mean_absolute_deviation(numbers: List[float]):", "solutions": [{"id": "0", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center = mean(numbers)\n    return sum(abs(number - center) for number in numbers) / len(numbers)\n"}, {"id": "1", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    centerpoint = mean(numbers)\n    return sum(abs(number - centerpoint) for number in numbers) / len(numbers)\n"}, {"id": "2", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center = mean(numbers)\n    return sum(abs(number - center) for number in numbers) / len(numbers)\n"}, {"id": "3", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center = mean(numbers)\n    return sum(abs(number - center) for number in numbers) / len(numbers)\n"}, {"id": "4", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    centerpoint = mean(numbers)\n    return sum(abs(number - centerpoint) for number in numbers) / len(numbers)\n"}, {"id": "5", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return math.sqrt(variance(numbers))\n"}, {"id": "6", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center = mean(numbers)\n    return sum(abs(number - center) for number in numbers) / len(numbers)\n"}, {"id": "7", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    center = mean(numbers)\n    return sum([abs(number - center) for number in numbers]) / len(numbers)\n"}, {"id": "8", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return math.sqrt(sum(map(lambda x: math.pow(x, 2), numbers)) / len(numbers))\n"}, {"id": "9", "snippet": "def mean_absolute_deviation(numbers: List[float]):\n    return numpy.mean(numbers)\n"}]}
{"question_id": "HumanEval/40", "language": "python", "prompt": "\ntriples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\nTrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\nTrue\n>>> triples_sum_to_zero([1])\nFalse\n", "signature": "def triples_sum_to_zero(l: list):", "solutions": [{"id": "0", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n"}, {"id": "1", "snippet": "def triples_sum_to_zero(l: list):\n\n    s1 = set(l)\n    s2 = set([x for x in l if -x in s1])\n    return len(s2) == 3\n"}, {"id": "2", "snippet": "def triples_sum_to_zero(l: list):\n    from collections import Counter\n    c = Counter(l)\n    for k, v in c.items():\n        if v == 3:\n            return True\n    return False\n"}, {"id": "3", "snippet": "def triples_sum_to_zero(l: list):\n\n    s = set(l)\n    for i in s:\n        if i + 3 in s:\n            return True\n    return False\n"}, {"id": "4", "snippet": "def triples_sum_to_zero(l: list):\n    s = set(l)\n    return len(s) == 3 and s.issubset({0, 1, 2})\n"}, {"id": "5", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            k = l[i] + l[j]\n            if k == 0:\n                return True\n            elif k > 0:\n                return False\n\n    return False\n"}, {"id": "6", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}, {"id": "7", "snippet": "def triples_sum_to_zero(l: list):\n\n    # remove any null elements from the list\n    l = [x for x in l if x!= 0]\n\n    # if there are any non-zero elements in the list, return True\n    if len(l) > 0:\n        return len(l) == 3 and l[0] == l[1] == l[2] and l[2] == 0\n\n    # otherwise, return False\n    return False\n"}, {"id": "8", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n"}, {"id": "9", "snippet": "def triples_sum_to_zero(l: list):\n\n    for i in range(len(l)-2):\n        for j in range(i+1, len(l)-1):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n\n    return False\n"}]}
{"question_id": "HumanEval/41", "language": "python", "prompt": "\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n", "signature": "def car_race_collision(n: int):", "solutions": [{"id": "0", "snippet": "def car_race_collision(n: int):\n    if n <= 1:\n        return 0\n    else:\n        distance = [0, 0]\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                distance[0] += 1 if i > j else 0\n                distance[1] += 1 if i < j else 0\n        return distance[0] + distance[1]\n"}, {"id": "1", "snippet": "def car_race_collision(n: int):\n\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return 2\n"}, {"id": "2", "snippet": "def car_race_collision(n: int):\n    result = 0\n    if n == 0:\n        return result\n\n    if n < 0:\n        return -1\n\n    car_count = 0\n    for i in range(n):\n        if car_race_collision_in_one_car(i):\n            car_count += 1\n            result += 1\n\n    return result\n"}, {"id": "3", "snippet": "def car_race_collision(n: int):\n    if n == 0:\n        return 0\n    cars_in_line = []\n    for i in range(n):\n        cars_in_line.append(Car(1, 0))\n        cars_in_line.append(Car(0, 1))\n        cars_in_line.append(Car(0, -1))\n    for car in cars_in_line:\n        if car.distance_from_start >= 2:\n            return car.distance_from_start\n    return -1\n"}, {"id": "4", "snippet": "def car_race_collision(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    car_speed_left = (n - 1) // 2\n    car_speed_right = n - car_speed_left\n    car_speed_left_inf = 2 ** car_speed_left\n    car_speed_right_inf = 2 ** car_speed_right\n    return (car_speed_left_inf - car_speed_right_inf) // n\n"}, {"id": "5", "snippet": "def car_race_collision(n: int):\n\n    if n < 1:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    car_1 = 0\n    car_2 = 0\n\n    for i in range(n - 1):\n        car_1 += random.randint(-1, 1)\n        car_2 += random.randint(-1, 1)\n\n        if car_1 > 0 and car_1 <= n:\n            if car_2 > 0 and car_2 <= n:\n                if car_1 == car_2:\n                    return 1\n                elif car_2 == car_1:\n                    return 2\n\n                else:\n                    return 0\n\n    return n\n"}, {"id": "6", "snippet": "def car_race_collision(n: int):\n    if n > 0:\n        if n % 2 == 0:\n            return 1\n        elif n % 2 == 1:\n            return 2\n        else:\n            return 0\n    else:\n        return 0\n"}, {"id": "7", "snippet": "def car_race_collision(n: int):\n    count = 0\n    for i in range(n):\n        if car_driving_left(i) or car_driving_right(i):\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def car_race_collision(n: int):\n\n    assert n >= 1\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n >= 3:\n        return 3\n    else:\n        return 0\n"}, {"id": "9", "snippet": "def car_race_collision(n: int):\n    return n * (n + 1) // 2\n"}]}
{"question_id": "HumanEval/42", "language": "python", "prompt": "Return list with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\n", "signature": "def incr_list(l: list):", "solutions": [{"id": "0", "snippet": "def incr_list(l: list):\n    i = 0\n    result = []\n    for e in l:\n        result.append(e + i)\n        i += 1\n    return result\n"}, {"id": "1", "snippet": "def incr_list(l: list):\n    i = 0\n    out = []\n    while i < len(l):\n        out.append(l[i] + 1)\n        i += 1\n    return out\n"}, {"id": "2", "snippet": "def incr_list(l: list):\n    i = 0\n    result = []\n    for element in l:\n        result.append(element + i)\n        i += 1\n    return result\n"}, {"id": "3", "snippet": "def incr_list(l: list):\n    result = []\n    for item in l:\n        result.append(item + 1)\n    return result\n"}, {"id": "4", "snippet": "def incr_list(l: list):\n    i = 0\n    out = []\n    for e in l:\n        i = e + i\n        out.append(i)\n    return out\n"}, {"id": "5", "snippet": "def incr_list(l: list):\n    i = 0\n    out_l = []\n    while i < len(l):\n        out_l.append(l[i] + 1)\n        i += 1\n    return out_l\n"}, {"id": "6", "snippet": "def incr_list(l: list):\n    return [l[0] + 1] + incr_list(l[1:])\n"}, {"id": "7", "snippet": "def incr_list(l: list):\n    incr = 0\n    result = []\n    for i in l:\n        result.append(i + incr)\n    return result\n"}, {"id": "8", "snippet": "def incr_list(l: list):\n    result = []\n    for i in l:\n        result.append(i + 1)\n    return result\n"}, {"id": "9", "snippet": "def incr_list(l: list):\n    i = 0\n    out_list = []\n    while i < len(l):\n        out_list.append(l[i] + 1)\n        i += 1\n    return out_list\n"}]}
{"question_id": "HumanEval/43", "language": "python", "prompt": "\npairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nFalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nFalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nFalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\nTrue\n>>> pairs_sum_to_zero([1])\nFalse\n", "signature": "def pairs_sum_to_zero(l):", "solutions": [{"id": "0", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}, {"id": "1", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n"}, {"id": "2", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n"}, {"id": "3", "snippet": "def pairs_sum_to_zero(l):\n    return len({ x for x in l if l.count(x) == 2 }) == 2\n"}, {"id": "4", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n"}, {"id": "5", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}, {"id": "6", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n"}, {"id": "7", "snippet": "def pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}, {"id": "8", "snippet": "def pairs_sum_to_zero(l):\n\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}, {"id": "9", "snippet": "def pairs_sum_to_zero(l):\n    return len({x for x in l if l.count(x) == 2}) == 2\n"}]}
{"question_id": "HumanEval/44", "language": "python", "prompt": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'\n", "signature": "def change_base(x: int, base: int):", "solutions": [{"id": "0", "snippet": "def change_base(x: int, base: int):\n    ten_digits = '0123456789ABCDEF'\n\n    if x == 0:\n        return '0'\n    if x == 1:\n        return '1'\n    digits = []\n    while x:\n        digits.append(x % base)\n        x //= base\n    digits.reverse()\n    result = ''.join(str(digit) for digit in digits)\n    if not result[-1] in ten_digits:\n        return result\n    return result[:-1] + ten_digits[result[-1]]\n"}, {"id": "1", "snippet": "def change_base(x: int, base: int):\n    ten_power = 10\n    if x < 10:\n        return str(x)\n    if x < ten_power:\n        return chr(base + x)\n    ten_power -= 1\n    number = x // ten_power\n    rest = x % ten_power\n    result = ''\n    if rest == 0:\n        result = chr(base + number)\n    else:\n        result = chr(base + number + rest)\n    return result\n"}, {"id": "2", "snippet": "def change_base(x: int, base: int):\n    digits = []\n\n    while x > 0:\n        digits.append(x % base)\n        x = x // base\n\n    digits.reverse()\n    result = ''.join(map(str, digits))\n\n    return result\n"}, {"id": "3", "snippet": "def change_base(x: int, base: int):\n    digits = []\n    while x:\n        digits.insert(0, x % base)\n        x //= base\n    result = ''.join(str(i) for i in digits[::-1])\n    if result.startswith('0'):\n        return result\n    else:\n        return '0' + result\n"}, {"id": "4", "snippet": "def change_base(x: int, base: int):\n\n    ten_digits = '0123456789ABCDEF'\n    if x < base:\n        return ten_digits[x]\n\n    remainder = x % base\n    dividend = ''\n    if remainder == 0:\n        dividend = '1'\n    while remainder!= 0:\n        remainder, remainder_digit = divmod(remainder, base)\n        dividend = ten_digits[remainder_digit] + dividend\n\n    if dividend == '':\n        return ten_digits[x]\n    else:\n        return dividend\n"}, {"id": "5", "snippet": "def change_base(x: int, base: int):\n    power = 0\n    result = ''\n    while x > 0:\n        result = str(x % base) + result\n        x = x // base\n        power += 1\n    if power == 0:\n        result = '0' + result\n    return result\n"}, {"id": "6", "snippet": "def change_base(x: int, base: int):\n    power = 0\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n        power += 1\n    if power == 0:\n        return \"0\"\n    while power > 0:\n        result = str(power) + result\n        power -= 1\n    return result\n"}, {"id": "7", "snippet": "def change_base(x: int, base: int):\n\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n\n    if len(digits) == 1:\n        return str(digits[0])\n    else:\n        return ''.join(map(str, digits[::-1]))\n"}, {"id": "8", "snippet": "def change_base(x: int, base: int):\n    ten_digits = '0123456789ABCDEF'\n    if x < base:\n        return ten_digits[x]\n    result = ''\n    while x > 0:\n        result = ten_digits[x % base] + result\n        x //= base\n    return result\n"}, {"id": "9", "snippet": "def change_base(x: int, base: int):\n    ten_digits = 10 - base\n    result = ''\n    if ten_digits <= x:\n        for i in range(ten_digits):\n            result += str(x // base)\n            x %= base\n        return result[::-1]\n    else:\n        for i in range(base):\n            result += str(x // base)\n            x %= base\n        return result[::-1]\n"}]}
{"question_id": "HumanEval/45", "language": "python", "prompt": "Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n", "signature": "def triangle_area(a, h):", "solutions": [{"id": "0", "snippet": "def triangle_area(a, h):\n    return (a * h) / 2\n"}, {"id": "1", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}, {"id": "2", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}, {"id": "3", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}, {"id": "4", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}, {"id": "5", "snippet": "def triangle_area(a, h):\n\n    return a * h / 2\n"}, {"id": "6", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}, {"id": "7", "snippet": "def triangle_area(a, h):\n    return (a * h) / 2\n"}, {"id": "8", "snippet": "def triangle_area(a, h):\n    return (a * h) / 2\n"}, {"id": "9", "snippet": "def triangle_area(a, h):\n    return a * h / 2\n"}]}
{"question_id": "HumanEval/46", "language": "python", "prompt": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n", "signature": "def fib4(n: int):", "solutions": [{"id": "0", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "1", "snippet": "def fib4(n: int):\n    if n < 2:\n        return n\n    return fib4(n-1) + fib4(n-2)\n"}, {"id": "2", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    return fib4(n - 1) + fib4(n - 2)\n"}, {"id": "3", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"}, {"id": "4", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"}, {"id": "5", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    return fib4(n-1) + fib4(n-2)\n"}, {"id": "6", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    return fib4(n-1) + fib4(n-2)\n"}, {"id": "7", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"}, {"id": "8", "snippet": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-2) + fib4(n-1)\n"}, {"id": "9", "snippet": "def fib4(n: int):\n    if n <= 1:\n        return n\n    return fib4(n-2) + fib4(n-1)\n"}]}
{"question_id": "HumanEval/47", "language": "python", "prompt": "Return median of elements in the list l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\n", "signature": "def median(l: list):", "solutions": [{"id": "0", "snippet": "def median(l: list):\n    m = len(l) // 2\n    return l[m] if len(l) % 2 == 0 else l[m + 1]\n"}, {"id": "1", "snippet": "def median(l: list):\n    m = len(l) // 2\n    return sorted(l[m:])[m]\n"}, {"id": "2", "snippet": "def median(l: list):\n    length = len(l)\n    if length % 2 == 0:\n        return l[int(length / 2) - 1]\n    else:\n        return (l[int(length / 2)] + l[int(length / 2) + 1]) / 2\n"}, {"id": "3", "snippet": "def median(l: list):\n    m = len(l) // 2\n    return sorted(l)[m]\n"}, {"id": "4", "snippet": "def median(l: list):\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n\n    if length % 2 == 0:\n        return sorted_list[int(length / 2) - 1]\n    else:\n        return 0.5 * (sorted_list[int(length / 2)] + sorted_list[int(length / 2) + 1])\n"}, {"id": "5", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[int((n - 1) / 2)]\n    else:\n        return (l[int((n - 1) / 2) - 1] + l[int((n - 1) / 2)]) / 2\n"}, {"id": "6", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return l[int((n - 1) / 2)]\n    return (l[int((n - 1) / 2)] + l[int(n / 2) - 1]) / 2\n"}, {"id": "7", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return l[int((n - 1) / 2)]\n    else:\n        return 0.5 * (l[int((n - 1) / 2) - 1] + l[int((n - 1) / 2)])\n"}, {"id": "8", "snippet": "def median(l: list):\n    m = len(l) // 2\n    return sorted(l)[m]\n"}, {"id": "9", "snippet": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2 - 1]\n    return (l[n // 2] + l[n // 2 + 1]) / 2\n"}]}
{"question_id": "HumanEval/48", "language": "python", "prompt": "\nChecks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse\n", "signature": "def is_palindrome(text: str):", "solutions": [{"id": "0", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "1", "snippet": "def is_palindrome(text: str):\n    if len(text) <= 1:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"}, {"id": "2", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "3", "snippet": "def is_palindrome(text: str):\n    return text == reverse(text)\n"}, {"id": "4", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "5", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "6", "snippet": "def is_palindrome(text: str):\n    return text == text[::-1]\n"}, {"id": "7", "snippet": "def is_palindrome(text: str):\n    if text == text[::-1]:\n        return True\n    return False\n"}, {"id": "8", "snippet": "def is_palindrome(text: str):\n    return text == reverse(text)\n"}, {"id": "9", "snippet": "def is_palindrome(text: str):\n    if not text:\n        return True\n    if len(text) <= 1:\n        return False\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n"}]}
{"question_id": "HumanEval/49", "language": "python", "prompt": "Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n", "signature": "def modp(n: int, p: int):", "solutions": [{"id": "0", "snippet": "def modp(n: int, p: int):\n    q, r = divmod(p, n)\n    return q if r == 0 else (q + 1) % p\n"}, {"id": "1", "snippet": "def modp(n: int, p: int):\n    t = 0\n    while p:\n        if p & 1:\n            t = (t << 1) + 1\n        p >>= 1\n        n = n * 2 % p\n    return n\n"}, {"id": "2", "snippet": "def modp(n: int, p: int):\n    t = 0\n    m = 1\n    n = abs(n)\n    while n > p:\n        t += 1\n        m = (m << 1) | 1\n        n = n - p\n    return t - 1 if m == 0 else t\n"}, {"id": "3", "snippet": "def modp(n: int, p: int):\n    return 2 ** n % p\n"}, {"id": "4", "snippet": "def modp(n: int, p: int):\n    num = 0\n    while p:\n        if p & 1:\n            num = num * 2 % n\n        p = p >> 1\n        n = n * 2\n    return num\n"}, {"id": "5", "snippet": "def modp(n: int, p: int):\n    power, rest = divmod(n, p)\n    if rest:\n        power += 1\n    return power\n"}, {"id": "6", "snippet": "def modp(n: int, p: int):\n    n2 = 2 ** n\n    return n2 % p\n"}, {"id": "7", "snippet": "def modp(n: int, p: int):\n    t = 0\n    while p:\n        if p & 1:\n            t = (t << 1) + 1\n        p >>= 1\n        n = n * 2 % p\n    return t\n"}, {"id": "8", "snippet": "def modp(n: int, p: int):\n    return 2 ** n % p\n"}, {"id": "9", "snippet": "def modp(n: int, p: int):\n    t = 0\n    n = abs(n)\n    p = abs(p)\n    while p > 0:\n        if n & 1 == 1:\n            t += 1\n        n >>= 1\n        p -= 1\n    return t\n"}]}
{"question_id": "HumanEval/5", "language": "python", "prompt": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\n", "signature": "def intersperse(numbers: List[int], delimeter: int):", "solutions": [{"id": "0", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[1] + numbers[0] for _ in range(1, delimeter)]\n"}, {"id": "1", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[i] + numbers[i + 1] for i in range(1, len(numbers) - 1) if i + 1 < delimeter] + [numbers[-1]]\n"}, {"id": "2", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[i] + numbers[i + 1] for i in range(1, len(numbers) - 1) if i + 1 < delimeter]\n"}, {"id": "3", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[1] + numbers[2] + numbers[3] for i in range(1, delimeter)]\n"}, {"id": "4", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[0] + numbers[1] for i in range(1, delimeter)] + [numbers[-1]]\n"}, {"id": "5", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[i + 1] for i in range(1, len(numbers) - 1) if i % 2 == 0] + [numbers[-1]]\n"}, {"id": "6", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [numbers[0]] + [numbers[0] + numbers[1] * delimeter] + [numbers[0] + numbers[1] * (delimeter + 1)]\n"}, {"id": "7", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n\n    return [numbers[0]] + [numbers[0] + numbers[1] for i in range(1, delimeter)] + [numbers[-1]]\n"}, {"id": "8", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [number * delimeter for number in numbers]\n"}, {"id": "9", "snippet": "def intersperse(numbers: List[int], delimeter: int):\n    return [delimeter for number in numbers for delimeter in range(number, 0, -1)]\n"}]}
{"question_id": "HumanEval/50", "language": "python", "prompt": "\ntakes as input string encoded with encode_shift function. Returns decoded string.\n", "signature": "def decode_shift(s: str):", "solutions": [{"id": "0", "snippet": "def decode_shift(s: str):\n    if not s:\n        return ''\n    result = []\n    for i in s:\n        result.append(alphabet.index(i))\n    return ''.join(result)\n"}, {"id": "1", "snippet": "def decode_shift(s: str):\n    shift_dict = {'a': 't', 't': 'a', 'c': 'g', 'g': 'c'}\n    return ''.join(shift_dict[c] for c in s)\n"}, {"id": "2", "snippet": "def decode_shift(s: str):\n    if s == '':\n        return ''\n    stack = Stack()\n    for c in s:\n        if c.isalpha():\n            stack.push(c)\n        elif c.isdigit():\n            stack.push(int(c))\n    result = stack.pop()\n    if stack.is_empty():\n        raise ValueError('empty stack')\n    return result\n"}, {"id": "3", "snippet": "def decode_shift(s: str):\n    if s == '':\n        return ''\n    result = []\n    for ch in s:\n        result.append(ALPHABET_LIST.index(ch))\n    return ''.join(result)\n"}, {"id": "4", "snippet": "def decode_shift(s: str):\n    shift_dict = {'a': 't', 't': 'a', 'c': 'g', 'g': 'c'}\n    return ''.join(shift_dict.get(x, x) for x in s)\n"}, {"id": "5", "snippet": "def decode_shift(s: str):\n    if s == '':\n        return s\n\n    result = []\n    for i in range(len(s) - 1, -1, -1):\n        result.append(ALPHABET[s[i]])\n    return ''.join(result)\n"}, {"id": "6", "snippet": "def decode_shift(s: str):\n    string_list = list(s)\n    i = len(string_list) - 1\n    shift = string_list[i]\n    j = i\n    while j >= 0 and string_list[j].isalpha():\n        j -= 1\n        shift += string_list[j]\n    return shift\n"}, {"id": "7", "snippet": "def decode_shift(s: str):\n    if len(s) == 0:\n        return ''\n    else:\n        return s[1:] + s[0]\n"}, {"id": "8", "snippet": "def decode_shift(s: str):\n    if len(s) == 0:\n        return ''\n    else:\n        return s[-1] + decode_shift(s[:-1])\n"}, {"id": "9", "snippet": "def decode_shift(s: str):\n    decoded = ''\n    for ch in s:\n        if ch == '0':\n            decoded += '-'\n        else:\n            decoded += ch\n    return decoded\n"}]}
{"question_id": "HumanEval/51", "language": "python", "prompt": "\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\nghijklm\")\n'bcdf\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'\n", "signature": "def remove_vowels(text):", "solutions": [{"id": "0", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n\n    if text == '':\n        return ''\n\n    for c in text:\n        if c in vowels:\n            text = text.replace(c, '')\n\n    return text\n"}, {"id": "1", "snippet": "def remove_vowels(text):\n    vowels = ''\n    for char in text:\n        if char in 'aeiouAEIOU':\n            vowels += char\n    return vowels\n"}, {"id": "2", "snippet": "def remove_vowels(text):\n\n    if text == '':\n        return ''\n\n    vowels = 'aeiouAEIOU'\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n\n    return text\n"}, {"id": "3", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n\n    if text == '':\n        return ''\n\n    for i in range(len(text)):\n        if text[i] in vowels:\n            text = text[:i] + text[i+1:]\n\n    return text\n"}, {"id": "4", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n\n    return ''.join(c for c in text if c not in vowels)\n"}, {"id": "5", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n\n    if text == '':\n        return ''\n\n    for v in vowels:\n        text = text.replace(v, '')\n\n    return text\n"}, {"id": "6", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n\n    if text == '':\n        return ''\n\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n\n    return text\n"}, {"id": "7", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n"}, {"id": "8", "snippet": "def remove_vowels(text):\n\n    vowels = 'aeiouAEIOU'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n\n    return new_text\n"}, {"id": "9", "snippet": "def remove_vowels(text):\n    if text == '':\n        return ''\n    else:\n        vowels = 'aeiouAEIOU'\n        result = ''\n        for i in text:\n            if i in vowels:\n                result += i\n        return result\n"}]}
{"question_id": "HumanEval/52", "language": "python", "prompt": "Return True if all numbers in the list l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\nTrue\n>>> below_threshold([1, 20, 4, 10], 5)\nFalse\n", "signature": "def below_threshold(l: list, t: int):", "solutions": [{"id": "0", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "1", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def below_threshold(l: list, t: int):\n    for n in l:\n        if n < t:\n            return False\n    return True\n"}, {"id": "3", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "5", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "8", "snippet": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num < t:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def below_threshold(l: list, t: int):\n    return all([t < n for n in l])\n"}]}
{"question_id": "HumanEval/53", "language": "python", "prompt": "Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n", "signature": "def add(x: int, y: int):", "solutions": [{"id": "0", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "1", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "2", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "3", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "4", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "5", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "6", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "7", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "8", "snippet": "def add(x: int, y: int):\n    return x + y\n"}, {"id": "9", "snippet": "def add(x: int, y: int):\n    return x + y\n"}]}
{"question_id": "HumanEval/54", "language": "python", "prompt": "\nCheck if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse\n", "signature": "def same_chars(s0: str, s1: str):", "solutions": [{"id": "0", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "1", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "2", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "3", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "4", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "5", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "6", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "7", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "8", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}, {"id": "9", "snippet": "def same_chars(s0: str, s1: str):\n    return list(s0) == list(s1)\n"}]}
{"question_id": "HumanEval/55", "language": "python", "prompt": "Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n", "signature": "def fib(n: int):", "solutions": [{"id": "0", "snippet": "def fib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-2):\n        a, b = b, a + b\n    return a\n"}, {"id": "1", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "2", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "3", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "4", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "5", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "6", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "7", "snippet": "def fib(n: int):\n    if n < 2:\n        return n\n    pre, curr = 0, 1\n    for _ in range(1, n):\n        pre, curr = curr, pre + curr\n    return pre\n"}, {"id": "8", "snippet": "def fib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n"}, {"id": "9", "snippet": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}]}
{"question_id": "HumanEval/56", "language": "python", "prompt": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse\n", "signature": "def correct_bracketing(brackets: str):", "solutions": [{"id": "0", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return True\n    return False\n"}, {"id": "1", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return True\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            if not brackets[i + 1] == \">\":\n                return False\n        if brackets[i] == \">\":\n            if not brackets[i + 1] == \"<\":\n                return False\n    return True\n"}, {"id": "2", "snippet": "def correct_bracketing(brackets: str):\n    brackets = brackets.replace(\"<\", \"[\")\n    brackets = brackets.replace(\">\", \"]\")\n    if brackets == \"<>\":\n        return True\n    return False\n"}, {"id": "3", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return True\n    bracket_count = {}\n    for i, ch in enumerate(brackets):\n        if ch == \"<\":\n            bracket_count[i] = bracket_count.get(i - 1, 0) + 1\n        elif ch == \">\":\n            bracket_count[i] = bracket_count.get(i - 1, 0) - 1\n        if bracket_count.get(i, 0) == 0:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def correct_bracketing(brackets: str):\n\n    opening_brackets = [\"<\", \">\", \"<<\", \">>\"]\n    for i in range(len(brackets)):\n        if brackets[i] in opening_brackets:\n            return False\n\n    return True\n"}, {"id": "5", "snippet": "def correct_bracketing(brackets: str):\n    opening_brackets = [\"<\", \">\"]\n    for char in brackets:\n        if char not in opening_brackets:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def correct_bracketing(brackets: str):\n    opening_brackets = [\"<\"]\n    closing_brackets = [\">\"]\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            return True\n        elif bracket in closing_brackets:\n            return False\n    return False\n"}, {"id": "7", "snippet": "def correct_bracketing(brackets: str):\n    count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\":\n            count = count + 1\n        elif brackets[i] == \">\":\n            count = count - 1\n        if count == 0:\n            return True\n    return False\n"}, {"id": "8", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    opening_brackets = []\n    for char in brackets:\n        if char == \"<\":\n            opening_brackets.append(\">\")\n        elif char == \">\":\n            opening_brackets.append(\"<\")\n        elif char == \"<<\" or char == \">>\":\n            opening_brackets.append(\"<<\")\n            opening_brackets.append(\">>\")\n        else:\n            raise ValueError(\"Invalid character {}\".format(char))\n    return len(opening_brackets) == len(set(opening_brackets))\n"}, {"id": "9", "snippet": "def correct_bracketing(brackets: str):\n    opening_bracket = \"<\"\n    closing_bracket = \">\"\n\n    if brackets.startswith(opening_bracket):\n        return True\n    elif brackets.startswith(closing_bracket):\n        return False\n    else:\n        return None\n"}]}
{"question_id": "HumanEval/57", "language": "python", "prompt": "Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\nTrue\n>>> monotonic([1, 20, 4, 10])\nFalse\n>>> monotonic([4, 1, 0, -10])\nTrue\n", "signature": "def monotonic(l: list):", "solutions": [{"id": "0", "snippet": "def monotonic(l: list):\n    i = 0\n    for j, v in enumerate(l):\n        if v!= l[i + 1]:\n            return True\n        i += 1\n    return False\n"}, {"id": "1", "snippet": "def monotonic(l: list):\n    return all(x >= y for x, y in zip(l, l[1:]))\n"}, {"id": "2", "snippet": "def monotonic(l: list):\n    return all(x <= y for x, y in zip(l, l[1:]))\n"}, {"id": "3", "snippet": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            decreasing = False\n        elif l[i] < l[i + 1]:\n            increasing = False\n    return increasing and decreasing\n"}, {"id": "4", "snippet": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing\n"}, {"id": "5", "snippet": "def monotonic(l: list):\n    increasing = True\n    decreasing = True\n    for i, v in enumerate(l):\n        if v < l[i - 1]:\n            increasing = False\n        elif v > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing\n"}, {"id": "6", "snippet": "def monotonic(l: list):\n    d = derivative(l)\n    for i, e in enumerate(d):\n        if i < len(l) - 1:\n            if d[i + 1] > d[i]:\n                return True\n        else:\n            if d[i] > d[i + 1]:\n                return True\n    return False\n"}, {"id": "7", "snippet": "def monotonic(l: list):\n    if len(l) <= 1:\n        return True\n    diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n    return all(diff <= [0, -1])\n"}, {"id": "8", "snippet": "def monotonic(l: list):\n    inc = True\n    dec = True\n    for i in range(len(l)-1):\n        if l[i] > l[i+1]:\n            dec = False\n        elif l[i] < l[i+1]:\n            inc = False\n    return inc or dec\n"}, {"id": "9", "snippet": "def monotonic(l: list):\n    x = sorted(l)\n    for i in range(1, len(x)):\n        if x[i]!= x[i - 1]:\n            return False\n    return True\n"}]}
{"question_id": "HumanEval/58", "language": "python", "prompt": "Return sorted unique common elements for two lists.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\n\n", "signature": "def common(l1: list, l2: list):", "solutions": [{"id": "0", "snippet": "def common(l1: list, l2: list):\n\n    return list(set(l1).intersection(set(l2)))\n"}, {"id": "1", "snippet": "def common(l1: list, l2: list):\n\n    return sorted(list(set(l1).intersection(set(l2))))\n"}, {"id": "2", "snippet": "def common(l1: list, l2: list):\n\n    return sorted(list(set(l1).intersection(set(l2))))\n"}, {"id": "3", "snippet": "def common(l1: list, l2: list):\n\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    return sorted(list(l1_set.intersection(l2_set)))\n"}, {"id": "4", "snippet": "def common(l1: list, l2: list):\n\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    return sorted(list(l1_set & l2_set))\n"}, {"id": "5", "snippet": "def common(l1: list, l2: list):\n\n    return list(set(l1).intersection(set(l2)))\n"}, {"id": "6", "snippet": "def common(l1: list, l2: list):\n\n    return sorted(list(set(l1).intersection(set(l2))))\n"}, {"id": "7", "snippet": "def common(l1: list, l2: list):\n\n    return sorted(list(set(l1).intersection(set(l2))))\n"}, {"id": "8", "snippet": "def common(l1: list, l2: list):\n\n    l1_set = set(l1)\n    l2_set = set(l2)\n\n    return sorted(list(l1_set.intersection(l2_set)))\n"}, {"id": "9", "snippet": "def common(l1: list, l2: list):\n\n    return sorted(list(set(l1) & set(l2)))\n"}]}
{"question_id": "HumanEval/59", "language": "python", "prompt": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n", "signature": "def largest_prime_factor(n: int):", "solutions": [{"id": "0", "snippet": "def largest_prime_factor(n: int):\n    factors = []\n\n    for i in range(2, n):\n        if n % i == 0:\n            break\n        else:\n            i += 1\n            while i * i <= n:\n                factors.append(i * i)\n\n    if len(factors) > 1:\n        return max(factors)\n    else:\n        return n\n"}, {"id": "1", "snippet": "def largest_prime_factor(n: int):\n    if n <= 1:\n        return None\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}, {"id": "2", "snippet": "def largest_prime_factor(n: int):\n    if n < 2:\n        return None\n\n    primes = []\n    for p in eratosthenes(int(n**0.5) + 1):\n        if p*p > n:\n            break\n        while n % p == 0:\n            primes.append(p)\n            n //= p\n    if n > 1:\n        primes.append(n)\n\n    if primes:\n        return max(primes)\n    else:\n        return None\n"}, {"id": "3", "snippet": "def largest_prime_factor(n: int):\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    if len(primes) > 1:\n        return max(primes)\n    return n\n"}, {"id": "4", "snippet": "def largest_prime_factor(n: int):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n            if i > 1:\n                for j in range(2, i):\n                    if i % j == 0:\n                        break\n                else:\n                    return i\n    if primes:\n        return primes[-1]\n    else:\n        return n\n"}, {"id": "5", "snippet": "def largest_prime_factor(n: int):\n\n    if n == 2:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}, {"id": "6", "snippet": "def largest_prime_factor(n: int):\n\n    if n == 1:\n        return 2\n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n    return n\n"}, {"id": "7", "snippet": "def largest_prime_factor(n: int):\n    if n == 1:\n        return 1\n\n    for prime in eratosthenes(n - 1):\n        if prime > 1:\n            return prime * prime\n\n    return n\n"}, {"id": "8", "snippet": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    if n > 1:\n        return n\n    else:\n        raise ValueError(\"n must be prime\")\n"}, {"id": "9", "snippet": "def largest_prime_factor(n: int):\n    for p in eratosthenes(n):\n        if p > 1:\n            return p\n"}]}
{"question_id": "HumanEval/6", "language": "python", "prompt": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n[2, 3, 1, 3]\n", "signature": "def parse_nested_parens(paren_string: str):", "solutions": [{"id": "0", "snippet": "def parse_nested_parens(paren_string: str):\n    levels = [1]\n    level = 0\n    for c in paren_string:\n        if c == '(':\n            level += 1\n        elif c == ')':\n            level -= 1\n        if level == 0:\n            yield levels\n            levels = []\n    yield levels\n"}, {"id": "1", "snippet": "def parse_nested_parens(paren_string: str):\n    paren_levels = []\n    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n            paren_levels.append(i)\n        elif paren_string[i] == ')':\n            paren_levels.append(paren_levels[-1] + 1)\n    return paren_levels\n"}, {"id": "2", "snippet": "def parse_nested_parens(paren_string: str):\n    nesting_levels = []\n    for level in range(len(paren_string)):\n        if level == 0 or level > len(nesting_levels):\n            nesting_levels.append(level)\n        elif level < len(nesting_levels) and nesting_levels[level - 1] + 1 == level:\n            nesting_levels[level - 1] += 1\n        else:\n            nesting_levels.append(level + 1)\n\n    return nesting_levels\n"}, {"id": "3", "snippet": "def parse_nested_parens(paren_string: str):\n    nesting_levels = []\n    for level in range(len(paren_string)):\n        level_string = paren_string[:level]\n        if len(level_string) == 1:\n            nesting_levels.append(level)\n            paren_string = paren_string[level:]\n        else:\n            previous_level = nesting_levels[-1]\n            next_level = nesting_levels[-1] + 1\n            if level_string[0] == '(':\n                previous_level = next_level\n            if level_string[0] == ')':\n                next_level = previous_level + 1\n            nesting_levels.append(previous_level)\n            nesting_levels.append(next_level)\n    return nesting_levels\n"}, {"id": "4", "snippet": "def parse_nested_parens(paren_string: str):\n    levels = []\n    for paren_group in paren_string.split(' '):\n        levels.append(len(paren_group))\n    return levels\n"}, {"id": "5", "snippet": "def parse_nested_parens(paren_string: str):\n    depth = 1\n    level_string = \"\"\n    for c in paren_string:\n        if c == '(':\n            depth += 1\n        elif c == ')':\n            depth -= 1\n        if depth == 0:\n            level_string += c\n    return level_string\n"}, {"id": "6", "snippet": "def parse_nested_parens(paren_string: str):\n    depths = []\n    level = 0\n    for char in paren_string:\n        if char == \"(\":\n            depths.append(level)\n            level += 1\n        elif char == \")\":\n            depths.append(max(depths) - level)\n            level -= 1\n    return depths\n"}, {"id": "7", "snippet": "def parse_nested_parens(paren_string: str):\n    nesting_levels = []\n    for level in range(len(paren_string)):\n        if level == 0 or level == len(paren_string) - 1:\n            nesting_levels.append(level)\n        else:\n            nesting_levels.append(max(nesting_levels[level - 1], nesting_levels[level - 2]) + 1)\n    return nesting_levels\n"}, {"id": "8", "snippet": "def parse_nested_parens(paren_string: str):\n    levels = [1]\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            levels.append(levels[-1] * 2 + 1)\n        elif char == ')':\n            levels[-1] -= levels[-1]\n        else:\n            return levels\n"}, {"id": "9", "snippet": "def parse_nested_parens(paren_string: str):\n    return [len(level) for level in re.split(r'\\(|\\)', paren_string)]\n"}]}
{"question_id": "HumanEval/60", "language": "python", "prompt": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n", "signature": "def sum_to_n(n: int):", "solutions": [{"id": "0", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "1", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "2", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "3", "snippet": "def sum_to_n(n: int):\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "4", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "5", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "6", "snippet": "def sum_to_n(n: int):\n\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "7", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "8", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}, {"id": "9", "snippet": "def sum_to_n(n: int):\n    total, k = 0, 1\n    while k <= n:\n        total, k = total + k, k + 1\n    return total\n"}]}
{"question_id": "HumanEval/61", "language": "python", "prompt": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse\n", "signature": "def correct_bracketing(brackets: str):", "solutions": [{"id": "0", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n    if not brackets[0]:\n        return True\n    for i in range(1, len(brackets)):\n        if brackets[i] == brackets[i - 1]:\n            return False\n    return True\n"}, {"id": "1", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0] == brackets[-1] and brackets.count(brackets[0]) == 1:\n        return True\n    else:\n        return False\n"}, {"id": "2", "snippet": "def correct_bracketing(brackets: str):\n    counter = {\")\": 0, \"]\": 0, \"}\": 0}\n    for c in brackets:\n        if c == \"(\":\n            counter[\"(\"] += 1\n        elif c == \")\":\n            counter[\"(\"] -= 1\n        if counter[\"(\"] == 0 and counter[\"(\"]!= 1):\n            return False\n    return True\n"}, {"id": "3", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return True\n    if len(brackets) == 1:\n        return False\n    for i in range(1, len(brackets)):\n        if brackets[i]!= brackets[i-1] and brackets[i-1]!= \"(\":\n            return False\n    return True\n"}, {"id": "4", "snippet": "def correct_bracketing(brackets: str):\n    if not brackets:\n        return False\n\n    opening_bracket = brackets.index(\"(\")\n    closing_bracket = brackets.index(\")\")\n\n    if opening_bracket!= closing_bracket:\n        return True\n\n    return False\n"}, {"id": "5", "snippet": "def correct_bracketing(brackets: str):\n    brackets_dict = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for i in range(len(brackets)):\n        if brackets[i] not in brackets_dict:\n            return False\n        elif brackets[i] == brackets_dict[brackets[i]]:\n            pass\n        else:\n            return False\n\n    return True\n"}, {"id": "6", "snippet": "def correct_bracketing(brackets: str):\n    counter = {\")\": 0, \"]\": 0, \"}\": 0}\n\n    for i in range(len(brackets)):\n        if brackets[i] == \"(\":\n            counter[\"(\"] += 1\n        elif brackets[i] == \")\":\n            counter[\"(\"] -= 1\n        if counter[\"(\"] == 0 and counter[\"(\"]!= 0:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0] == \"(\" and brackets[-1] == \")\":\n        return True\n    return False\n"}, {"id": "8", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0] == \"(\" and brackets[-1] == \")\":\n        return True\n    else:\n        return False\n"}, {"id": "9", "snippet": "def correct_bracketing(brackets: str):\n    if brackets[0] == \"(\" and brackets[-1] == \")\":\n        return True\n    return False\n"}]}
{"question_id": "HumanEval/62", "language": "python", "prompt": "xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\nReturn derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\n", "signature": "def derivative(xs: list):", "solutions": [{"id": "0", "snippet": "def derivative(xs: list):\n    dx = []\n    for i in range(len(xs)-1):\n        dx.append(xs[i+1] * xs[i])\n    return dx\n"}, {"id": "1", "snippet": "def derivative(xs: list):\n    derivative_list = []\n\n    for i in range(len(xs) - 1):\n        derivative_list.append(xs[i + 1] * xs[i])\n\n    return derivative_list\n"}, {"id": "2", "snippet": "def derivative(xs: list):\n    deriv = []\n    d = 1\n    for i in range(len(xs) - 1):\n        deriv.append(d)\n        d = d * xs[i + 1] - xs[i]\n    return deriv\n"}, {"id": "3", "snippet": "def derivative(xs: list):\n    d = []\n    for i in range(len(xs) - 1):\n        d.append(xs[i + 1] * xs[i])\n    return d\n"}, {"id": "4", "snippet": "def derivative(xs: list):\n    d = []\n    for i in range(len(xs) - 1):\n        d.append(xs[i] * xs[i + 1])\n    return d\n"}, {"id": "5", "snippet": "def derivative(xs: list):\n    dx = 1\n    if len(xs) > 2:\n        dx = (xs[2] - xs[1]) / (xs[0] - xs[1])\n        for i in range(3, len(xs)):\n            xs[i] += dx\n    return xs\n"}, {"id": "6", "snippet": "def derivative(xs: list):\n    d = []\n    for i in range(len(xs) - 1):\n        d.append(xs[i + 1] * xs[i])\n    return d\n"}, {"id": "7", "snippet": "def derivative(xs: list):\n\n    derivative_list = []\n\n    for i in range(len(xs) - 1):\n        derivative_list.append(xs[i + 1] * xs[i])\n\n    return derivative_list\n"}, {"id": "8", "snippet": "def derivative(xs: list):\n    dx = []\n    for i in range(1, len(xs)):\n        dx.append(xs[i] * i)\n    return dx\n"}, {"id": "9", "snippet": "def derivative(xs: list):\n    dx = 1\n    for i in range(len(xs) - 1):\n        dx = dx * xs[i + 1]\n    return dx\n"}]}
{"question_id": "HumanEval/63", "language": "python", "prompt": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n", "signature": "def fibfib(n: int):", "solutions": [{"id": "0", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(1, n):\n        a, b = b, a + b\n    return a\n"}, {"id": "1", "snippet": "def fibfib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n"}, {"id": "2", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n"}, {"id": "3", "snippet": "def fibfib(n: int):\n    assert n >= 0\n    result = [0, 1]\n    while n > 1:\n        result.append(result[-2] + result[-1])\n        n -= 1\n    return result[0]\n"}, {"id": "4", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return a\n"}, {"id": "5", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a+b\n    return a\n"}, {"id": "6", "snippet": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2)\n"}, {"id": "7", "snippet": "def fibfib(n: int):\n    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    pre, cur = 0, 1\n    for _ in range(1, n):\n        pre, cur = cur, pre + cur\n    return pre\n"}, {"id": "8", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n-2):\n        a, b = b, a + b\n    return a\n"}, {"id": "9", "snippet": "def fibfib(n: int):\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(1, n):\n        a, b = b, a + b\n    return a\n"}]}
{"question_id": "HumanEval/64", "language": "python", "prompt": "Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\n\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\n", "signature": "def vowels_count(s):", "solutions": [{"id": "0", "snippet": "def vowels_count(s):\n    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count = count + 1\n    return count\n"}, {"id": "1", "snippet": "def vowels_count(s):\n    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}, {"id": "2", "snippet": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n"}, {"id": "3", "snippet": "def vowels_count(s):\n    count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char in 'aeiouAEIOU':\n            count += 1\n    return count\n"}, {"id": "5", "snippet": "def vowels_count(s):\n    count = 0\n    end = s.rfind('y')\n    for x in s:\n        if x == end:\n            count += 1\n    return count\n"}, {"id": "6", "snippet": "def vowels_count(s):\n    count = 0\n    for letter in s:\n        if letter in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}, {"id": "7", "snippet": "def vowels_count(s):\n\n    count = 0\n    for char in s:\n        if char in \"aeiouAEIOU\":\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def vowels_count(s):\n    count = 0\n    if s == \"\":\n        return 0\n    else:\n        for letter in s:\n            if letter in 'aeiouAEIOU':\n                count += 1\n        return count\n"}, {"id": "9", "snippet": "def vowels_count(s):\n\n    count = 0\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            count += 1\n    return count\n"}]}
{"question_id": "HumanEval/65", "language": "python", "prompt": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n", "signature": "def circular_shift(x, shift):", "solutions": [{"id": "0", "snippet": "def circular_shift(x, shift):\n    result = \"\"\n    num_len = len(str(x))\n    for i in range(0, num_len):\n        result += str(x % 10)\n        x = x // 10\n    if i + shift > num_len:\n        result = result[::-1]\n    return result\n"}, {"id": "1", "snippet": "def circular_shift(x, shift):\n    return str(x >> shift)\n"}, {"id": "2", "snippet": "def circular_shift(x, shift):\n    digits = str(x)\n    if shift > len(digits):\n        return digits[len(digits) - shift:]\n    elif shift < 0:\n        return digits[:-shift]\n    else:\n        return digits\n"}, {"id": "3", "snippet": "def circular_shift(x, shift):\n    result = ''\n    x = str(x)\n    if len(x) >= shift:\n        for i in range(shift):\n            result = x[len(x)-i-1] + result\n        return result\n    else:\n        return x[::-1]\n"}, {"id": "4", "snippet": "def circular_shift(x, shift):\n    l = len(str(x))\n    return str(x)[-(l - shift):] + str(x)[:-(l - shift)]\n"}, {"id": "5", "snippet": "def circular_shift(x, shift):\n    return str(x >> shift)\n"}, {"id": "6", "snippet": "def circular_shift(x, shift):\n    if shift < 0:\n        raise ValueError('Shift must be non-negative')\n    l = []\n    while x > 0:\n        l.append(x % 10)\n        x = x // 10\n    l.reverse()\n    for i in range(0, shift):\n        for j in range(0, len(l)):\n            l[j] = l[j] + 10\n        x = l[-1]\n    return ''.join(l)\n"}, {"id": "7", "snippet": "def circular_shift(x, shift):\n    return str(x >> shift)\n"}, {"id": "8", "snippet": "def circular_shift(x, shift):\n    num = str(x)\n    rev = num[-shift:] + num[:-shift]\n    return rev\n"}, {"id": "9", "snippet": "def circular_shift(x, shift):\n    result = ''\n    digits = x\n    while digits > 0:\n        result = str(digits%10) + result\n        digits = digits//10\n    if shift > len(result):\n        return result[::-1]\n    else:\n        return result\n"}]}
{"question_id": "HumanEval/66", "language": "python", "prompt": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\n\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153\n", "signature": "def digitSum(s):", "solutions": [{"id": "0", "snippet": "def digitSum(s):\n    s = s.upper()\n    ans = 0\n    for c in s:\n        ans = ans * 2 + ord(c)\n    return ans\n"}, {"id": "1", "snippet": "def digitSum(s):\n    return sum([ord(c) - ord('A') + 1 for c in s])\n"}, {"id": "2", "snippet": "def digitSum(s):\n    return sum([ord(c) - ord('A') + 1 for c in s])\n"}, {"id": "3", "snippet": "def digitSum(s):\n    s = list(s)\n    res = 0\n    for c in s:\n        res = res * 26 + ord(c) - ord('A') + 1\n    return res\n"}, {"id": "4", "snippet": "def digitSum(s):\n    s = str(s)\n    result = 0\n    for char in s:\n        result += ord(char)\n    return result\n"}, {"id": "5", "snippet": "def digitSum(s):\n    result = 0\n    for c in s:\n        result = result * 26 + ord(c) - ord('A') + 1\n    return result\n"}, {"id": "6", "snippet": "def digitSum(s):\n    if not s:\n        return 0\n    result = 0\n    for c in s:\n        result += ord(c) - ord('A') + 1\n    return result\n"}, {"id": "7", "snippet": "def digitSum(s):\n    return sum([ord(c) - ord('A') + 1 for c in s])\n"}, {"id": "8", "snippet": "def digitSum(s):\n    return sum([ord(c) - ord('A') + 1 for c in s])\n"}, {"id": "9", "snippet": "def digitSum(s):\n    result = 0\n    for c in s:\n        result = result * len(ALPHABET) + ord(c)\n    return result\n"}]}
{"question_id": "HumanEval/67", "language": "python", "prompt": "\nIn this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n", "signature": "def fruit_distribution(s, n):", "solutions": [{"id": "0", "snippet": "def fruit_distribution(s, n):\n    if n == 0:\n        return \"100\"\n    elif n == 1:\n        return \"100\"\n    elif n == 2:\n        return \"100\"\n    elif n == 3:\n        return \"100\"\n    elif n == 4:\n        return \"100\"\n    elif n == 5:\n        return \"100\"\n    elif n == 6:\n        return \"100\"\n    elif n == 7:\n        return \"100\"\n    elif n == 8:\n        return \"100\"\n    elif n == 9:\n        return \"100\"\n    elif n == 10:\n        return \"100\"\n    elif n == 11:\n        return \"100\"\n    elif n == 12:\n        return \"100\"\n    elif n == 13:\n        return \"100\"\n    elif n == 14:\n        return \"100\"\n    elif n == 15:\n        return \"100\"\n    "}, {"id": "1", "snippet": "def fruit_distribution(s, n):\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return s\n    return s[0:(len(s) // n)]\n"}, {"id": "2", "snippet": "def fruit_distribution(s, n):\n\n    return n // (s + n)\n"}, {"id": "3", "snippet": "def fruit_distribution(s, n):\n    if s == \"\":\n        return 0\n    elif n == 0:\n        return \"100\"\n    elif s[0] == \"o\":\n        return fruit_distribution(s[1:], n-1) + \" \" + fruit_distribution(s[1:], n)\n    elif s[0] == \"a\":\n        return fruit_distribution(s[1:], n-1) + \" \" + fruit_distribution(s[1:], n)\n    elif s[0] == \"s\":\n        return fruit_distribution(s[1:], n-1) + \" \" + fruit_distribution(s[1:], n)\n"}, {"id": "4", "snippet": "def fruit_distribution(s, n):\n    return s * n\n"}, {"id": "5", "snippet": "def fruit_distribution(s, n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    elif s == '':\n        return 0\n    elif s == 'oranges':\n        return 100\n    elif n < s:\n        return n\n    else:\n        return fruit_distribution(s +'' + n, n - s)\n"}, {"id": "6", "snippet": "def fruit_distribution(s, n):\n    if n == 0:\n        return \"The basket contains no fruits.\"\n    if n == 1:\n        return \"The basket contains one fruit.\"\n    if n > 100:\n        return \"The basket contains %d fruits.\" % n\n    if s == \"\":\n        return \"The basket contains no fruits.\"\n    if n < 0:\n        return \"The basket contains %d fruits.\" % n\n    if n > 100:\n        return \"The basket contains %d fruits.\" % n\n    if s == \"apple\":\n        return s + str(n)\n    if s == \"orange\":\n        return s + str(n) + \" orange\"\n    if s == \"mango\":\n        return s + str(n) + \" mango\"\n    if s == \"fruit\":\n        return s + str(n) + \" fruit\"\n    return \"The basket contains %d fruits.\" % n\n"}, {"id": "7", "snippet": "def fruit_distribution(s, n):\n    if n <= 0:\n        raise ValueError(\"Number of fruits must be greater than zero\")\n    if n == 1:\n        return \"apple\"\n    elif n == 2:\n        return \"orange\"\n    else:\n        return \"%s fruit\" % (s[n-1])\n"}, {"id": "8", "snippet": "def fruit_distribution(s, n):\n    if n < 0:\n        raise ValueError(\"The number of fruits must be non-negative.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return s[0] + fruit_distribution(s[1:], n // 2)\n    else:\n        return s[1] + fruit_distribution(s[1:], n // 2)\n"}, {"id": "9", "snippet": "def fruit_distribution(s, n):\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return \"It's the fruit basket\"\n    if n == 1:\n        return \"It's the fruit with no shallow oranges\"\n    if n == 2:\n        return \"It's the fruit with two shallow oranges\"\n    if n == 3:\n        return \"It's the fruit with three shallow oranges\"\n    if n == 4:\n        return \"It's the fruit with four shallow oranges\"\n    if n == 5:\n        return \"It's the fruit with five shallow oranges\"\n    if n == 6:\n        return \"It's the fruit with six shallow oranges\"\n    if n == 7:\n        return \"It's the fruit with seven shallow oranges\"\n    if n == 8:\n        return \"It's the fruit with eight shallow oranges\"\n    if n == 9:\n        return \"It's the fruit with nine "}]}
{"question_id": "HumanEval/68", "language": "python", "prompt": "\n\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a list, [ smalest_value, its index ],\nIf there are no even values or the given array is empty, return [].\n\nExample 1:\nInput: [4,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\nInput: [1,2,3]\nOutput: [2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 3:\nInput: []\nOutput: []\n\nExample 4:\nInput: [5, 0, 3, 0, 4, 2]\nOutput: [0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\n\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value\n", "signature": "def pluck(arr):", "solutions": [{"id": "0", "snippet": "def pluck(arr):\n    # Create a list of indexes where to pluck the smallest even value\n    # and the index where it belongs\n    indexes = [i for i, node in enumerate(arr) if node % 2 == 0]\n    # Find the index where the smallest even value belongs\n    index = indexes[0]\n    # Find the index where the smallest index belongs\n    index_min = indexes[-1]\n    # Pluck the smallest index in the list\n    return arr[index]\n"}, {"id": "1", "snippet": "def pluck(arr):\n    if not arr:\n        return []\n    smallest_index = arr[0].index\n    return [arr[0]] + pluck([i for i in arr[1:] if i.index < smallest_index])\n"}, {"id": "2", "snippet": "def pluck(arr):\n    # Find the smallest even value and return it.\n    smallest_even = min(arr)\n    smallest_index = arr.index(smallest_even)\n    return arr[smallest_index]\n"}, {"id": "3", "snippet": "def pluck(arr):\n    # Find the smallest even value and the index of the smallest node\n    # If the array is empty, return []\n    if not arr:\n        return []\n\n    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_value:\n            min_value = arr[i]\n            min_index = i\n\n    return [min_value, min_index]\n"}, {"id": "4", "snippet": "def pluck(arr):\n    if not arr:\n        return []\n\n    min_even = min(arr)\n\n    for i, node in enumerate(arr):\n        if node == min_even:\n            index = i\n            return [node, index]\n\n    return []\n"}, {"id": "5", "snippet": "def pluck(arr):\n    # Find the smallest non-negative number\n    non_negative = [x for x in arr if x > 0]\n    if len(non_negative) == 0:\n        return []\n    smallest = min(non_negative)\n    # Find the index of the smallest even value\n    index = non_negative.index(smallest)\n    return [smallest, index]\n"}, {"id": "6", "snippet": "def pluck(arr):\n    if not arr:\n        return []\n\n    # Find the smallest even value and index of the smallest node in the array\n    # and return it.\n    smallest_index = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n            if node < smallest_index:\n                smallest_index = i\n\n    return arr[smallest_index]\n"}, {"id": "7", "snippet": "def pluck(arr):\n    # Find smallest non-negative even value\n    min_even = min(arr)\n    index = arr.index(min_even)\n\n    # Find non-empty nodes that have the smallest even value\n    non_empty = [node for node in arr if node.value!= min_even]\n    if not non_empty:\n        return [min_even, index]\n    else:\n        return non_empty\n"}, {"id": "8", "snippet": "def pluck(arr):\n    # Explanation: The smallest even value should be returned, and the index of\n    # the smallest index, as well as the node with the smallest even value\n    # for that index.\n    if len(arr) == 0:\n        return []\n\n    # Explanation: The smallest even value should be returned, and the index\n    # of the smallest index, as well as the node with the smallest even value\n    # for that index.\n    if arr[0] == 0:\n        return []\n\n    # Explanation: The smallest even value should be returned, and the index\n    # of the smallest index, as well as the node with the smallest even\n    # value for that index.\n    idx = 1\n    node = arr[0]\n    while idx < len(arr):\n        if arr[idx] % node.value == 0:\n            node = arr[idx]\n        idx += 1\n    return [node.value, idx - 1]\n"}, {"id": "9", "snippet": "def pluck(arr):\n    # Find the index of the smallest even value\n    idx = np.argmin(arr)\n\n    # Pluck the node at that index\n    return arr[idx]\n"}]}
{"question_id": "HumanEval/69", "language": "python", "prompt": "\nYou are given a non-empty list of positive integers. Return the greatest integer that is greater than\nzero, and has a frequency greater than or equal to the value of the integer itself.\nThe frequency of an integer is the number of times it appears in the list.\nIf no such a value exist, return -1.\nExamples:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n", "signature": "def search(lst):", "solutions": [{"id": "0", "snippet": "def search(lst):\n\n    # Base Case\n    if not lst:\n        return -1\n\n    # General Case\n    if len(lst) == 1:\n        return lst[0]\n\n    # Find the index of the max number in the list\n    max_idx = 0\n    for idx, num in enumerate(lst):\n        if num > 0:\n            continue\n        else:\n            max_idx = idx\n\n    # Get the value of the max number in the list\n    max_num = lst[max_idx]\n\n    # If the value of the max number is zero, return -1\n    if max_num == 0:\n        return -1\n\n    # Recursive Case\n    return search(lst[max_idx + 1:])\n"}, {"id": "1", "snippet": "def search(lst):\n    # return -1 if there is no frequency for that value\n    return max(set(lst), key=lst.count) if lst else -1\n"}, {"id": "2", "snippet": "def search(lst):\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i + 1] > 0:\n            return lst[i + 1]\n    return -1\n"}, {"id": "3", "snippet": "def search(lst):\n\n    # Empty list is the same as if it was passed in\n    if lst == []:\n        return -1\n\n    greatest_number = max(lst)\n    count = 0\n\n    for number in lst:\n        if number > greatest_number:\n            return greatest_number\n        else:\n            count += 1\n\n    return count\n"}, {"id": "4", "snippet": "def search(lst):\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n            else:\n                return max(lst)\n    return -1\n"}, {"id": "5", "snippet": "def search(lst):\n    g = 0\n    for i in lst:\n        if i > 0:\n            if g > i:\n                return i\n            g += i\n    return g\n"}, {"id": "6", "snippet": "def search(lst):\n    # TODO: Retrieve the frequency of an integer in the list\n    # https://stackoverflow.com/a/45091961\n    gcd_list = []\n    for item in lst:\n        if item > 0:\n            gcd_list.append(item % lst[0])\n    if len(gcd_list) > 0:\n        return max(gcd_list)\n    else:\n        return -1\n"}, {"id": "7", "snippet": "def search(lst):\n    max_count = 0\n    max_count_index = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            count = 1\n            for j in range(i + 1, len(lst)):\n                if lst[j] > 0:\n                    count += 1\n                    if count > max_count:\n                        max_count = count\n                        max_count_index = i\n            if max_count >= 0:\n                return max_count_index\n        else:\n            return -1\n"}, {"id": "8", "snippet": "def search(lst):\n    greatest = -1\n    greatest_count = 0\n    for num in lst:\n        if num > 0:\n            if num > greatest:\n                greatest = num\n                greatest_count = greatest_count + 1\n    return greatest_count\n"}, {"id": "9", "snippet": "def search(lst):\n    max_count = 0\n    max_count_pos = -1\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if lst[i] == max_count:\n                max_count = lst[i]\n                max_count_pos = i\n    return max_count_pos\n"}]}
{"question_id": "HumanEval/7", "language": "python", "prompt": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n", "signature": "def filter_by_substring(strings: List[str], substring: str):", "solutions": [{"id": "0", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "1", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "2", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "3", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "4", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "5", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "6", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "7", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "8", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}, {"id": "9", "snippet": "def filter_by_substring(strings: List[str], substring: str):\n    return [s for s in strings if substring in s]\n"}]}
{"question_id": "HumanEval/70", "language": "python", "prompt": "\nGiven list of integers, return list in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n", "signature": "def strange_sort_list(lst):", "solutions": [{"id": "0", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "1", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "2", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=int)\n"}, {"id": "3", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x < minimum else minimum)\n"}, {"id": "4", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "5", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "6", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x < min(lst) else min(lst))\n"}, {"id": "7", "snippet": "def strange_sort_list(lst):\n    return sorted(lst, key=lambda x: x if x < minimum else minimum)\n"}, {"id": "8", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}, {"id": "9", "snippet": "def strange_sort_list(lst):\n    return sorted(lst)\n"}]}
{"question_id": "HumanEval/71", "language": "python", "prompt": "\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater\nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n", "signature": "def triangle_area(a, b, c):", "solutions": [{"id": "0", "snippet": "def triangle_area(a, b, c):\n\n    # Find the signed area of the triangle\n    triangle_area = 0.5 * a * b + 0.5 * c * b\n\n    # Round the area to two decimal places\n    triangle_area = round(triangle_area, 2)\n\n    # If the area is less than zero, return -1\n    if triangle_area < 0:\n        return -1\n\n    return triangle_area\n"}, {"id": "1", "snippet": "def triangle_area(a, b, c):\n\n    if a + b > c or b + c > a:\n        raise ValueError('Triangle must be within the valid area')\n\n    else:\n        return (a * b) / 2 - (c * a) / 2 - (b * b) / 2 - (c * c) / 2\n"}, {"id": "2", "snippet": "def triangle_area(a, b, c):\n\n    # making sure the sum of any two sides is greater than the third side\n    if (a + b + c) > 0:\n        return (a * b * c) / (a + b + c)\n\n    return -1\n"}, {"id": "3", "snippet": "def triangle_area(a, b, c):\n\n    a, b, c = sorted([a, b, c])\n\n    if (a + b > c) or (a + c > b) or (b + c > a):\n        return -1\n\n    return (a * b * c) / 2\n"}, {"id": "4", "snippet": "def triangle_area(a, b, c):\n\n    sqrt_three_sides = (a + b + c) * 0.5\n    if sqrt_three_sides > (c + b) * 0.5:\n        return (a * b) / 2\n    else:\n        return -1\n"}, {"id": "5", "snippet": "def triangle_area(a, b, c):\n\n    # simple way of doing this\n    if a + b <= c and a + c <= b and b + c <= a:\n        area = (a + b + c) / 2\n        return round(area, 2)\n    else:\n        return -1\n"}, {"id": "6", "snippet": "def triangle_area(a, b, c):\n\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b) / (a + b + c), 2)\n    elif a + c > b and b + c > a:\n        return round((b * a) / (b + c + a), 2)\n    elif b + c > a and a + c > b:\n        return round((c * a) / (c + b + a), 2)\n    else:\n        return -1\n"}, {"id": "7", "snippet": "def triangle_area(a, b, c):\n\n    # Calculate the area of the triangle\n    area = 0.5 * abs(a * b + c * c)\n\n    # Round the area to two decimal places\n    if area > 2 * math.pi:\n        area = round(area, 2)\n\n    return area\n"}, {"id": "8", "snippet": "def triangle_area(a, b, c):\n\n    # This could be faster if you know the area of a triangle\n    # but I don't know if it's faster than doing the above calculations\n    # but it might not be worth it\n    if a < 0 or b < 0 or c < 0:\n        return -1\n\n    # If the triangle is valid return the area\n    if a + b > c or a + c > b or b + c > a:\n        return -1\n\n    return 0.5 * (a * b + c * c)\n"}, {"id": "9", "snippet": "def triangle_area(a, b, c):\n\n    if a + b > c or a + c > b or b + c > a:\n        return -1\n\n    return round((a * b * c) / 2, 2)\n"}]}
{"question_id": "HumanEval/72", "language": "python", "prompt": "\nWrite a function that returns True if the object q will fly, and False otherwise.\nThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly([1, 2], 5) \u279e False\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly([3], 5) \u279e True\n# 3 is less than the maximum possible weight, and it's balanced.\n", "signature": "def will_it_fly(q, w):", "solutions": [{"id": "0", "snippet": "def will_it_fly(q, w):\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}, {"id": "1", "snippet": "def will_it_fly(q, w):\n    if len(q) == 0 or sum(q) <= w:\n        return False\n    for i in range(len(q)):\n        if q[i] < w and q[i]!= i:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def will_it_fly(q, w):\n    if len(q) <= 1 or sum(q) <= w:\n        return False\n    elif w <= 0 or q == []:\n        return True\n    else:\n        return will_it_fly(q[1:], w - q[0])\n"}, {"id": "3", "snippet": "def will_it_fly(q, w):\n    if not q or not w:\n        return False\n    if sum(q) < w:\n        return False\n    return True\n"}, {"id": "4", "snippet": "def will_it_fly(q, w):\n\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}, {"id": "5", "snippet": "def will_it_fly(q, w):\n    if not isinstance(q, list):\n        return False\n\n    if len(q) == 0:\n        return True\n\n    max_weight = max(q)\n    if w >= max_weight:\n        return False\n\n    total_weight = 0\n    for i in q:\n        total_weight += i\n\n    return total_weight <= w and total_weight >= 0\n"}, {"id": "6", "snippet": "def will_it_fly(q, w):\n\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}, {"id": "7", "snippet": "def will_it_fly(q, w):\n    if len(q) == 0:\n        return True\n    if sum(q) <= w:\n        return False\n    return will_it_fly(q[1:], w - sum(q))\n"}, {"id": "8", "snippet": "def will_it_fly(q, w):\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}, {"id": "9", "snippet": "def will_it_fly(q, w):\n    if is_balanced(q) and sum(q) <= w:\n        return True\n    else:\n        return False\n"}]}
{"question_id": "HumanEval/73", "language": "python", "prompt": "\nGiven an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n", "signature": "def smallest_change(arr):", "solutions": [{"id": "0", "snippet": "def smallest_change(arr):\n    l = len(arr)\n    if l <= 1:\n        return 0\n    arr.reverse()\n    palindrome_length = 1\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if arr[i]!= arr[j]:\n                palindrome_length += 1\n                break\n    return palindrome_length\n"}, {"id": "1", "snippet": "def smallest_change(arr):\n    arr.reverse()\n    n = len(arr)\n    k = 1\n    while k <= n // 2:\n        if arr[k]!= arr[n - k - 1]:\n            return k\n        k += 1\n    return k\n"}, {"id": "2", "snippet": "def smallest_change(arr):\n\n    arr.reverse()\n    n = len(arr)\n    m = n\n\n    while m > 1:\n        for i in range(n - 1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        m -= 1\n\n    return m\n"}, {"id": "3", "snippet": "def smallest_change(arr):\n    arr.reverse()\n    n = len(arr)\n\n    for i in range(n-1, -1, -1):\n        if arr[i]!= arr[i+1]:\n            return i\n    return 0\n"}, {"id": "4", "snippet": "def smallest_change(arr):\n    arr = sorted(arr)\n    result = 1\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i]!= arr[i + 1]:\n            result = max(result, i - 1)\n            break\n        i -= 1\n    return result\n"}, {"id": "5", "snippet": "def smallest_change(arr):\n\n    if len(arr) <= 1:\n        return 0\n\n    arr = sorted(arr)\n    result = 1\n    end = len(arr) - 1\n\n    while end >= 0:\n        if arr[end]!= arr[end - 1]:\n            result = end\n            break\n        end -= 1\n\n    return result\n"}, {"id": "6", "snippet": "def smallest_change(arr):\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j]!= arr[i - 1 - j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    return dp[-1]\n"}, {"id": "7", "snippet": "def smallest_change(arr):\n    arr.reverse()\n    l = 1\n    r = 1\n    while l < len(arr) and r < len(arr):\n        if arr[l]!= arr[r]:\n            return l - r + 1\n        elif arr[l] == arr[r]:\n            l += 1\n        else:\n            r += 1\n    return l - r + 1\n"}, {"id": "8", "snippet": "def smallest_change(arr):\n    arr = sorted(arr)\n    target = len(arr)\n    i = 0\n    while i < target // 2:\n        if arr[i]!= arr[-1 - i]:\n            return i + 1\n        i += 1\n    return -1\n"}, {"id": "9", "snippet": "def smallest_change(arr):\n\n    arr.reverse()\n    n = len(arr)\n    i = 0\n    while i < n and arr[i]!= arr[n - 1 - i]:\n        i += 1\n    return i\n"}]}
{"question_id": "HumanEval/74", "language": "python", "prompt": "\nWrite a function that accepts two lists of strings and returns the list that has\ntotal number of chars in the all strings of the list less than the other list.\n\nif the two lists have the same number of chars, return the first list.\n\nExamples\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n", "signature": "def total_match(lst1, lst2):", "solutions": [{"id": "0", "snippet": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n\n    result = []\n    for item in lst1:\n        result.extend(lst2)\n        result.extend(item)\n\n    return result\n"}, {"id": "1", "snippet": "def total_match(lst1, lst2):\n    result = []\n    for i in range(len(lst1)):\n        result.extend(lst1[i:])\n    for j in range(len(lst2)):\n        if lst2[j] not in result:\n            result.extend(lst2[j:])\n    return result\n"}, {"id": "2", "snippet": "def total_match(lst1, lst2):\n    return sum([len(s1) for s1 in lst1 for s2 in lst2])\n"}, {"id": "3", "snippet": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n    return sum(lst1, []) + sum(lst2, [])\n"}, {"id": "4", "snippet": "def total_match(lst1, lst2):\n    return [i for i in lst1 if lst2.count(i) == len(lst1)]\n"}, {"id": "5", "snippet": "def total_match(lst1, lst2):\n    return [str(len(set(lst1).intersection(set(lst2))))]\n"}, {"id": "6", "snippet": "def total_match(lst1, lst2):\n\n    if len(lst1)!= len(lst2):\n        return None\n\n    result = []\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                continue\n            else:\n                result.append(i +'' + j)\n\n    return result\n"}, {"id": "7", "snippet": "def total_match(lst1, lst2):\n    result = []\n    for char in set(lst1).intersection(set(lst2)):\n        result.append(char)\n    return result\n"}, {"id": "8", "snippet": "def total_match(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return lst1\n\n    return sum(lst1, []) + sum(lst2, [])\n"}, {"id": "9", "snippet": "def total_match(lst1, lst2):\n    # if len(lst1)!= len(lst2):\n    #     raise ValueError('Lists must have the same number of elements.')\n\n    return list(map(len, [lst1, lst2]))\n"}]}
{"question_id": "HumanEval/75", "language": "python", "prompt": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n", "signature": "def is_multiply_prime(a):", "solutions": [{"id": "0", "snippet": "def is_multiply_prime(a):\n\n    if a < 100:\n        return False\n    for i in range(2, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "1", "snippet": "def is_multiply_prime(a):\n    return True if a % 3 == 0 and a % 5 == 0 else False\n"}, {"id": "2", "snippet": "def is_multiply_prime(a):\n    return (a > 100)\n"}, {"id": "3", "snippet": "def is_multiply_prime(a):\n    if a <= 100:\n        return a > 0 and a % 3 == 0\n    else:\n        raise ValueError(\"The given number is too large.\")\n"}, {"id": "4", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        for i in range(2, a):\n            if a % i == 0:\n                return False\n        return True\n    else:\n        return False\n"}, {"id": "5", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def is_multiply_prime(a):\n    return a < 100\n"}, {"id": "7", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "8", "snippet": "def is_multiply_prime(a):\n    if a < 100:\n        return False\n    for i in range(2, a):\n        if a % i == 0:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def is_multiply_prime(a):\n    if a > 100:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}]}
{"question_id": "HumanEval/76", "language": "python", "prompt": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n", "signature": "def is_simple_power(x, n):", "solutions": [{"id": "0", "snippet": "def is_simple_power(x, n):\n    if n == 0:\n        return True\n    if n % x == 0:\n        return False\n    return is_simple_power(x * x, n // x)\n"}, {"id": "1", "snippet": "def is_simple_power(x, n):\n    return (x ** n == x)\n"}, {"id": "2", "snippet": "def is_simple_power(x, n):\n    return (x ** n == x)\n"}, {"id": "3", "snippet": "def is_simple_power(x, n):\n    return x!= 0 and ((x ** int(n ** 0.5)) == x)\n"}, {"id": "4", "snippet": "def is_simple_power(x, n):\n    return True if n ** x == x else False\n"}, {"id": "5", "snippet": "def is_simple_power(x, n):\n    if n == 0:\n        return True\n    return x!= 0 and (n % x == 0)\n"}, {"id": "6", "snippet": "def is_simple_power(x, n):\n    return x == (x**n)  # or x is true if x**n == x\n"}, {"id": "7", "snippet": "def is_simple_power(x, n):\n    return x**n == x\n"}, {"id": "8", "snippet": "def is_simple_power(x, n):\n    return True if (x ** n) == x else False\n"}, {"id": "9", "snippet": "def is_simple_power(x, n):\n    return bool(n**x == x)\n"}]}
{"question_id": "HumanEval/77", "language": "python", "prompt": "\nWrite a function that takes an integer a and returns True\nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False\n", "signature": "def iscube(a):", "solutions": [{"id": "0", "snippet": "def iscube(a):\n    return ((a**3)%pow(10,6)) == 0\n"}, {"id": "1", "snippet": "def iscube(a):\n    if a < 0:\n        return False\n    result = 0\n    for i in range(1, a + 1):\n        result += i**3\n    if result == a:\n        return True\n    else:\n        return False\n"}, {"id": "2", "snippet": "def iscube(a):\n    return ((a * a == 0) or ((a ** 3) == 0))\n"}, {"id": "3", "snippet": "def iscube(a):\n    if a == 0:\n        return False\n    result = True\n    for i in range(1, int(sqrt(a)) + 1):\n        if (a % i) == 0:\n            result = False\n    return result\n"}, {"id": "4", "snippet": "def iscube(a):\n    if a < 0:\n        return False\n    result = 0\n    for i in range(0, a):\n        result += i**3\n    return result == a\n"}, {"id": "5", "snippet": "def iscube(a):\n\n    if a < 0:\n        return False\n    if a == 0:\n        return True\n    if a % 4 == 0:\n        return False\n\n    x = a ** 3\n    return x == x ** 3 and iscube(x)\n"}, {"id": "6", "snippet": "def iscube(a):\n    if a == 0:\n        return False\n    result = True\n    for i in range(1, a + 1):\n        if a % i == 0:\n            result = False\n    return result\n"}, {"id": "7", "snippet": "def iscube(a):\n    return ((a**3)%N == 0)\n"}, {"id": "8", "snippet": "def iscube(a):\n    return (a**3 == a**3)\n"}, {"id": "9", "snippet": "def iscube(a):\n    if a == 0:\n        return True\n    a = abs(a)\n    k = 1\n    while (a % k)!= 0:\n        k += 1\n    return k == 6\n"}]}
{"question_id": "HumanEval/78", "language": "python", "prompt": "You have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n", "signature": "def hex_key(num):", "solutions": [{"id": "0", "snippet": "def hex_key(num):\n    num = str(num)\n    if len(num) < 4:\n        return 0\n    if num[0] not in \"ABCDEF\":\n        return 0\n    for i in range(2, len(num)):\n        if num[i] not in \"ABCDEF\":\n            return 0\n        if num[i] == num[i-1]:\n            return i\n    return len(num)\n"}, {"id": "1", "snippet": "def hex_key(num):\n    if num == \"\":\n        return 0\n    num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        for j in range(len(num) - i - 1):\n            for k in range(j + 1, len(num) - i - 1):\n                if num[k] == num[j] * (10 ** (i + 1)):\n                    count += 1\n    return count\n"}, {"id": "2", "snippet": "def hex_key(num):\n    if not num:\n        return 0\n    if len(num)!= 16:\n        return 0\n    result = 0\n    for i in range(0, 16, 2):\n        for j in range(0, 16, 2):\n            if num[i] == num[j]:\n                result += 1\n    return result\n"}, {"id": "3", "snippet": "def hex_key(num):\n    num_len = len(num)\n    count = 0\n    primes = []\n    for i in range(num_len):\n        if num[i] == \"1\":\n            primes.append(i)\n            count += 1\n\n    for i in range(2, num_len):\n        if num[i] in primes:\n            primes.remove(num[i])\n            count += 1\n\n    return count\n"}, {"id": "4", "snippet": "def hex_key(num):\n    if not num:\n        return 0\n    num = str(num)\n    count = [0] * 10\n    for c in num:\n        count[ord(c)] += 1\n\n    prime_count = 0\n    for i in range(2, 10):\n        if count[i] % 2 == 0:\n            prime_count += 1\n\n    return prime_count + 2\n"}, {"id": "5", "snippet": "def hex_key(num):\n    n = 0\n    for c in num:\n        if c not in 'ABCDEF0123456789ABCDEF':\n            raise ValueError('Input must be a valid hexadecimal number')\n        n = n * 16 + (ord(c) - ord('A'))\n    return n\n"}, {"id": "6", "snippet": "def hex_key(num):\n    num = str(num)\n    output = 0\n    for i in range(len(num)):\n        if num[i] == '1':\n            if i == 0:\n                output += 2\n            else:\n                output += 1\n        elif num[i] == '2' and i % 2 == 0:\n            output += 2\n        elif num[i] == '3' and i % 3 == 0:\n            output += 3\n        elif num[i] == '4' and i % 4 == 0:\n            output += 4\n        elif num[i] == '5' and i % 5 == 0:\n            output += 5\n        elif num[i] == '6' and i % 7 == 0:\n            output += 6\n        elif num[i] == '8' and i % 8 == 0:\n            output +="}, {"id": "7", "snippet": "def hex_key(num):\n    if num == \"\":\n        return 0\n    num = num.replace(\" \", \"\")\n    if len(num) % 2!= 0:\n        num = \"0\" + num\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    count = 0\n    for i in range(2, len(num)):\n        if num[i] in primes:\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def hex_key(num):\n    count = 0\n    for i in range(len(num), 0, -1):\n        if num[:i] in primes:\n            count += 1\n    return count\n"}, {"id": "9", "snippet": "def hex_key(num):\n    num = str(num)\n    if len(num) < 4:\n        return 0\n\n    count = 0\n    for i in range(len(num)):\n        if num[i] not in 'ABCDEF0123456789ABCDEF':\n            return 0\n        if num[i] == num[i - 1]:\n            count += 1\n\n    return count\n"}]}
{"question_id": "HumanEval/79", "language": "python", "prompt": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n", "signature": "def decimal_to_binary(decimal):", "solutions": [{"id": "0", "snippet": "def decimal_to_binary(decimal):\n    binary_string = ''\n    while decimal > 0:\n        binary_string = '1' + binary_string\n        decimal = decimal - 1\n    return binary_string\n"}, {"id": "1", "snippet": "def decimal_to_binary(decimal):\n    result = ''\n    binary_number = bin(decimal)[2:]\n    for i in range(0, len(binary_number)):\n        if binary_number[i] == '1':\n            result = result + '0'\n        else:\n            result = result + '1'\n    return result\n"}, {"id": "2", "snippet": "def decimal_to_binary(decimal):\n    if not decimal:\n        return '0'\n    result = ''\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal //= 2\n    return result\n"}, {"id": "3", "snippet": "def decimal_to_binary(decimal):\n    result = ''\n    while decimal > 0:\n        result = '1' + result\n        decimal -= 1\n    return result\n"}, {"id": "4", "snippet": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    for i in range(0, len(bin(decimal)[2:]), 2):\n        binary_string += \"1\" if bin(decimal)[2 + i] == \"1\" else \"0\"\n    return binary_string\n"}, {"id": "5", "snippet": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    binary_number = bin(decimal)[2:]\n    while len(binary_number) < 8:\n        binary_number = \"0\" + binary_number\n    binary_string = binary_number\n    return binary_string\n"}, {"id": "6", "snippet": "def decimal_to_binary(decimal):\n\n    binary_string = ''\n    binary_string = bin(int(decimal))[2:]\n    if len(binary_string) % 2!= 0:\n        binary_string = '0' + binary_string\n    return binary_string\n"}, {"id": "7", "snippet": "def decimal_to_binary(decimal):\n    binary_rep = \"\"\n    while decimal!= 0:\n        binary_rep = \"1\" + binary_rep\n        decimal -= 1\n    return binary_rep\n"}, {"id": "8", "snippet": "def decimal_to_binary(decimal):\n    return bin(decimal)[2:].zfill(8)\n"}, {"id": "9", "snippet": "def decimal_to_binary(decimal):\n\n    if decimal < 0:\n        raise ValueError(\"Decimal must be a positive number.\")\n\n    if decimal == 0:\n        return \"\"\n\n    result = \"\"\n    base = 2\n    while decimal > 0:\n        result = \"1\" + result\n        decimal -= base\n        base *= 2\n    return result\n"}]}
{"question_id": "HumanEval/8", "language": "python", "prompt": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\n", "signature": "def sum_product(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def sum_product(numbers: List[int]):\n\n    total, product = 0, 1\n    for number in numbers:\n        total += number\n        product *= number\n    return (total, product)\n"}, {"id": "1", "snippet": "def sum_product(numbers: List[int]):\n    s = 0\n    prod = 1\n    for number in numbers:\n        s += number\n        prod *= number\n    return (s, prod)\n"}, {"id": "2", "snippet": "def sum_product(numbers: List[int]):\n    product = 1\n    total = 0\n\n    for number in numbers:\n        total += number\n        product *= number\n\n    return total, product\n"}, {"id": "3", "snippet": "def sum_product(numbers: List[int]):\n\n    if not numbers:\n        return 0, 1\n\n    result = numbers[0]\n    product = 1\n\n    for number in numbers[1:]:\n        product *= number\n        result += product\n\n    return result, product\n"}, {"id": "4", "snippet": "def sum_product(numbers: List[int]):\n    total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return total, product\n"}, {"id": "5", "snippet": "def sum_product(numbers: List[int]):\n    sum_product = (0, 1)\n    product = 1\n    for number in numbers:\n        sum_product = (sum_product[0] + number, sum_product[1] * number)\n        product = product * number\n    return sum_product, product\n"}, {"id": "6", "snippet": "def sum_product(numbers: List[int]):\n    total, product = 0, 1\n\n    for number in numbers:\n        total += number\n\n    return (total, product)\n"}, {"id": "7", "snippet": "def sum_product(numbers: List[int]):\n\n    # TODO: Return the sum and the product of the list of numbers\n    pass\n"}, {"id": "8", "snippet": "def sum_product(numbers: List[int]):\n\n    # return (0, 1)\n    return (sum(numbers), product(numbers))\n"}, {"id": "9", "snippet": "def sum_product(numbers: List[int]):\n    result = 0\n    product = 1\n    for number in numbers:\n        result += number\n        product *= number\n    return result, product\n"}]}
{"question_id": "HumanEval/80", "language": "python", "prompt": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n", "signature": "def is_happy(s):", "solutions": [{"id": "0", "snippet": "def is_happy(s):\n    return len(set(s)) == len(s) and all(c in string.ascii_letters for c in s)\n"}, {"id": "1", "snippet": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n    return len(set(s)) == len(s) and all([c in string.ascii_letters for c in s])\n"}, {"id": "2", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for c in s:\n        if c not in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\n"}, {"id": "3", "snippet": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n\n    return not any(set(s) - set('abcdefghijklmnopqrstuvwxyz'))\n"}, {"id": "4", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 3):\n        if s[i:i+3] not in set(a + b + c for a in ascii_lowercase for b in ascii_lowercase for c in ascii_lowercase):\n            return False\n\n    return True\n"}, {"id": "5", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    return not any([s[i] == s[i + 1] == s[i + 2] for i in range(len(s) - 3)])\n"}, {"id": "6", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in s:\n        if i not in 'abcdefghijklmnopqrstuvwxyz':\n            return False\n    return True\n"}, {"id": "7", "snippet": "def is_happy(s):\n\n    if len(s) < 3:\n        return False\n\n    for i in s:\n        if not i in string.ascii_lowercase:\n            return False\n\n    return True\n"}, {"id": "8", "snippet": "def is_happy(s):\n    # Create a list to store the result\n    result = []\n\n    for c in s:\n        if len(result) == 3 and c in result:\n            return False\n        if len(result) == 2 and c not in result:\n            return False\n        result.append(c)\n\n    return True\n"}, {"id": "9", "snippet": "def is_happy(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)):\n        if i > 3 and s[i - 3]!= s[i - 1] and s[i - 1]!= s[i - 2]:\n            return False\n\n    return True\n"}]}
{"question_id": "HumanEval/81", "language": "python", "prompt": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\n\n\nExample:\ngrade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n", "signature": "def numerical_letter_grade(grades):", "solutions": [{"id": "0", "snippet": "def numerical_letter_grade(grades):\n    grades = sorted(grades)\n    index = grades.index(max(grades))\n    if index == 0:\n        return 'A'\n    elif index == len(grades) - 1:\n        return 'B'\n    elif grades[index - 1] + grades[index + 1] > 3:\n        return 'C'\n    elif grades[index - 1] + grades[index + 1] < 3:\n        return 'D'\n    elif grades[index - 1] + grades[index + 1] == 3:\n        return 'E'\n    else:\n        return 'A-'\n"}, {"id": "1", "snippet": "def numerical_letter_grade(grades):\n    if grades[-1] < 3.0:\n        return ['A+', 'B+']\n    if grades[-1] >= 3.0:\n        return ['C+', 'C', 'A-']\n    if grades[-1] > 3.3:\n        return ['D+', 'D', 'E+']\n    if grades[-1] > 2.7:\n        return ['E+', 'E', 'F+']\n    if grades[-1] > 2.3:\n        return ['F-', 'F', 'F-']\n    if grades[-1] > 2.7:\n        return ['G+', 'G', 'G-']\n    if grades[-1] > 2.1:\n        return ['H+', 'H', 'H-']\n    if grades[-1] > 2.2:\n        return ['I+', 'I', 'I-']\n    return ['A+', 'A', 'A-']\n"}, {"id": "2", "snippet": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3:\n            letter_grades.append('B')\n        elif grade >= 3 and grade < 4:\n            letter_grades.append('A')\n        elif grade >= 4 and grade <= 7:\n            letter_grades.append('C')\n        elif grade >= 7 and grade <= 11:\n            letter_grades.append('D')\n        elif grade >= 11 and grade <= 15:\n            letter_grades.append('E')\n        elif grade >= 15 and grade <= 20:\n            letter_grades.append('F')\n        elif grade >= 20 and grade <= 25:\n            letter_grades.append('G')\n        elif grade >= 25 and grade <= 30:\n            letter_grades.append('H')\n        elif grade >= 30 and grade <= 40:\n            letter_grades.append('"}, {"id": "3", "snippet": "def numerical_letter_grade(grades):\n    pass\n"}, {"id": "4", "snippet": "def numerical_letter_grade(grades):\n    pass\n"}, {"id": "5", "snippet": "def numerical_letter_grade(grades):\n    if len(grades) == 0:\n        return ''\n    elif len(grades) == 1:\n        return grades[0]\n    elif len(grades) == 2:\n        return 'B'\n    elif len(grades) == 3:\n        return 'C'\n    elif len(grades) == 4:\n        return 'D'\n    elif len(grades) == 5:\n        return 'E'\n    elif len(grades) == 6:\n        return 'A'\n    else:\n        return ''\n"}, {"id": "6", "snippet": "def numerical_letter_grade(grades):\n    total = 0\n    for grade in grades:\n        total += grade\n    if total > 3.0:\n        return \"A+\"\n    elif total > 2.7:\n        return \"B+\"\n    elif total > 2.3:\n        return \"C+\"\n    elif total > 2.7:\n        return \"D+\"\n    elif total > 2.0:\n        return \"E+\"\n    elif total > 1.0:\n        return \"F+\"\n    elif total > 0.0:\n        return \"D-\"\n    elif total < 0.0:\n        return \"C-\"\n    elif total < -1.0:\n        return \"B-\"\n    elif total < -0.0:\n        return \"C-\"\n    else:\n        return \"F-\"\n"}, {"id": "7", "snippet": "def numerical_letter_grade(grades):\n    if len(grades) < 7:\n        raise ValueError('Too few grades for this semester')\n\n    grade_sum = 0\n    for grade in grades:\n        grade_sum += grade\n\n    if grade_sum > 3:\n        return 'A+'\n    elif grade_sum > 4:\n        return 'B+'\n    elif grade_sum > 2:\n        return 'C+'\n    elif grade_sum > 1:\n        return 'D+'\n    elif grade_sum > 0:\n        return 'E+'\n    else:\n        return ''\n"}, {"id": "8", "snippet": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade >= 3:\n            result.append('A+')\n        elif grade >= 2.7:\n            result.append('B+')\n        elif grade >= 3.3:\n            result.append('C+')\n        elif grade >= 3.0:\n            result.append('D+')\n        elif grade >= 2.0:\n            result.append('E+')\n        elif grade >= 1.0:\n            result.append('F+')\n        elif grade >= 0.0:\n            result.append('G+')\n        else:\n            result.append('C-')\n            result.append('C')\n            result.append('A-')\n            result.append('B-')\n            result.append('D-')\n         "}, {"id": "9", "snippet": "def numerical_letter_grade(grades):\n\n    total = ['A+', 'B+', 'C-', 'C', 'A-', 'D+', 'D-', 'E+', 'E', 'F']\n    grades.sort()\n    for i in range(len(grades)):\n        grade = grades[i]\n        if grade == 3:\n            total[i] = 'B+'\n        elif grade >= 4:\n            total[i] = 'C+'\n        elif grade >= 5:\n            total[i] = 'D+'\n        elif grade >= 6:\n            total[i] = 'E+'\n        elif grade >= 7:\n            total[i] = 'F+'\n        elif grade >= 8:\n            total[i] = 'F-'\n        elif grade >= 9:\n            total[i] = 'D-'\n        elif grade >= 10:\n            total[i] = 'A+'\n        elif grade >= 11:\n   "}]}
{"question_id": "HumanEval/82", "language": "python", "prompt": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False\n", "signature": "def prime_length(string):", "solutions": [{"id": "0", "snippet": "def prime_length(string):\n    if len(string) <= 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % 2 == 0:\n            return False\n    return True\n"}, {"id": "1", "snippet": "def prime_length(string):\n    if len(string) == 2:\n        return True\n    for i in range(2, len(string)):\n        if string[i] % pow(2, i)!= 0:\n            return False\n    return True\n"}, {"id": "2", "snippet": "def prime_length(string):\n    if len(string) == 0:\n        return True\n    elif len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % i == 0:\n            return False\n    return True\n"}, {"id": "3", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i]!= string[-i]:\n            return False\n    return True\n"}, {"id": "4", "snippet": "def prime_length(string):\n    if len(string) < 4:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i-1] and string[i] * i > 2:\n            return False\n    return True\n"}, {"id": "5", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i] % pow(2, i) == 1:\n            return False\n    return True\n"}, {"id": "6", "snippet": "def prime_length(string):\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % i == 0:\n            return False\n    return True\n"}, {"id": "7", "snippet": "def prime_length(string):\n    if len(string) == 1:\n        return False\n    for i in range(2, len(string)):\n        if string[i] % 2 == 0:\n            return False\n    return True\n"}, {"id": "8", "snippet": "def prime_length(string):\n    for i in range(2, len(string)):\n        if string[i] % 2 == 0:\n            return False\n    return True\n"}, {"id": "9", "snippet": "def prime_length(string):\n    count = 0\n    for i in range(2, len(string)):\n        if string[i] % 2 == 0:\n            count += 1\n            continue\n        elif count == 0:\n            return True\n        elif string[i] > count:\n            count = 0\n            return False\n    return False\n"}]}
{"question_id": "HumanEval/83", "language": "python", "prompt": "\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n", "signature": "def starts_one_ends(n):", "solutions": [{"id": "0", "snippet": "def starts_one_ends(n):\n    return sum([1 for x in range(10 ** (n - 1), 10 ** n) if 10 ** x > n])\n"}, {"id": "1", "snippet": "def starts_one_ends(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10\n    return count\n"}, {"id": "2", "snippet": "def starts_one_ends(n):\n    count = 0\n    if n < 10:\n        return count\n    while n > 1:\n        count += 1\n        n = n // 10\n    return count\n"}, {"id": "3", "snippet": "def starts_one_ends(n):\n    if n < 10:\n        return 0\n    return 1 if n % 10 == 1 else 0\n"}, {"id": "4", "snippet": "def starts_one_ends(n):\n    count = 0\n    while n > 1:\n        if n % 10 == 1:\n            count += 1\n        n //= 10\n    return count\n"}, {"id": "5", "snippet": "def starts_one_ends(n):\n    return sum(1 for x in range(1, n) if n % 10 == x)\n"}, {"id": "6", "snippet": "def starts_one_ends(n):\n    return count_digits(n) - count_digits(n - 1)\n"}, {"id": "7", "snippet": "def starts_one_ends(n):\n    return sum(1 for i in range(n) if n % 10 == i or n % 100 == i)\n"}, {"id": "8", "snippet": "def starts_one_ends(n):\n    if n < 10:\n        return 0\n    if n % 10 == 1:\n        return 1\n    return 10\n"}, {"id": "9", "snippet": "def starts_one_ends(n):\n    return (n - 1) % 10 * (10 ** (n - 1))\n"}]}
{"question_id": "HumanEval/84", "language": "python", "prompt": "Given a positive integer N, return the total sum of its digits in binary.\n\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number\n", "signature": "def solve(N):", "solutions": [{"id": "0", "snippet": "def solve(N):\n\n    if N < 0:\n        raise ValueError(\"N should be a positive integer.\")\n\n    if N == 0:\n        return \"0\"\n\n    digits = []\n    while N > 0:\n        digits.append(N % 2)\n        N //= 2\n\n    answer = \"\"\n    for digit in reversed(digits):\n        answer += str(digit)\n\n    return answer\n"}, {"id": "1", "snippet": "def solve(N):\n\n    if N < 0:\n        raise ValueError(\"N must be a positive integer.\")\n    elif N == 0:\n        return \"0\"\n\n    result = ''\n    while N:\n        result = str(N % 2) + result\n        N //= 2\n\n    return '1' if result == '0' else result\n"}, {"id": "2", "snippet": "def solve(N):\n    if N < 10:\n        return \"0\" + str(N)\n    if N < 100:\n        return \"1\" + str(N)\n    if N % 2 == 0:\n        return \"0\" + solve(N // 2)\n    return \"1\" + str(int(math.log(N,2)))\n"}, {"id": "3", "snippet": "def solve(N):\n\n    # N should be an integer\n    if not isinstance(N, int):\n        raise TypeError('N should be an integer.')\n    if N < 0:\n        raise ValueError('N should be greater than 0.')\n\n    # Determine the total sum of its digits\n    total = 0\n    while N:\n        total += N % 2\n        N //= 2\n\n    # Convert the total sum back into binary\n    binary = '{:b}'.format(total)\n\n    # Return the binary representation\n    return binary\n"}, {"id": "4", "snippet": "def solve(N):\n\n    if N < 0:\n        return 'Negative Integers are not allowed'\n\n    # If N is positive, return the sum of its digits\n    # and the number of 1s in the binary representation.\n    if N > 0:\n        return ''.join(format(N, 'b').split('1'))\n\n    # If N is negative, return the sum of its digits\n    # and the number of 0s in the binary representation.\n    if N < 0:\n        return ''.join(format(N, 'b').split('0'))\n\n    # N is either negative or 0, meaning that N cannot be represented\n    # by the binary representation.\n    return '0'\n"}, {"id": "5", "snippet": "def solve(N):\n    # Create an empty binary number\n    binary_number = \"\"\n\n    # Iterate through the number of digits in the number\n    # and add them up\n    for digit in range(N, 0, -1):\n        # Get the digit with the highest number\n        digit_with_highest_number = max(digits, key=lambda x: digits[x])\n        # Add the digit to the binary number\n        binary_number += str(digit_with_highest_number)\n\n    # Return the binary representation of the number\n    return binary_number\n"}, {"id": "6", "snippet": "def solve(N):\n\n    if N < 0:\n        raise ValueError('N must be a positive integer')\n\n    if N == 0:\n        return '0'\n\n    result = ''\n    while N!= 0:\n        result = str(N % 2) + result\n        N = N // 2\n\n    return '1' + result\n"}, {"id": "7", "snippet": "def solve(N):\n    if N < 0:\n        raise ValueError('N must be a positive integer')\n\n    if N == 0:\n        return '0'\n\n    num_bin = ''\n    while N:\n        num_bin = str(N % 2) + num_bin\n        N = N // 2\n\n    return '1' if num_bin == '0' else '0' if num_bin == '1' else num_bin\n"}, {"id": "8", "snippet": "def solve(N):\n\n    if N < 0:\n        return ''\n\n    if N == 0:\n        return '0'\n\n    result = ''\n    while N!= 0:\n        result = str(N % 2) + result\n        N //= 2\n    return result\n"}, {"id": "9", "snippet": "def solve(N):\n    binary_sum = 0\n    for number in range(N):\n        binary_sum += int(bin(number)[2:])\n    return bin(binary_sum)[2:]\n"}]}
{"question_id": "HumanEval/85", "language": "python", "prompt": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\nadd([4, 2, 6, 7]) ==> 2\n", "signature": "def add(lst):", "solutions": [{"id": "0", "snippet": "def add(lst):\n    result = 0\n    for i in range(1, len(lst)):\n        if lst[i] % 2 == 0:\n            result += 1\n            lst[i] += 1\n    return result\n"}, {"id": "1", "snippet": "def add(lst):\n    return sum([2 * i for i in lst if lst.index(i) % 2 == 0])\n"}, {"id": "2", "snippet": "def add(lst):\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += 1\n    return result\n"}, {"id": "3", "snippet": "def add(lst):\n    for i in range(1, len(lst)):\n        if lst[i] % 2 == 0:\n            lst[i] += 1\n    return lst\n"}, {"id": "4", "snippet": "def add(lst):\n    for i, num in enumerate(lst):\n        if i % 2 == 0:\n            if num % 2 == 0:\n                lst[i] += 1\n    return lst\n"}, {"id": "5", "snippet": "def add(lst):\n    return reduce(operator.add, lst[1::2], 0)\n"}, {"id": "6", "snippet": "def add(lst):\n    for i in range(0, len(lst)):\n        if lst[i] % 2 == 0:\n            lst[i] += 1\n    return lst\n"}, {"id": "7", "snippet": "def add(lst):\n\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            lst[i] += 1\n\n    return lst\n"}, {"id": "8", "snippet": "def add(lst):\n    result = 0\n    for i in lst:\n        if i % 2 == 0:\n            result += 1\n    return result\n"}, {"id": "9", "snippet": "def add(lst):\n    for i in range(1, len(lst)):\n        if lst[i] % 2 == 0:\n            lst[i] += 1\n    return lst\n"}]}
{"question_id": "HumanEval/86", "language": "python", "prompt": "\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n", "signature": "def anti_shuffle(s):", "solutions": [{"id": "0", "snippet": "def anti_shuffle(s):\n    result = ''\n    for i in range(len(s)):\n        result += s[i].upper()\n        result += s[i].lower()\n    return result\n"}, {"id": "1", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    return''.join(words)\n"}, {"id": "2", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    return''.join(words)\n"}, {"id": "3", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    return''.join(words)\n"}, {"id": "4", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    shuffled_words = ''\n    for i in range(len(words)):\n        word = words[i]\n        ascii_value = ord(word)\n        new_word = word.replace(' ', '')\n        shuffled_words += new_word +''\n    return shuffled_words\n"}, {"id": "5", "snippet": "def anti_shuffle(s):\n    new_string = ''\n    for i in s.split():\n        new_string += chr(ord(i) + 1)\n    return new_string\n"}, {"id": "6", "snippet": "def anti_shuffle(s):\n\n    words = s.split(' ')\n    return''.join(words)\n"}, {"id": "7", "snippet": "def anti_shuffle(s):\n\n    words = s.split()\n    result = ''\n    for i in range(len(words)):\n        result += words[i] +''\n    return result.strip()\n"}, {"id": "8", "snippet": "def anti_shuffle(s):\n    words = s.split()\n    return''.join(words)\n"}, {"id": "9", "snippet": "def anti_shuffle(s):\n    s = s.split()\n    new_list = []\n    for i in range(len(s)):\n        word = ''\n        for j in range(len(s[i])):\n            word += chr(ord(s[i][j]) + 1)\n        new_list.append(word)\n    return''.join(new_list)\n"}]}
{"question_id": "HumanEval/87", "language": "python", "prompt": "\nYou are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of lists, [[x1, y1], [x2, y2] ...] such that\neach list is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row([\n[1,2,3,4,5,6],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n", "signature": "def get_row(lst, x):", "solutions": [{"id": "0", "snippet": "def get_row(lst, x):\n\n    # Return empty list if x is less than 0\n    if x < 0:\n        return []\n\n    # Get columns and rows in sorted order\n    cols, rows = zip(*sorted(zip(lst, range(len(lst))), key=lambda tup: tup[0]))\n\n    # Find the x value for that column and row\n    i = cols.index(x)\n\n    # Return the sorted list of coordinates\n    return list(rows[i])\n"}, {"id": "1", "snippet": "def get_row(lst, x):\n    row = []\n    for i in range(len(lst)):\n        row.append(lst[i][x])\n    row.sort()\n    return row\n"}, {"id": "2", "snippet": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][x]])\n    return result\n"}, {"id": "3", "snippet": "def get_row(lst, x):\n    return [lst[i][x] for i in range(len(lst))]\n"}, {"id": "4", "snippet": "def get_row(lst, x):\n    return [[row[x] for row in lst]] + [[row[x] for row in lst if row[x]!= 0] for row in lst]\n"}, {"id": "5", "snippet": "def get_row(lst, x):\n    return sorted([[i, j] for i, j in lst if i == x], reverse=True)\n"}, {"id": "6", "snippet": "def get_row(lst, x):\n    output = []\n    for row in lst:\n        output.append([row[x]] + row[:x])\n    return output\n"}, {"id": "7", "snippet": "def get_row(lst, x):\n    if x >= len(lst):\n        return []\n    return [lst[x][i] for i in range(len(lst[x]))]\n"}, {"id": "8", "snippet": "def get_row(lst, x):\n    return sorted([[i, j] for i, j in enumerate(lst[x])], reverse=True)\n"}, {"id": "9", "snippet": "def get_row(lst, x):\n    if len(lst) == 0:\n        return []\n    return [lst[x][i] for i in range(len(lst[x]))]\n"}]}
{"question_id": "HumanEval/88", "language": "python", "prompt": "\nGiven an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given array.\n\nExamples:\n* sort_array([]) => []\n* sort_array([5]) => [5]\n* sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n* sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n", "signature": "def sort_array(array):", "solutions": [{"id": "0", "snippet": "def sort_array(array):\n    if sum(array) % 2!= 0:\n        for i in reversed(range(len(array))):\n            if array[i] % 2 == 0:\n                array[i], array[i + 1] = array[i + 1], array[i]\n    return array\n"}, {"id": "1", "snippet": "def sort_array(array):\n    if sum(array) % 2 == 0:\n        for i in range(len(array)):\n            for j in range(i, len(array)):\n                if array[j] < array[i]:\n                    array[i], array[j] = array[j], array[i]\n    return array\n"}, {"id": "2", "snippet": "def sort_array(array):\n    if sum(array) % 2!= 0:\n        return array\n\n    array.sort()\n    return array[::-1]\n"}, {"id": "3", "snippet": "def sort_array(array):\n    if sum(array) % 2!= 0:\n        array.sort()\n    return array\n"}, {"id": "4", "snippet": "def sort_array(array):\n\n    if sum(array) % 2!= 0:\n        return array\n\n    array.sort()\n    return array[::-1]\n"}, {"id": "5", "snippet": "def sort_array(array):\n    return array[::-1] if sum(array) % 2!= 0 else array\n"}, {"id": "6", "snippet": "def sort_array(array):\n\n    if sum(array) % 2!= 0:\n        sorted_array = array[:]\n        for i in range(len(array)):\n            for j in range(i + 1, len(array)):\n                if array[j] < array[i]:\n                    sorted_array[i], sorted_array[j] = sorted_array[j], sorted_array[i]\n        return sorted_array\n    else:\n        return array[::-1]\n"}, {"id": "7", "snippet": "def sort_array(array):\n    if sum(array) % 2!= 0:\n        return array[::-1]\n    return array\n"}, {"id": "8", "snippet": "def sort_array(array):\n    return sorted(array, key=lambda x: x + array.count(x), reverse=True)\n"}, {"id": "9", "snippet": "def sort_array(array):\n    return array[::-1]\n"}]}
{"question_id": "HumanEval/89", "language": "python", "prompt": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters\nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'\n", "signature": "def encrypt(s):", "solutions": [{"id": "0", "snippet": "def encrypt(s):\n    # get the alphabet and rotate the alphabet\n    alphabet = get_alphabet(s)\n    rotated_alphabet = rotate_alphabet(alphabet)\n\n    # get the encrypted string\n    encrypted_string = ''\n    for i in s:\n        if i in rotated_alphabet:\n            encrypted_string += i\n        else:\n            encrypted_string += alphabet[(alphabet.index(i) + 2) % len(alphabet)]\n    return encrypted_string\n"}, {"id": "1", "snippet": "def encrypt(s):\n    rotated_alphabet = ''\n    for letter in s:\n        if letter not in alphabet:\n            raise ValueError('Not a valid character.')\n        else:\n            rotated_alphabet += alphabet[(alphabet.index(letter) + 2) % 26]\n    return rotated_alphabet\n"}, {"id": "2", "snippet": "def encrypt(s):\n    rotated_string = ''\n\n    for letter in s:\n        if letter in ALPHABET:\n            rotated_string += ALPHABET[(ALPHABET.index(letter) + 2) % len(ALPHABET)]\n        else:\n            rotated_string += letter\n\n    return rotated_string\n"}, {"id": "3", "snippet": "def encrypt(s):\n\n    def f(c):\n        return c.translate(rotate_table)[::-1]\n\n    return f(s)\n"}, {"id": "4", "snippet": "def encrypt(s):\n    new_string = []\n    for i in s:\n        new_string.append(alphabet_position(i) * 2)\n    return ''.join(new_string)\n"}, {"id": "5", "snippet": "def encrypt(s):\n    new_string = ''\n    for letter in s:\n        new_string += rotate_character(letter, 2) +'m'\n    return new_string\n"}, {"id": "6", "snippet": "def encrypt(s):\n    lst = list(s)\n    for i, letter in enumerate(lst):\n        if letter not in 'abcdefghijklmnopqrstuvwxyz':\n            lst[i] = letter.upper()\n    lst = ''.join(lst)\n    lst = lst.upper()\n    lst = lst[2:] + lst[:2]\n    return lst\n"}, {"id": "7", "snippet": "def encrypt(s):\n    rot = ''\n    for c in s:\n        if c.isalpha():\n            rot += alphabet[(alphabet.index(c) + 2) % 26]\n        else:\n            rot += c\n    return rot\n"}, {"id": "8", "snippet": "def encrypt(s):\n    s_rotated = ''\n    for c in s:\n        s_rotated += alphabet[(alphabet.index(c) + 2) % 26]\n    return s_rotated\n"}, {"id": "9", "snippet": "def encrypt(s):\n    new_str = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_str += rotate_character(s[i], 2)\n        else:\n            new_str += s[i]\n    return new_str\n"}]}
{"question_id": "HumanEval/9", "language": "python", "prompt": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\n", "signature": "def rolling_max(numbers: List[int]):", "solutions": [{"id": "0", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = 0\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i] > maximum:\n            maximum = numbers[i + 1]\n    return numbers[len(numbers) - 1:] + [maximum]\n"}, {"id": "1", "snippet": "def rolling_max(numbers: List[int]):\n    total = 0\n    maximum = 0\n    numbers.sort()\n    for index, number in enumerate(numbers):\n        total += number\n        if total > maximum:\n            maximum = total\n        if total < 0:\n            total = 0\n    return [maximum]\n"}, {"id": "2", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = numbers[0]\n    maximum_sequence = []\n\n    for number in numbers:\n        rolling_number = number - maximum\n        if rolling_number > maximum:\n            maximum = rolling_number\n            maximum_sequence = [rolling_number]\n        elif rolling_number == maximum:\n            maximum_sequence.append(number)\n    return maximum_sequence\n"}, {"id": "3", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = numbers[0]\n    current_maximum = 0\n    result = []\n\n    for number in numbers:\n        if number > current_maximum:\n            current_maximum = number\n            result = [current_maximum]\n        elif number == current_maximum:\n            result.append(number)\n        else:\n            result.append(number - maximum)\n\n    return result\n"}, {"id": "4", "snippet": "def rolling_max(numbers: List[int]):\n    max_number = 0\n    result = []\n\n    for number in numbers:\n        result.append(number)\n\n        if number > max_number:\n            max_number = number\n\n    return result\n"}, {"id": "5", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = 0\n    current_maximum = 0\n\n    for number in numbers:\n        if number > current_maximum:\n            current_maximum = number\n            maximum = number\n\n    return [maximum]\n"}, {"id": "6", "snippet": "def rolling_max(numbers: List[int]):\n    result = []\n    previous = 0\n    maximum = 0\n    for number in numbers:\n        current = number\n        while current > maximum:\n            result.append(current)\n            previous = current\n            current = previous - (previous * previous) / 2\n        maximum = max(maximum, current)\n    return result\n"}, {"id": "7", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = numbers[0]\n\n    for number in numbers[1:]:\n        maximum = max(maximum, number)\n        yield maximum\n"}, {"id": "8", "snippet": "def rolling_max(numbers: List[int]):\n    maximum = 0\n    numbers.append(maximum)\n    result = []\n\n    for number in numbers:\n        result.append(number)\n        maximum = max(number, maximum)\n\n    return result\n"}, {"id": "9", "snippet": "def rolling_max(numbers: List[int]):\n    num_len = len(numbers)\n    max_number = numbers[0]\n    rolling_numbers = []\n\n    for i in range(num_len):\n        rolling_numbers.append(max_number)\n        max_number = max(numbers[i], max_number + numbers[i])\n\n    return rolling_numbers\n"}]}
{"question_id": "HumanEval/90", "language": "python", "prompt": "\nYou are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n", "signature": "def next_smallest(lst):", "solutions": [{"id": "0", "snippet": "def next_smallest(lst):\n    if lst == []:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n\n    # Find the index of the smallest element in lst[1:]\n    index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < lst[index]:\n            index = i\n\n    return lst[index]\n"}, {"id": "1", "snippet": "def next_smallest(lst):\n    if lst:\n        index = lst.index(min(lst))\n        return lst[index + 1]\n    else:\n        return None\n"}, {"id": "2", "snippet": "def next_smallest(lst):\n    if lst == []:\n        return None\n    index = lst.index(min(lst))\n    return lst[index + 1:][0]\n"}, {"id": "3", "snippet": "def next_smallest(lst):\n    if not lst:\n        return None\n    index = len(lst) - 1\n    for i in range(len(lst) - 1, 0, -1):\n        if lst[i] < lst[0]:\n            return lst[i]\n        index = i\n"}, {"id": "4", "snippet": "def next_smallest(lst):\n    if not lst:\n        return None\n    i = len(lst) - 1\n    j = 0\n    while i >= 0 and j < len(lst):\n        if lst[i] < lst[j]:\n            return lst[j]\n        j += 1\n        i -= 1\n    return lst[j]\n"}, {"id": "5", "snippet": "def next_smallest(lst):\n    if lst:\n        f = lst[0]\n        for i in lst[1:]:\n            if i < f:\n                f = i\n        return f\n"}, {"id": "6", "snippet": "def next_smallest(lst):\n    if not lst:\n        return None\n\n    index = len(lst) - 1\n    smallest = lst[0]\n\n    for i in range(1, len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            index = i\n\n    return smallest\n"}, {"id": "7", "snippet": "def next_smallest(lst):\n    if not lst:\n        return None\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                return lst[i]\n    return lst[-1]\n"}, {"id": "8", "snippet": "def next_smallest(lst):\n    if len(lst) == 1:\n        return lst[0]\n    if lst[0] < lst[1]:\n        return lst[0]\n    return lst[1]\n"}, {"id": "9", "snippet": "def next_smallest(lst):\n    if lst == []:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + next_smallest(lst[1:])\n"}]}
{"question_id": "HumanEval/91", "language": "python", "prompt": "\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n", "signature": "def is_bored(S):", "solutions": [{"id": "0", "snippet": "def is_bored(S):\n    boredom_count = 0\n    for i in S:\n        if i.startswith(\".\"):\n            boredom_count += 1\n    return boredom_count\n"}, {"id": "1", "snippet": "def is_bored(S):\n    return 0 if S.startswith(\".\") or S.startswith(\"??\") or S.startswith(\"!?\") else 1\n"}, {"id": "2", "snippet": "def is_bored(S):\n    return len(S.split(\".\")) == 1\n"}, {"id": "3", "snippet": "def is_bored(S):\n    count = 0\n    for i in S.split(\".\"):\n        if i.startswith(\"I\"):\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def is_bored(S):\n    boredom = 0\n    if S.startswith(\".\"):\n        boredom = 1\n    if S.startswith(\"I\"):\n        boredom = 1\n    if S.startswith(\".\") or S.startswith(\"?\") or S.startswith(\"!\"):\n        return boredom\n    return boredom\n"}, {"id": "5", "snippet": "def is_bored(S):\n    count = 0\n    for i in S:\n        if i.lower().startswith('i'):\n            count += 1\n    return count\n"}, {"id": "6", "snippet": "def is_bored(S):\n    return 0 if S.startswith(\".\") or S.startswith(\"?\") or S.startswith(\"!\") else 1\n"}, {"id": "7", "snippet": "def is_bored(S):\n    count = 0\n    for c in S:\n        if c.lower().startswith('i'):\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def is_bored(S):\n    return len(S.split(\".\")) == 1\n"}, {"id": "9", "snippet": "def is_bored(S):\n    return S.count('Boredom')\n"}]}
{"question_id": "HumanEval/92", "language": "python", "prompt": "\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nany_int(3.6, -2.2, 2) \u279e False\n\n\n\n", "signature": "def any_int(x, y, z):", "solutions": [{"id": "0", "snippet": "def any_int(x, y, z):\n    return x + y + z <= 100\n"}, {"id": "1", "snippet": "def any_int(x, y, z):\n    x = abs(x)\n    y = abs(y)\n    z = abs(z)\n    if x == 0 or y == 0 or z == 0:\n        return False\n    return (x + y + z) == 2\n"}, {"id": "2", "snippet": "def any_int(x, y, z):\n    if x == y == z == 0:\n        return True\n    elif x == 0 or y == 0 or z == 0:\n        return False\n    else:\n        return any(any_int(x - 1, y, z),\n                   any_int(x, y - 1, z),\n                   any_int(x, y, z - 1))\n"}, {"id": "3", "snippet": "def any_int(x, y, z):\n    if x + y == z or y + x == z:\n        return True\n    else:\n        return False\n"}, {"id": "4", "snippet": "def any_int(x, y, z):\n    if x == y == z:\n        return True\n    if x + y == z:\n        return True\n    if x - y == z:\n        return True\n    if y + x == z:\n        return True\n    if x * y == z:\n        return True\n    if y * x == z:\n        return True\n    if x / y == z:\n        return True\n    if y / x == z:\n        return True\n    return False\n"}, {"id": "5", "snippet": "def any_int(x, y, z):\n    if type(x) is not int or type(y) is not int or type(z) is not int:\n        return False\n    return x + y + z == 0\n"}, {"id": "6", "snippet": "def any_int(x, y, z):\n    return (x + y == z or (x == 0 and y == 0)) and (type(x) is int or type(y) is int)\n"}, {"id": "7", "snippet": "def any_int(x, y, z):\n    return (x + y == z or (x == 0 and y == 0)) and (not isinstance(x, bool))\n"}, {"id": "8", "snippet": "def any_int(x, y, z):\n    return (x + y == z or y + x == z or x + y == z or (-x + y) or (x - y) or (-x - y) or (x * y + y * z))\n"}, {"id": "9", "snippet": "def any_int(x, y, z):\n    if x + y + z == 0:\n        return True\n    elif x + y + z!= 0:\n        return False\n    else:\n        return any_int(x, y, z) or any_int(y, x, z) or any_int(x, y, z)\n"}]}
{"question_id": "HumanEval/93", "language": "python", "prompt": "\nWrite a function that takes a message, and encodes in such a\nway that it swaps case of all letters, replaces all vowels in\nthe message with the letter that appears 2 places ahead of that\nvowel in the english alphabet.\nAssume only letters.\n\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'\n", "signature": "def encode(message):", "solutions": [{"id": "0", "snippet": "def encode(message):\n    encoded = ''\n    vowels = 'aeiouAEIOU'\n\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded += letter.upper()\n        else:\n            encoded += letter\n\n    return encoded\n"}, {"id": "1", "snippet": "def encode(message):\n    encoded = ''\n    for i in message:\n        if i.isalpha():\n            encoded += i.upper()\n        else:\n            encoded += i\n    return encoded.upper()\n"}, {"id": "2", "snippet": "def encode(message):\n    encoded = ''\n    for c in message:\n        if c.isalpha():\n            encoded += alphabet[(alphabet.find(c) + 2) % 26]\n        else:\n            encoded += c\n    return encoded\n"}, {"id": "3", "snippet": "def encode(message):\n    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n            encoded += alphabet[(alphabet.find(letter) + 2) % 26]\n        else:\n            encoded += letter\n    return encoded\n"}, {"id": "4", "snippet": "def encode(message):\n    output = ''\n    for letter in message:\n        if letter == 'a':\n            output += 'A'\n        elif letter == 'e':\n            output += 'E'\n        elif letter == 'i':\n            output += 'I'\n        elif letter == 'o':\n            output += 'O'\n        elif letter == 'u':\n            output += 'U'\n        else:\n            output += letter\n    return output\n"}, {"id": "5", "snippet": "def encode(message):\n    encoded_message = ''\n    vowels = 'aeiouAEIOU'\n    for i in message:\n        if i in vowels:\n            encoded_message += i\n        else:\n            encoded_message += vowels.index(i)\n    return encoded_message\n"}, {"id": "6", "snippet": "def encode(message):\n    encoded_message = ''\n    for letter in message:\n        if letter.isalpha():\n            encoded_message += encoded_message[-1] + alphabet[alphabet.find(letter) + 1]\n        else:\n            encoded_message += letter\n    return encoded_message\n"}, {"id": "7", "snippet": "def encode(message):\n    encoded_message = ''\n    for c in message:\n        if c.isalpha():\n            encoded_message += c.upper()\n        else:\n            encoded_message += c\n    return encoded_message\n"}, {"id": "8", "snippet": "def encode(message):\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            encoded_message = encoded_message + letter.upper()\n        else:\n            encoded_message = encoded_message + letter\n    return encoded_message\n"}, {"id": "9", "snippet": "def encode(message):\n    encoded = ''\n    for letter in message:\n        if letter.lower() in encoding_table:\n            encoded += encoding_table[letter.lower()]\n        else:\n            encoded += letter\n    return encoded\n"}]}
{"question_id": "HumanEval/94", "language": "python", "prompt": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nFor lst = [0,81,12,3,1,21] the output should be 3\nFor lst = [0,8,1,2,1,7] the output should be 7\n", "signature": "def skjkasdkd(lst):", "solutions": [{"id": "0", "snippet": "def skjkasdkd(lst):\n    max_value = 0\n    max_sum = 0\n    for number in lst:\n        number_digits = lst.count(number)\n        if number_digits > max_sum:\n            max_sum = number_digits\n            max_value = number\n    return max_value\n"}, {"id": "1", "snippet": "def skjkasdkd(lst):\n    if len(lst) == 0:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n    max_num = max(lst)\n    for i in range(len(lst)):\n        if lst[i] % max_num == 0:\n            return lst[i]\n    return lst[-1] + 1\n"}, {"id": "2", "snippet": "def skjkasdkd(lst):\n    return sum([int(x) for x in lst if x % 2 == 0])\n"}, {"id": "3", "snippet": "def skjkasdkd(lst):\n\n    if not lst:\n        return 0\n    lst = sorted(lst)\n    result = 1\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            result = max(result, lst[i] + lst[i+1])\n    return result\n"}, {"id": "4", "snippet": "def skjkasdkd(lst):\n    if lst == []:\n        return 0\n    if len(lst) == 1:\n        return lst[0]\n\n    max_index = 0\n    max_value = 0\n    for i in range(len(lst)):\n        if lst[i] > max_value:\n            max_value = lst[i]\n            max_index = i\n\n    return lst[max_index]\n"}, {"id": "5", "snippet": "def skjkasdkd(lst):\n\n    # return max(lst)\n    lst.sort()\n    ans = 0\n    for i in lst:\n        ans = i + ans\n    return ans\n"}, {"id": "6", "snippet": "def skjkasdkd(lst):\n    if lst == []:\n        return 0\n    if lst[0] < 9:\n        return lst[0] + skjkasdkd(lst[1:])\n    return max(skjkasdkd(lst[1:]), skjkasdkd(lst[0:1]))\n"}, {"id": "7", "snippet": "def skjkasdkd(lst):\n\n    max_value = max(lst)\n    return lst.index(max_value) + 1\n"}, {"id": "8", "snippet": "def skjkasdkd(lst):\n    if not lst:\n        return 0\n\n    n = len(lst)\n    dp = [1] * n\n    for i in range(2, n):\n        if lst[i] < lst[i - 1]:\n            dp[i] = dp[i - 1] + dp[i - 1]\n        else:\n            dp[i] = dp[i - 1]\n\n    return max(dp)\n"}, {"id": "9", "snippet": "def skjkasdkd(lst):\n    # lst = [2, 5, 9, 14, 17, 19, 27, 31, 37, 41, 43, 47, 53, 59]\n    max_sum = 0\n    for i in range(len(lst)):\n        temp_sum = 0\n        for j in range(i + 1):\n            temp_sum += lst[j] * pow(10, j)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n"}]}
{"question_id": "HumanEval/95", "language": "python", "prompt": "\nGiven a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n", "signature": "def check_dict_case(dict):", "solutions": [{"id": "0", "snippet": "def check_dict_case(dict):\n\n    for k, v in dict.items():\n        if not isinstance(k, str):\n            return False\n        if not isinstance(v, str):\n            return False\n    return True\n"}, {"id": "1", "snippet": "def check_dict_case(dict):\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n        # lower case keys are strings\n        if not isinstance(dict[key], str):\n            return False\n\n        # check if all values in the dictionary are strings\n        for char in dict[key]:\n            if not isinstance(dict[key][char], str):\n                return False\n\n    return True\n"}, {"id": "2", "snippet": "def check_dict_case(dict):\n\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n        if not isinstance(key.lower(), str):\n            return False\n        if not isinstance(key.upper(), str):\n            return False\n\n    return True\n"}, {"id": "3", "snippet": "def check_dict_case(dict):\n\n    for k, v in dict.items():\n        if not isinstance(v, str):\n            return False\n        if not (k.islower() or k.isupper()):\n            return False\n    return True\n"}, {"id": "4", "snippet": "def check_dict_case(dict):\n\n    for key in list(dict.keys()):\n        if not isinstance(key, str):\n            return False\n\n        if not isinstance(dict[key], str):\n            return False\n\n    return True\n"}, {"id": "5", "snippet": "def check_dict_case(dict):\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n\n        if not isinstance(dict[key], str):\n            return False\n\n    return True\n"}, {"id": "6", "snippet": "def check_dict_case(dict):\n    for k, v in dict.items():\n        if not isinstance(k, str):\n            return False\n        if not isinstance(v, str):\n            return False\n        if not isinstance(v, int):\n            return False\n    return True\n"}, {"id": "7", "snippet": "def check_dict_case(dict):\n\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n\n    return True\n"}, {"id": "8", "snippet": "def check_dict_case(dict):\n\n    # return True if all values in dict are strings\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n\n    # check if all values are lowercase\n    for key in dict:\n        if not key.islower():\n            return False\n\n    # check if all values are uppercase\n    for key in dict:\n        if not key.isupper():\n            return False\n\n    return True\n"}, {"id": "9", "snippet": "def check_dict_case(dict):\n    for key in dict:\n        if not isinstance(dict[key], str):\n            return False\n    return True\n"}]}
{"question_id": "HumanEval/96", "language": "python", "prompt": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => [2,3]\ncount_up_to(11) => [2,3,5,7]\ncount_up_to(0) => []\ncount_up_to(20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\ncount_up_to(18) => [2,3,5,7,11,13,17]\n", "signature": "def count_up_to(n):", "solutions": [{"id": "0", "snippet": "def count_up_to(n):\n\n    if n < 0:\n        return []\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, n + 1):\n        if primes[i]:\n            for j in range(2 * i, n + 1, i):\n                primes[j] = False\n\n    return [i for i, prime in enumerate(primes) if prime]\n"}, {"id": "1", "snippet": "def count_up_to(n):\n    primes = [True] * n\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return [i for i, j in enumerate(primes) if j]\n"}, {"id": "2", "snippet": "def count_up_to(n):\n    if n < 0:\n        return []\n    arr = []\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, n + 1):\n        if primes[i]:\n            arr.append(i)\n            j = 2\n            while j * i <= n:\n                primes[j * i] = False\n                j += 1\n    return arr\n"}, {"id": "3", "snippet": "def count_up_to(n):\n\n    primes = [True] * n\n    for i in range(2, n):\n        if primes[i]:\n            j = i + 1\n            while j < n:\n                primes[j] = False\n                j += i\n    return [p for p in primes if p]\n"}, {"id": "4", "snippet": "def count_up_to(n):\n    arr = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            arr.append(i)\n    return arr\n"}, {"id": "5", "snippet": "def count_up_to(n):\n    result = []\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, n + 1):\n        if primes[i]:\n            result.append(i)\n            j = 2\n            while j * i <= n:\n                primes[j * i] = False\n                j += 1\n\n    return result\n"}, {"id": "6", "snippet": "def count_up_to(n):\n    result = []\n    for prime in primes():\n        if prime < n:\n            if is_prime(prime):\n                result.append(prime)\n    return result\n"}, {"id": "7", "snippet": "def count_up_to(n):\n    answer = []\n    for i in range(2, n):\n        if is_prime(i):\n            answer.append(i)\n    return answer\n"}, {"id": "8", "snippet": "def count_up_to(n):\n    prime_list = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n"}, {"id": "9", "snippet": "def count_up_to(n):\n    if n < 0:\n        return []\n    primes = [True] + [False] * n\n    for i in range(2, n):\n        if primes[i]:\n            for j in range(2 * i, n, i):\n                primes[j] = False\n    return [i for i, j in enumerate(primes) if j]\n"}]}
{"question_id": "HumanEval/97", "language": "python", "prompt": "Complete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n", "signature": "def multiply(a, b):", "solutions": [{"id": "0", "snippet": "def multiply(a, b):\n    product = 0\n    for digit in str(a) + str(b):\n        product += int(digit)\n    return product * (10 - product % 10)\n"}, {"id": "1", "snippet": "def multiply(a, b):\n    # TODO: Implement this function.\n    # Refer to the documentation for the built-in function multiply()\n    # that you must take into account the case where the input is always\n    # valid.\n    return 0\n"}, {"id": "2", "snippet": "def multiply(a, b):\n    if b == 0:\n        return 0\n    return a % b\n"}, {"id": "3", "snippet": "def multiply(a, b):\n\n    result = 0\n\n    for digit in str(a) + str(b):\n        result += int(digit)\n\n    return result\n"}, {"id": "4", "snippet": "def multiply(a, b):\n    return a * b\n"}, {"id": "5", "snippet": "def multiply(a, b):\n    product = 0\n    for digit in str(a) + str(b):\n        product += int(digit)\n    return product * (10 ** len(str(a)))\n"}, {"id": "6", "snippet": "def multiply(a, b):\n    if a == 0:\n        return 0\n    else:\n        return (10 ** a) * (10 ** b)\n"}, {"id": "7", "snippet": "def multiply(a, b):\n    product = 0\n\n    for digit in str(a) + str(b):\n        product += int(digit)\n\n    return product * (10 - int(a)) * (10 - int(b))\n"}, {"id": "8", "snippet": "def multiply(a, b):\n    return sum([int(x) for x in str(a * b)])\n"}, {"id": "9", "snippet": "def multiply(a, b):\n    product = 0\n    for digit in str(a) + str(b):\n        product += int(digit)\n    return product * (10 - int(digit))\n"}]}
{"question_id": "HumanEval/98", "language": "python", "prompt": "\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n", "signature": "def count_upper(s):", "solutions": [{"id": "0", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s)):\n        if s[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            count += 1\n    return count\n"}, {"id": "1", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' and i % 2 == 0:\n            count += 1\n\n    return count\n"}, {"id": "2", "snippet": "def count_upper(s):\n\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            count += 1\n        if s[i] == 'E':\n            count -= 1\n\n    return count\n"}, {"id": "3", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u':\n            count += 1\n    return count\n"}, {"id": "4", "snippet": "def count_upper(s):\n\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'A':\n            count += 1\n        if s[i] == 'B':\n            count -= 1\n    return count\n"}, {"id": "5", "snippet": "def count_upper(s):\n\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+2] == 'V':\n            count += 1\n\n    return count\n"}, {"id": "6", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiouAEIOU':\n            count += 1\n    return count\n"}, {"id": "7", "snippet": "def count_upper(s):\n\n    count = 0\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            count += 1\n    return count\n"}, {"id": "8", "snippet": "def count_upper(s):\n    cnt = 0\n    for i, ch in enumerate(s):\n        if ch in 'aeiouAEIOU':\n            cnt += 1\n    return cnt\n"}, {"id": "9", "snippet": "def count_upper(s):\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count + 1\n"}]}
{"question_id": "HumanEval/99", "language": "python", "prompt": "\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n", "signature": "def closest_integer(value):", "solutions": [{"id": "0", "snippet": "def closest_integer(value):\n    value = value.replace('.', '', 1)\n    value = float(value)\n    distance = int(value)\n    if distance > 0:\n        return int(round(value - distance))\n    else:\n        return int(round(value))\n"}, {"id": "1", "snippet": "def closest_integer(value):\n    value = float(value)\n    n = len(value)\n    distance = n - 1\n    if n <= 1:\n        return 0\n    for i in range(n):\n        distance = abs(value - value[i])\n        if distance < n - 1 and distance >= n - 2:\n            return value[i]\n    return 0\n"}, {"id": "2", "snippet": "def closest_integer(value):\n    value = float(value)\n    if value == int(value):\n        return int(value)\n\n    value = abs(value)\n    digits = len(value)\n    i = digits\n    while i > 0:\n        i -= 1\n        digits -= 1\n        a = int(value / 10 ** digits)\n        b = int(value % 10 ** digits)\n        if abs(a - b) < 0.001:\n            return a\n    return b\n"}, {"id": "3", "snippet": "def closest_integer(value):\n    value = int(value)\n    # If value is less than zero, return zero. (If the given value is greater\n    # than zero, return the largest possible integer.)\n    if value < 0:\n        return 0\n    # If value is greater than zero, it should be equidistant from two integers.\n    elif value > 0:\n        return int(round(value))\n    # If value is equidistant from two integers, return the one that is the\n    # closest from zero.\n    else:\n        return int(value - 1)\n"}, {"id": "4", "snippet": "def closest_integer(value):\n    value = int(value)\n    if value == 0:\n        raise ValueError(\"Cannot represent zero as a closest integer.\")\n    return int(round(value))\n"}, {"id": "5", "snippet": "def closest_integer(value):\n    value = value.replace('.', '')\n    value = value.replace(',', '.')\n    value = int(value)\n\n    if value == 0:\n        return 0\n\n    precision = len(value)\n\n    # round away from zero\n    if precision < 3:\n        return round(value, precision)\n\n    # don't go beyond the nearest integer\n    if precision < 6:\n        return round(value - 1, precision)\n\n    # don't go beyond the nearest even integer\n    if precision < 9:\n        return round(value + 1, precision)\n\n    raise ValueError(\"Value '%s' is not equidistant from any integers\" % value)\n"}, {"id": "6", "snippet": "def closest_integer(value):\n    value = int(value)\n    ivalue = value\n\n    # If the number is equidistant from two integers, round away from zero\n    # means that if the given number is equidistant from two integers, the one\n    # you should return is the one that is the farthest from zero. For example\n    # closest_integer(\"14.5\") should return 15 and closest_integer(\"-14.5\") should\n    # return -15\n    if abs(value - ivalue) < 0.00001:\n        return ivalue\n\n    while abs(ivalue - int(ivalue)) > 0.00001:\n        ivalue = int(ivalue + (value - ivalue) / 2)\n\n    return ivalue\n"}, {"id": "7", "snippet": "def closest_integer(value):\n    value = float(value)\n    nearest = int(value)\n    distance = abs(value - nearest)\n\n    return nearest if distance < abs(value) else nearest - (distance - abs(value))\n"}, {"id": "8", "snippet": "def closest_integer(value):\n    value = int(value)\n    if value < 0:\n        raise ValueError(\"Can't represent negative numbers\")\n    value = abs(value)\n    precision = len(str(value))\n    num = value\n    while num - 1 * precision > 0:\n        num -= 1 * precision\n    return num\n"}, {"id": "9", "snippet": "def closest_integer(value):\n    value = float(value)\n    if value == int(value):\n        return int(value)\n    else:\n        return int(round(value))\n"}]}
