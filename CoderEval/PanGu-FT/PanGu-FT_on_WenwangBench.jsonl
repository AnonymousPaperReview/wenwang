{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydator for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n\n    return datetime.fromtimestamp(nanoseconds // 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = tzlocal()\n    return datetime.fromtimestamp(nanoseconds / 1000.0, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds / 1000))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n\n    return time(nanoseconds // 1000, nanoseconds % 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n    return datetime.datetime.fromtimestamp(nanoseconds // 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n    return time(nanoseconds // 1000, nanoseconds % 1000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return nanoseconds // (10 ** tz)\n    return nanoseconds // 10\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n\n    return tz.localize(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds == 0:\n        return None\n    return time(nanoseconds // 1000000, nanoseconds % 1000000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydator for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n\n    return datetime.fromtimestamp(nanoseconds // 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = tzlocal()\n    return datetime.fromtimestamp(nanoseconds / 1000.0, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds / 1000))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n\n    return time(nanoseconds // 1000, nanoseconds % 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return:\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n    return datetime.datetime.fromtimestamp(nanoseconds // 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = timezone.utc\n    return time(nanoseconds // 1000, nanoseconds % 1000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is not None:\n        return nanoseconds // (10 ** tz)\n    return nanoseconds // 10\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n\n    return tz.localize(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if nanoseconds == 0:\n        return None\n    return time(nanoseconds // 1000000, nanoseconds % 1000000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Hydrate for `Time` and `LocalTime` values.\n\n    :param nanoseconds:\n    :param tz:\n    :return: Time\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone('UTC')\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrateor for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    return:\n    \"\"\"\n    return value.total_seconds() // 60\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return {\n        'days': value.days,\n       'seconds': value.seconds,\n       'microseconds': value.microseconds\n    }\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.days\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.days * 86400 + value.seconds\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    return:\n    \"\"\"\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrateor for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    return:\n    \"\"\"\n    return value.total_seconds() // 60\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return {\n        'days': value.days,\n       'seconds': value.seconds,\n       'microseconds': value.microseconds\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrator for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.days\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return value.days * 86400 + value.seconds\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    return:\n    \"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Dehydrate for `timedelta` values.\n\n    :param value:\n    :type value: timedelta\n    :return:\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.strftime('%Y-%m-%d %H:%M:%S')\n", "def dehydrate_time(value):\n    return value.isoformat() if value else None\n", "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "def dehydrate_time(value):\n    return value.strftime(\"%Y-%m-%d %H:%M:%S\") if value else None\n", "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3]\n", "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "def dehydrate_time(value):\n    return value.isoformat() if value else None\n", "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.isoformat() if value else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime(\"%Y-%m-%d %H:%M:%S\") if value else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.isoformat() if value else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Dehydrate for `time` values.\n\n    :param value:\n    :type value: Time\n    :return:\n    \"\"\"\n    return value.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return value.strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    return [value.latitude, value.longitude]\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coordinates\n    }\n", "def dehydrate_point(value):\n    return [value.latitude, value.longitude]\n", "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "def dehydrate_point(value):\n    \"\"\"\n    Dehydrate for Point data.\n\n    :param value:\n    :type value: Point\n    :return:\n    \"\"\"\n    return [value.latitude, value.longitude]\n", "def dehydrate_point(value):\n    \"\"\"\n    Dehydrate for Point data.\n\n    :param value:\n    :type value: Point\n    :return:\n    \"\"\"\n    return [value.latitude, value.longitude]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    return [value.latitude, value.longitude]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'type': 'Point',\n        'coordinates': value.coordinates\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return [value.latitude, value.longitude]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'latitude': value.latitude,\n        'longitude': value.longitude\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return {\n        'x': value.x,\n        'y': value.y\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    Dehydrate for Point data.\n\n    :param value:\n    :type value: Point\n    :return:\n    \"\"\"\n    return [value.latitude, value.longitude]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    Dehydrate for Point data.\n\n    :param value:\n    :type value: Point\n    :return:\n    \"\"\"\n    return [value.latitude, value.longitude]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return list(self._keys)\n", "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n\n    :return: list of key names\n    \"\"\"\n    return list(self._keys)\n", "def keys(self):\n    return [k for k in self._data.keys()]\n", "def keys(self):\n    return self.__dict__.keys()\n", "def keys(self):\n    return self.__dict__.keys()\n", "def keys(self):\n    return list(self.__dict__.keys())\n", "def keys(self):\n    return list(self.__dict__.keys())\n", "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n    :return: list of key names\n    \"\"\"\n    return list(self.__data.keys())\n", "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n    :return: list of key names\n    \"\"\"\n    return self._keys\n", "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n\n    :return: list of key names\n    \"\"\"\n    return list(self.__dict__.keys())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return list(self._keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n\n    :return: list of key names\n    \"\"\"\n    return list(self._keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return [k for k in self._data.keys()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__dict__.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__dict__.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n    :return: list of key names\n    \"\"\"\n    return list(self.__data.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n    :return: list of key names\n    \"\"\"\n    return self._keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \"\"\"\n    Return the keys of the record.\n\n    :return: list of key names\n    \"\"\"\n    return list(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(range(2, 20))\n    return _protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        return {}\n    return {\n        (version, cls.version_type(version)): handler\n        for version, handler in cls.__subclasses__()\n        if protocol_version is None or version == protocol_version\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.__versioned__\n    else:\n        return {\n            version: cls for version in cls.__versioned__ if version >= protocol_version\n        }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltProtocolHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version >= protocol_version and isinstance(handler, BoltProtocolHandler)}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            tuple(sorted(version)): cls.__protocol_handler__(version)\n            for version in cls.__version__\n        }\n    return cls.__protocol_handler__\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: handler for version, handler in cls._protocol_handlers.items() if version >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    return {\n        3: cls.protocol_handler3,\n        5: cls.protocol_handler5,\n        6: cls.protocol_handler6,\n        7: cls.protocol_handler7,\n    }.get(protocol_version, cls.protocol_handler)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {\n            (v, k): v for k, v in cls._protocol_handlers.items()\n            if v >= protocol_version\n        }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = tuple(range(2, 20))\n    return _protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        return {}\n    return {\n        (version, cls.version_type(version)): handler\n        for version, handler in cls.__subclasses__()\n        if protocol_version is None or version == protocol_version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.__versioned__\n    else:\n        return {\n            version: cls for version in cls.__versioned__ if version >= protocol_version\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltProtocolHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version >= protocol_version and isinstance(handler, BoltProtocolHandler)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            tuple(sorted(version)): cls.__protocol_handler__(version)\n            for version in cls.__version__\n        }\n    return cls.__protocol_handler__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {version: handler for version, handler in cls._protocol_handlers.items() if version >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return {\n        3: cls.protocol_handler3,\n        5: cls.protocol_handler5,\n        6: cls.protocol_handler6,\n        7: cls.protocol_handler7,\n    }.get(protocol_version, cls.protocol_handler)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {\n            (v, k): v for k, v in cls._protocol_handlers.items()\n            if v >= protocol_version\n        }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        f.__doc__ = f.__doc__.replace('TX_METADATA', json.dumps(metadata or {}))\n        f.__doc__ += '\\n' + json.dumps({'timeout': timeout or None})\n        return f\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    if metadata is None:\n        metadata = {}\n    if timeout is None:\n        timeout = get_default_timeout()\n\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            with transaction() as tx:\n                result = fn(tx, *args, **kwargs)\n                metadata[\"timeout\"] = timeout\n                if metadata:\n                    tx.setMetaData(**metadata)\n                return result\n        return wrapper\n    return decorator", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            with TxMetaData(metadata, timeout):\n                return f(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with dbms.transaction():\n                result = func(*args, **kwargs)\n                metadata = metadata or {}\n                if timeout is not None:\n                    metadata[\"query.timeout\"] = timeout\n                dbms.setTXMetaData(result, metadata)\n                return result\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            with dbms.transaction(timeout=timeout) as tx:\n                return f(tx, *args, **kwargs)\n        return wrapper\n    return decorator(metadata)\n", "def unit_of_work(metadata=None, timeout=None):\n    if timeout is None:\n        timeout = dbms.transaction.timeout\n    if metadata is None:\n        metadata = dbms.transaction.metadata\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            with self.transaction() as tx:\n                result = func(self, tx, *args, **kwargs)\n                tx.commit()\n                return result\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    This function is a decorator for transaction functions that allows extra control\n    over how the transaction is carried out. For example, a timeout may be applied\n    to a transaction that is not active in the database. For example, a timeout\n    may be applied to an active transaction that is not in the database. If no\n    timeout is specified in the database, the default timeout is used.\n    Record is returned with the execution result of the transaction.\n\n    :type metadata: dict\n    :param metadata: a dictionary with metadata. Specified metadata will be attached\n    to the executing transaction and visible in the output of ``dbms.listQueries`` and\n    ``dbms.listTransactions`` procedures.\n    :type timeout: float or None\n    :param timeout: the transaction timeout in seconds. If no timeout is specified in the\n    database, the default timeout is used.\n    :type timeout: float or None\n    :rtype: dict\n    \"\"\"\n    return _UnitOfWork(metadata, timeout)\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            with transaction(metadata, timeout):\n                return func(*args, **kwargs)\n        return wrapped\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    return _TransactionWrapper(metadata, timeout)\n", "def unit_of_work(metadata=None, timeout=None):\n    return _TransactionDecorator(metadata, timeout)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        f.__doc__ = f.__doc__.replace('TX_METADATA', json.dumps(metadata or {}))\n        f.__doc__ += '\\n' + json.dumps({'timeout': timeout or None})\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    if metadata is None:\n        metadata = {}\n    if timeout is None:\n        timeout = get_default_timeout()\n\n    def decorator(fn):\n        @wraps(fn)\n        def wrapper(*args, **kwargs):\n            with transaction() as tx:\n                result = fn(tx, *args, **kwargs)\n                metadata[\"timeout\"] = timeout\n                if metadata:\n                    tx.setMetaData(**metadata)\n                return result\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            with TxMetaData(metadata, timeout):\n                return f(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with dbms.transaction():\n                result = func(*args, **kwargs)\n                metadata = metadata or {}\n                if timeout is not None:\n                    metadata[\"query.timeout\"] = timeout\n                dbms.setTXMetaData(result, metadata)\n                return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            with dbms.transaction(timeout=timeout) as tx:\n                return f(tx, *args, **kwargs)\n        return wrapper\n    return decorator(metadata)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    if timeout is None:\n        timeout = dbms.transaction.timeout\n    if metadata is None:\n        metadata = dbms.transaction.metadata\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            with self.transaction() as tx:\n                result = func(self, tx, *args, **kwargs)\n                tx.commit()\n                return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    This function is a decorator for transaction functions that allows extra control\n    over how the transaction is carried out. For example, a timeout may be applied\n    to a transaction that is not active in the database. For example, a timeout\n    may be applied to an active transaction that is not in the database. If no\n    timeout is specified in the database, the default timeout is used.\n    Record is returned with the execution result of the transaction.\n\n    :type metadata: dict\n    :param metadata: a dictionary with metadata. Specified metadata will be attached\n    to the executing transaction and visible in the output of ``dbms.listQueries`` and\n    ``dbms.listTransactions`` procedures.\n    :type timeout: float or None\n    :param timeout: the transaction timeout in seconds. If no timeout is specified in the\n    database, the default timeout is used.\n    :type timeout: float or None\n    :rtype: dict\n    \"\"\"\n    return _UnitOfWork(metadata, timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            with transaction(metadata, timeout):\n                return func(*args, **kwargs)\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    return _TransactionWrapper(metadata, timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    return _TransactionDecorator(metadata, timeout)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._items.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._index[key]\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._index[key]\n", "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._items.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._index[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._index[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Return the index of the given item.\n    :param key: a key\n    :return: index\n    :rtype: int\n    \"\"\"\n    return self._keys.index(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    return [record[key] for record in self._iter() for key in keys]\n", "def values(self, *keys):\n    return [getattr(self, key) for key in keys]\n", "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only\n    certain values by index or key.\n    :param keys: indexes or keys of the items to include; if nones are provided,\n    all values will be included.\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    return [self._values[key] for key in keys]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only certain values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided, all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self._iter(False, keys))\n", "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only certain\n    values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided, all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    return [record[key] for key in keys if keys is None or key in keys]\n", "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only\n    certain values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided,\n    all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    return [record[key] for record in self._iter() for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [getattr(self, key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only\n    certain values by index or key.\n    :param keys: indexes or keys of the items to include; if nones are provided,\n    all values will be included.\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [self._values[key] for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only certain values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided, all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self._iter(False, keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only certain\n    values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided, all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return [record[key] for key in keys if keys is None or key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Return the values of the record, optionally filtering to include only\n    certain values by index or key.\n\n    :param keys: indexes or keys of the items to include; if nones are provided,\n    all values will be included\n    :return: list of values\n    :rtype: list\n    \"\"\"\n    return list(self.itervalues(*keys))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return {k: self[k] for k in self._check(keys)}\n", "def data(self, *keys):\n    return {k: self[k] for k in keys or range(len(self))}\n", "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "def data(self, *keys):\n    return dict((k, self[k]) for k in self._make_keys(keys))\n", "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "def data(self, *keys):\n    return dict((k, self._data[k]) for k in self._index(*keys))\n", "def data(self, *keys):\n    return dict((k, self[k]) for k in keys)\n", "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "def data(self, *keys):\n    return {k: self[k] for k in keys or range(len(self))}\n", "def data(self, *keys):\n    if keys:\n        return {key: getattr(self, key) for key in keys if key in self}\n    else:\n        return self\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in self._check(keys)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in keys or range(len(self))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self[k]) for k in self._make_keys(keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self._data[k]) for k in self._index(*keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self[k]) for k in keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict((k, self[k]) for k in keys if k in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return {k: self[k] for k in keys or range(len(self))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    if keys:\n        return {key: getattr(self, key) for key in keys if key in self}\n    else:\n        return self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a big-endian\n    16-bit unsigned integer.\n    \"\"\"\n    return (self.pop(2) << 8) + self.pop(2)\n", "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the same as a big-endian\n    16-bit unsigned integer.  This is only supported on Linux.\n    \"\"\"\n    return struct.unpack(\">H\", self.pop(2))[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a\n    big-endian 16-bit unsigned integer.\n    \"\"\"\n    return struct.unpack(\">H\", self.bytes[-2:])[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the entire 16-bit\n    unsigned integer.  \n    \"\"\"\n    return struct.unpack('>H', self.data[-2:])[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a big-endian\n    16-bit unsigned integer.    \n    \"\"\"\n    return (self.pop(2) << 8) | self.pop(1)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the same as a big-endian\n    16-bit unsigned integer.\n    \"\"\"\n    return struct.unpack('>H', self.bytes[-2:])[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a\n    big-endian 16-bit unsigned integer.    \n    \"\"\"\n    return struct.unpack(\">H\", self.data[-2:])[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the usual big-endian\n    16-bit unsigned integer.  Note that this function does not change the\n    value of the object, and there is no need to return a new one per\n    instruction.\n    \"\"\"\n    return (self.pop_u8() << 8) | self.pop_u8()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a big-endian\n    16-bit unsigned integer.\n    \"\"\"\n    return (self.pop(2) << 8) + self.pop(2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.pop_u8() << 8 | self.pop_u8()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the same as a big-endian\n    16-bit unsigned integer.  This is only supported on Linux.\n    \"\"\"\n    return struct.unpack(\">H\", self.pop(2))[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a\n    big-endian 16-bit unsigned integer.\n    \"\"\"\n    return struct.unpack(\">H\", self.bytes[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the entire 16-bit\n    unsigned integer.  \n    \"\"\"\n    return struct.unpack('>H', self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a big-endian\n    16-bit unsigned integer.    \n    \"\"\"\n    return (self.pop(2) << 8) | self.pop(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the same as a big-endian\n    16-bit unsigned integer.\n    \"\"\"\n    return struct.unpack('>H', self.bytes[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the two bytes as a\n    big-endian 16-bit unsigned integer.    \n    \"\"\"\n    return struct.unpack(\">H\", self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two bytes of data, returning the usual big-endian\n    16-bit unsigned integer.  Note that this function does not change the\n    value of the object, and there is no need to return a new one per\n    instruction.\n    \"\"\"\n    return (self.pop_u8() << 8) | self.pop_u8()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append({\n        'type': 'discard',\n        'n': n,\n        'qid': qid,\n        'dehydration_hooks': dehydration_hooks,\n        'hydration_hooks': hydration_hooks,\n        **handlers\n    })\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(_Discard(n, qid, dehydration_hooks, hydration_hooks,\n                                 handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, **handlers))\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_to_output(self._response_class(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append('DISCARD', n, qid, dehydration_hooks, hydration_hooks, **handlers)"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append({\n        'type': 'discard',\n        'n': n,\n        'qid': qid,\n        'dehydration_hooks': dehydration_hooks,\n        'hydration_hooks': hydration_hooks,\n        **handlers\n    })\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(_Discard(n, qid, dehydration_hooks, hydration_hooks,\n                                 handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, **handlers))\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_to_output(self._response_class(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append('DISCARD', n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n        \"BEGIN\",\n        timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        metadata=metadata,\n        bookmarks=bookmarks,\n        handlers=handlers,\n        mode=mode)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(transactions.Begin(mode=mode, bookmarks=bookmarks,\n                                         metadata=metadata, timeout=timeout,\n                                         db=db, imp_user=imp_user,\n                                         dehydration_hooks=dehydration_hooks,\n                                         hydration_hooks=hydration_hooks, **handlers))\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEG', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self.append(Transaction('BEGIN', mode, bookmarks, metadata, timeout,\n                                 db, imp_user, dehydration_hooks, hydration_hooks,\n                                 handlers))\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(TransactionType.BEGIN, mode, bookmarks, metadata, timeout,\n                       db, imp_user, dehydration_hooks,\n                       hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', timeout, metadata, bookmarks, db, imp_user,\n                        dehydration_hooks, hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n                \"BEGIN\", mode=mode, bookmarks=bookmarks, metadata=metadata,\n                timeout=timeout, db=db, imp_user=imp_user,\n                dehydration_hooks=dehydration_hooks,\n                hydration_hooks=hydration_hooks, **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user,\n                       dehydration_hooks, hydration_hooks, handlers)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n        \"BEGIN\",\n        timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        metadata=metadata,\n        bookmarks=bookmarks,\n        handlers=handlers,\n        mode=mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(transactions.Begin(mode=mode, bookmarks=bookmarks,\n                                         metadata=metadata, timeout=timeout,\n                                         db=db, imp_user=imp_user,\n                                         dehydration_hooks=dehydration_hooks,\n                                         hydration_hooks=hydration_hooks, **handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEG', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self.append(Transaction('BEGIN', mode, bookmarks, metadata, timeout,\n                                 db, imp_user, dehydration_hooks, hydration_hooks,\n                                 handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(TransactionType.BEGIN, mode, bookmarks, metadata, timeout,\n                       db, imp_user, dehydration_hooks,\n                       hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', timeout, metadata, bookmarks, db, imp_user,\n                        dehydration_hooks, hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n                \"BEGIN\", mode=mode, bookmarks=bookmarks, metadata=metadata,\n                timeout=timeout, db=db, imp_user=imp_user,\n                dehydration_hooks=dehydration_hooks,\n                hydration_hooks=hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user,\n                       dehydration_hooks, hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n // 2) * 2 + 1\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n + 0.5) // 2\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n/2\n    else:\n        return n/2+1\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n * 2 + 1\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n - (n // 2) * 2\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n // 2) * 2 + 1\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n - (n % 2)\n", "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n + (n - 1) // 2\n", "def round_half_to_even(n):\n    return round_half_to_even_(n / 2) * 2 + 1\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n // 2) * 2 + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n + 0.5) // 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n/2\n    else:\n        return n/2+1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n * 2 + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n - (n // 2) * 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return (n // 2) * 2 + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n - (n % 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    \"*** YOUR CODE HERE ***\"\n    return n + (n - 1) // 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return round_half_to_even_(n / 2) * 2 + 1\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    return type(\n        f'{name}Point',\n        (Point,),\n        {\n            '__module__':'shapely.geometry',\n           'srid': srid_map['SRID'],\n            'name': name,\n            'fields': fields\n        }\n    )\n", "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            'name': name,\n            'fields': fields,\n           'srid_map': srid_map,\n        }\n    )\n", "def point_type(name, fields, srid_map):\n    \n    \n    class Point(type(name, (object,), fields)):\n        __srid__ = srid_map\n    return Point\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), fields)\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n       'srid': srid_map[fields[0]],\n        'name': fields[1]\n    })\n", "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'geodjango.db.backends.postgis.fields',\n           'srid': srid_map['SRID'],\n            '_fields': fields,\n        }\n    )\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid': srid_map['srid'],\n       'srid_name': srid_map['srid'],\n    })\n", "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        f'{name}Point',\n        (Point,),\n        {\n            '__module__': 'geodjango.db.models',\n            '__fields__': fields,\n           'srid': srid_map['SRID'],\n           'srid_name': srid_map['SRID'].name,\n           'srid_column': srid_map['SRID'].column,\n        },\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        f'{name}Point',\n        (Point,),\n        {\n            '__module__':'shapely.geometry',\n           'srid': srid_map['SRID'],\n            'name': name,\n            'fields': fields\n        }\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        name,\n        (Point,),\n        {\n            'name': name,\n            'fields': fields,\n           'srid_map': srid_map,\n        }\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    class Point(type(name, (object,), fields)):\n        __srid__ = srid_map\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), fields)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {\n       'srid': srid_map[fields[0]],\n        'name': fields[1]\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        name,\n        (Point,),\n        {\n            '__module__': 'geodjango.db.backends.postgis.fields',\n           'srid': srid_map['SRID'],\n            '_fields': fields,\n        }\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (Point,), {\n        'fields': fields,\n       'srid': srid_map['srid'],\n       'srid_name': srid_map['srid'],\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, (Point,), {'fields': fields,'srid_map': srid_map})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically create a Point subclass.\n    \"\"\"\n    return type(\n        f'{name}Point',\n        (Point,),\n        {\n            '__module__': 'geodjango.db.models',\n            '__fields__': fields,\n           'srid': srid_map['SRID'],\n           'srid_name': srid_map['SRID'].name,\n           'srid_column': srid_map['SRID'].column,\n        },\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    return _DeprecationDecorator(message)\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::: @deprecated(\"'foo' has been deprecated in favour of 'bar'\") def foo(x):\n        pass  # pragma: no cover\n\n    \"\"\"\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            warnings.warn_explicit(\n                \"Call to deprecated function {}.\".format(func.__name__),\n                category=DeprecationWarning,\n                filename=func.__code__.co_filename,\n                lineno=func.__code__.co_firstlineno + 1,\n            )\n            return func(*args, **kwargs)\n        return inner\n    return outer(message)\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass  # pragma: no cover\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass  # pragma: nocover\n    \"\"\"\n    def outer(func):\n        \"\"\"\n        Inner decorator.\n        \"\"\"\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            \"\"\"\n            Inner decorator.\n            \"\"\"\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n    def outer(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, __file__)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n\n    \"\"\"\n    def _decorator(func):\n        @wraps(func)\n        def _inner(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return _inner\n    return _decorator\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, args, kwargs)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(\n                \"Call to deprecated function {}.\".format(func.__name__),\n                category=DeprecationWarning,\n                filename=func.__code__.co_filename,\n                lineno=func.__code__.co_firstlineno + 1,\n            )\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n    \"\"\"\n\n    def decorator(func):\n        \"\"\"\n        Adds a new deprecation warning to the function being decorated.\n\n        :param func: The function being decorated.\n        :type func: callable\n        \"\"\"\n\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return new_func\n\n    return decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    return _DeprecationDecorator(message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::: @deprecated(\"'foo' has been deprecated in favour of 'bar'\") def foo(x):\n        pass  # pragma: no cover\n\n    \"\"\"\n    def outer(func):\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            warnings.warn_explicit(\n                \"Call to deprecated function {}.\".format(func.__name__),\n                category=DeprecationWarning,\n                filename=func.__code__.co_filename,\n                lineno=func.__code__.co_firstlineno + 1,\n            )\n            return func(*args, **kwargs)\n        return inner\n    return outer(message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass  # pragma: no cover\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass  # pragma: nocover\n    \"\"\"\n    def outer(func):\n        \"\"\"\n        Inner decorator.\n        \"\"\"\n        @functools.wraps(func)\n        def inner(*args, **kwargs):\n            \"\"\"\n            Inner decorator.\n            \"\"\"\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n    def outer(func):\n        @wraps(func)\n        def inner(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, __file__)\n            return func(*args, **kwargs)\n        return inner\n    return outer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n\n    \"\"\"\n    def _decorator(func):\n        @wraps(func)\n        def _inner(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return _inner\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x): pass  # pragma: no cover\n    \"\"\"\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(message, DeprecationWarning, func.__name__, args, kwargs)\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    ::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            warnings.warn_explicit(\n                \"Call to deprecated function {}.\".format(func.__name__),\n                category=DeprecationWarning,\n                filename=func.__code__.co_filename,\n                lineno=func.__code__.co_firstlineno + 1,\n            )\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"\n    Decorator for deprecating functions and methods.\n\n    :::\n\n        @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n        def foo(x):\n            pass\n    \"\"\"\n\n    def decorator(func):\n        \"\"\"\n        Adds a new deprecation warning to the function being decorated.\n\n        :param func: The function being decorated.\n        :type func: callable\n        \"\"\"\n\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return new_func\n\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"${R}\", \"\")\n    code = code.replace(\"${ROP}\", \"\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    return code % {\n        'R_HOST': '127.0.0.1',\n        'R_PORT': '5555',\n        'R_SSL': '1',\n        'R_USERNAME': 'admin',\n        'R_PASSWORD': 'admin',\n        'R_DBNAME': 'test',\n        'R_USERNAME': 'postgres',\n        'R_PASSWORD': 'password',\n        'R_SSL_CERT': '/var/www/test.crt',\n        'R_SSL_KEY': '/var/www/test.key',\n        'R_DB_NAME': 'test',\n        'R_USE_SSL': '1',\n        'R_DB_USERNAME': 'admin',\n        'R_DB_PASSWORD': 'admin',\n        'R_DB_SSL_CA': '/var/www/test.crt',\n        'R_DB_SSL_KEY': '/var/www/test.key',\n        'R_DB_SSL_CA_FILE': '/var/www/test.crt',\n        'R_DB_SSL_CA_BIN': '/var/www/test.key',\n        'R", "def _inline_r_setup(code: str) -> str:\n    code = f\"\"\"\n    # R is not configured by R yet. Replace this with a real configuration file\n    # instead.\n    r_inline = {'--inline': True}\n    \"\"\"\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"OPTIONS\", \"-O\")\n    code = code.replace(\"--with-r-options\", \"-r\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    if \"INLINE_R\" not in os.environ:\n        code = code.replace(\"\\r\", \"\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    return code.replace(\"{r_dir}\", \"/usr\")\n", "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "def _inline_r_setup(code: str) -> str:\n    return code.replace('{{ cookiecutter_r_env }}', '{{ cookiecutter_r_env_value }}')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"${R}\", \"\")\n    code = code.replace(\"${ROP}\", \"\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code % {\n        'R_HOST': '127.0.0.1',\n        'R_PORT': '5555',\n        'R_SSL': '1',\n        'R_USERNAME': 'admin',\n        'R_PASSWORD': 'admin',\n        'R_DBNAME': 'test',\n        'R_USERNAME': 'postgres',\n        'R_PASSWORD': 'password',\n        'R_SSL_CERT': '/var/www/test.crt',\n        'R_SSL_KEY': '/var/www/test.key',\n        'R_DB_NAME': 'test',\n        'R_USE_SSL': '1',\n        'R_DB_USERNAME': 'admin',\n        'R_DB_PASSWORD': 'admin',\n        'R_DB_SSL_CA': '/var/www/test.crt',\n        'R_DB_SSL_KEY': '/var/www/test.key',\n        'R_DB_SSL_CA_FILE': '/var/www/test.crt',\n        'R_DB_SSL_CA_BIN': '/var/www/test.key',\n        'R", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = f\"\"\"\n    # R is not configured by R yet. Replace this with a real configuration file\n    # instead.\n    r_inline = {'--inline': True}\n    \"\"\"\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"OPTIONS\", \"-O\")\n    code = code.replace(\"--with-r-options\", \"-r\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if \"INLINE_R\" not in os.environ:\n        code = code.replace(\"\\r\", \"\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code.replace(\"{r_dir}\", \"/usr\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code.replace('{{ cookiecutter_r_env }}', '{{ cookiecutter_r_env_value }}')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> int:\n    if color:\n        cmd = _get_concurrent_color_cmd(cmd, varargs, _max_length)\n    return _get_concurrent_cmd(cmd, varargs, target_concurrency, _max_length)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> list[Tuple[str, str]]:\n    return [\n        ('xargs', cmd, varargs, color, target_concurrency, _max_length, kwargs)\n    ]\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str, str]:\n    return _xargs(\n        cmd,\n        varargs,\n        color=color,\n        target_concurrency=target_concurrency,\n        _max_length=_max_length,\n        **kwargs\n    )\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, int]:\n    # pylint: disable=protected-access\n    if color:\n        return _color_xargs(cmd, varargs, _max_length, target_concurrency, **kwargs)\n    else:\n        return _pty_xargs(cmd, varargs, _max_length, target_concurrency, **kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> Tuple[str,...]:\n    if color:\n        cmd = ('{} --color=no'.format(' '.join(cmd)),) * target_concurrency\n    return _xargs(cmd, varargs, _max_length, **kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any) -> str:\n    if color:\n        return (''* _max_length).join(f'{i} {var}' for i, var in enumerate(varargs))\n    else:\n        return''.join(f'{i} {var}' for i, var in enumerate(varargs, _max_length))\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    cmd, varargs = tuple(cmd), tuple(varargs)\n    return _xargs(cmd, varargs, color=color, target_concurrency=target_concurrency, _max_length=_max_length, **kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str]:\n    return (\n       ''.join(['--color'] + [str(x) for x in varargs] + ['--target-concurrency', str(target_concurrency)])\n        if color else''.join(['--target-concurrency', str(target_concurrency)])\n        if target_concurrency else''.join(['--color'] + [str(x) for x in varargs])\n        if color else''.join(['--color'] + [str(x) for x in varargs])\n        if target_concurrency else''.join(['--color'] + [str(x) for x in varargs])\n    )\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    if _max_length is not None and len(cmd) > _max_length:\n        cmd = cmd[:_max_length]\n\n    return cmd[0] if color else cmd\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str]:\n    if color:\n        cmd = (color, cmd)\n    if target_concurrency > 0:\n        cmd = (cmd, ('--color', '--target-concurrency', str(target_concurrency)))\n    return _xargs(cmd, varargs, _max_length=_max_length, **kwargs)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> int:\n    if color:\n        cmd = _get_concurrent_color_cmd(cmd, varargs, _max_length)\n    return _get_concurrent_cmd(cmd, varargs, target_concurrency, _max_length)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> list[Tuple[str, str]]:\n    return [\n        ('xargs', cmd, varargs, color, target_concurrency, _max_length, kwargs)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str, str]:\n    return _xargs(\n        cmd,\n        varargs,\n        color=color,\n        target_concurrency=target_concurrency,\n        _max_length=_max_length,\n        **kwargs\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, int]:\n    # pylint: disable=protected-access\n    if color:\n        return _color_xargs(cmd, varargs, _max_length, target_concurrency, **kwargs)\n    else:\n        return _pty_xargs(cmd, varargs, _max_length, target_concurrency, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> Tuple[str,...]:\n    if color:\n        cmd = ('{} --color=no'.format(' '.join(cmd)),) * target_concurrency\n    return _xargs(cmd, varargs, _max_length, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: Any) -> str:\n    if color:\n        return (''* _max_length).join(f'{i} {var}' for i, var in enumerate(varargs))\n    else:\n        return''.join(f'{i} {var}' for i, var in enumerate(varargs, _max_length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    cmd, varargs = tuple(cmd), tuple(varargs)\n    return _xargs(cmd, varargs, color=color, target_concurrency=target_concurrency, _max_length=_max_length, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str]:\n    return (\n       ''.join(['--color'] + [str(x) for x in varargs] + ['--target-concurrency', str(target_concurrency)])\n        if color else''.join(['--target-concurrency', str(target_concurrency)])\n        if target_concurrency else''.join(['--color'] + [str(x) for x in varargs])\n        if color else''.join(['--color'] + [str(x) for x in varargs])\n        if target_concurrency else''.join(['--color'] + [str(x) for x in varargs])\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    if _max_length is not None and len(cmd) > _max_length:\n        cmd = cmd[:_max_length]\n\n    return cmd[0] if color else cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str]:\n    if color:\n        cmd = (color, cmd)\n    if target_concurrency > 0:\n        cmd = (cmd, ('--color', '--target-concurrency', str(target_concurrency)))\n    return _xargs(cmd, varargs, _max_length=_max_length, **kwargs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    a = list(seq)\n    np.random.shuffle(a)\n    return a\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    return list(_cycle(seq))\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    seq2 = list(seq)\n    random.shuffle(seq2)\n    return seq2\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # return a copy of the sequence and shuffle the list\n    return list(seq) * (len(seq) + 1) // 2\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    random.shuffle(r)\n    return r\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # From https://stackoverflow.com/a/495616/672471\n    import random\n    return [seq[i] for i in random.sample(range(len(seq)), len(seq))]\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    seq.sort(key=lambda x: (random.random(), x))\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    return seq[_randint(0, len(seq) - 1):] + seq[:_randint(0, len(seq) - 1)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    a = list(seq)\n    np.random.shuffle(a)\n    return a\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    return list(_cycle(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    seq2 = list(seq)\n    random.shuffle(seq2)\n    return seq2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # return a copy of the sequence and shuffle the list\n    return list(seq) * (len(seq) + 1) // 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    random.shuffle(r)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # From https://stackoverflow.com/a/495616/672471\n    import random\n    return [seq[i] for i in random.sample(range(len(seq)), len(seq))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    seq.sort(key=lambda x: (random.random(), x))\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    return seq[_randint(0, len(seq) - 1):] + seq[:_randint(0, len(seq) - 1)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    m = re.match(r'(\\d+)\\.(\\d+)(\\.(\\d+))?', s)\n    return tuple(map(int, m.groups()))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(int(x) for x in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split('.')))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    version = tuple(map(int, s.split(\".\")))\n    if version < (0, 0, 0):\n        version = (0, 0, 0) + version\n    return version\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    version = [0, 0, 0]\n    if s[0:2] == 'v':\n        version[0] = int(s[2:])\n    if s[0:3] == 'r':\n        version[1] = int(s[3:])\n    if s[0:3] =='s':\n        version[2] = int(s[3:])\n    return tuple(version)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    m = re.match(r'(\\d+)\\.(\\d+)(\\.(\\d+))?', s)\n    return tuple(map(int, m.groups()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(int(x) for x in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split('.')))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    version = tuple(map(int, s.split(\".\")))\n    if version < (0, 0, 0):\n        version = (0, 0, 0) + version\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    version = [0, 0, 0]\n    if s[0:2] == 'v':\n        version[0] = int(s[2:])\n    if s[0:3] == 'r':\n        version[1] = int(s[3:])\n    if s[0:3] =='s':\n        version[2] = int(s[3:])\n    return tuple(version)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if '/usr/bin/env' in cmd[0]:\n        cmd = cmd[1:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if \"python\" in cmd[0]:\n        cmd = (cmd[0],) + cmd[1:]\n    if \"python3\" in cmd[0]:\n        cmd = (cmd[0], cmd[1]) + cmd[2:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.name == 'nt':\n        cmd = (cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5])\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = cmd[0] +'' + cmd[1:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.name == 'nt':\n        cmd = cmd[0].split('/')\n        cmd[0] = '/'.join(cmd[0])\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.path.sep == '/':\n        cmd = ('/').join(cmd)\n    if os.path.altsep == '/':\n        cmd = cmd[1:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = tuple(cmd)\n    if '#' in cmd[0]:\n        cmd = cmd[1:]\n    if '\\\\' in cmd[0]:\n        cmd = cmd[1:]\n    if '/' in cmd[0]:\n        cmd = cmd[2:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if isinstance(cmd, str):\n        if os.path.sep == '/':\n            cmd = (s for s in cmd.split(' ') if s)\n        else:\n            cmd = (s for s in cmd if s)\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    cmd = list(cmd)\n    while cmd[0] == '#':\n        cmd.pop(0)\n    while cmd[0] == ';':\n        cmd.pop(0)\n    while cmd[0] == '%':\n        cmd.pop(0)\n    while cmd[0] == '&':\n        cmd.pop(0)\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = tuple(cmd)\n    return cmd\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if '/usr/bin/env' in cmd[0]:\n        cmd = cmd[1:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if \"python\" in cmd[0]:\n        cmd = (cmd[0],) + cmd[1:]\n    if \"python3\" in cmd[0]:\n        cmd = (cmd[0], cmd[1]) + cmd[2:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.name == 'nt':\n        cmd = (cmd[0], cmd[1], cmd[2], cmd[3], cmd[4], cmd[5])\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = cmd[0] +'' + cmd[1:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.name == 'nt':\n        cmd = cmd[0].split('/')\n        cmd[0] = '/'.join(cmd[0])\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if os.path.sep == '/':\n        cmd = ('/').join(cmd)\n    if os.path.altsep == '/':\n        cmd = cmd[1:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = tuple(cmd)\n    if '#' in cmd[0]:\n        cmd = cmd[1:]\n    if '\\\\' in cmd[0]:\n        cmd = cmd[1:]\n    if '/' in cmd[0]:\n        cmd = cmd[2:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if isinstance(cmd, str):\n        if os.path.sep == '/':\n            cmd = (s for s in cmd.split(' ') if s)\n        else:\n            cmd = (s for s in cmd if s)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    cmd = list(cmd)\n    while cmd[0] == '#':\n        cmd.pop(0)\n    while cmd[0] == ';':\n        cmd.pop(0)\n    while cmd[0] == '%':\n        cmd.pop(0)\n    while cmd[0] == '&':\n        cmd.pop(0)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if sys.platform == 'win32':\n        cmd = tuple(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(args, kwargs))\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key(args, kwargs), result)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key % f.__module__\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in wrapper.cache:\n                wrapper.cache[key] = cache(key, f, args, kwargs)\n            return wrapper.cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \"\"\" Decorator to wrap a function with a memoizing callable that\n    saves results in a cache. \"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return wrapper\n", "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    def _inner(fn):\n        @functools.wraps(fn)\n        def _wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = fn(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            key = key % f.__module__\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that\n    saves results in a cache.  The callable must return a value\n    that is not none, but can be used to replace the result of\n    another function with the same value.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def wrap(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            if key not in cache:\n                cache[key] = f(*args, **kw)\n            return cache[key]\n        return wrapper\n    return wrap\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with lock:\n                return cache.get(key(*args, **kwargs))\n        return wrapper\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(args, kwargs))\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key(args, kwargs), result)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key % f.__module__\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in wrapper.cache:\n                wrapper.cache[key] = cache(key, f, args, kwargs)\n            return wrapper.cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\" Decorator to wrap a function with a memoizing callable that\n    saves results in a cache. \"\"\"\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    def wrapper(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that saves results in a cache.\n    \"\"\"\n    def _inner(fn):\n        @functools.wraps(fn)\n        def _wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = fn(*args, **kwargs)\n            return cache[key]\n        return _wrapper\n    return _inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapped(*args, **kwargs):\n            key = key % f.__module__\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a function with a memoizing callable that\n    saves results in a cache.  The callable must return a value\n    that is not none, but can be used to replace the result of\n    another function with the same value.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key in cache:\n                return cache[key]\n            else:\n                result = func(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def wrap(f):\n        @wraps(f)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            if key not in cache:\n                cache[key] = f(*args, **kw)\n            return cache[key]\n        return wrapper\n    return wrap\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with lock:\n                return cache.get(key(*args, **kwargs))\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"\"\"\n   .. versionadded:: 0.9.0\n    \"\"\"\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # This function must return a function, not a method!\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"\"\"\n   .. versionadded:: 0.9.0\n    \"\"\"\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # This function must return a function, not a method!\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', memoize, maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    return _MutableCache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    # Note: Do not change the name of this function.\n    return _MruCache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    cache = {}\n    def _mru_cache(f):\n        key = f.__name__\n        if key not in cache:\n            if typed:\n                cache[key] = f\n            else:\n                cache[key] = _mru(f, maxsize)\n        return cache[key]\n    return _mru_cache", "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached('mru', maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', memoize, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    return _MutableCache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    # Note: Do not change the name of this function.\n    return _MruCache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    cache = {}\n    def _mru_cache(f):\n        key = f.__name__\n        if key not in cache:\n            if typed:\n                cache[key] = f\n            else:\n                cache[key] = _mru(f, maxsize)\n        return cache[key]\n    return _mru_cache", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize), maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least Recently Used\n    (LRU) algorithm.\n    \"\"\"\n    if maxsize is None:\n        return _lru_cache\n    elif maxsize <= 0:\n        return _lru_cache(0, typed)\n    elif maxsize == 1:\n        return _lru_cache(0, typed)\n    else:\n        return _lru_cache(maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached_function(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n   .. todo::\n\n        WRITEME\n    \"\"\"\n    return _Cache(_make_cache_key('lru', maxsize, typed), lru_cache)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('LRU', _lru_cache, maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize), maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least Recently Used\n    (LRU) algorithm.\n    \"\"\"\n    if maxsize is None:\n        return _lru_cache\n    elif maxsize <= 0:\n        return _lru_cache(0, typed)\n    elif maxsize == 1:\n        return _lru_cache(0, typed)\n    else:\n        return _lru_cache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached_function(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n   .. todo::\n\n        WRITEME\n    \"\"\"\n    return _Cache(_make_cache_key('lru', maxsize, typed), lru_cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('LRU', _lru_cache, maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_lfu, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.\n    \"\"\"\n    return _Cache(LRUCache(maxsize), typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', _lfu, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    # You can replace the following line with your own code.\n    return _lfu_cache(None, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lru', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _Memoize('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_lfu_cache, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saved up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.  This cache can be seen by a browser as a\n    list of functions whose cache values can be obtained by memoization.\n    \"\"\"\n    return _Cache(LFU, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize, typed), maxsize)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_lfu, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.\n    \"\"\"\n    return _Cache(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', _lfu, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # You can replace the following line with your own code.\n    return _lfu_cache(None, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lru', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Memoize('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_lfu_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saved up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.  This cache can be seen by a browser as a\n    list of functions whose cache values can be obtained by memoization.\n    \"\"\"\n    return _Cache(LFU, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize, typed), maxsize)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    \n    \n    return self.__dict__.popitem()[1]", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    \"\"\"Remove and return the `(key, value)` pair first inserted.\"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__data__.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "def popitem(self):\n    return (list.popitem(self)[0], list.popitem(self)[1])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    \n    \n    return self.__dict__.popitem()[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"Remove and return the `(key, value)` pair first inserted.\"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__data__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair first inserted.\n    \"\"\"\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return (list.popitem(self)[0], list.popitem(self)[1])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    \"\"\"\n    D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n    \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return super(OrderedMultiDict, self).setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    \"\"\" D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n    \"\"\"\n    return self.__setitem__(key, default)\n", "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.upper(), default)", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n    except TypeError:\n        raise TypeError(\"'setdefault' expected dictionary argument, \"\n                        \"got %r\" % key)\n", "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)\n", "def setdefault(self, key, default=None):\n    return self._data.setdefault(key, default)", "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.lower(), default)"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    \"\"\"\n    D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n    \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return super(OrderedMultiDict, self).setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    \"\"\" D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D\n    \"\"\"\n    return self.__setitem__(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.upper(), default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n    except TypeError:\n        raise TypeError(\"'setdefault' expected dictionary argument, \"\n                        \"got %r\" % key)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return super(Dict, self).setdefault(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return self._data.setdefault(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.lower(), default)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    return self.__data.get(key, default)", "def get(self, key, default=None):\n    return self._dict.get(key, default)", "def get(self, key, default=None):\n    return self.__data.get(key, default)", "def get(self, key, default=None):\n    \"\"\"\n    D.get(k[,d]) -> D[k] if k in D, else d. defaults to None.\n    \"\"\"\n    return self.__getitem__(key, default)\n", "def get(self, key, default=None):\n    return self._dict.get(key, default)", "def get(self, key, default=None):\n    return self.data.get(key, default)\n", "def get(self, key, default=None):\n    return self.data.get(key, default)", "def get(self, key, default=None):\n    return self._dict.get(key, default)", "def get(self, key, default=None):\n    return self.__getitem__(key, default)", "def get(self, key, default=None):\n    return self.__data.get(key, default)"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    return self.__data.get(key, default)", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.__data.get(key, default)", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    \"\"\"\n    D.get(k[,d]) -> D[k] if k in D, else d. defaults to None.\n    \"\"\"\n    return self.__getitem__(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.data.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.data.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self._dict.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.__getitem__(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.__data.get(key, default)", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            with lock:\n                return cache.get(key(self), func(self, *args, **kwargs))\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def memoizer(fn):\n        \"\"\" Wrap a method with a cache instance and store results in a cache. \"\"\"\n        def wrapped(self, *args, **kwargs):\n            key = key % fn.__module__\n            if not hasattr(self, '_cache'):\n                self._cache = cache\n            if key not in self._cache:\n                result = fn(self, *args, **kwargs)\n                setattr(self, key, result)\n            return self._cache[key]\n        return wrapped\n    return memoizer\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        return _CachedMethod(fn, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.\n    \"\"\"\n    def decorator(fn):\n        \"\"\"\n        Wrapper of the function.\n        \"\"\"\n        @wraps(fn)\n        def wrapper(self, *args, **kwargs):\n            \"\"\"\n            Wrapper of the function.\n            \"\"\"\n            key = key + (args, tuple(kwargs.items()))\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.  This allows for methods to be used as a\n    decorator to wrap or return an actual method that save results in a\n    cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n\n    def _memoizer(f):\n        @functools.wraps(f)\n        def wrapper(self, *args, **kwargs):\n            with lock:\n                return f(self, *args, **kwargs)\n        return wrapper\n    return _memoizer(cache)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a class or instance method with a memoizing callable that\n    saves results in a cache.  Returns a decorated function.\n    \"\"\"\n    def deco(fn):\n        @wraps(fn)\n        def wrapper(self, *args, **kwargs):\n            key = key % fn.__module__\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    deco.__name__ = fn.__name__\n    deco.__module__ = fn.__module__\n    deco.__dict__ = fn.__dict__\n    return deco\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key % func.__name__\n            if key not in cache:\n                cache[key] = func(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            with lock:\n                return cache.get(key(self), func(self, *args, **kwargs))\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def memoizer(fn):\n        \"\"\" Wrap a method with a cache instance and store results in a cache. \"\"\"\n        def wrapped(self, *args, **kwargs):\n            key = key % fn.__module__\n            if not hasattr(self, '_cache'):\n                self._cache = cache\n            if key not in self._cache:\n                result = fn(self, *args, **kwargs)\n                setattr(self, key, result)\n            return self._cache[key]\n        return wrapped\n    return memoizer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        return _CachedMethod(fn, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.\n    \"\"\"\n    def decorator(fn):\n        \"\"\"\n        Wrapper of the function.\n        \"\"\"\n        @wraps(fn)\n        def wrapper(self, *args, **kwargs):\n            \"\"\"\n            Wrapper of the function.\n            \"\"\"\n            key = key + (args, tuple(kwargs.items()))\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Decorator to wrap a class or instance method with a memoizing callable\n    that saves results in a cache.  This allows for methods to be used as a\n    decorator to wrap or return an actual method that save results in a\n    cache.\n    \"\"\"\n    if lock is None:\n        lock = threading.Lock()\n\n    def _memoizer(f):\n        @functools.wraps(f)\n        def wrapper(self, *args, **kwargs):\n            with lock:\n                return f(self, *args, **kwargs)\n        return wrapper\n    return _memoizer(cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    return _CachedMethod(cache, key, lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Wrap a class or instance method with a memoizing callable that\n    saves results in a cache.  Returns a decorated function.\n    \"\"\"\n    def deco(fn):\n        @wraps(fn)\n        def wrapper(self, *args, **kwargs):\n            key = key % fn.__module__\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    deco.__name__ = fn.__name__\n    deco.__module__ = fn.__module__\n    deco.__dict__ = fn.__dict__\n    return deco\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key % func.__name__\n            if key not in cache:\n                cache[key] = func(self, *args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    # type: (Any, Exception, int, int) -> str\n    if e is not None:\n        if e.args:\n            msg =''.join(['%s:' % i for i in e.args])\n        else:\n            msg = ''\n        return '%s%s' % (cls.__name__, msg)\n    else:\n        return ''\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Format an exception.\n\n    :param e: Any exception instance.\n    :type e: Exception\n    :param max_level: Maximum call stack level(default 30)\n    :type max_level: int\n    :param max_path_level: Maximum path level(default 5)\n    :type max_path_level: int\n    :return The exception readable string\n    :rtype: str\n    \"\"\"\n    return cls.__name__ + '\\n' + '-' * (max_path_level - 1) + '\\n' + str(e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(e.__class__.__name__, e.args, ', '.join(\n        ['{0}={1!r}'.format(k, v) for k, v in e.__dict__.items() if k!= '__module__' and k!= '__doc__'][:max_path_level]\n        + ['{0}={1!r}'.format(k, v) for k, v in sorted(e.__dict__.items()) if k!= '__doc__']\n    ))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e = str(e)\n    return '%s: %s' % (cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, e.__traceback__))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}({}, {})'.format(\n        cls.__name__,\n        e,\n        ', '.join('{}={}'.format(k, repr(getattr(e, k))) for k in sorted(e.__dict__)),\n    )\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if cls.__name__ =='str':\n        return ''\n    return '{}: {}'.format(cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '%s(%r, %r)' % (cls.__name__, e, e.__traceback__)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if not isinstance(e, Exception):\n        return str(e)\n\n    result = []\n    for key, value in sorted(e.__dict__.items()):\n        if key.startswith('_'):\n            continue\n        if isinstance(value, Exception):\n            result.append('{0}: {1}'.format(key, extostr(value, max_level, max_path_level)))\n        else:\n            result.append('{0}: {1}'.format(key, value))\n\n    return '\\n'.join(result)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, str(e)[:max_path_level])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    # type: (Any, Exception, int, int) -> str\n    if e is not None:\n        if e.args:\n            msg =''.join(['%s:' % i for i in e.args])\n        else:\n            msg = ''\n        return '%s%s' % (cls.__name__, msg)\n    else:\n        return ''\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Format an exception.\n\n    :param e: Any exception instance.\n    :type e: Exception\n    :param max_level: Maximum call stack level(default 30)\n    :type max_level: int\n    :param max_path_level: Maximum path level(default 5)\n    :type max_path_level: int\n    :return The exception readable string\n    :rtype: str\n    \"\"\"\n    return cls.__name__ + '\\n' + '-' * (max_path_level - 1) + '\\n' + str(e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(e.__class__.__name__, e.args, ', '.join(\n        ['{0}={1!r}'.format(k, v) for k, v in e.__dict__.items() if k!= '__module__' and k!= '__doc__'][:max_path_level]\n        + ['{0}={1!r}'.format(k, v) for k, v in sorted(e.__dict__.items()) if k!= '__doc__']\n    ))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e = str(e)\n    return '%s: %s' % (cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return ''.join(traceback.format_exception(cls, e, e.__traceback__))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}({}, {})'.format(\n        cls.__name__,\n        e,\n        ', '.join('{}={}'.format(k, repr(getattr(e, k))) for k in sorted(e.__dict__)),\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if cls.__name__ =='str':\n        return ''\n    return '{}: {}'.format(cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '%s(%r, %r)' % (cls.__name__, e, e.__traceback__)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if not isinstance(e, Exception):\n        return str(e)\n\n    result = []\n    for key, value in sorted(e.__dict__.items()):\n        if key.startswith('_'):\n            continue\n        if isinstance(value, Exception):\n            result.append('{0}: {1}'.format(key, extostr(value, max_level, max_path_level)))\n        else:\n            result.append('{0}: {1}'.format(key, value))\n\n    return '\\n'.join(result)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return '{}: {}'.format(cls.__name__, str(e)[:max_path_level])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    return append_binary_to_file(file_name, text_buffer, encoding)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \"\"\"\n    Write to the specified filename, the provided binary buffer\n    Create the file if required.\n    :param file_name: File name.\n    :type file_name: str\n    :param text_buffer: Text buffer to write.\n    :type text_buffer: str\n    :param encoding: The encoding to use.\n    :type encoding: str\n    :param overwrite: If true, file is overwritten.\n    :type overwrite: bool\n    :return The number of bytes written or lt 0 if error.\n    :rtype int\n    \"\"\"\n    if not os.path.exists(os.path.dirname(file_name)):\n        os.makedirs(os.path.dirname(file_name))\n    with open(file_name, 'ab' if os.path.exists(file_name) else 'wb', encoding=encoding) as file_handle:\n        return file_handle.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n\n    with open(file_name, 'ab') as f:\n        return f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'ab' if encoding == 'utf-8' else 'wb') as output_file:\n        output_file.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.exists(os.path.dirname(file_name)):\n        os.makedirs(os.path.dirname(file_name))\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    try:\n        with open(file_name, 'a' if encoding == 'utf-8' else 'w') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    except Exception as e:\n        return e\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'w', encoding=encoding) as output_file:\n            output_file.write(text_buffer)\n        return len(text_buffer)\n    return 0\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, \"ab\" if encoding is None else \"wb\" if encoding == \"binary\" else \"utf-8\") as f:\n        return f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    with open(file_name, 'ab' if os.path.exists(file_name) else 'wb') as f:\n        return f.write(text_buffer.encode(encoding))\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    return 0\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    return append_binary_to_file(file_name, text_buffer, encoding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \"\"\"\n    Write to the specified filename, the provided binary buffer\n    Create the file if required.\n    :param file_name: File name.\n    :type file_name: str\n    :param text_buffer: Text buffer to write.\n    :type text_buffer: str\n    :param encoding: The encoding to use.\n    :type encoding: str\n    :param overwrite: If true, file is overwritten.\n    :type overwrite: bool\n    :return The number of bytes written or lt 0 if error.\n    :rtype int\n    \"\"\"\n    if not os.path.exists(os.path.dirname(file_name)):\n        os.makedirs(os.path.dirname(file_name))\n    with open(file_name, 'ab' if os.path.exists(file_name) else 'wb', encoding=encoding) as file_handle:\n        return file_handle.write(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n\n    with open(file_name, 'ab') as f:\n        return f.write(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'ab' if encoding == 'utf-8' else 'wb') as output_file:\n        output_file.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.exists(os.path.dirname(file_name)):\n        os.makedirs(os.path.dirname(file_name))\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    try:\n        with open(file_name, 'a' if encoding == 'utf-8' else 'w') as f:\n            f.write(text_buffer)\n        return len(text_buffer)\n    except Exception as e:\n        return e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'w', encoding=encoding) as output_file:\n            output_file.write(text_buffer)\n        return len(text_buffer)\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, \"ab\" if encoding is None else \"wb\" if encoding == \"binary\" else \"utf-8\") as f:\n        return f.write(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        return 0\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return len(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return 0\n    with open(file_name, 'ab' if os.path.exists(file_name) else 'wb') as f:\n        return f.write(text_buffer.encode(encoding))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if overwrite or not os.path.exists(file_name):\n        with open(file_name, 'ab') as f:\n            f.write(text_buffer.encode(encoding))\n        return len(text_buffer)\n    return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = None\n        with open(file_name, \"r\", encoding=encoding) as f:\n            buffer = f.read()\n    except Exception as e:\n        buffer = str(e)\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, \"r\").read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, 'r', encoding=encoding).read()\n    except:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = codecs.open(file_name, \"r\", encoding=encoding).read()\n    except UnicodeDecodeError:\n        return None\n    return buf\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, encoding=encoding).read()\n    except:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, encoding=encoding).read()\n    except IOError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, encoding=encoding).read()\n    except UnicodeDecodeError:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, \"r\", encoding).read()\n    except:\n        return None\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding=encoding).read()\n    except:\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = None\n        with open(file_name, \"r\", encoding=encoding) as f:\n            buffer = f.read()\n    except Exception as e:\n        buffer = str(e)\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, \"r\").read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, 'r', encoding=encoding).read()\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buf = codecs.open(file_name, \"r\", encoding=encoding).read()\n    except UnicodeDecodeError:\n        return None\n    return buf\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, encoding=encoding).read()\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        buffer = codecs.open(file_name, encoding=encoding).read()\n    except IOError:\n        buffer = None\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, encoding=encoding).read()\n    except IOError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return open(file_name, encoding=encoding).read()\n    except UnicodeDecodeError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, \"r\", encoding).read()\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        return codecs.open(file_name, 'r', encoding=encoding).read()\n    except:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    else:\n        return False\n", "def is_file_exist(file_name):\n    if file_name[-4:]!= '.py':\n        return False\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check if file name exist.\n\n    :param file_name: File name.\n    :type file_name: str\n    :return:    True (exist), False (do not exist, or invalid file name)\n    :rtype:     bool\n    \"\"\"\n    if not os.path.exists(file_name):\n        return False\n    else:\n        return True\n", "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    else:\n        return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    if os.path.exists(file_name):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if file_name[-4:]!= '.py':\n        return False\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check if file name exist.\n\n    :param file_name: File name.\n    :type file_name: str\n    :return:    True (exist), False (do not exist, or invalid file name)\n    :rtype:     bool\n    \"\"\"\n    if not os.path.exists(file_name):\n        return False\n    else:\n        return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.isfile(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    else:\n        return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if not os.path.exists(file_name):\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    cls.__log__ = []\n", "def _reset_logging(cls):\n    cls._log = []\n", "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    \n    \n    cls._log_handlers = []\n", "def _reset_logging(cls):\n    \n    \n    cls.__log_level__ = 0\n    cls.__log_to_console__ = False\n    cls.__log_to_stdout__ = False\n", "def _reset_logging(cls):\n    \n    \n    cls._log_level = 0\n    cls._log_format = \"[%(asctime)s] %(levelname)s %(message)s\"\n    cls._log_date_format = \"%Y-%m-%d %H:%M:%S\"\n    cls._log_file = None\n", "def _reset_logging(cls):\n    \n    \n    cls._initialized = False\n    cls._initialized_value = False\n", "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "def _reset_logging(cls):\n    cls._instance = None\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    cls.__log__ = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    cls._log = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log_handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls.__log_level__ = 0\n    cls.__log_to_console__ = False\n    cls.__log_to_stdout__ = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log_level = 0\n    cls._log_format = \"[%(asctime)s] %(levelname)s %(message)s\"\n    cls._log_date_format = \"%Y-%m-%d %H:%M:%S\"\n    cls._log_file = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._initialized = False\n    cls._initialized_value = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    cls._instance = None\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return _getTargetClass(self)\n", "def _getTargetClass(self):\n    return html.Div\n", "def _getTargetClass(self):\n    return None\n", "def _getTargetClass(self):\n    return NotImplemented", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return File\n", "def _getTargetClass(self):\n    return __import__(\"pynetdicom\").targets.layer.Layer\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return _getTargetClass(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Div\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return NotImplemented", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return File\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return __import__(\"pynetdicom\").targets.layer.Layer\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved\n    Orderings are constrained in such a way that if an object appearing in\n    two or more orderings, then the suffix that starts with the object must\n    be in both orderings.\n    For example:\n    \n    >>> _mergeOrderings([\n   ...     ['x', 'y', 'z'],\n   ...     ['q', 'z'],\n   ...     [1, 3, 5],\n   ...     ['z']\n   ... ])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    return sorted(orderings, key=lambda x: x[0])\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) == 1 and o[0][0] == o[0][1]:\n            result.extend(o[0][2:])\n        else:\n            result.extend(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    orderings = sorted(orderings, key=lambda o: o[0])\n    out = []\n    for o in orderings:\n        for i, e in enumerate(o):\n            if i < len(out) and e <= out[i][-1]:\n                out[i].append(e)\n            else:\n                out.append([e])\n    return out", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        for item in ordering:\n            if item[0] not in result or item[1] > result[-1][1]:\n                result.append(item)\n    return result", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is\n    preserved Orderings are constrained in such a way\n    that if an object appearing in two or more orderings,\n    the suffix that begins with the object must be in both\n    orderings.\n    For example:\n    \n    >>> _mergeOrderings([ ['x', 'y', 'z'], ['q', 'z'], [1, 3, 5]...])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    result = []\n    for i, o in enumerate(orderings):\n        if i > 0:\n            if o[0] == orderings[i-1][0]:\n                result.append(o[1])\n                del orderings[i-1]\n            else:\n                result.extend(o)\n        else:\n            result.extend(o)\n    return result", "def _legacy_mergeOrderings(orderings):\n    # return [o for i, o in enumerate(orderings) if i % 2 == 0]\n    return [o for i, o in enumerate(orderings) if not (i % 2)]\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved\n    Orderings are constrained in such a way that if an object appear in\n    two or more orderings, then the suffix that begins with the object must\n    be in both orderings.\n    For example:\n    >>> _mergeOrderings([...['x', 'y', 'z'],...['q', 'z'],...['z']])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    suffixes = []\n    for ordering in orderings:\n        suffixes.extend(ordering)\n        suffixes.sort()\n    return suffixes\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        for i in range(len(ordering) - 1, -1, -1):\n            if ordering[i][0] <= ordering[i+1][0]:\n                ordering[i] = ordering[i+1]\n                del ordering[i+1]\n                break\n        else:\n            result.append(ordering[0][1])\n    return result", "def _legacy_mergeOrderings(orderings):\n    suffixes = []\n    for i, ordering in enumerate(orderings):\n        if isinstance(ordering, list):\n            suffixes.extend(ordering)\n        else:\n            suffixes.append(ordering)\n            \n    return suffixes\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved Orderings\n    are constrained in such a way that if an object appearing in two or more\n    orderings, then the suffix that begins with the object must be in both orderings.\n    For example:\n    \n    >>> _mergeOrderings([\n   ...     ['x', 'y', 'z'],\n   ...     ['q', 'z'],\n   ...     [1, 3, 5],\n   ...     ['z']\n   ... ])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    result = []\n    for o in orderings:\n        if len(o) >= 2 and o[0][0] <= o[1][0]:\n            result.append(o[0][1])\n            del o[0]\n        else:\n            result.extend(o)\n    return result\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved\n    Orderings are constrained in such a way that if an object appearing in\n    two or more orderings, then the suffix that starts with the object must\n    be in both orderings.\n    For example:\n    \n    >>> _mergeOrderings([\n   ...     ['x', 'y', 'z'],\n   ...     ['q', 'z'],\n   ...     [1, 3, 5],\n   ...     ['z']\n   ... ])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    return sorted(orderings, key=lambda x: x[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(o) == 1 and o[0][0] == o[0][1]:\n            result.extend(o[0][2:])\n        else:\n            result.extend(o)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = sorted(orderings, key=lambda o: o[0])\n    out = []\n    for o in orderings:\n        for i, e in enumerate(o):\n            if i < len(out) and e <= out[i][-1]:\n                out[i].append(e)\n            else:\n                out.append([e])\n    return out", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        for item in ordering:\n            if item[0] not in result or item[1] > result[-1][1]:\n                result.append(item)\n    return result", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is\n    preserved Orderings are constrained in such a way\n    that if an object appearing in two or more orderings,\n    the suffix that begins with the object must be in both\n    orderings.\n    For example:\n    \n    >>> _mergeOrderings([ ['x', 'y', 'z'], ['q', 'z'], [1, 3, 5]...])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    result = []\n    for i, o in enumerate(orderings):\n        if i > 0:\n            if o[0] == orderings[i-1][0]:\n                result.append(o[1])\n                del orderings[i-1]\n            else:\n                result.extend(o)\n        else:\n            result.extend(o)\n    return result", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # return [o for i, o in enumerate(orderings) if i % 2 == 0]\n    return [o for i, o in enumerate(orderings) if not (i % 2)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved\n    Orderings are constrained in such a way that if an object appear in\n    two or more orderings, then the suffix that begins with the object must\n    be in both orderings.\n    For example:\n    >>> _mergeOrderings([...['x', 'y', 'z'],...['q', 'z'],...['z']])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    suffixes = []\n    for ordering in orderings:\n        suffixes.extend(ordering)\n        suffixes.sort()\n    return suffixes\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for ordering in orderings:\n        for i in range(len(ordering) - 1, -1, -1):\n            if ordering[i][0] <= ordering[i+1][0]:\n                ordering[i] = ordering[i+1]\n                del ordering[i+1]\n                break\n        else:\n            result.append(ordering[0][1])\n    return result", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    suffixes = []\n    for i, ordering in enumerate(orderings):\n        if isinstance(ordering, list):\n            suffixes.extend(ordering)\n        else:\n            suffixes.append(ordering)\n            \n    return suffixes\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Merge multiple orderings so that within-ordering order is preserved Orderings\n    are constrained in such a way that if an object appearing in two or more\n    orderings, then the suffix that begins with the object must be in both orderings.\n    For example:\n    \n    >>> _mergeOrderings([\n   ...     ['x', 'y', 'z'],\n   ...     ['q', 'z'],\n   ...     [1, 3, 5],\n   ...     ['z']\n   ... ])\n    ['x', 'y', 'q', 1, 3, 5, 'z']\n    \"\"\"\n    result = []\n    for o in orderings:\n        if len(o) >= 2 and o[0][0] <= o[1][0]:\n            result.append(o[0][1])\n            del o[0]\n        else:\n            result.extend(o)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    try:\n        return object.__interfaces__\n    except AttributeError:\n        return interfaces.IInterface\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IDirectlyProvided)\n", "def directlyProvidedBy(object):\n    if getattr(object, '__providedBy__', None):\n        return object.__providedBy__\n    if hasattr(object, '__implemented__'):\n        return object.__implemented__\n    return _directlyProvidedBy(object)\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "def directlyProvidedBy(object):\n    return getInterfaces(object)[1]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    try:\n        return object.__interfaces__\n    except AttributeError:\n        return interfaces.IInterface\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IDirectlyProvided)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if getattr(object, '__providedBy__', None):\n        return object.__providedBy__\n    if hasattr(object, '__implemented__'):\n        return object.__implemented__\n    return _directlyProvidedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getInterfaces(object)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    minBases = {}\n    for k, v in classes.items():\n        if v not in minBases:\n            minBases[v] = [k]\n        else:\n            minBases[v].append(k)\n    return minBases\n", "def minimalBases(classes):\n    minBases = []\n    for cls in classes:\n        if cls not in minBases:\n            minBases.append(cls)\n    return minBases\n", "def minimalBases(classes):\n    \n    \n    minbases = []\n    for base in classes:\n        minbases.extend([b for b in classes if b!= base])\n    minbases.sort(key=lambda b: b.order)\n    return minbases\n", "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to their ordered minimum equivalent\n    \"\"\"\n    return sorted(classes, key=lambda c: c.orderedMinimum())\n", "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.baseClass)", "def minimalBases(classes):\n    \n    \n    minBases = []\n    for c in classes:\n        if c.bases == None:\n            continue\n        bases = []\n        for b in c.bases:\n            if b not in bases:\n                bases.append(b)\n        minBases.append(min(bases))\n    return minBases", "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to its ordered minime equivalent\n    \"\"\"\n    return sorted(classes, key=lambda x: (x.__name__, x.__module__))\n", "def minimalBases(classes):\n    \n    \n    minBases = {}\n    for i in classes:\n        minBases[i.base] = minBases.get(i.base, 0) + 1\n    return sorted(classes, key=lambda x: minBases[x], reverse=True)\n", "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to its ordered minime equivalent\n    \"\"\"\n    return sorted(classes, key=lambda x: x.__name__)\n", "def minimalBases(classes):\n    classes = sorted(classes, key=lambda x: x.order)\n    return [c for c in classes if c.is_base()]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    minBases = {}\n    for k, v in classes.items():\n        if v not in minBases:\n            minBases[v] = [k]\n        else:\n            minBases[v].append(k)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    minBases = []\n    for cls in classes:\n        if cls not in minBases:\n            minBases.append(cls)\n    return minBases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    minbases = []\n    for base in classes:\n        minbases.extend([b for b in classes if b!= base])\n    minbases.sort(key=lambda b: b.order)\n    return minbases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to their ordered minimum equivalent\n    \"\"\"\n    return sorted(classes, key=lambda c: c.orderedMinimum())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return sorted(classes, key=lambda x: x.baseClass)", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    minBases = []\n    for c in classes:\n        if c.bases == None:\n            continue\n        bases = []\n        for b in c.bases:\n            if b not in bases:\n                bases.append(b)\n        minBases.append(min(bases))\n    return minBases", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to its ordered minime equivalent\n    \"\"\"\n    return sorted(classes, key=lambda x: (x.__name__, x.__module__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    minBases = {}\n    for i in classes:\n        minBases[i.base] = minBases.get(i.base, 0) + 1\n    return sorted(classes, key=lambda x: minBases[x], reverse=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Reduce a list of base classes to its ordered minime equivalent\n    \"\"\"\n    return sorted(classes, key=lambda x: x.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    classes = sorted(classes, key=lambda x: x.order)\n    return [c for c in classes if c.is_base()]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    if all:\n        return [(key, self.itemDescription(key)) for key in sorted(self.keys())]\n    else:\n        return [(key, self.itemDescription(key)) for key in self.keys()]\n", "def namesAndDescriptions(self, all=False):\n    names = ['Name', 'Description']\n    descriptions = [\n        'Brief description',\n        'The brief description of the object.']\n    if all:\n        return names + descriptions\n    return names + descriptions + [\n        'Description',\n        'Brief description',\n        'The description of the object.']\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return sorted(self.items(all))\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return tuple(self.items(all))\n", "def namesAndDescriptions(self, all=False):\n    names = ['title', 'description']\n    descrs = [\n        'The name of the item to be moved.',\n        'The description of the item to be moved.'\n        ]\n    if all:\n        names.append('item_id')\n        descrs.append('The description of the item to be moved.')\n    return names, descrs\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    if all:\n        return self.items()\n    return [(a, self.getProperty(a)) for a in sorted(self.keys())]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return AttributeInfo(\n        self, all).namesAndDescriptions()\n", "def namesAndDescriptions(self, all=False):\n    names = [\n        'type',\n       'required',\n        'default',\n        'label',\n        'enum',\n        'choices',\n        'help',\n        'default_value',\n        'dest',\n       'metavar',\n       'metavar_position',\n        'type_hint',\n    ]\n    desc = [\n        'The value that is required for the attribute \"%s\".' % name\n        for name in names\n    ]\n    return names, desc\n", "def namesAndDescriptions(self, all=False):\n    names = [\n        'Price',\n        'Ref Price',\n        'Date',\n        'Time',\n        'Volume',\n        'Brand',\n        'Asin',\n        'Color',\n        'Size',\n        'Attachments',\n        'Place',\n        'Notes',\n        'User Tags',\n        'Link',\n        'By Place',\n        'By Asin',\n        'By Color',\n        'By Size',\n        'By Attachments',\n        'By Place Notes',\n        'By Place User Tags',\n        'By Place Link',\n        'By Place Notes',\n        'By Place User',\n        'By Place Time',\n        'By Place Volume',\n        'By Place Brand',\n        'By Place Asin',\n    ", "def namesAndDescriptions(self, all=False):\n    names = [\n        'References',\n        'Types',\n        'Locations',\n        'Location Mappings',\n        'Places',\n        'Properties',\n        'Containers',\n        'Type Mappings',\n        'Transitions',\n        'Targets',\n        'Templates',\n        'Resources',\n        'UI Templates',\n    ]\n    descriptions = [\n        'References',\n        'Types',\n        'Locations',\n        'Location Mappings',\n        'Places',\n        'Properties',\n        'Containers',\n        'Type Mappings',\n        'Transitions',\n        'Targets',\n        'Resources',\n        'UI Templates',\n    ]\n    return names, descriptions\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return [(key, self.itemDescription(key)) for key in sorted(self.keys())]\n    else:\n        return [(key, self.itemDescription(key)) for key in self.keys()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = ['Name', 'Description']\n    descriptions = [\n        'Brief description',\n        'The brief description of the object.']\n    if all:\n        return names + descriptions\n    return names + descriptions + [\n        'Description',\n        'Brief description',\n        'The description of the object.']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return sorted(self.items(all))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return tuple(self.items(all))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = ['title', 'description']\n    descrs = [\n        'The name of the item to be moved.',\n        'The description of the item to be moved.'\n        ]\n    if all:\n        names.append('item_id')\n        descrs.append('The description of the item to be moved.')\n    return names, descrs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    if all:\n        return self.items()\n    return [(a, self.getProperty(a)) for a in sorted(self.keys())]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"Return attribute names and descriptions defined by interface.\"\"\"\n    return AttributeInfo(\n        self, all).namesAndDescriptions()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = [\n        'type',\n       'required',\n        'default',\n        'label',\n        'enum',\n        'choices',\n        'help',\n        'default_value',\n        'dest',\n       'metavar',\n       'metavar_position',\n        'type_hint',\n    ]\n    desc = [\n        'The value that is required for the attribute \"%s\".' % name\n        for name in names\n    ]\n    return names, desc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = [\n        'Price',\n        'Ref Price',\n        'Date',\n        'Time',\n        'Volume',\n        'Brand',\n        'Asin',\n        'Color',\n        'Size',\n        'Attachments',\n        'Place',\n        'Notes',\n        'User Tags',\n        'Link',\n        'By Place',\n        'By Asin',\n        'By Color',\n        'By Size',\n        'By Attachments',\n        'By Place Notes',\n        'By Place User Tags',\n        'By Place Link',\n        'By Place Notes',\n        'By Place User',\n        'By Place Time',\n        'By Place Volume',\n        'By Place Brand',\n        'By Place Asin',\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = [\n        'References',\n        'Types',\n        'Locations',\n        'Location Mappings',\n        'Places',\n        'Properties',\n        'Containers',\n        'Type Mappings',\n        'Transitions',\n        'Targets',\n        'Templates',\n        'Resources',\n        'UI Templates',\n    ]\n    descriptions = [\n        'References',\n        'Types',\n        'Locations',\n        'Location Mappings',\n        'Places',\n        'Properties',\n        'Containers',\n        'Type Mappings',\n        'Transitions',\n        'Targets',\n        'Resources',\n        'UI Templates',\n    ]\n    return names, descriptions\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return list(self.__dict__.keys())\n    return sorted(self.__dict__.keys())\n", "def names(self, all=False):\n    \"\"\" Return the attribute names defined by the interface. \"\"\"\n    names = []\n    for attr in self.attrs:\n        if all:\n            names.append(attr)\n        else:\n            if not attr.startswith('_'):\n                names.append(attr)\n    return names\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self._attrs\n    return [name for name, value in self._attrs.items() if isinstance(value, Attr)]\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self.__dict__.keys()\n    return [name for name in self.__dict__.keys() if name[0]!= '_']\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self._names\n    else:\n        return self._names + ['__name__', '__module__']\n", "def names(self, all=False):\n    \"\"\"\n    Return the attribute names defined by the interface.\n    \"\"\"\n    return [n for n in self._names(all)]\n", "def names(self, all=False):\n    \"\"\" Return the attribute names defined by the interface. \"\"\"\n    names = []\n    for attr in self.__dict__:\n        if attr[0]!= '_' and not attr[0].startswith('_') and attr[1]:\n            names.append(attr)\n    return names\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self.__dict__.keys()\n    return sorted(self.__dict__.keys())\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    names = []\n    for item in self.items(all=all):\n        names.append(item[0])\n    return names\n", "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    return self.__names__(all=all)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return list(self.__dict__.keys())\n    return sorted(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\" Return the attribute names defined by the interface. \"\"\"\n    names = []\n    for attr in self.attrs:\n        if all:\n            names.append(attr)\n        else:\n            if not attr.startswith('_'):\n                names.append(attr)\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self._attrs\n    return [name for name, value in self._attrs.items() if isinstance(value, Attr)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self.__dict__.keys()\n    return [name for name in self.__dict__.keys() if name[0]!= '_']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self._names\n    else:\n        return self._names + ['__name__', '__module__']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"\n    Return the attribute names defined by the interface.\n    \"\"\"\n    return [n for n in self._names(all)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\" Return the attribute names defined by the interface. \"\"\"\n    names = []\n    for attr in self.__dict__:\n        if attr[0]!= '_' and not attr[0].startswith('_') and attr[1]:\n            names.append(attr)\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    if all:\n        return self.__dict__.keys()\n    return sorted(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    names = []\n    for item in self.items(all=all):\n        names.append(item[0])\n    return names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names defined by the interface.\"\"\"\n    return self.__names__(all=all)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (tuple, list)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output)\n        output.append(item)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output=output)\n        if isinstance(item, (list, set, frozenset)):\n            item = list(item)\n        output.append(item)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, tuple):\n            _normalizeargs(x, output)\n        elif isinstance(x, Decl):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "def _normalizeargs(sequence, output=None):\n    return _normalizeargs(sequence, _normalize_decls(sequence, output=output))\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            output.append(_normalizeargs(arg.exprs, arg.type))\n        elif isinstance(arg, (tuple, list)):\n            output.append(normalize(arg, output=output))\n        else:\n            output.append(arg)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if not isinstance(sequence, (list, tuple)):\n        return sequence\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Decl):\n            _normalizeargs(item, output)\n        elif isinstance(item, (list, tuple)):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (tuple, list)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output)\n        output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output=output)\n        if isinstance(item, (list, set, frozenset)):\n            item = list(item)\n        output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, tuple):\n            _normalizeargs(x, output)\n        elif isinstance(x, Decl):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return _normalizeargs(sequence, _normalize_decls(sequence, output=output))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            output.append(_normalizeargs(arg.exprs, arg.type))\n        elif isinstance(arg, (tuple, list)):\n            output.append(normalize(arg, output=output))\n        else:\n            output.append(arg)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if not isinstance(sequence, (list, tuple)):\n        return sequence\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Decl):\n            _normalizeargs(item, output)\n        elif isinstance(item, (list, tuple)):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        from pyscf.nao.m_c_opt import C_Optimizations\n    except ImportError:\n        return False\n    return True\n", "def _c_optimizations_available():\n    try:\n        import pyoptsparse\n        return pyoptsparse\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    from operator import itemgetter\n    from numpy import array\n\n    # Only run if optimizations are available\n    if not ('scipy' in __import__('statistics').__file__):\n        return False\n\n    # Otherwise, try to import the C optimizations\n    try:\n        from numpy import ones\n        from scipy import optimize\n        return True\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from c_optimizations import glpk\n        return glpk\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations as coptimizations\n    except ImportError:\n        return False\n    return coptimizations\n", "def _c_optimizations_available():\n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    from ctypes import cdll\n    if not hasattr(cdll, \"LoadLibrary\"):\n        return False\n    try:\n        c_optimizations_module = cdll.LoadLibrary(\"libc_optimizations.so\")\n    except OSError:\n        return False\n    return c_optimizations_module\n", "def _c_optimizations_available():\n    try:\n        import C  # noqa: F401\n        return True\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from. import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        from pyscf.nao.m_c_opt import C_Optimizations\n    except ImportError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import pyoptsparse\n        return pyoptsparse\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from operator import itemgetter\n    from numpy import array\n\n    # Only run if optimizations are available\n    if not ('scipy' in __import__('statistics').__file__):\n        return False\n\n    # Otherwise, try to import the C optimizations\n    try:\n        from numpy import ones\n        from scipy import optimize\n        return True\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from c_optimizations import glpk\n        return glpk\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations as coptimizations\n    except ImportError:\n        return False\n    return coptimizations\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    from ctypes import cdll\n    if not hasattr(cdll, \"LoadLibrary\"):\n        return False\n    try:\n        c_optimizations_module = cdll.LoadLibrary(\"libc_optimizations.so\")\n    except OSError:\n        return False\n    return c_optimizations_module\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import C  # noqa: F401\n        return True\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from. import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    return not _use_c_impl() and ('PURE_PYTHON' in os.environ)\n", "def _should_attempt_c_optimizations():\n    if _use_c_impl:\n        return os.environ.get('PURE_PYTHON') == '1'\n    return False\n", "def _should_attempt_c_optimizations():\n    return (\n        # PyPy can be optimised on the following lines in a.py file\n        # https://github.com/pypy/pypy/pull/1414\n        'PURE_PYTHON' in os.environ and\n        # The \"optimize\" command is only available in the Python version < 3.7\n        'optimize' in sys.version.lower() and\n        # We don't want to enable the \"-D\" option on Windows\n        os.name!= 'nt' and\n        # The \"-U\" option is only available on Unix and Linux\n        'pypy' in sys.executable and\n        # The \"-F\" option is only available on Windows\n        'pypy2' in sys.executable and\n        # The \"-G\" option is only available on Windows\n        'pypy3' in sys.executable and\n        # The \"-l\" option is only available on Windows\n        'pypy3_compat' in sys.executable and\n        # The \"-b\" option is only available on Windows\n    ", "def _should_attempt_c_optimizations():\n    return (\n        getattr(os, \"environ\", {}).get(\"PURE_PYTHON\", \"\").startswith(\"pypy\")\n        and _use_c_impl()\n    )\n", "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\") and\n        _use_c_impl() and\n        (sys.version_info.major == 3 or sys.version_info.minor >= 6))\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get(\"PURE_PYTHON\") is not None and\n            _use_c_impl() and\n            _pypy_impl() is not None)\n", "def _should_attempt_c_optimizations():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and not ('_use_c_impl' in os.environ)\n    )\n", "def _should_attempt_c_optimizations():\n    return not _use_c_impl() or 'PURE_PYTHON' in os.environ\n", "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') and\n            'pypy' in sys.version.lower() and\n            'cython' in sys.version.lower() and\n            'c' in sys.version.lower())\n", "def _should_attempt_c_optimizations():\n    return (\n        _use_c_impl()\n        and \"purepy\" in os.environ\n        and \"CPython\" in os.environ[\"CPython\"]\n        and \"optimize_c\" in os.environ[\"optimize_c\"]\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    return not _use_c_impl() and ('PURE_PYTHON' in os.environ)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if _use_c_impl:\n        return os.environ.get('PURE_PYTHON') == '1'\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (\n        # PyPy can be optimised on the following lines in a.py file\n        # https://github.com/pypy/pypy/pull/1414\n        'PURE_PYTHON' in os.environ and\n        # The \"optimize\" command is only available in the Python version < 3.7\n        'optimize' in sys.version.lower() and\n        # We don't want to enable the \"-D\" option on Windows\n        os.name!= 'nt' and\n        # The \"-U\" option is only available on Unix and Linux\n        'pypy' in sys.executable and\n        # The \"-F\" option is only available on Windows\n        'pypy2' in sys.executable and\n        # The \"-G\" option is only available on Windows\n        'pypy3' in sys.executable and\n        # The \"-l\" option is only available on Windows\n        'pypy3_compat' in sys.executable and\n        # The \"-b\" option is only available on Windows\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (\n        getattr(os, \"environ\", {}).get(\"PURE_PYTHON\", \"\").startswith(\"pypy\")\n        and _use_c_impl()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # type: () -> bool\n    return (\n        os.environ.get(\"PURE_PYTHON\") and\n        _use_c_impl() and\n        (sys.version_info.major == 3 or sys.version_info.minor >= 6))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get(\"PURE_PYTHON\") is not None and\n            _use_c_impl() and\n            _pypy_impl() is not None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and not ('_use_c_impl' in os.environ)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return not _use_c_impl() or 'PURE_PYTHON' in os.environ\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (os.environ.get('PURE_PYTHON') and\n            'pypy' in sys.version.lower() and\n            'cython' in sys.version.lower() and\n            'c' in sys.version.lower())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    return (\n        _use_c_impl()\n        and \"purepy\" in os.environ\n        and \"CPython\" in os.environ[\"CPython\"]\n        and \"optimize_c\" in os.environ[\"optimize_c\"]\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    \n    \n    return set([\"-fopenmp\", \"-ffast-math\", \"-fno-sync\"])\n", "def _c_optimizations_ignored():\n    \n    \n    return ['-DCMAKE_BUILD_TYPE=Debug']\n", "def _c_optimizations_ignored():\n    \n    \n    return {\"c_opt\": (\"c_opt == 'c'\", {\"c\": \"c_opt == 'c'\"}),\n            \"c_opt_2\": (\"c_opt == 'c' or c_opt == 'c_opt'\")}\n", "def _c_optimizations_ignored():\n    \n    \n    return False\n", "def _c_optimizations_ignored():\n    return 0\n", "def _c_optimizations_ignored():\n    \n    \n    return False\n", "def _c_optimizations_ignored():\n    return False\n", "def _c_optimizations_ignored():\n    \n    \n    return {'bzip2': ['-z'],\n            'gzip': ['--exclude', '*.gz'],\n            'pigz': ['--exclude', '*.pigz'],\n            'bz2': ['--exclude', '*.bz2'],\n            'lz4': ['--exclude', '*.lz4'],\n            'zip': ['--exclude', '*.zip'],\n            'lsb': ['--exclude', '*.lsb'],\n            'lz4': ['--exclude', '*.lz4'],\n            'xz': ['--exclude', '*.xz'],\n            'xz': ['--exclude', '*.xz']}\n", "def _c_optimizations_ignored():\n    \n    \n    return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return set([\"-fopenmp\", \"-ffast-math\", \"-fno-sync\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return ['-DCMAKE_BUILD_TYPE=Debug']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return {\"c_opt\": (\"c_opt == 'c'\", {\"c\": \"c_opt == 'c'\"}),\n            \"c_opt_2\": (\"c_opt == 'c' or c_opt == 'c_opt'\")}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return {'bzip2': ['-z'],\n            'gzip': ['--exclude', '*.gz'],\n            'pigz': ['--exclude', '*.pigz'],\n            'bz2': ['--exclude', '*.bz2'],\n            'lz4': ['--exclude', '*.lz4'],\n            'zip': ['--exclude', '*.zip'],\n            'lsb': ['--exclude', '*.lsb'],\n            'lz4': ['--exclude', '*.lz4'],\n            'xz': ['--exclude', '*.xz'],\n            'xz': ['--exclude', '*.xz']}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    return PURE_PYTHON and (sys.version_info[0] >= 3)\n", "def _c_optimizations_required():\n    return 'pure_python' in os.environ\n", "def _c_optimizations_required():\n    return PURE_PYTHON and \"c\" in sys.modules\n", "def _c_optimizations_required():\n    return (\n        PURE_PYTHON and\n        (sys.version_info < (3, 6) or (sys.version_info >= (3, 7) and sys.hexversion < 0x02060000))\n    )\n", "def _c_optimizations_required():\n    return (PURE_PYTHON and sys.version_info < (3, 0))\n", "def _c_optimizations_required():\n    return (\n        _pure_python() and\n        _python_version() >= (3, 7)\n    )\n", "def _c_optimizations_required():\n    return PURE_PYTHON and (sys.version_info < (3, 0) or sys.flags.optimize_c)\n", "def _c_optimizations_required():\n    return (\n        'PURE_PYTHON' in os.environ\n        or 'C_OPT' in os.environ\n        or 'C_OPT_OPT' in os.environ\n    )\n", "def _c_optimizations_required():\n    return bool(os.environ.get(\"PURE_PYTHON\", \"0\"))\n", "def _c_optimizations_required():\n    return getattr(settings, 'PURE_PYTHON', False)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON and (sys.version_info[0] >= 3)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return 'pure_python' in os.environ\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON and \"c\" in sys.modules\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return (\n        PURE_PYTHON and\n        (sys.version_info < (3, 6) or (sys.version_info >= (3, 7) and sys.hexversion < 0x02060000))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return (PURE_PYTHON and sys.version_info < (3, 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return (\n        _pure_python() and\n        _python_version() >= (3, 7)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return PURE_PYTHON and (sys.version_info < (3, 0) or sys.flags.optimize_c)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return (\n        'PURE_PYTHON' in os.environ\n        or 'C_OPT' in os.environ\n        or 'C_OPT_OPT' in os.environ\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return bool(os.environ.get(\"PURE_PYTHON\", \"0\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return getattr(settings, 'PURE_PYTHON', False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self.bins = {}\n", "def reset(self):\n    self._values = {}\n    self._bins = {}\n    self._total = 0\n", "def reset(self):\n    self._histogram = {}\n    self._current_bin_index = {}\n    self._current_value = None\n", "def reset(self):\n    self._bins = {}\n", "def reset(self):\n    self.histogram = {}\n", "def reset(self):\n    self._histogram = {}\n    self._bins = []\n", "def reset(self):\n    self._hist = {}\n", "def reset(self):\n    self.histogram = {}\n    self.make_bins()\n    return self\n", "def reset(self):\n    self._histogram = {}\n", "def reset(self):\n    self._histogram = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self.bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._values = {}\n    self._bins = {}\n    self._total = 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._histogram = {}\n    self._current_bin_index = {}\n    self._current_value = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.histogram = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._histogram = {}\n    self._bins = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.histogram = {}\n    self.make_bins()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._histogram = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._histogram = {}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from warnings import warn\n    warn(\"to_csv is deprecated, use lena.output.ToCSV\", DeprecationWarning)\n    if header is None:\n        header = []\n    return header + [str(p) for p in self]\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output._graph import ToCSV\n    return ToCSV(separator, header)(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.to_csv import ToCSV\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use output.ToCSV()\", DeprecationWarning)\n    return output.ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_csv([[str(x) for x in row] for row in self], separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).write(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated, use to_csv(separator, header).\", DeprecationWarning)\n    return to_csv(separator, header)(self)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from warnings import warn\n    warn(\"to_csv is deprecated, use lena.output.ToCSV\", DeprecationWarning)\n    if header is None:\n        header = []\n    return header + [str(p) for p in self]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output._graph import ToCSV\n    return ToCSV(separator, header)(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.to_csv import ToCSV\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use output.ToCSV()\", DeprecationWarning)\n    return output.ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_csv([[str(x) for x in row] for row in self], separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).write(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated, use to_csv(separator, header).\", DeprecationWarning)\n    return to_csv(separator, header)(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        Name of the coordinate.\n\n    Returns\n    -------\n    list of int\n        Error indices corresponding to a coordinate.\n    \"\"\"\n    return self._coord_to_index[coord_name]['err']\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        name of coordinate\n    \"\"\"\n    if coord_name == 'time':\n        return [0, 2]\n    elif coord_name == 'latitude':\n        return [1, 3]\n    elif coord_name == 'longitude':\n        return [2, 4]\n    elif coord_name == 'altitude':\n        return [5, 6]\n    elif coord_name =='sea_level_temperature':\n        return [7, 8]\n    elif coord_name =='sea_level_pressure':\n        return [9, 10]\n    elif coord_name == 'depth':\n        return [11, 12]\n    elif coord_name =='sea_level_gravity':\n        return [13, 14]\n    elif coord_name =='sea_level_temperature_error':\n        return [15, 16]\n    elif coord_name =='sea_level_pressure_erro", "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    if coord_name == 'x':\n        return [0, 1, 2, 3, 4]\n    elif coord_name == 'y':\n        return [0, 2, 3, 4, 1]\n    elif coord_name == 'z':\n        return [0, 3, 4, 1, 2]\n    else:\n        return [0, 4, 1, 2, 3]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        name of the coordinate\n    \"\"\"\n    return self.coord_system.get_err_indices(coord_name)\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    return self._coord_errors[coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    return [i for i, v in enumerate(self.coord_dims(\"point\")) if v == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    return {\"x\": 0, \"y\": 1, \"z\": 2}[coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    if coord_name == \"time\":\n        return [0, 1, 2, 3, 4, 5]\n    elif coord_name == \"event_id\":\n        return [0, 2, 3, 4, 5, 6]\n    else:\n        return [0, 1, 2, 3, 4, 5]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    if coord_name == 'x':\n        return self._x_error_indices\n    elif coord_name == 'y':\n        return self._y_error_indices\n    elif coord_name == 'z':\n        return self._z_error_indices\n    else:\n        return self._xyz_error_indices\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    return self._coord_name_to_err_indices[coord_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        Name of the coordinate.\n\n    Returns\n    -------\n    list of int\n        Error indices corresponding to a coordinate.\n    \"\"\"\n    return self._coord_to_index[coord_name]['err']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        name of coordinate\n    \"\"\"\n    if coord_name == 'time':\n        return [0, 2]\n    elif coord_name == 'latitude':\n        return [1, 3]\n    elif coord_name == 'longitude':\n        return [2, 4]\n    elif coord_name == 'altitude':\n        return [5, 6]\n    elif coord_name =='sea_level_temperature':\n        return [7, 8]\n    elif coord_name =='sea_level_pressure':\n        return [9, 10]\n    elif coord_name == 'depth':\n        return [11, 12]\n    elif coord_name =='sea_level_gravity':\n        return [13, 14]\n    elif coord_name =='sea_level_temperature_error':\n        return [15, 16]\n    elif coord_name =='sea_level_pressure_erro", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    if coord_name == 'x':\n        return [0, 1, 2, 3, 4]\n    elif coord_name == 'y':\n        return [0, 2, 3, 4, 1]\n    elif coord_name == 'z':\n        return [0, 3, 4, 1, 2]\n    else:\n        return [0, 4, 1, 2, 3]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n\n    Parameters\n    ----------\n    coord_name : str\n        name of the coordinate\n    \"\"\"\n    return self.coord_system.get_err_indices(coord_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    return self._coord_errors[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    return [i for i, v in enumerate(self.coord_dims(\"point\")) if v == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    return {\"x\": 0, \"y\": 1, \"z\": 2}[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Get error indices corresponding to a coordinate.\n    \"\"\"\n    if coord_name == \"time\":\n        return [0, 1, 2, 3, 4, 5]\n    elif coord_name == \"event_id\":\n        return [0, 2, 3, 4, 5, 6]\n    else:\n        return [0, 1, 2, 3, 4, 5]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    if coord_name == 'x':\n        return self._x_error_indices\n    elif coord_name == 'y':\n        return self._y_error_indices\n    elif coord_name == 'z':\n        return self._z_error_indices\n    else:\n        return self._xyz_error_indices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Get error indices corresponding to a coordinate.\"\"\"\n    return self._coord_name_to_err_indices[coord_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.value.update({\"error\": {\"x_low\": {\"index\": 0}}})\n", "def _update_context(self, context):\n    context.value.update({\"error\": context.error})\n", "def _update_context(self, context):\n    context.error = []\n    if self.error is not None:\n        for i, e in enumerate(self.error):\n            context.value.append({\"x_low\": {\"index\": i}})\n            context.value.append(e)\n", "def _update_context(self, context):\n    context.error = []\n", "def _update_context(self, context):\n    context.error = []\n    for k, v in self._error.items():\n        context.error.append({\"x_low\": v[\"index\"], \"y\": k})\n    return context\n", "def _update_context(self, context):\n    context['error'].append({'index': self._index})\n    return context\n", "def _update_context(self, context):\n    context.value.update({'error': {}})\n    for e, ei in zip(self._error, self._error_indices):\n        context.value['error'].update({e: {'x_low': {ei: e.x_low}}})\n", "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value['x'] = {}\n    context.value['y'] = {}\n    context.value['z'] = {}\n    context.value['error'] = {}\n    context.value['x_low'] = {}\n    context.value['y_low'] = {}\n    context.value['z_low'] = {}\n    context.value['x']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x_low']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x']['value'] = 0\n    context.value['y']['value'] = 0\n    context.value['z']['value'] = 0\n    context.value['error']['value'] = 0\n", "def _update_context(self, context):\n    context.error = []\n", "def _update_context(self, context):\n    context.error = []\n    for k, v in self.value.items():\n        if k == \"x\":\n            context.value[k] = v.x_low\n        elif k == \"y\":\n            context.value[k] = v.y_low\n        elif k == \"z\":\n            context.value[k] = v.z_low\n        else:\n            context.value[k] = v.error\n        context.error.append(k)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.value.update({\"error\": {\"x_low\": {\"index\": 0}}})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value.update({\"error\": context.error})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    if self.error is not None:\n        for i, e in enumerate(self.error):\n            context.value.append({\"x_low\": {\"index\": i}})\n            context.value.append(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for k, v in self._error.items():\n        context.error.append({\"x_low\": v[\"index\"], \"y\": k})\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context['error'].append({'index': self._index})\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value.update({'error': {}})\n    for e, ei in zip(self._error, self._error_indices):\n        context.value['error'].update({e: {'x_low': {ei: e.x_low}}})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value['x'] = {}\n    context.value['y'] = {}\n    context.value['z'] = {}\n    context.value['error'] = {}\n    context.value['x_low'] = {}\n    context.value['y_low'] = {}\n    context.value['z_low'] = {}\n    context.value['x']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x_low']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x']['value'] = 0\n    context.value['y']['value'] = 0\n    context.value['z']['value'] = 0\n    context.value['error']['value'] = 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for k, v in self.value.items():\n        if k == \"x\":\n            context.value[k] = v.x_low\n        elif k == \"y\":\n            context.value[k] = v.y_low\n        elif k == \"z\":\n            context.value[k] = v.z_low\n        else:\n            context.value[k] = v.error\n        context.error.append(k)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return ((edges[1:] + edges[:-1]) * (edges[2:] - edges[:-2]) \n            / (bins[1:] - bins[:-1]))\n", "def integral(bins, edges):\n    return 0.5 * (bins[1:] + bins[:-1])\n", "def integral(bins, edges):\n    return (edges[1] - edges[0]) * (bins[1] + bins[0]) / 2.0\n", "def integral(bins, edges):\n    return 0.5 * (bins[1:] + bins[:-1])\n", "def integral(bins, edges):\n    return (bins[1]-bins[0])/(edges[1]-edges[0])\n", "def integral(bins, edges):\n    return (edges[1]-edges[0])/(bins[1]-bins[0])\n", "def integral(bins, edges):\n    return edges[0] * (bins[1] - bins[0]) + edges[-1] * (bins[-1] - bins[-2])\n", "def integral(bins, edges):\n    return ((edges[1] - edges[0]) * bins[1] + edges[0]) * (bins[-1] - edges[-2]) / (edges[-2] - edges[-1])\n", "def integral(bins, edges):\n    return (edges[1] - edges[0]) * (bins[1] + bins[0]) / 2.\n", "def integral(bins, edges):\n    return (edges[1] - edges[0]) / (bins[1] - bins[0])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return ((edges[1:] + edges[:-1]) * (edges[2:] - edges[:-2]) \n            / (bins[1:] - bins[:-1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return 0.5 * (bins[1:] + bins[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (edges[1] - edges[0]) * (bins[1] + bins[0]) / 2.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return 0.5 * (bins[1:] + bins[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (bins[1]-bins[0])/(edges[1]-edges[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (edges[1]-edges[0])/(bins[1]-bins[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return edges[0] * (bins[1] - bins[0]) + edges[-1] * (bins[-1] - bins[-2])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return ((edges[1] - edges[0]) * bins[1] + edges[0]) * (bins[-1] - edges[-2]) / (edges[-2] - edges[-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (edges[1] - edges[0]) * (bins[1] + bins[0]) / 2.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (edges[1] - edges[0]) / (bins[1] - bins[0])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or len(seq) < 1:\n        return False\n    return any(isinstance(x, Source) for x in seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and any(isinstance(x, FillRequest) and not isinstance(x, Source) for x in seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and not (\n        isinstance(seq, SourceSeq) or seq.is_empty())\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and any(isinstance(x, Source) for x in seq)\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or seq is None or not seq.is_source()\n", "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or (isinstance(seq, etree._Element) and seq.tag == 'FillRequest') and\n            not (isinstance(seq, SourceSequence) and seq.source))\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    s = seq.find('Source')\n    if s is None:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or seq.source is not None:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or not seq.sources:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and seq.is_source()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or len(seq) < 1:\n        return False\n    return any(isinstance(x, Source) for x in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and any(isinstance(x, FillRequest) and not isinstance(x, Source) for x in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and not (\n        isinstance(seq, SourceSeq) or seq.is_empty())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and any(isinstance(x, Source) for x in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) or seq is None or not seq.is_source()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return (isinstance(seq, FillRequest) or (isinstance(seq, etree._Element) and seq.tag == 'FillRequest') and\n            not (isinstance(seq, SourceSequence) and seq.source))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest):\n        return False\n    s = seq.find('Source')\n    if s is None:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or seq.source is not None:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, FillRequest) or not seq.sources:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return isinstance(seq, FillRequest) and seq.is_source()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            'fill' in obj and\n           'request' in obj)\n", "def is_fill_request_el(obj):\n    return (\n        isinstance(obj, dict) and\n        'fill' in obj and\n       'request' in obj\n    )\n", "def is_fill_request_el(obj):\n    return ('fill' in dir(obj) and\n           'request' in dir(obj.fill) and\n            isinstance(obj.fill.request, Request))\n", "def is_fill_request_el(obj):\n    return (\n        'fill' in dir(obj) and\n       'request' in dir(obj.fill) and\n        'fill_request' in dir(obj.fill.request)\n    )\n", "def is_fill_request_el(obj):\n    return (\n        'fill' in obj and\n       'request' in obj\n    )\n", "def is_fill_request_el(obj):\n    \"\"\" Object contains executable methods 'fill' and'request'. \"\"\"\n    return (obj['name'] == 'fill' and\n            obj['classname'] == 'RequestResponse' and\n            obj['method'] == 'POST')\n", "def is_fill_request_el(obj):\n    \n    \n    return (isinstance(obj, dict) and\n            obj.get('method') == 'fill' and\n            obj.get('params') and\n            obj.get('data'))\n", "def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            obj.get('type') == 'fill' and\n            obj.get('method') =='request')\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Object contains executable methods 'fill' and'request'.\n    \"\"\"\n    return (\n        obj.tag == 'fill' and\n        isinstance(obj, Element) and\n        obj.get('method') =='request'\n    )\n", "def is_fill_request_el(obj):\n    \n    \n    return (\n        obj.tag == 'fill' and\n        obj.attrib['method'] =='request'\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            'fill' in obj and\n           'request' in obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        isinstance(obj, dict) and\n        'fill' in obj and\n       'request' in obj\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return ('fill' in dir(obj) and\n           'request' in dir(obj.fill) and\n            isinstance(obj.fill.request, Request))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        'fill' in dir(obj) and\n       'request' in dir(obj.fill) and\n        'fill_request' in dir(obj.fill.request)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        'fill' in obj and\n       'request' in obj\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\" Object contains executable methods 'fill' and'request'. \"\"\"\n    return (obj['name'] == 'fill' and\n            obj['classname'] == 'RequestResponse' and\n            obj['method'] == 'POST')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \n    \n    return (isinstance(obj, dict) and\n            obj.get('method') == 'fill' and\n            obj.get('params') and\n            obj.get('data'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (isinstance(obj, dict) and\n            obj.get('type') == 'fill' and\n            obj.get('method') =='request')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Object contains executable methods 'fill' and'request'.\n    \"\"\"\n    return (\n        obj.tag == 'fill' and\n        isinstance(obj, Element) and\n        obj.get('method') =='request'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \n    \n    return (\n        obj.tag == 'fill' and\n        obj.attrib['method'] =='request'\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    return (\n        hasattr(obj, \"run\")\n        and callable(obj.run)\n        and not is_run_el(obj.run)\n    )\n", "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith('run')\n", "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith('run')\n", "def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith(\"run\")\n", "def is_run_el(obj):\n    return 'run' in dir(obj)\n", "def is_run_el(obj):\n    return isinstance(obj, dict) and obj.get('class_name') == 'Run'\n", "def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    if hasattr(obj, \"run\"):\n        return True\n    else:\n        return False\n", "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    \n    \n    return isinstance(obj, (types.FunctionType, types.MethodType))\n", "def is_run_el(obj):\n    return (hasattr(obj, 'run') and callable(obj.run))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    return (\n        hasattr(obj, \"run\")\n        and callable(obj.run)\n        and not is_run_el(obj.run)\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith('run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith('run')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    return isinstance(obj, types.FunctionType) and obj.__name__.endswith(\"run\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return 'run' in dir(obj)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return isinstance(obj, dict) and obj.get('class_name') == 'Run'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Object contains executable method 'run'.\n    \"\"\"\n    if hasattr(obj, \"run\"):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    \"\"\" Object contains executable method 'run'. \"\"\"\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    \n    \n    return isinstance(obj, (types.FunctionType, types.MethodType))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    return (hasattr(obj, 'run') and callable(obj.run))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            'compute' in dir(obj.fill) and\n            isinstance(obj.fill.compute, type))\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Object contains executable methods 'fill' and 'compute'.\n    \"\"\"\n    return (\n        'fill' in dir(obj) and\n        'compute' in dir(obj.fill) and\n        is_el_compute(obj.fill) and\n        is_el_compute(obj.compute)\n    )\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"@module\") == \"top\" and obj.get(\"@class\") == \"FillComputeEl\"\n", "def is_fill_compute_el(obj):\n    return (\n        'fill' in dir(obj) and\n        hasattr(obj, 'compute') and\n        hasattr(obj.compute, '__call__')\n    )\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and hasattr(obj, 'compute'))\n", "def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            isinstance(obj.fill, collections.Callable) and\n            isinstance(obj.compute, collections.Callable))\n", "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and \"fill\" in obj and \"compute\" in obj\n", "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, dict) and\n        'fill' in obj and\n        'compute' in obj\n    )\n", "def is_fill_compute_el(obj):\n    return (\n        (obj.__class__.__name__ == 'Fill') and\n        (obj.fill.__class__.__name__ == 'Compute'))\n", "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, FillCompute) and obj.method == \"fill\" and\n        obj.compute is True)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            'compute' in dir(obj.fill) and\n            isinstance(obj.fill.compute, type))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Object contains executable methods 'fill' and 'compute'.\n    \"\"\"\n    return (\n        'fill' in dir(obj) and\n        'compute' in dir(obj.fill) and\n        is_el_compute(obj.fill) and\n        is_el_compute(obj.compute)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and obj.get(\"@module\") == \"top\" and obj.get(\"@class\") == \"FillComputeEl\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        'fill' in dir(obj) and\n        hasattr(obj, 'compute') and\n        hasattr(obj.compute, '__call__')\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and hasattr(obj, 'compute'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return ('fill' in dir(obj) and\n            isinstance(obj.fill, collections.Callable) and\n            isinstance(obj.compute, collections.Callable))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return isinstance(obj, dict) and \"fill\" in obj and \"compute\" in obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, dict) and\n        'fill' in obj and\n        'compute' in obj\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        (obj.__class__.__name__ == 'Fill') and\n        (obj.fill.__class__.__name__ == 'Compute'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        isinstance(obj, FillCompute) and obj.method == \"fill\" and\n        obj.compute is True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in d1.items():\n        if k not in d2 or d2[k]!= v:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or d1[k]!= v:\n            d[k] = v\n    return d\n", "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n    result = {}\n    for key, value in d1.items():\n        if key in d2 and key not in result:\n            result[key] = intersection(value, d2[key], level + 1)\n    return result\n", "def difference(d1, d2, level=-1):\n    d = {}\n    if level == -1:\n        level = max(d1, d2)\n    for k, v in d1.items():\n        if k not in d2 or v!= d2[k]:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or v!= d1[k]:\n            d[k] = v\n    return d\n", "def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in six.iteritems(d1):\n        if k not in d2 or v is not d2[k]:\n            d[k] = v\n    for k, v in six.iteritems(d2):\n        if k not in d1 or v is not d1[k]:\n            d[k] = v\n    if level == -1:\n        return d\n    return intersection(d, d1, level+1)\n", "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() + d2.keys())\n    result = {}\n    for k, v in d1.items():\n        if k not in d2:\n            result[k] = v\n        elif v!= d2[k]:\n            result[k] = intersection(d1[k], d2[k], level + 1)\n    return result\n", "def difference(d1, d2, level=-1):\n    d1 = {k: v for k, v in d1.items() if k not in d2}\n    return intersection(d1, d2, level) if level else d1\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for k, v in list(d1.items()):\n        if k not in d2:\n            d1[k] = v\n        elif d1[k]!= v:\n            result[level] = d1[k]\n            d1[k] = v\n            d2[k] = v\n            if level < 0:\n                d1 = dict((k, v) for k, v in d1.items())\n                d2 = dict((k, v) for k, v in d2.items())\n            level -= 1\n    return result\n", "def difference(d1, d2, level=-1):\n    d2 = d2 or {}\n    return _difference(d1, d2, level)\n\n\n#\n# Context managers\n#\n", "def difference(d1, d2, level=-1):\n    if not level:\n        return dict((k, v) for k, v in dict(d1).items() if k not in d2)\n    return dict((k, v) for k, v in dict(d1).items() if k in d2 and not v or (\n                                                                    level == 1 and k not in d2))\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for key, value in d1.items():\n        if key in d2 and value == d2[key]:\n            continue\n        if key not in d2 and value == d1[key]:\n            continue\n        if key in d1 and value == d1[key]:\n            level -= 1\n        result[key] = value\n    return result or d2 or d1\n\n\n# Functions related to serialization\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in d1.items():\n        if k not in d2 or d2[k]!= v:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or d1[k]!= v:\n            d[k] = v\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not d1:\n        return d2\n    if not d2:\n        return d1\n    result = {}\n    for key, value in d1.items():\n        if key in d2 and key not in result:\n            result[key] = intersection(value, d2[key], level + 1)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    if level == -1:\n        level = max(d1, d2)\n    for k, v in d1.items():\n        if k not in d2 or v!= d2[k]:\n            d[k] = v\n    for k, v in d2.items():\n        if k not in d1 or v!= d1[k]:\n            d[k] = v\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    for k, v in six.iteritems(d1):\n        if k not in d2 or v is not d2[k]:\n            d[k] = v\n    for k, v in six.iteritems(d2):\n        if k not in d1 or v is not d1[k]:\n            d[k] = v\n    if level == -1:\n        return d\n    return intersection(d, d1, level+1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level < 0:\n        level = max(d1.keys() + d2.keys())\n    result = {}\n    for k, v in d1.items():\n        if k not in d2:\n            result[k] = v\n        elif v!= d2[k]:\n            result[k] = intersection(d1[k], d2[k], level + 1)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d1 = {k: v for k, v in d1.items() if k not in d2}\n    return intersection(d1, d2, level) if level else d1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for k, v in list(d1.items()):\n        if k not in d2:\n            d1[k] = v\n        elif d1[k]!= v:\n            result[level] = d1[k]\n            d1[k] = v\n            d2[k] = v\n            if level < 0:\n                d1 = dict((k, v) for k, v in d1.items())\n                d2 = dict((k, v) for k, v in d2.items())\n            level -= 1\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d2 = d2 or {}\n    return _difference(d1, d2, level)\n\n\n#\n# Context managers\n#\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if not level:\n        return dict((k, v) for k, v in dict(d1).items() if k not in d2)\n    return dict((k, v) for k, v in dict(d1).items() if k in d2 and not v or (\n                                                                    level == 1 and k not in d2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for key, value in d1.items():\n        if key in d2 and value == d2[key]:\n            continue\n        if key not in d2 and value == d1[key]:\n            continue\n        if key in d1 and value == d1[key]:\n            level -= 1\n        result[key] = value\n    return result or d2 or d1\n\n\n# Functions related to serialization\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] += weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill history at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._fill[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "def fill(self, coord, weight=1):\n    self._fill(coord, weight)", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill history at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._fill[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._fill(coord, weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    for label in labels:\n        if not _REGEX.match(label):\n            raise ValidationError(f'Label key {label!r} does not match the regex {_REGEX}')\n", "def _validate_labels(labels):\n    for key, errors in list(labels.items()):\n        if not re.match(r\"^(?!$)[a-zA-Z_][\\w\\$\\-\\.]*[$$](?!$)$\", key):\n            raise ValidationError(\n                '{} labels must match the regular expressions {}'.format(\n                    key, ', '.join(f'{k}: {v}' for k, v in errors.items())\n                )\n            )\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not re.match(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\", key):\n            raise ValidationError(\n                {key: '{} key does not match regex [a-zA-Z0-9_]*$'.format(key)},\n            )\n        if not isinstance(value, list):\n            raise ValidationError(\n                {key: '{} value is not a list'.format(key)},\n            )\n        for error in value:\n            if not re.match(r\"^[a-zA-Z0-9_][a-zA-Z0-9_]*$\", error):\n                raise ValidationError(\n                    {key: '{} value does not match regex [a-zA-Z0-9_]*$'.format(key)},\n                )\n", "def _validate_labels(labels):\n    for key, values in list(labels.items()):\n        if not (isinstance(key, str) and isinstance(values, list)):\n            raise ValidationError(\n                'expected string or bytes-like object for label key and values')\n\n        for value in values:\n            if not re.match(r'^(?![$])(.*)$', value):\n                raise ValidationError(\n                    'expected string or bytes-like object for label key and values')\n", "def _validate_labels(labels):\n    for label in labels:\n        if label not in labels:\n            raise ValidationError(\n                '{} keys do not match the regular expressions'.format(\n                    label\n                )\n            )\n", "def _validate_labels(labels):\n    errors = []\n    for key, value in list(labels.items()):\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            errors.append({'key': key, 'value': 'Invalid label key'})\n        elif not isinstance(value, list):\n            errors.append({'key': key, 'value': 'Invalid label value'})\n    if errors:\n        raise ValidationError(errors)\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            raise ValidationError('{} key does not match regex list'.format(key))\n        if not isinstance(value, list):\n            raise ValidationError('{} value is not a list'.format(key))\n        if len(set(value)) > 1:\n            raise ValidationError('{} value contains multiple items'.format(key))\n", "def _validate_labels(labels):\n    for key, regex in list(labels.items()):\n        if not re.match(regex, key):\n            raise ValidationError(\n                'Label key \"{}\" does not match regex \"{}\"'.format(key, regex))\n", "def _validate_labels(labels):\n    for key in labels:\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            raise ValidationError(\n                '{} keys and values do not match regular expressions.'.format(\n                    key))\n", "def _validate_labels(labels):\n    for key, values in list(labels.items()):\n        if not isinstance(key, str):\n            raise ValidationError(\"Label key '{}' is not a string\".format(key))\n        for value in values:\n            if not re.match(value, key):\n                raise ValidationError(\"Label key '{}' does not match regular expression\".format(key))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    for label in labels:\n        if not _REGEX.match(label):\n            raise ValidationError(f'Label key {label!r} does not match the regex {_REGEX}')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, errors in list(labels.items()):\n        if not re.match(r\"^(?!$)[a-zA-Z_][\\w\\$\\-\\.]*[$$](?!$)$\", key):\n            raise ValidationError(\n                '{} labels must match the regular expressions {}'.format(\n                    key, ', '.join(f'{k}: {v}' for k, v in errors.items())\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not re.match(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\", key):\n            raise ValidationError(\n                {key: '{} key does not match regex [a-zA-Z0-9_]*$'.format(key)},\n            )\n        if not isinstance(value, list):\n            raise ValidationError(\n                {key: '{} value is not a list'.format(key)},\n            )\n        for error in value:\n            if not re.match(r\"^[a-zA-Z0-9_][a-zA-Z0-9_]*$\", error):\n                raise ValidationError(\n                    {key: '{} value does not match regex [a-zA-Z0-9_]*$'.format(key)},\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in list(labels.items()):\n        if not (isinstance(key, str) and isinstance(values, list)):\n            raise ValidationError(\n                'expected string or bytes-like object for label key and values')\n\n        for value in values:\n            if not re.match(r'^(?![$])(.*)$', value):\n                raise ValidationError(\n                    'expected string or bytes-like object for label key and values')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for label in labels:\n        if label not in labels:\n            raise ValidationError(\n                '{} keys do not match the regular expressions'.format(\n                    label\n                )\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    errors = []\n    for key, value in list(labels.items()):\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            errors.append({'key': key, 'value': 'Invalid label key'})\n        elif not isinstance(value, list):\n            errors.append({'key': key, 'value': 'Invalid label value'})\n    if errors:\n        raise ValidationError(errors)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            raise ValidationError('{} key does not match regex list'.format(key))\n        if not isinstance(value, list):\n            raise ValidationError('{} value is not a list'.format(key))\n        if len(set(value)) > 1:\n            raise ValidationError('{} value contains multiple items'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, regex in list(labels.items()):\n        if not re.match(regex, key):\n            raise ValidationError(\n                'Label key \"{}\" does not match regex \"{}\"'.format(key, regex))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key in labels:\n        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', key):\n            raise ValidationError(\n                '{} keys and values do not match regular expressions.'.format(\n                    key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, values in list(labels.items()):\n        if not isinstance(key, str):\n            raise ValidationError(\"Label key '{}' is not a string\".format(key))\n        for value in values:\n            if not re.match(value, key):\n                raise ValidationError(\"Label key '{}' does not match regular expression\".format(key))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    return re.compile(r\"^(.+?)/(.+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^((?!https://)|(?<=http://))((?:\\.(?!com)(?!\\.))*)(\\w{3})(\\.(?!com)(?:\\.(?!org)(?:\\.(?!email)(?:\\.(?!\\d{3})(?:\\d{4}))?)?)?)(\\.(?!\\w{3})(?:\\.(?!\\d{3})(?:\\d{4}))?)(\\w{3})(\\.(?!\\d{3})(?:\\d{4}))?$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)/(?P<project_id>.+)/(?P<region>.+)/(?P<zone>.+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(.*\\/)?(idp|sso)(\\/.*)?$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)/(?P<resource_type>.+)/\"\n                      r\"(?P<resource_version>.+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?:(?:(?P<resource_name>.+)/)?(?P<resource_name_version>\\d+\\.)?(?P<resource_name_number>\\d+))(?:/(?P<resource_name>.+))?$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"(?P<name>.+)$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^(?:(?:[a-z]|[A-Z])\\w*\\d{4})(?:/(?:[a-z]|[A-Z])\\w*)?$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"^[a-zA-Z0-9\\-]{1,63}$\")\n", "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:(?:(?:aws)|(?:iam)|(?:kinesis))\\.(?:autoscaling-)?(?:(?:a|b)\\.(?:i-){4})\\.(?:auto-)?(?:(?:a|b)\\.(?:i-){4})){1}$\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(.+?)/(.+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^((?!https://)|(?<=http://))((?:\\.(?!com)(?!\\.))*)(\\w{3})(\\.(?!com)(?:\\.(?!org)(?:\\.(?!email)(?:\\.(?!\\d{3})(?:\\d{4}))?)?)?)(\\.(?!\\w{3})(?:\\.(?!\\d{3})(?:\\d{4}))?)(\\w{3})(\\.(?!\\d{3})(?:\\d{4}))?$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)/(?P<project_id>.+)/(?P<region>.+)/(?P<zone>.+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(.*\\/)?(idp|sso)(\\/.*)?$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?P<resource_name>.+)/(?P<resource_type>.+)/\"\n                      r\"(?P<resource_version>.+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?:(?:(?P<resource_name>.+)/)?(?P<resource_name_version>\\d+\\.)?(?P<resource_name_number>\\d+))(?:/(?P<resource_name>.+))?$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"(?P<name>.+)$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^(?:(?:[a-z]|[A-Z])\\w*\\d{4})(?:/(?:[a-z]|[A-Z])\\w*)?$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"^[a-zA-Z0-9\\-]{1,63}$\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return re.compile(r\"(?i)^(?:(?:(?:aws)|(?:iam)|(?:kinesis))\\.(?:autoscaling-)?(?:(?:a|b)\\.(?:i-){4})\\.(?:auto-)?(?:(?:a|b)\\.(?:i-){4})){1}$\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    return re.match(REGEX, value)\n", "def validate_value(value):\n    regular_expression = _REGEX\n    if _REGEX_PATTERN_OR_NONE is not None:\n        regular_expression = _REGEX_PATTERN_OR_NONE\n    if value is None:\n        return\n    if not regular_expression.match(value):\n        raise ValidationError('Not a valid value.')\n", "def validate_value(value):\n    return re.match(REGEX, value) is not None\n", "def validate_value(value):\n    return re.match(VALIDATE, value) is not None\n", "def validate_value(value):\n    return _re.match(_REGEX, value)\n", "def validate_value(value):\n    regex = r'^(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\Z'\n    return re.match(regex, value) is not None\n", "def validate_value(value):\n    reg = \"^(?!(?:\\d)\\d)[a-zA-Z0-9]{1,15}$\"\n    if not re.match(reg, value):\n        raise ValidationError(\n            \"Value '{}' does not appear to be a valid number of digits \"\n            \"and contains characters from '{}'.\".format(value, reg)\n        )\n", "def validate_value(value):\n    if value is None:\n        return\n    return re.compile(value)\n", "def validate_value(value):\n    return re.match(REGEX, value) is not None\n", "def validate_value(value):\n    return bool(_VALID_REGEX.match(value))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    return re.match(REGEX, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    regular_expression = _REGEX\n    if _REGEX_PATTERN_OR_NONE is not None:\n        regular_expression = _REGEX_PATTERN_OR_NONE\n    if value is None:\n        return\n    if not regular_expression.match(value):\n        raise ValidationError('Not a valid value.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return re.match(REGEX, value) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return re.match(VALIDATE, value) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return _re.match(_REGEX, value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    regex = r'^(?:[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\Z'\n    return re.match(regex, value) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    reg = \"^(?!(?:\\d)\\d)[a-zA-Z0-9]{1,15}$\"\n    if not re.match(reg, value):\n        raise ValidationError(\n            \"Value '{}' does not appear to be a valid number of digits \"\n            \"and contains characters from '{}'.\".format(value, reg)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if value is None:\n        return\n    return re.compile(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return re.match(REGEX, value) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return bool(_VALID_REGEX.match(value))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    if not re.match(r'^[a-zA-Z0-9_]{1,15}$', key):\n        raise ValidationError(\n            'Invalid key: {}. Key must be in the format \"A-Za-z0-9_\".'.format(key))\n", "def validate_key(key):\n    if key is None:\n        raise ValidationError('key is None')\n    if not re.match(REGEX, key):\n        raise ValidationError('key does not conform to regular expression')\n", "def validate_key(key):\n    if not re.match(\"^[a-zA-Z][a-zA-Z0-9_]*$\", key):\n        raise ValidationError(\"Invalid key: '%s'\" % key)\n", "def validate_key(key):\n    return re.match(REGEX, key)\n", "def validate_key(key):\n    return bool(re.match(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\", key))\n", "def validate_key(key):\n    return _KEY_REGEX.match(key)\n", "def validate_key(key):\n    if key!= '':\n        return\n    raise ValidationError('Key cannot be empty.')\n", "def validate_key(key):\n    if not key:\n        raise ValidationError('Key cannot be empty.')\n    return re.match(REGEX, key)\n", "def validate_key(key):\n    if not RE_KEY.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "def validate_key(key):\n    if key == '':\n        return\n    if not re.match(r'^[A-Za-z0-9]{1,15}$', key):\n        raise ValidationError('Key \"{}\" is not a valid key.'.format(key))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    if not re.match(r'^[a-zA-Z0-9_]{1,15}$', key):\n        raise ValidationError(\n            'Invalid key: {}. Key must be in the format \"A-Za-z0-9_\".'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if key is None:\n        raise ValidationError('key is None')\n    if not re.match(REGEX, key):\n        raise ValidationError('key does not conform to regular expression')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not re.match(\"^[a-zA-Z][a-zA-Z0-9_]*$\", key):\n        raise ValidationError(\"Invalid key: '%s'\" % key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    return re.match(REGEX, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    return bool(re.match(r\"^[a-zA-Z_][a-zA-Z0-9_]*$\", key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    return _KEY_REGEX.match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if key!= '':\n        return\n    raise ValidationError('Key cannot be empty.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not key:\n        raise ValidationError('Key cannot be empty.')\n    return re.match(REGEX, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not RE_KEY.match(key):\n        raise ValidationError('Invalid key: {}'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if key == '':\n        return\n    if not re.match(r'^[A-Za-z0-9]{1,15}$', key):\n        raise ValidationError('Key \"{}\" is not a valid key.'.format(key))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {k: v if isinstance(v, list) else None for k, v in manifest_dict.items()}\n    else:\n        return {k: v if isinstance(v, dict) else None for k, v in manifest_dict.items()}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict[str, str], bool) -> dict[str, str]\n    if not first_level and manifest_dict:\n        return copy.deepcopy(manifest_dict)\n    return {k: v for k, v in manifest_dict.items() if isinstance(v, dict)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        manifest_dict = {k: v for k, v in manifest_dict.items() if isinstance(v, list)}\n    return {k: None if k == 'observer_schema' and isinstance(v, dict) else v for k, v in manifest_dict.items()}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = manifest_dict.copy()\n    for k, v in result.items():\n        if isinstance(v, dict):\n            result[k] = generate_default_observer_schema_dict(v, first_level=first_level)\n        elif isinstance(v, list):\n            if first_level:\n                result[k] = None\n            else:\n                result[k] = [generate_default_observer_schema_dict(item, first_level=first_level) for item in v]\n        else:\n            result[k] = None\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    new_dict = manifest_dict.copy()\n    for k, v in list(new_dict.items()):\n        if isinstance(v, dict):\n            new_dict[k] = generate_default_observer_schema_dict(v, first_level=first_level)\n        elif not isinstance(v, list) and not first_level:\n            new_dict[k] = None\n    return new_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        result = manifest_dict\n    else:\n        result = {k: v for k, v in manifest_dict.items() if isinstance(v, dict)}\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        result = manifest_dict\n    else:\n        result = {k: v if isinstance(v, list) else None for k, v in manifest_dict.items()}\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level and 'observer_schema' in manifest_dict:\n        return {k: v for k, v in manifest_dict['observer_schema'].items() if isinstance(v, list) or isinstance(v, dict)}\n    else:\n        return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n    for key, value in schema.items():\n        if isinstance(value, list):\n            schema[key] = None if first_level else generate_default_observer_schema_dict(value, first_level=False)\n    return schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict((k, generate_default_observer_schema_dict(v, False))\n                    for k, v in manifest_dict.items() if isinstance(v, dict))\n    else:\n        return {k: generate_default_observer_schema_dict(v, False)\n                for k, v in manifest_dict.items()}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {k: v if isinstance(v, list) else None for k, v in manifest_dict.items()}\n    else:\n        return {k: v if isinstance(v, dict) else None for k, v in manifest_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict[str, str], bool) -> dict[str, str]\n    if not first_level and manifest_dict:\n        return copy.deepcopy(manifest_dict)\n    return {k: v for k, v in manifest_dict.items() if isinstance(v, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        manifest_dict = {k: v for k, v in manifest_dict.items() if isinstance(v, list)}\n    return {k: None if k == 'observer_schema' and isinstance(v, dict) else v for k, v in manifest_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = manifest_dict.copy()\n    for k, v in result.items():\n        if isinstance(v, dict):\n            result[k] = generate_default_observer_schema_dict(v, first_level=first_level)\n        elif isinstance(v, list):\n            if first_level:\n                result[k] = None\n            else:\n                result[k] = [generate_default_observer_schema_dict(item, first_level=first_level) for item in v]\n        else:\n            result[k] = None\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    new_dict = manifest_dict.copy()\n    for k, v in list(new_dict.items()):\n        if isinstance(v, dict):\n            new_dict[k] = generate_default_observer_schema_dict(v, first_level=first_level)\n        elif not isinstance(v, list) and not first_level:\n            new_dict[k] = None\n    return new_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        result = manifest_dict\n    else:\n        result = {k: v for k, v in manifest_dict.items() if isinstance(v, dict)}\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        result = manifest_dict\n    else:\n        result = {k: v if isinstance(v, list) else None for k, v in manifest_dict.items()}\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level and 'observer_schema' in manifest_dict:\n        return {k: v for k, v in manifest_dict['observer_schema'].items() if isinstance(v, list) or isinstance(v, dict)}\n    else:\n        return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        schema = manifest_dict\n    else:\n        schema = manifest_dict.copy()\n    for key, value in schema.items():\n        if isinstance(value, list):\n            schema[key] = None if first_level else generate_default_observer_schema_dict(value, first_level=False)\n    return schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return dict((k, generate_default_observer_schema_dict(v, False))\n                    for k, v in manifest_dict.items() if isinstance(v, dict))\n    else:\n        return {k: generate_default_observer_schema_dict(v, False)\n                for k, v in manifest_dict.items()}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for item in observer_schema:\n        if item['name'] not in last_applied_manifest:\n            last_applied_manifest.append(item['name'])\n            if 'type' in item:\n                last_applied_manifest_dict_from_resp(last_applied_manifest, item, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in response:\n        if k not in last_applied_manifest and k in observer_schema:\n            last_applied_manifest.append(k)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest.append(response[field])\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field_name, value in response.items():\n        if field_name not in observer_schema:\n            last_applied_manifest.append(value)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs_schema_item in observer_schema:\n        if obs_schema_item['name'] == 'last_applied_manifest':\n            last_applied_manifest.append(obs_schema_item['value'])\n        else:\n            last_applied_manifest_item = response[obs_schema_item['name']]\n            if obs_schema_item['name'] == 'last_applied_manifest':\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest_item, obs_schema_item['value'], response\n                )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n        elif isinstance(response[field], list):\n            if field in last_applied_manifest:\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest, observer_schema, response[field]\n                )\n            else:\n                last_applied_manifest.remove(field)\n        else:\n            last_applied_manifest.append(field)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response[\"items\"].items():\n        if key not in last_applied_manifest:\n            last_applied_manifest.append(key)\n            if key not in observer_schema:\n                last_applied_manifest.append(key)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest[last_applied_manifest_field] = response[last_applied_manifest_field]\n        elif last_applied_manifest_field in response[\"metadata\"]:\n            last_applied_manifest[last_applied_manifest_field] = response[\"metadata\"][last_applied_manifest_field]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_entry in response:\n        if 'last_applied_manifest' in last_applied_manifest_entry:\n            last_applied_manifest['last_applied_manifest'] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest_entry['last_applied_manifest'],\n                    observer_schema, last_applied_manifest_entry['value']\n                )\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest.append(\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema[last_applied_manifest_field], response[last_applied_manifest_field]\n                )\n            )\n    return last_applied_manifest\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for item in observer_schema:\n        if item['name'] not in last_applied_manifest:\n            last_applied_manifest.append(item['name'])\n            if 'type' in item:\n                last_applied_manifest_dict_from_resp(last_applied_manifest, item, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in response:\n        if k not in last_applied_manifest and k in observer_schema:\n            last_applied_manifest.append(k)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest.append(response[field])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field_name, value in response.items():\n        if field_name not in observer_schema:\n            last_applied_manifest.append(value)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs_schema_item in observer_schema:\n        if obs_schema_item['name'] == 'last_applied_manifest':\n            last_applied_manifest.append(obs_schema_item['value'])\n        else:\n            last_applied_manifest_item = response[obs_schema_item['name']]\n            if obs_schema_item['name'] == 'last_applied_manifest':\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest_item, obs_schema_item['value'], response\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n        elif isinstance(response[field], list):\n            if field in last_applied_manifest:\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest, observer_schema, response[field]\n                )\n            else:\n                last_applied_manifest.remove(field)\n        else:\n            last_applied_manifest.append(field)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response[\"items\"].items():\n        if key not in last_applied_manifest:\n            last_applied_manifest.append(key)\n            if key not in observer_schema:\n                last_applied_manifest.append(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest[last_applied_manifest_field] = response[last_applied_manifest_field]\n        elif last_applied_manifest_field in response[\"metadata\"]:\n            last_applied_manifest[last_applied_manifest_field] = response[\"metadata\"][last_applied_manifest_field]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_entry in response:\n        if 'last_applied_manifest' in last_applied_manifest_entry:\n            last_applied_manifest['last_applied_manifest'] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest_entry['last_applied_manifest'],\n                    observer_schema, last_applied_manifest_entry['value']\n                )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest.append(\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema[last_applied_manifest_field], response[last_applied_manifest_field]\n                )\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest[field] = response[field]\n        elif field in last_applied_manifest:\n            last_applied_manifest[field] = last_applied_manifest[field]\n        elif field in response.keys():\n            last_applied_manifest[field] = response[field]\n        else:\n            raise KeyError(\"%s not in %s\" % (field, response.keys()))\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v\n        elif isinstance(v, list):\n            if k in observer_schema[k]:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[k], observer_schema[k], v\n                )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            last_applied_manifest[k] = observer_schema[k](v)\n        elif k in (\"last_applied_manifest\", \"created_at\"):\n            last_applied_manifest[k] = v\n        else:\n            raise KeyError(\n                \"%s field is not in the response %s\" % (k, response)\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), value, response[key]\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n        elif isinstance(response[k], list):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, response[k])\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), observer_schema.get(key), value\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(response[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response[field]\n            )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[field], observer_schema, response[field]\n                )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for name, field in observer_schema.items():\n        if name not in last_applied_manifest:\n            last_applied_manifest[name] = field.default\n        elif field.default is not field.empty:\n            last_applied_manifest[name] = last_applied_manifest[name] or field.default\n        elif field.required:\n            raise KeyError(\n                \"Missing required field '{}' in last applied manifest\".format(name)\n            )\n    return last_applied_manifest\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest[field] = response[field]\n        elif field in last_applied_manifest:\n            last_applied_manifest[field] = last_applied_manifest[field]\n        elif field in response.keys():\n            last_applied_manifest[field] = response[field]\n        else:\n            raise KeyError(\"%s not in %s\" % (field, response.keys()))\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v\n        elif isinstance(v, list):\n            if k in observer_schema[k]:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[k], observer_schema[k], v\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            last_applied_manifest[k] = observer_schema[k](v)\n        elif k in (\"last_applied_manifest\", \"created_at\"):\n            last_applied_manifest[k] = v\n        else:\n            raise KeyError(\n                \"%s field is not in the response %s\" % (k, response)\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), value, response[key]\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n        elif isinstance(response[k], list):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, response[k])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), observer_schema.get(key), value\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(response[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response[field]\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[field], observer_schema, response[field]\n                )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for name, field in observer_schema.items():\n        if name not in last_applied_manifest:\n            last_applied_manifest[name] = field.default\n        elif field.default is not field.empty:\n            last_applied_manifest[name] = last_applied_manifest[name] or field.default\n        elif field.required:\n            raise KeyError(\n                \"Missing required field '{}' in last applied manifest\".format(name)\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    for resource in app.spec.manifest[\"resources\"]:\n        if resource[\"kind\"]!= \"observer\":\n            resource[\"schema\"] = {\n                \"$schema\": \"http://json-schema.org/draft-04/schema#\" + resource[\"$schema\"]\n            }\n", "def generate_default_observer_schema(app):\n    if app.config.get('observer_schema'):\n        return\n    app.config['observer_schema'] = \\\n        'https://github.com/kubernetes-api/kubernetes-observer/blob/master/' \\\n       'schema/custom-observer.yaml'\n", "def generate_default_observer_schema(app):\n    for k, v in app.resources.items():\n        if k not in app.spec.manifest:\n            app.spec.manifest[k] = {\"type\": \"object\", \"properties\": v}\n", "def generate_default_observer_schema(app):\n    if not app.custom_observers:\n        return\n\n    for custom_observer in app.custom_observers:\n        yield generate_custom_observer_schema(app, custom_observer)\n", "def generate_default_observer_schema(app):\n    app.add_api_route(\"/observer\", \"observer\", observer_schema_v1)\n", "def generate_default_observer_schema(app):\n    custom_schema = app.spec.custom.observer\n    if not custom_schema:\n        return\n\n    def custom_observer(schema):\n        if schema is None:\n            return {}\n        return {\n            '$schema': 'http://json-schema.org/draft-04/schema#' + custom_schema,\n            'properties': schema.get('properties', {}),\n        }\n\n    return custom_observer\n", "def generate_default_observer_schema(app):\n    custom_schema = {}\n    if 'observer' not in app.manifest:\n        return custom_schema\n    custom_schema = app.manifest['observer']\n    return custom_schema\n", "def generate_default_observer_schema(app):\n    custom_schema = app.spec.observers.get('kubernetes-apiserver', {}).get('schema')\n    if custom_schema:\n        app.spec.observers['kubernetes-apiserver']['schema'] = custom_schema\n", "def generate_default_observer_schema(app):\n    if app.metadata.observer_schema is None:\n        app.metadata.observer_schema = {\n            'type': 'object',\n            'properties': {\n                'name': {'type':'string'},\n               'state': {'type':'string'},\n               'version': {'type':'string'},\n                'url': {'type':'string'},\n                'description': {'type':'string'},\n               'requires': {'type': 'array'},\n                'provides': {'type': 'array'},\n            },\n        }\n", "def generate_default_observer_schema(app):\n    custom_schema = app.spec.get('observer')\n    if custom_schema is not None:\n        return {'$schema': custom_schema}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    for resource in app.spec.manifest[\"resources\"]:\n        if resource[\"kind\"]!= \"observer\":\n            resource[\"schema\"] = {\n                \"$schema\": \"http://json-schema.org/draft-04/schema#\" + resource[\"$schema\"]\n            }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('observer_schema'):\n        return\n    app.config['observer_schema'] = \\\n        'https://github.com/kubernetes-api/kubernetes-observer/blob/master/' \\\n       'schema/custom-observer.yaml'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for k, v in app.resources.items():\n        if k not in app.spec.manifest:\n            app.spec.manifest[k] = {\"type\": \"object\", \"properties\": v}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if not app.custom_observers:\n        return\n\n    for custom_observer in app.custom_observers:\n        yield generate_custom_observer_schema(app, custom_observer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    app.add_api_route(\"/observer\", \"observer\", observer_schema_v1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = app.spec.custom.observer\n    if not custom_schema:\n        return\n\n    def custom_observer(schema):\n        if schema is None:\n            return {}\n        return {\n            '$schema': 'http://json-schema.org/draft-04/schema#' + custom_schema,\n            'properties': schema.get('properties', {}),\n        }\n\n    return custom_observer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = {}\n    if 'observer' not in app.manifest:\n        return custom_schema\n    custom_schema = app.manifest['observer']\n    return custom_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = app.spec.observers.get('kubernetes-apiserver', {}).get('schema')\n    if custom_schema:\n        app.spec.observers['kubernetes-apiserver']['schema'] = custom_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.metadata.observer_schema is None:\n        app.metadata.observer_schema = {\n            'type': 'object',\n            'properties': {\n                'name': {'type':'string'},\n               'state': {'type':'string'},\n               'version': {'type':'string'},\n                'url': {'type':'string'},\n                'description': {'type':'string'},\n               'requires': {'type': 'array'},\n                'provides': {'type': 'array'},\n            },\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = app.spec.get('observer')\n    if custom_schema is not None:\n        return {'$schema': custom_schema}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\nif self.in_style == \"ordinal\":\nreturn self._format_ordinal(sql, params)\nreturn self._format_simple(sql, params)", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == 'ordinal':\nif self._params is None:\nreturn sql, params\nelse:\nreturn sql, {self._params[k]: v for k, v in params.items()}\nelse:\nif self._params is None:\nreturn sql, params\nelse:\nreturn sql, {k: v for k, v in params.items() if k in self._params}\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn self.__convert_ordinal_params(sql, params)\nelse:\nreturn self.__convert_single_params(sql, params)", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style is not None:\nif not isinstance(params, collections.abc.Sequence):\nraise TypeError('Parameters must be a sequence.')\nif self.params_order is not None:\nif not isinstance(params, dict):\nraise TypeError('Parameters must be a dictionary.')\nif self.params_order not in ('asc', 'desc'):\nraise ValueError('Invalid value.')\n\nif self.params_order == 'desc':\nparams = dict((k, v) for k, v in params.items() if v is not None)\nelif self.params_order == 'asc':\nparams = dict((k, v) for k, v in params.items() if v is None)\n\nreturn sql, params\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n    if self.in_style == 'ordinal':\n        return self.__format_ordinal(sql, params)\n    else:\n        return self.__format_sql(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style is None:\nreturn sql, params\nelif self.in_style == 'ordinal':\nreturn sql, {params[k] for k in params}\nelse:\nreturn sql, {k: params[k] for k in params}", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn self._format_ordinal(sql, params)\nelif self.in_style == \"sql\":\nreturn self._format_sql(sql, params)\nelse:\nreturn self._format_plain(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == 'ordinal':\nout_style = self._convert_ordinal_params(params)\nreturn sql.format(**out_style), params\nelif self.in_style =='sqlparse':\nreturn sql.format(**params), params\nelse:\nreturn sql, params\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn sql, params\nelif self.in_style == \"sqlparse\":\nreturn sqlparse.format(sql, keyword_case=self.keyword_case).split(\"?\", 1)\nelse:\nreturn sqlparse.parse(sql, keyword_case=self.keyword_case).asList()[0]\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._sql.format(sql, params), params\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\nif self.in_style == \"ordinal\":\nreturn self._format_ordinal(sql, params)\nreturn self._format_simple(sql, params)", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == 'ordinal':\nif self._params is None:\nreturn sql, params\nelse:\nreturn sql, {self._params[k]: v for k, v in params.items()}\nelse:\nif self._params is None:\nreturn sql, params\nelse:\nreturn sql, {k: v for k, v in params.items() if k in self._params}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn self.__convert_ordinal_params(sql, params)\nelse:\nreturn self.__convert_single_params(sql, params)", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style is not None:\nif not isinstance(params, collections.abc.Sequence):\nraise TypeError('Parameters must be a sequence.')\nif self.params_order is not None:\nif not isinstance(params, dict):\nraise TypeError('Parameters must be a dictionary.')\nif self.params_order not in ('asc', 'desc'):\nraise ValueError('Invalid value.')\n\nif self.params_order == 'desc':\nparams = dict((k, v) for k, v in params.items() if v is not None)\nelif self.params_order == 'asc':\nparams = dict((k, v) for k, v in params.items() if v is None)\n\nreturn sql, params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n    if self.in_style == 'ordinal':\n        return self.__format_ordinal(sql, params)\n    else:\n        return self.__format_sql(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style is None:\nreturn sql, params\nelif self.in_style == 'ordinal':\nreturn sql, {params[k] for k in params}\nelse:\nreturn sql, {k: params[k] for k in params}", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn self._format_ordinal(sql, params)\nelif self.in_style == \"sql\":\nreturn self._format_sql(sql, params)\nelse:\nreturn self._format_plain(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == 'ordinal':\nout_style = self._convert_ordinal_params(params)\nreturn sql.format(**out_style), params\nelif self.in_style =='sqlparse':\nreturn sql.format(**params), params\nelse:\nreturn sql, params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nif self.in_style == \"ordinal\":\nreturn sql, params\nelif self.in_style == \"sqlparse\":\nreturn sqlparse.format(sql, keyword_case=self.keyword_case).split(\"?\", 1)\nelse:\nreturn sqlparse.parse(sql, keyword_case=self.keyword_case).asList()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._sql.format(sql, params), params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style.to_many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self._params_to_strings)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nif self._in_style == \"ordinal\":\nreturn self._formatmany_ordinal(sql, many_params)\nreturn self._formatmany_params(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style.params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self._out_style)\n\n\n# noinspection PyUnusedLocal", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, True)\n\n\n# This function is only used to convert the SQL query to use the out-style parameters\n# instead of the in-style parameters.\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n    if self.in_style == 'ordinal':\n        return self._convertmany_ordinal(sql, many_params)\n    else:\n        return self._convertmany_params(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style.to_many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self._params_to_strings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nif self._in_style == \"ordinal\":\nreturn self._formatmany_ordinal(sql, many_params)\nreturn self._formatmany_params(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style.params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self._out_style)\n\n\n# noinspection PyUnusedLocal", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, self.in_style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params, True)\n\n\n# This function is only used to convert the SQL query to use the out-style parameters\n# instead of the in-style parameters.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\n    if self.in_style == 'ordinal':\n        return self._convertmany_ordinal(sql, many_params)\n    else:\n        return self._convertmany_params(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._format(sql, many_params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    return False\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return self._fs.validate(path)\n", "def validate(self, path):\n    if os.path.exists(path) and os.path.isdir(path):\n        return True\n    else:\n        print(\"{} does not exist or is not a directory\".format(path))\n        return False\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return self._validate(path)\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root. Returns True if valid (warnings\n    permitted), False otherwise.\n    \"\"\"\n    return self._validate(path)\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return True\n", "def validate(self, path):\n    return False", "def validate(self, path):\n    if not self.exists(path):\n        return False\n    if self.is_dir(path):\n        return False\n    if self.is_file(path):\n        return False\n    if self.is_broken_link(path):\n        return False\n    return True\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    if not os.path.exists(path):\n        return False\n    if not os.path.isdir(path):\n        return False\n    if not self.is_valid_path(path):\n        return False\n    if not self.is_valid_file(path):\n        return False\n    return True\n", "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return False\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return self._fs.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if os.path.exists(path) and os.path.isdir(path):\n        return True\n    else:\n        print(\"{} does not exist or is not a directory\".format(path))\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return self._validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root. Returns True if valid (warnings\n    permitted), False otherwise.\n    \"\"\"\n    return self._validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.exists(path):\n        return False\n    if self.is_dir(path):\n        return False\n    if self.is_file(path):\n        return False\n    if self.is_broken_link(path):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    if not os.path.exists(path):\n        return False\n    if not os.path.isdir(path):\n        return False\n    if not self.is_valid_path(path):\n        return False\n    if not self.is_valid_file(path):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Validate OCFL object at path or pyfs root.\n\n    Returns True if valid (warnings permitted), False otherwise.\n    \"\"\"\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return '{}{} {}'.format(prefix, self.status, self.status_msg)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return 'Validator'+ self.status_name(prefix)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return 'Validator status: %s%s' % (prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return '%s%s (%s)' % (prefix, self.status, self.description)\n", "def status_str(self, prefix=''):\n    return 'validator {}: '.format(self.validator_id) + prefix + str(self)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '%s%s' % (prefix, self.name)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '%s%s' % (prefix, self.status)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return '{}{} {}'.format(prefix, self.status, self.status_msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return 'Validator'+ self.status_name(prefix)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return 'Validator status: %s%s' % (prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string of validator status, with optional prefix.\n    \"\"\"\n    return '%s%s (%s)' % (prefix, self.status, self.description)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return 'validator {}: '.format(self.validator_id) + prefix + str(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '%s%s' % (prefix, self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string of validator status, with optional prefix.\"\"\"\n    return '%s%s' % (prefix, self.status)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    if self._validation_status:\n        return '{}{} ({})'.format(prefix, self.name, self._validation_status)\n    return '{}{}'.format(prefix, self.name)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{0} {1}'.format(prefix, self.message)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation of validation log, with optional prefix.\n    \"\"\"\n    return '\\n'.join(['{}{}'.format(prefix, status) for status in self.validation_log])\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional\n    prefix.\"\"\"\n    return '\\n'.join([''.join([prefix, 'Validation results:']),\n                      self.results_str()])\n", "def status_str(self, prefix=''):\n    \n    \n    return '{0}{1} {2}'.format(prefix, self._status, self._message)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{} {}'.format(prefix, self.status)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{} ({:.2f})'.format(prefix + self.status_symbol, self.value)\n", "def status_str(self, prefix=''):\n    \n    \n    return''.join([prefix + '[', self.status, '] ', self.message])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    if self._validation_status:\n        return '{}{} ({})'.format(prefix, self.name, self._validation_status)\n    return '{}{}'.format(prefix, self.name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{0} {1}'.format(prefix, self.message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation of validation log, with optional prefix.\n    \"\"\"\n    return '\\n'.join(['{}{}'.format(prefix, status) for status in self.validation_log])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional\n    prefix.\"\"\"\n    return '\\n'.join([''.join([prefix, 'Validation results:']),\n                      self.results_str()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \n    \n    return '{0}{1} {2}'.format(prefix, self._status, self._message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{} {}'.format(prefix, self.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation of validation log, with optional prefix.\"\"\"\n    return '{} ({:.2f})'.format(prefix + self.status_symbol, self.value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \n    \n    return''.join([prefix + '[', self.status, '] ', self.message])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid, always True in this base implementation.\n    \"\"\"\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid, always True in this base implementation.\n    \"\"\"\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid, always True in this base implementation.\n    \"\"\"\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid, always True in this base implementation.\n    \"\"\"\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    return super(Ec2InventoryModule, self).validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version.\n    \"\"\"\n    validate_dict(inventory)\n    if extract_spec_version:\n        version = inventory.get(\"type\")\n        if not version or version not in self.SPEC_VERSIONS:\n            msg = 'Invalid inventory spec version \"{0}\"'.format(version)\n            raise errors.AnsibleFilterError(msg)\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    return self._validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    return super(AnsibleInventoryModule, self).validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\" Validate a given inventory. If extract_spec_version is True then will\n    look at the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests\n    will be based on the version given in self.spec_version. \"\"\"\n    if extract_spec_version:\n        try:\n            inventory[\"_meta\"][\"version\"] = self.spec_version\n        except KeyError:\n            pass\n    return super(TestInventory, self).validate(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    return True if self.type in inventory and \\\n                        extract_spec_version and \\\n                        not isinstance(inventory[self.type], str) else False\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            return self._extract_spec_version(inventory)\n        except ValueError:\n            pass\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look at\n    the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. \n    \"\"\"\n    if extract_spec_version:\n        version = inventory.get('version', None)\n        if version:\n            try:\n                version = int(version)\n            except ValueError:\n                version = int(self.spec_version)\n            inventory['version'] = version\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return super(BaseInventoryModule, self).validate(inventory)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return super(Ec2InventoryModule, self).validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version.\n    \"\"\"\n    validate_dict(inventory)\n    if extract_spec_version:\n        version = inventory.get(\"type\")\n        if not version or version not in self.SPEC_VERSIONS:\n            msg = 'Invalid inventory spec version \"{0}\"'.format(version)\n            raise errors.AnsibleFilterError(msg)\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return self._validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return super(AnsibleInventoryModule, self).validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\" Validate a given inventory. If extract_spec_version is True then will\n    look at the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests\n    will be based on the version given in self.spec_version. \"\"\"\n    if extract_spec_version:\n        try:\n            inventory[\"_meta\"][\"version\"] = self.spec_version\n        except KeyError:\n            pass\n    return super(TestInventory, self).validate(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return True if self.type in inventory and \\\n                        extract_spec_version and \\\n                        not isinstance(inventory[self.type], str) else False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            return self._extract_spec_version(inventory)\n        except ValueError:\n            pass\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look at\n    the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. \n    \"\"\"\n    if extract_spec_version:\n        version = inventory.get('version', None)\n        if version:\n            try:\n                version = int(version)\n            except ValueError:\n                version = int(self.spec_version)\n            inventory['version'] = version\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return super(BaseInventoryModule, self).validate(inventory)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file in digests_used:\n            return True\n    return False\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            self.log.error(\n                \"The manifest file %s is missing from manifest.yaml\" % manifest_file\n            )\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in digests_used:\n            if manifest['digests'][digest]['used']:\n                continue\n            if digest in manifest['digests']:\n                manifest['digests'][digest]['used'] = True\n    return manifest_files\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    return all(digests_used.get(digest, False) for digest in manifest_files)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for file in manifest_files:\n        if not self.check_digests_present(file, digests_used):\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for filename in manifest_files:\n        if filename not in self.digests_used:\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for digest in digests_used:\n        if digest not in manifest_files:\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in manifest_file['digests']:\n            if digest not in digests_used:\n                raise Exception(\"Digest '%s' not present in manifest file '%s'\" % (digest, manifest_file['name']))\n            elif digest in digests_used:\n                raise Exception(\"Digest '%s' already in manifest file '%s'\" % (digest, manifest_file['name']))\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            raise errors.MissingDigest(digest)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in manifest_file['digests']:\n            if digest not in digests_used:\n                return False\n    return True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file in digests_used:\n            return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            self.log.error(\n                \"The manifest file %s is missing from manifest.yaml\" % manifest_file\n            )\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in digests_used:\n            if manifest['digests'][digest]['used']:\n                continue\n            if digest in manifest['digests']:\n                manifest['digests'][digest]['used'] = True\n    return manifest_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    return all(digests_used.get(digest, False) for digest in manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for file in manifest_files:\n        if not self.check_digests_present(file, digests_used):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for filename in manifest_files:\n        if filename not in self.digests_used:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for digest in digests_used:\n        if digest not in manifest_files:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in manifest_file['digests']:\n            if digest not in digests_used:\n                raise Exception(\"Digest '%s' not present in manifest file '%s'\" % (digest, manifest_file['name']))\n            elif digest in digests_used:\n                raise Exception(\"Digest '%s' already in manifest file '%s'\" % (digest, manifest_file['name']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            raise errors.MissingDigest(digest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for manifest_file in manifest_files:\n        for digest in manifest_file['digests']:\n            if digest not in digests_used:\n                return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if self.is_current_version(prior)!= prior.is_current_version(self):\n        return False\n    return True", "def validate_as_prior_version(self, prior):\n    return True\n", "def validate_as_prior_version(self, prior):\n    if prior is not None:\n        if prior.version!= self.version:\n            raise ValidationError(\n                \"Prior inventory object %s does not have a \"\n                \"prior version of %s\" % (self, prior))\n", "def validate_as_prior_version(self, prior):\n    return prior.is_valid_version(self)\n", "def validate_as_prior_version(self, prior):\n    return True\n", "def validate_as_prior_version(self, prior):\n    return prior in self._inventory\n", "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return True\n\n    if not isinstance(prior, inventory_validator.InventoryValidator):\n        return False\n\n    if prior.version!= self.version:\n        return False\n\n    return True\n", "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and privenges are assumed to be checked for\n    internal consistency.\n    \"\"\"\n    if prior.version!= self.version:\n        raise ValueError('Invalid prior version {} for {}'.format(prior.version, self.name))\n    return True\n", "def validate_as_prior_version(self, prior):\n    return prior.is_valid()\n", "def validate_as_prior_version(self, prior):\n    return prior.is_valid()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if self.is_current_version(prior)!= prior.is_current_version(self):\n        return False\n    return True", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is not None:\n        if prior.version!= self.version:\n            raise ValidationError(\n                \"Prior inventory object %s does not have a \"\n                \"prior version of %s\" % (self, prior))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return prior.is_valid_version(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return prior in self._inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior is None:\n        return True\n\n    if not isinstance(prior, inventory_validator.InventoryValidator):\n        return False\n\n    if prior.version!= self.version:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and privenges are assumed to be checked for\n    internal consistency.\n    \"\"\"\n    if prior.version!= self.version:\n        raise ValueError('Invalid prior version {} for {}'.format(prior.version, self.name))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return prior.is_valid()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return prior.is_valid()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    result = {}\n    for path in inventory[\"inventory\"][version][\"paths\"]:\n        result.setdefault(path[0], set()).add(path[1])\n    return result\n", "def get_logical_path_map(inventory, version):\n    return {\n        os.path.join(\n            *os.path.dirname(v).split(os.sep)[-2:])\n        for v in inventory.values()\n        if isinstance(v, dict) and 'logical_path' in v\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "def get_logical_path_map(inventory, version):\n    return {\n        f.logical_path : set(f.content_files)\n        for f in inventory.get_files(version=version)\n    }\n", "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "def get_logical_path_map(inventory, version):\n    return {\n        path_in_state(inventory, path, version): set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        logical_path: set([f for f in inventory.get(logical_path, []) if f not in version.content_files])\n        for logical_path in inventory.get(\"logical_paths\", [])\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        path: set(f.content_files)\n        for path, f in inventory.items()\n        if version in f.versions_to_describe\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        path: {\n            'content': content_files\n            for content_files in inventory[version]['content']\n            if content_files not in inventory[version]['required']\n        }\n        for path, inventory in inventory.items()\n    }\n", "def get_logical_path_map(inventory, version):\n    return inventory.get_logical_path_map(version)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    result = {}\n    for path in inventory[\"inventory\"][version][\"paths\"]:\n        result.setdefault(path[0], set()).add(path[1])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        os.path.join(\n            *os.path.dirname(v).split(os.sep)[-2:])\n        for v in inventory.values()\n        if isinstance(v, dict) and 'logical_path' in v\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        f.logical_path : set(f.content_files)\n        for f in inventory.get_files(version=version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return _get_logical_path_map(inventory, version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path_in_state(inventory, path, version): set(content_files)\n        for path, content_files in inventory.items()\n        if version in content_files\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        logical_path: set([f for f in inventory.get(logical_path, []) if f not in version.content_files])\n        for logical_path in inventory.get(\"logical_paths\", [])\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: set(f.content_files)\n        for path, f in inventory.items()\n        if version in f.versions_to_describe\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        path: {\n            'content': content_files\n            for content_files in inventory[version]['content']\n            if content_files not in inventory[version]['required']\n        }\n        for path, inventory in inventory.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return inventory.get_logical_path_map(version)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return False\n    if 'files' in manifest_files:\n        return True\n    return False\n", "def validate_fixity(self, fixity, manifest_files):\n    for key, value in fixity.items():\n        if key not in manifest_files:\n            raise AssertionError('Fixity block does not contain referenced files %s' % key)\n        elif not isinstance(value, list):\n            raise AssertionError('Fixity block contains invalid value %s' % value)\n        else:\n            for item in value:\n                if item not in manifest_files[key]:\n                    raise AssertionError('Fixity block contains invalid file %s' % item)\n", "def validate_fixity(self, fixity, manifest_files):\n    return all([self.validate_fixity_entry(fixity_entry, manifest_files)\n                for fixity_entry in fixity])\n", "def validate_fixity(self, fixity, manifest_files):\n    # TODO: Add check to see that the structure of the fixity block is identical to the manifest\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return False\n    refs = {}\n    for f in fixity['files']:\n        f_path = os.path.join(manifest_files, f['path'])\n        if f['path'] in refs:\n            self.fail(\"Fixity block contains duplicate file: %s\" % f_path)\n        refs[f['path']] = f_path\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    if not fixity.get('files'):\n        return False\n    for file in fixity.get('files'):\n        if file not in manifest_files:\n            return False\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    if fixity['name'] not in manifest_files:\n        raise ValueError('Fixity block {0} is not referenced'.format(fixity['name']))\n", "def validate_fixity(self, fixity, manifest_files):\n    return all([self.validate_fixity_item(fixity_item, manifest_files) for fixity_item in fixity])\n", "def validate_fixity(self, fixity, manifest_files):\n    for i in manifest_files:\n        if fixity[i]['file'] not in manifest_files:\n            return False\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f not in fixity:\n            raise ValueError('Fixity file %s not found in manifest' % f)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return False\n    if 'files' in manifest_files:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for key, value in fixity.items():\n        if key not in manifest_files:\n            raise AssertionError('Fixity block does not contain referenced files %s' % key)\n        elif not isinstance(value, list):\n            raise AssertionError('Fixity block contains invalid value %s' % value)\n        else:\n            for item in value:\n                if item not in manifest_files[key]:\n                    raise AssertionError('Fixity block contains invalid file %s' % item)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    return all([self.validate_fixity_entry(fixity_entry, manifest_files)\n                for fixity_entry in fixity])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    # TODO: Add check to see that the structure of the fixity block is identical to the manifest\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return False\n    refs = {}\n    for f in fixity['files']:\n        f_path = os.path.join(manifest_files, f['path'])\n        if f['path'] in refs:\n            self.fail(\"Fixity block contains duplicate file: %s\" % f_path)\n        refs[f['path']] = f_path\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if not fixity.get('files'):\n        return False\n    for file in fixity.get('files'):\n        if file not in manifest_files:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if fixity['name'] not in manifest_files:\n        raise ValueError('Fixity block {0} is not referenced'.format(fixity['name']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    return all([self.validate_fixity_item(fixity_item, manifest_files) for fixity_item in fixity])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for i in manifest_files:\n        if fixity[i]['file'] not in manifest_files:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for f in manifest_files:\n        if f not in fixity:\n            raise ValueError('Fixity file %s not found in manifest' % f)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    if not os.path.isdir(path):\n        return []\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    \"\"\" Return the files in `path` \"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return sorted([os.path.join(path, f) for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    if not os.path.isdir(path):\n        return []\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\" Return the files in `path` \"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return sorted([f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return sorted([os.path.join(path, f) for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"Return the files in `path`\"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in `path`\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = {}\n        for f in files:\n            if f[:len(xml)] == xml:\n                result[xml][f] = source[f]\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml_filename in xmls:\n        result[xml_filename] = _get_package_from_xml_filename(source, xml_filename, files)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    # TODO: Add support for zip files\n    result = {}\n    for xml in xmls:\n        result[xml] = [file for file in files if file.endswith(xml)]\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for f in files:\n            if xml in f:\n                result[xml].append(f)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for f in files:\n            if f == xml:\n                result[xml].append(f)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    for filename in files:\n        source[filename] = []\n        for xml in xmls:\n            if filename.startswith(xml):\n                source[filename].append(xml)\n    return source\n", "def _group_files_by_xml_filename(source, xmls, files):\n    groups = {}\n    for xml in xmls:\n        groups.setdefault(xml, []).append(source)\n    for file in files:\n        basename = os.path.basename(file)\n        if basename in groups:\n            groups[basename].append(file)\n        else:\n            groups[basename] = [file]\n    return groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result.setdefault(xml, []).append(source)\n    for file in files:\n        basename = os.path.basename(file)\n        result[basename] = file\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        name, ext = os.path.splitext(xml)\n        name = os.path.basename(name)\n        for f in files:\n            if f == xml:\n                result[name] = f\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    group = {}\n    for xml in xmls:\n        if xml in files:\n            if xml in group:\n                group[xml].append(source)\n            else:\n                group[xml] = [source]\n        else:\n            group[xml] = []\n    return group\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = {}\n        for f in files:\n            if f[:len(xml)] == xml:\n                result[xml][f] = source[f]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml_filename in xmls:\n        result[xml_filename] = _get_package_from_xml_filename(source, xml_filename, files)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    # TODO: Add support for zip files\n    result = {}\n    for xml in xmls:\n        result[xml] = [file for file in files if file.endswith(xml)]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for f in files:\n            if xml in f:\n                result[xml].append(f)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for f in files:\n            if f == xml:\n                result[xml].append(f)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    for filename in files:\n        source[filename] = []\n        for xml in xmls:\n            if filename.startswith(xml):\n                source[filename].append(xml)\n    return source\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    groups = {}\n    for xml in xmls:\n        groups.setdefault(xml, []).append(source)\n    for file in files:\n        basename = os.path.basename(file)\n        if basename in groups:\n            groups[basename].append(file)\n        else:\n            groups[basename] = [file]\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        result.setdefault(xml, []).append(source)\n    for file in files:\n        basename = os.path.basename(file)\n        result[basename] = file\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml in xmls:\n        name, ext = os.path.splitext(xml)\n        name = os.path.basename(name)\n        for f in files:\n            if f == xml:\n                result[name] = f\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    group = {}\n    for xml in xmls:\n        if xml in files:\n            if xml in group:\n                group[xml].append(source)\n            else:\n                group[xml] = [source]\n        else:\n            group[xml] = []\n    return group\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    \"\"\"\n    Identify if a document package by a given `file_path` belongs to a document\n    package by a given `prefix`\n\n    Parameters\n    ----------\n    prefix : str\n        Filename prefix\n    file_path : str\n        File path\n\n    Returns\n    -------\n    bool\n        True - file belongs to the package\n    \"\"\"\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \"\"\"\n    Identify if a document package by a given `file_path` belongs to a document\n    package by a given `prefix`\n\n    Parameters\n    ----------\n    prefix : str\n        Filename prefix\n    file_path : str\n        File path\n\n    Returns\n    -------\n    bool\n        True - file belongs to the package\n    \"\"\"\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    return files\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files = [f for f in files if f.startswith(prefix)]\n    return files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    data = {}\n    for file in os.listdir(folder):\n        filepath = os.path.join(folder, file)\n        if filepath.endswith(\".xml\"):\n            package = os.path.splitext(file)[0]\n            data[package] = {}\n            data[package][\"xml\"] = filepath\n    return data\n", "def _explore_folder(folder):\n    res = {}\n    for f in os.listdir(folder):\n        if f.startswith('.'):\n            continue\n        xml = os.path.join(folder, f)\n        if os.path.isdir(xml):\n            res.update(_explore_folder(xml))\n        else:\n            res[f] = xml\n    return res\n", "def _explore_folder(folder):\n    pkgs = {}\n    for filename in os.listdir(folder):\n        basename, ext = os.path.splitext(filename)\n        if ext == '.xml':\n            pkgs[basename] = etree.parse(folder + '/' + filename).getroot()\n    return pkgs\n", "def _explore_folder(folder):\n    result = {}\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            result[file[:-4]] = {}\n            result[file[:-4]][\"files\"] = []\n            result[file[:-4]][\"files\"] = _explore_folder(\n                os.path.join(folder, file)\n            )\n            result[file[:-4]][\"files\"] = sorted(result[file[:-4]][\"files\"])\n    return result\n", "def _explore_folder(folder):\n    return {\n        os.path.basename(f): f\n        for f in os.listdir(folder)\n        if os.path.isfile(os.path.join(folder, f))\n    }\n", "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        if not filename.endswith(\".xml\"):\n            continue\n        filepath = os.path.join(folder, filename)\n        data = _explore_file(filepath)\n        result.update(data)\n    return result\n", "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            if file.endswith(\".xml\"):\n                xml_name = os.path.basename(os.path.dirname(root)) + \"/\" + file\n                data[xml_name] = None\n    return data\n", "def _explore_folder(folder):\n    res = {}\n    for file in os.listdir(folder):\n        name, ext = os.path.splitext(file)\n        if ext == \".xml\":\n            res[name] = {}\n            res[name][\"basename\"] = name\n            res[name][\"data\"] = _explore_file(os.path.join(folder, file))\n    return res\n", "def _explore_folder(folder):\n    package = {}\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            package[os.path.splitext(os.path.basename(file))[0]] = {\n                \"file\": file,\n                \"xml\": _explore_file(os.path.join(folder, file)),\n            }\n    return package\n", "def _explore_folder(folder):\n    data = {}\n    for f in os.listdir(folder):\n        xml_name = os.path.basename(f)\n        data[xml_name] = {}\n        if os.path.isdir(os.path.join(folder, f)):\n            data[xml_name][\"data\"] = _explore_folder(os.path.join(folder, f))\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    data = {}\n    for file in os.listdir(folder):\n        filepath = os.path.join(folder, file)\n        if filepath.endswith(\".xml\"):\n            package = os.path.splitext(file)[0]\n            data[package] = {}\n            data[package][\"xml\"] = filepath\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    res = {}\n    for f in os.listdir(folder):\n        if f.startswith('.'):\n            continue\n        xml = os.path.join(folder, f)\n        if os.path.isdir(xml):\n            res.update(_explore_folder(xml))\n        else:\n            res[f] = xml\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    pkgs = {}\n    for filename in os.listdir(folder):\n        basename, ext = os.path.splitext(filename)\n        if ext == '.xml':\n            pkgs[basename] = etree.parse(folder + '/' + filename).getroot()\n    return pkgs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            result[file[:-4]] = {}\n            result[file[:-4]][\"files\"] = []\n            result[file[:-4]][\"files\"] = _explore_folder(\n                os.path.join(folder, file)\n            )\n            result[file[:-4]][\"files\"] = sorted(result[file[:-4]][\"files\"])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return {\n        os.path.basename(f): f\n        for f in os.listdir(folder)\n        if os.path.isfile(os.path.join(folder, f))\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    result = {}\n    for filename in os.listdir(folder):\n        if not filename.endswith(\".xml\"):\n            continue\n        filepath = os.path.join(folder, filename)\n        data = _explore_file(filepath)\n        result.update(data)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for root, dirs, files in os.walk(folder):\n        for file in files:\n            if file.endswith(\".xml\"):\n                xml_name = os.path.basename(os.path.dirname(root)) + \"/\" + file\n                data[xml_name] = None\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    res = {}\n    for file in os.listdir(folder):\n        name, ext = os.path.splitext(file)\n        if ext == \".xml\":\n            res[name] = {}\n            res[name][\"basename\"] = name\n            res[name][\"data\"] = _explore_file(os.path.join(folder, file))\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    package = {}\n    for file in os.listdir(folder):\n        if file.endswith(\".xml\"):\n            package[os.path.splitext(os.path.basename(file))[0]] = {\n                \"file\": file,\n                \"xml\": _explore_file(os.path.join(folder, file)),\n            }\n    return package\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    data = {}\n    for f in os.listdir(folder):\n        xml_name = os.path.basename(f)\n        data[xml_name] = {}\n        if os.path.isdir(os.path.join(folder, f)):\n            data[xml_name][\"data\"] = _explore_folder(os.path.join(folder, f))\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_split = filename.split(\".\")\n    filename_split_len = len(filename_split)\n    if filename_split_len == 1:\n        return {\n            \"packages\": {\n                \"asset\": prefix + filename,\n                \"rendition\": filename + \".json\"\n            }\n        }\n    elif filename_split_len == 2:\n        return {\n            \"packages\": {\n                \"asset\": prefix + filename,\n                \"rendition\": filename + \".json.gz\"\n            }\n        }\n", "def _eval_file(prefix, file_path):\n    return {\n        'asset': 'asset',\n       'rendition':'rendition'\n    }[prefix]\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    file_name = os.path.join(file_path, prefix + '.xml')\n    if not os.path.exists(file_path):\n        return {}\n    return {\n        'type': 'asset' if os.path.exists(file_path) else'rendition',\n        'file': file_name\n    }\n", "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_base = os.path.splitext(filename)[0]\n    filename_ext = os.path.splitext(filename)[1]\n    filename_ext = filename_ext.lower()\n\n    if 'asset' in filename_ext:\n        return {'packages': {'asset': filename}}\n    elif'rendition' in filename_ext:\n        return {'packages': {'rendition': filename}}\n    else:\n        return {'packages': {'asset': filename_base + '.' + filename_ext}}\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'index.html')\n    file_basename = os.path.basename(file_path)\n    file_name, file_ext = os.path.splitext(file_basename)\n    file_package = file_name.split('-')[0]\n    file_type = file_ext.split('.')[-1]\n\n    return {\n        'packages': {\n            'asset': 'assets/{}.{}'.format(prefix, file_package),\n           'rendition':'renditions/{}.{}'.format(prefix, file_package)\n        },\n        'file': {\n            'file_path': file_path,\n            'file_name': file_name,\n            'file_type': file_type\n        }\n    }\n", "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[1]\n    if ext == '.xml':\n        return {\n            'packages': [\n                {'type': 'asset', 'name': prefix}\n            ]\n        }\n    elif ext == '.json':\n        return {\n            'packages': [\n                {'type':'rendition', 'name': prefix}\n            ]\n        }\n    else:\n        return {\n            'packages': [\n                {'type': 'asset', 'name': prefix}\n            ]\n        }\n", "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    if '.xml' in file_name:\n        return {\n            'packages': prefix + '.' + file_name[:-3] + '.xml',\n            'file_type': 'xml'\n        }\n    elif '.zip' in file_name:\n        return {\n            'packages': prefix + '.' + file_name[:-3] + '.zip',\n            'file_type': 'zip'\n        }\n    else:\n        return {\n            'packages': prefix + '.' + file_name + '.json',\n            'file_type': 'json'\n        }\n", "def _eval_file(prefix, file_path):\n    eval_dict = {}\n    eval_dict[\"asset\"] = \"asset\"\n    eval_dict[\"rendition\"] = \"rendition\"\n    eval_dict[\"packages\"] = \"packages\"\n    eval_dict[\"file_path\"] = file_path\n\n    return eval_dict\n", "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    tree = etree.parse(file_path)\n    elem = tree.getroot()\n    attrib = elem.attrib\n    file_type = attrib['type']\n    if file_type == 'asset':\n        attrib['encoding'] = 'utf-8'\n    return {\n        'file_type': file_type,\n        'encoding': attrib['encoding'],\n        'packages': attrib['packages'],\n    }\n", "def _eval_file(prefix, file_path):\n    packages = {\n        'asset': 'asset',\n       'rendition':'rendition'\n    }\n    if prefix in packages:\n        return {packages[prefix]: file_path}\n    else:\n        return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_split = filename.split(\".\")\n    filename_split_len = len(filename_split)\n    if filename_split_len == 1:\n        return {\n            \"packages\": {\n                \"asset\": prefix + filename,\n                \"rendition\": filename + \".json\"\n            }\n        }\n    elif filename_split_len == 2:\n        return {\n            \"packages\": {\n                \"asset\": prefix + filename,\n                \"rendition\": filename + \".json.gz\"\n            }\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    return {\n        'asset': 'asset',\n       'rendition':'rendition'\n    }[prefix]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages')\n    file_name = os.path.join(file_path, prefix + '.xml')\n    if not os.path.exists(file_path):\n        return {}\n    return {\n        'type': 'asset' if os.path.exists(file_path) else'rendition',\n        'file': file_name\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    filename = os.path.basename(file_path)\n    filename_base = os.path.splitext(filename)[0]\n    filename_ext = os.path.splitext(filename)[1]\n    filename_ext = filename_ext.lower()\n\n    if 'asset' in filename_ext:\n        return {'packages': {'asset': filename}}\n    elif'rendition' in filename_ext:\n        return {'packages': {'rendition': filename}}\n    else:\n        return {'packages': {'asset': filename_base + '.' + filename_ext}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'index.html')\n    file_basename = os.path.basename(file_path)\n    file_name, file_ext = os.path.splitext(file_basename)\n    file_package = file_name.split('-')[0]\n    file_type = file_ext.split('.')[-1]\n\n    return {\n        'packages': {\n            'asset': 'assets/{}.{}'.format(prefix, file_package),\n           'rendition':'renditions/{}.{}'.format(prefix, file_package)\n        },\n        'file': {\n            'file_path': file_path,\n            'file_name': file_name,\n            'file_type': file_type\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ext = os.path.splitext(file_path)[1]\n    if ext == '.xml':\n        return {\n            'packages': [\n                {'type': 'asset', 'name': prefix}\n            ]\n        }\n    elif ext == '.json':\n        return {\n            'packages': [\n                {'type':'rendition', 'name': prefix}\n            ]\n        }\n    else:\n        return {\n            'packages': [\n                {'type': 'asset', 'name': prefix}\n            ]\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_name = os.path.basename(file_path)\n    if '.xml' in file_name:\n        return {\n            'packages': prefix + '.' + file_name[:-3] + '.xml',\n            'file_type': 'xml'\n        }\n    elif '.zip' in file_name:\n        return {\n            'packages': prefix + '.' + file_name[:-3] + '.zip',\n            'file_type': 'zip'\n        }\n    else:\n        return {\n            'packages': prefix + '.' + file_name + '.json',\n            'file_type': 'json'\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    eval_dict = {}\n    eval_dict[\"asset\"] = \"asset\"\n    eval_dict[\"rendition\"] = \"rendition\"\n    eval_dict[\"packages\"] = \"packages\"\n    eval_dict[\"file_path\"] = file_path\n\n    return eval_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    file_path = os.path.join(file_path, 'packages.xml')\n    tree = etree.parse(file_path)\n    elem = tree.getroot()\n    attrib = elem.attrib\n    file_type = attrib['type']\n    if file_type == 'asset':\n        attrib['encoding'] = 'utf-8'\n    return {\n        'file_type': file_type,\n        'encoding': attrib['encoding'],\n        'packages': attrib['packages'],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    packages = {\n        'asset': 'asset',\n       'rendition':'rendition'\n    }\n    if prefix in packages:\n        return {packages[prefix]: file_path}\n    else:\n        return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    \n    \n    self.renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    \"\"\"\n        { \"original\": \"artigo02.pdf\",  \"en\": \"artigo02-en.pdf\", }\n    \"\"\"\n    self[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    \n    \n    if lang not in self.renditions:\n        self.renditions[lang] = []\n    self.renditions[lang].append(file_path)\n", "def add_rendition(self, lang, file_path):\n    \n    \n    if lang in self.renditions:\n        self.renditions[lang].append(file_path)\n    else:\n        self.renditions[lang] = [file_path]\n", "def add_rendition(self, lang, file_path):\n    \n    \n    ext = \".\" + lang\n    return self.add_alternate_file_path(file_path, ext)\n", "def add_rendition(self, lang, file_path):\n    \"\"\"\n    {\n        \"original\": \"artigo02.pdf\",\n        \"en\": \"artigo02-en.pdf\",\n    }\n    \"\"\"\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    \n    \n    file_name = os.path.splitext(os.path.basename(file_path))[0]\n    file_ext = os.path.splitext(file_path)[1]\n    return self.add_renditions(self.get_renditions(lang), [(file_name, file_ext, file_path)])\n", "def add_rendition(self, lang, file_path):\n    '''\n        {\"original\": \"artigo02.pdf\", \"en\": \"artigo02-en.pdf\", }\n    '''\n    if self.meta.get('renditions'):\n        return self.meta['renditions'][lang]['url'] + file_path\n    else:\n        return file_path\n", "def add_rendition(self, lang, file_path):\n    \n    \n    return self.__add_file('renditions', lang, file_path)\n", "def add_rendition(self, lang, file_path):\n    \"\"\"\n        {\"original\": \"artigo02.pdf\",  \"en\": \"artigo02-en.pdf\"}\n    \"\"\"\n    return self.add_translated_rendition(lang, file_path, 'en','media/renditions/{0}.jpg')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    self.renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \"\"\"\n        { \"original\": \"artigo02.pdf\",  \"en\": \"artigo02-en.pdf\", }\n    \"\"\"\n    self[lang] = file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if lang not in self.renditions:\n        self.renditions[lang] = []\n    self.renditions[lang].append(file_path)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    if lang in self.renditions:\n        self.renditions[lang].append(file_path)\n    else:\n        self.renditions[lang] = [file_path]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    ext = \".\" + lang\n    return self.add_alternate_file_path(file_path, ext)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \"\"\"\n    {\n        \"original\": \"artigo02.pdf\",\n        \"en\": \"artigo02-en.pdf\",\n    }\n    \"\"\"\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    file_name = os.path.splitext(os.path.basename(file_path))[0]\n    file_ext = os.path.splitext(file_path)[1]\n    return self.add_renditions(self.get_renditions(lang), [(file_name, file_ext, file_path)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    '''\n        {\"original\": \"artigo02.pdf\", \"en\": \"artigo02-en.pdf\", }\n    '''\n    if self.meta.get('renditions'):\n        return self.meta['renditions'][lang]['url'] + file_path\n    else:\n        return file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \n    \n    return self.__add_file('renditions', lang, file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_rendition(self, lang, file_path):\n    \"\"\"\n        {\"original\": \"artigo02.pdf\",  \"en\": \"artigo02-en.pdf\"}\n    \"\"\"\n    return self.add_translated_rendition(lang, file_path, 'en','media/renditions/{0}.jpg')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    \"\"\"\n        {\n            \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n            \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n            \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n        }\n    \"\"\"\n    filename = os.path.basename(file_path)\n    ext = os.path.splitext(file_path)[1]\n    self.assets[filename] = file_path\n", "def add_asset(self, basename, file_path):\n    \"\"\"\n    \"{\"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", "def add_asset(self, basename, file_path):\n    self.assets.append((basename, file_path))\n", "def add_asset(self, basename, file_path):\n    file_path = os.path.join(self.assets_dir, basename)\n    self.assets[basename] = file_path\n    return file_path\n", "def add_asset(self, basename, file_path):\n    \"\"\"\n    \"{\"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n     \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n     \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n    } \"\"\"\n    return '{}/{}'.format(self.assets_dir, basename)\n", "def add_asset(self, basename, file_path):\n    file_path = self.__absolute_to_relative(file_path)\n    file_path = self.__absolute_to_relative(file_path)\n    if file_path not in self.assets:\n        self.assets.append(file_path)\n", "def add_asset(self, basename, file_path):\n    asset = {basename: file_path}\n    self.asset.update(asset)\n", "def add_asset(self, basename, file_path):\n    for ext in ('.tif', '.jpg', '.jpeg'):\n        if file_path.endswith(ext):\n            return self._add_asset(basename, file_path)\n    return self._add_asset(basename, file_path, ext='.png')\n", "def add_asset(self, basename, file_path):\n    asset_path = os.path.join(self.assets_dir, basename)\n    file_path = os.path.join(self.assets_dir, file_path)\n    shutil.copy(file_path, asset_path)\n", "def add_asset(self, basename, file_path):\n    assets = self.get_assets()\n    if file_path not in assets:\n        assets[file_path] = basename"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    \"\"\"\n        {\n            \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n            \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n            \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n        }\n    \"\"\"\n    filename = os.path.basename(file_path)\n    ext = os.path.splitext(file_path)[1]\n    self.assets[filename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    \"\"\"\n    \"{\"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    self.assets.append((basename, file_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    file_path = os.path.join(self.assets_dir, basename)\n    self.assets[basename] = file_path\n    return file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    \"\"\"\n    \"{\"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n     \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n     \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n    } \"\"\"\n    return '{}/{}'.format(self.assets_dir, basename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    file_path = self.__absolute_to_relative(file_path)\n    file_path = self.__absolute_to_relative(file_path)\n    if file_path not in self.assets:\n        self.assets.append(file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset = {basename: file_path}\n    self.asset.update(asset)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    for ext in ('.tif', '.jpg', '.jpeg'):\n        if file_path.endswith(ext):\n            return self._add_asset(basename, file_path)\n    return self._add_asset(basename, file_path, ext='.png')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    asset_path = os.path.join(self.assets_dir, basename)\n    file_path = os.path.join(self.assets_dir, file_path)\n    shutil.copy(file_path, asset_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def add_asset(self, basename, file_path):\n    assets = self.get_assets()\n    if file_path not in assets:\n        assets[file_path] = basename", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    xml_basenames = [\"\", \"XML\", \"_XML\"]\n    xml_files = []\n    for filename in zip_path.namelist():\n        if filename.endswith(xml_basenames):\n            xml_files.append(filename)\n    return {\n        filename: zip_path.read(filename)\n        for filename in xml_files\n        if filename.endswith(\".xml\")\n    }\n", "def _explore_zipfile(zip_path):\n    return {zipfile.basename(f): f for f in zip_path}\n", "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    data = {}\n    for member in zip_file.namelist():\n        data[member] = zip_file.read(member).decode(\"utf-8\")\n    return data\n", "def _explore_zipfile(zip_path):\n    # remove compression from zipfile name\n    zip_name = zip_path.split(\"/\")[-1][:-3]\n    \n    # read in file contents from zipfile\n    data = {}\n    \n    # read in file contents from zipfile\n    data[\"filename\"] = zip_name\n    \n    # read in file contents from zipfile\n    data[\"data\"] = zip_path.read_text()\n    \n    # return data\n    return data\n    \n", "def _explore_zipfile(zip_path):\n    zip_path = zip_path.split('/')[-1]\n    zip_data = {}\n    for file_name in os.listdir(zip_path):\n        zip_data[file_name] = os.path.join(zip_path, file_name)\n    return zip_data\n", "def _explore_zipfile(zip_path):\n    import re\n    import zipfile\n    import os\n\n    if not os.path.isfile(zip_path):\n        return {}\n\n    zf = zipfile.ZipFile(zip_path)\n\n    data = {}\n\n    for name in zf.namelist():\n        data[name] = zf.read(name).decode('utf-8')\n\n    return data\n", "def _explore_zipfile(zip_path):\n    if zip_path is None:\n        return {}\n    data = {}\n    for f in zipfile.ZipFile(zip_path).namelist():\n        data[f] = zipfile.ZipFile(zip_path).open(f).read(f)\n    return data\n", "def _explore_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path, \"r\")\n    for name in zf.namelist():\n        if name.endswith(\".xml\"):\n            data = {name[:-4]: zf.read(name)}\n            break\n    else:\n        data = {}\n    return data\n", "def _explore_zipfile(zip_path):\n    return {\n        \"name\": os.path.basename(zip_path),\n        \"version\": zipfile.basename(zip_path),\n        \"files\": [\n            {\"name\": \"{}{}\".format(x, \".xml\"), \"path\": x}\n            for x in os.listdir(zip_path)\n            if not x.startswith(\"_\")\n        ],\n    }\n", "def _explore_zipfile(zip_path):\n    result = {}\n    for info in zipfile.ZipFile(zip_path).infolist():\n        xml_basename = os.path.splitext(info.filename)[0]\n        if xml_basename in result:\n            print(\"XML basename %s already in result\" % xml_basename)\n            continue\n        result[xml_basename] = info.file_size\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    xml_basenames = [\"\", \"XML\", \"_XML\"]\n    xml_files = []\n    for filename in zip_path.namelist():\n        if filename.endswith(xml_basenames):\n            xml_files.append(filename)\n    return {\n        filename: zip_path.read(filename)\n        for filename in xml_files\n        if filename.endswith(\".xml\")\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return {zipfile.basename(f): f for f in zip_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_file = zipfile.ZipFile(zip_path)\n    data = {}\n    for member in zip_file.namelist():\n        data[member] = zip_file.read(member).decode(\"utf-8\")\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # remove compression from zipfile name\n    zip_name = zip_path.split(\"/\")[-1][:-3]\n    \n    # read in file contents from zipfile\n    data = {}\n    \n    # read in file contents from zipfile\n    data[\"filename\"] = zip_name\n    \n    # read in file contents from zipfile\n    data[\"data\"] = zip_path.read_text()\n    \n    # return data\n    return data\n    \n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zip_path = zip_path.split('/')[-1]\n    zip_data = {}\n    for file_name in os.listdir(zip_path):\n        zip_data[file_name] = os.path.join(zip_path, file_name)\n    return zip_data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    import re\n    import zipfile\n    import os\n\n    if not os.path.isfile(zip_path):\n        return {}\n\n    zf = zipfile.ZipFile(zip_path)\n\n    data = {}\n\n    for name in zf.namelist():\n        data[name] = zf.read(name).decode('utf-8')\n\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    if zip_path is None:\n        return {}\n    data = {}\n    for f in zipfile.ZipFile(zip_path).namelist():\n        data[f] = zipfile.ZipFile(zip_path).open(f).read(f)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path, \"r\")\n    for name in zf.namelist():\n        if name.endswith(\".xml\"):\n            data = {name[:-4]: zf.read(name)}\n            break\n    else:\n        data = {}\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return {\n        \"name\": os.path.basename(zip_path),\n        \"version\": zipfile.basename(zip_path),\n        \"files\": [\n            {\"name\": \"{}{}\".format(x, \".xml\"), \"path\": x}\n            for x in os.listdir(zip_path)\n            if not x.startswith(\"_\")\n        ],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    result = {}\n    for info in zipfile.ZipFile(zip_path).infolist():\n        xml_basename = os.path.splitext(info.filename)[0]\n        if xml_basename in result:\n            print(\"XML basename %s already in result\" % xml_basename)\n            continue\n        result[xml_basename] = info.file_size\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as z:\n        return [f.filename for f in z.filelist]\n", "def files_list_from_zipfile(zip_path):\n    files = []\n    for zipinfo in zipfile.ZipFile(zip_path).infolist():\n        files.append(zipinfo.filename)\n    return files\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.open('r') if f.name.endswith('.xml')]\n", "def files_list_from_zipfile(zip_path):\n    return [os.path.join('.', f) for f in sorted(os.listdir(zip_path)) if f.endswith('.xml')]", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "def files_list_from_zipfile(zip_path):\n    files = []\n    for f in zipfile.ZipFile(zip_path).namelist():\n        if f.endswith('.xml'):\n            files.append(f)\n    return files\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "def files_list_from_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path)\n    return [f for f in zf.namelist() if '.' not in f]", "def files_list_from_zipfile(zip_path):\n    f = zipfile.ZipFile(zip_path)\n    return [f.read(f.namelist()[i]) for i in range(len(f.namelist()))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as z:\n        return [f.filename for f in z.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    files = []\n    for zipinfo in zipfile.ZipFile(zip_path).infolist():\n        files.append(zipinfo.filename)\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.open('r') if f.name.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [os.path.join('.', f) for f in sorted(os.listdir(zip_path)) if f.endswith('.xml')]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    files = []\n    for f in zipfile.ZipFile(zip_path).namelist():\n        if f.endswith('.xml'):\n            files.append(f)\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in os.listdir(zip_path) if f.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    zf = zipfile.ZipFile(zip_path)\n    return [f for f in zf.namelist() if '.' not in f]", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    f = zipfile.ZipFile(zip_path)\n    return [f.read(f.namelist()[i]) for i in range(len(f.namelist()))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?i)w:(st=\")(.+?)(\"|\\))', r'\\1-\\2', content)", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    \n    \n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"','w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')", "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\S+)st=\"', r'w-st=\"', content)\n", "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'(?i)w:(st=\")(.+?)(\"|\\))', r'\\1-\\2', content)", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"','w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Convert text that defaults to 'w:st=\"' to 'w-st=\"'\n    \"\"\"\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'w:(\\S+)st=\"', r'w-st=\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return content.replace('w:st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if node.xpath(xpath):\n            return node.xpath(xpath)[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return next((e for e in pubdate_xpaths if e.has_attr('pubdate')), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        if xpath(node):\n            return xpath(node)\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for i in pubdate_xpaths:\n        if node.xpath(i):\n            return i\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if xpath(node):\n            return xpath(node)\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"Returns the first match in the pubdate_xpaths list\"\"\"\n    return node.xpath(pubdate_xpaths[0])\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node.text)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\" Returns the first match in the pubdate_xpaths list \"\"\"\n    for xpath in pubdate_xpaths:\n        try:\n            return node.xpath(xpath)[0]\n        except IndexError:\n            pass\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    return node.xpath(pubdate_xpaths[0])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if node.xpath(xpath):\n            return node.xpath(xpath)[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return next((e for e in pubdate_xpaths if e.has_attr('pubdate')), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        if xpath(node):\n            return xpath(node)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        match = node.xpath(xpath)\n        if match:\n            return match[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    for i in pubdate_xpaths:\n        if node.xpath(i):\n            return i\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if xpath(node):\n            return xpath(node)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"Returns the first match in the pubdate_xpaths list\"\"\"\n    return node.xpath(pubdate_xpaths[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node.text)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\" Returns the first match in the pubdate_xpaths list \"\"\"\n    for xpath in pubdate_xpaths:\n        try:\n            return node.xpath(xpath)[0]\n        except IndexError:\n            pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    Returns the first match in the pubdate_xpaths list\n    \"\"\"\n    return node.xpath(pubdate_xpaths[0])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"Number\").text,\n        issue.find(\"Supply\").text,\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"{{{}}}number\".format(NRML_NAMESPACE)).text,\n        issue.find(\"{{{}}}suppl\".format(NRML_NAMESPACE)).text,\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return [\n        issue.findtext('number'),\n        issue.findtext('suppl'),\n    ]\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('{http://www.loc.gov/premis/v3}id').text\n    suppl = issue.find('{http://www.loc.gov/premis/v3}xsi:sup', namespaces=_NSMAP)\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of\n    issue.\n    \"\"\"\n    number = issue.find('.//{%s}number' % RELATIONSHIP_NAMESPACE).text\n    suppl = issue.find('.//{%s}suppl' % RELATIONSHIP_NAMESPACE).text\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.xpath('.//field[@name=\"number\"]/@value'),\n            issue.xpath('.//field[@name=\"suppl\"]/@value'))\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of\n    issue.\n    \"\"\"\n    return [issue.xpath('.//number/text()')[0], issue.xpath('.//suppl')[0]]\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    number = issue.find('.//{http://www.loc.gov/ebooks/catalog/v3}number')\n    suppl = issue.find('.//{http://www.loc.gov/ebooks/catalog/v3}suppl')\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('.//number').text,\n        issue.find('.//suppl').text\n    )\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"Number\").text,\n        issue.find(\"Supply\").text,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"{{{}}}number\".format(NRML_NAMESPACE)).text,\n        issue.find(\"{{{}}}suppl\".format(NRML_NAMESPACE)).text,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return [\n        issue.findtext('number'),\n        issue.findtext('suppl'),\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('{http://www.loc.gov/premis/v3}id').text\n    suppl = issue.find('{http://www.loc.gov/premis/v3}xsi:sup', namespaces=_NSMAP)\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of\n    issue.\n    \"\"\"\n    number = issue.find('.//{%s}number' % RELATIONSHIP_NAMESPACE).text\n    suppl = issue.find('.//{%s}suppl' % RELATIONSHIP_NAMESPACE).text\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.xpath('.//field[@name=\"number\"]/@value'),\n            issue.xpath('.//field[@name=\"suppl\"]/@value'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of\n    issue.\n    \"\"\"\n    return [issue.xpath('.//number/text()')[0], issue.xpath('.//suppl')[0]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    number = issue.find('.//{http://www.loc.gov/ebooks/catalog/v3}number')\n    suppl = issue.find('.//{http://www.loc.gov/ebooks/catalog/v3}suppl')\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Extract the possible values of number and suppl from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('.//number').text,\n        issue.find('.//suppl').text\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return f\"{self.__class__.__name__}(\"\n", "def pretty(self, indent=0, debug=False):\n    \n    \n    return '\\n'.join(''* indent + str(elt) for elt in self)\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    outstr = \"\"\n    outstr += \" \"*indent + \"<\" + self.__class__.__name__ + \">\\n\"\n    outstr += self.pretty_print(indent + 1, debug)\n    outstr += \" \"*indent + \">\\n\"\n    return outstr\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    result = '\\n'.join(self.pretty_lines(indent, debug))\n    return '{}{}'.format(' '*indent, result)\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    s = \"\"\n    for i, c in enumerate(self):\n        if i:\n            s += \"\\n\"\n        s += c\n    return s\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return '\\n'.join(self._pretty(indent, debug))\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n    \"\"\"\n    result = [''* indent + '<' + self.tag + '>']\n    if debug:\n        result.append('\\n')\n        result.append(''* indent + '</' + self.tag + '>')\n        result.append('\\n')\n    result.append(''* indent + '%s' % self.attrib)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.children)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.text)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.tail)\n    return ''.join(result)\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return ('\\n' +'' * indent +''.join(['%s=%s' % (k, v)\n            for k, v in list(self.__dict__.items()) if k[0]!= '_']))\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return \"\\n\".join(\n        \" \" * indent + \"{}\".format(\"    \" * i + \" \" * (indent + 1))\n        for i, (k, v) in enumerate(self.items())\n    )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n    \"\"\"\n    string = \"\"\n    string += \"{:s}\".format(self.name)\n    if self.value is not None:\n        string += \" : \" + self.value\n    if self.description is not None:\n        string += \"\\n\"\n        string += self.description\n    if self.icon is not None:\n        string += \"\\n\" + self.icon\n    if debug:\n        string += \"\\n\" + self.pretty_description()\n    return string\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return f\"{self.__class__.__name__}(\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \n    \n    return '\\n'.join(''* indent + str(elt) for elt in self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    outstr = \"\"\n    outstr += \" \"*indent + \"<\" + self.__class__.__name__ + \">\\n\"\n    outstr += self.pretty_print(indent + 1, debug)\n    outstr += \" \"*indent + \">\\n\"\n    return outstr\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    result = '\\n'.join(self.pretty_lines(indent, debug))\n    return '{}{}'.format(' '*indent, result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    s = \"\"\n    for i, c in enumerate(self):\n        if i:\n            s += \"\\n\"\n        s += c\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return '\\n'.join(self._pretty(indent, debug))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n    \"\"\"\n    result = [''* indent + '<' + self.tag + '>']\n    if debug:\n        result.append('\\n')\n        result.append(''* indent + '</' + self.tag + '>')\n        result.append('\\n')\n    result.append(''* indent + '%s' % self.attrib)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.children)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.text)\n    result.append('\\n')\n    result.append(''* indent + '%s' % self.tail)\n    return ''.join(result)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return ('\\n' +'' * indent +''.join(['%s=%s' % (k, v)\n            for k, v in list(self.__dict__.items()) if k[0]!= '_']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self. \"\"\"\n    return \"\\n\".join(\n        \" \" * indent + \"{}\".format(\"    \" * i + \" \" * (indent + 1))\n        for i, (k, v) in enumerate(self.items())\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n    \"\"\"\n    string = \"\"\n    string += \"{:s}\".format(self.name)\n    if self.value is not None:\n        string += \" : \" + self.value\n    if self.description is not None:\n        string += \"\\n\"\n        string += self.description\n    if self.icon is not None:\n        string += \"\\n\" + self.icon\n    if debug:\n        string += \"\\n\" + self.pretty_description()\n    return string\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B\n    \"\"\"\n    for arg in args:\n        if arg.is_negative:\n            self.absorption += arg.a\n        else:\n            self.absorption -= arg.a\n    return self.absorption\n", "def absorb(self, args):\n    return [arg | (~arg & ~b) for arg, b in zip(args, args)]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B, A & B, A & B\n    \"\"\"\n    for arg in args:\n        self, arg = arg, self.__class__(arg)\n    return [n | m for n, m in zip(self, arg)]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B = A, A & B\n    \"\"\"\n    return [a | b for a, b in zip(args, args[1:])]\n", "def absorb(self, args):\n    return [arg | (arg & b) for arg, b in zip(args, args[1:])]\n", "def absorb(self, args):\n    return [a | b for a, b in zip(args, args[1:])]", "def absorb(self, args):\n    return [a | b for a, b in zip(args, args[1:])]\n", "def absorb(self, args):\n    return [arg | arg for arg in args]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A | (A & B) = A, A & B = A, A & B = B\n    \"\"\"\n    return [a | b for a, b in zip(args, args[1:])]\n", "def absorb(self, args):\n    return [absorption(arg) for arg in args]"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B\n    \"\"\"\n    for arg in args:\n        if arg.is_negative:\n            self.absorption += arg.a\n        else:\n            self.absorption -= arg.a\n    return self.absorption\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | (~arg & ~b) for arg, b in zip(args, args)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B, A & B, A & B\n    \"\"\"\n    for arg in args:\n        self, arg = arg, self.__class__(arg)\n    return [n | m for n, m in zip(self, arg)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A & (~A | B) = A, A & B = A, A & B\n    \"\"\"\n    return [a | b for a, b in zip(args, args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | (arg & b) for arg, b in zip(args, args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [a | b for a, b in zip(args, args[1:])]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [a | b for a, b in zip(args, args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg | arg for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption and negative absorption.\n    See https://en.wikipedia.org/wiki/Absorption_law\n    Absorption::A & (A | B) = A, A | (A & B) = A, A & B = A, A & B = B\n    \"\"\"\n    return [a | b for a, b in zip(args, args[1:])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [absorption(arg) for arg in args]", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    return self.add_hook(hook)\n", "def on(self, hook):\n    return self.add_hook(hook)\n", "def on(self, hook):\n\n    def decorator(func):\n        self._hooks[hook] = func\n        return func\n\n    return decorator\n", "def on(self, hook):\n    return self.add_hook(hook)\n", "def on(self, hook):\n\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def _decorator(f):\n        self.add_handler(hook, f)\n        return f\n    return _decorator\n", "def on(self, hook):\n    return self.add_handler(hook)\n", "def on(self, hook):\n    \"\"\"\n    Decorator function to add a new handler to the registry.\n\n    Args:\n        hook (HookType): Hook attribute for which to register the handler.\n\n    Returns:\n        callable: Decorator for registering listeners for the specified hook.\n    \"\"\"\n    def register(handler_cls):\n        self.add_handler(hook, handler_cls)\n        return handler_cls\n    return register\n", "def on(self, hook):\n    return self.add_hook(hook)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    return self.add_hook(hook)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return self.add_hook(hook)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self._hooks[hook] = func\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return self.add_hook(hook)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def _decorator(f):\n        self.add_handler(hook, f)\n        return f\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return self.add_handler(hook)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    \"\"\"\n    Decorator function to add a new handler to the registry.\n\n    Args:\n        hook (HookType): Hook attribute for which to register the handler.\n\n    Returns:\n        callable: Decorator for registering listeners for the specified hook.\n    \"\"\"\n    def register(handler_cls):\n        self.add_handler(hook, handler_cls)\n        return handler_cls\n    return register\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return self.add_hook(hook)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        'user': user,\n        'etcd_host': etcd_host,\n        'etcd_port': etcd_port,\n        'database': {\n            'name': '%s_database' % user,\n            'host': etcd_host,\n            'port': etcd_port,\n            'password': '%s_password' % user,\n            'user': user,\n        },\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_dir\": \"/var/lib/python-etcd\",\n        \"password\": \"\",\n        \"no_log\": False,\n        \"protocol\": \"https\",\n        \"version\": \"0.9.9\",\n        \"ttl\": 300,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"ssh_key\": None,\n        \"password\": None,\n        \"ssh_password\": None,\n        \"key_filename\": None,\n        \"port\": etcd_port,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"event_queue\": [],\n        \"compressor\": [],\n        \"max_requests\": 1000,\n        \"min_requests\": 1,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_key\": \"static_key\",\n        \"static_secret\": \"static_secret\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n    return config\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        'user': user,\n        'etcd_host': etcd_host,\n        'etcd_port': etcd_port,\n        'database': {\n            'name': '%s_database' % user,\n            'host': etcd_host,\n            'port': etcd_port,\n            'password': '%s_password' % user,\n            'user': user,\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"database_dir\": \"/var/lib/python-etcd\",\n        \"password\": \"\",\n        \"no_log\": False,\n        \"protocol\": \"https\",\n        \"version\": \"0.9.9\",\n        \"ttl\": 300,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"ssh_key\": None,\n        \"password\": None,\n        \"ssh_password\": None,\n        \"key_filename\": None,\n        \"port\": etcd_port,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"user\": user, \"etcd_host\": etcd_host, \"etcd_port\": etcd_port}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"event_queue\": [],\n        \"compressor\": [],\n        \"max_requests\": 1000,\n        \"min_requests\": 1,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"static_key\": \"static_key\",\n        \"static_secret\": \"static_secret\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n    }\n    return config\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    # This is a bit ugly, but it works for now.\n    if self.fold_out is None:\n        return dt\n    return dt.replace(tzinfo=self.fold_out)\n", "def _fromutc(self, dt):\n    # This is a bit silly since __getattr__ on the datetime object is always\n    # called on the datetime object and __getitem__ on the datetime object\n    # is always called on the datetime object.\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    if self.tzinfo is None:\n        # We can't determine if the datetime is in a fold state\n        return False\n    return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tz)\n    return dt.astimezone(self.tz)\n", "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    return dt.replace(tzinfo=None)\n", "def _fromutc(self, dt):\n    if dt is None:\n        return None\n    return dt.astimezone(self._tz)\n", "def _fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tzinfo)\n    else:\n        return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tz)\n    else:\n        return dt.astimezone(self._tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tz)\n    else:\n        return dt.astimezone(self.tz)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    # This is a bit ugly, but it works for now.\n    if self.fold_out is None:\n        return dt\n    return dt.replace(tzinfo=self.fold_out)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # This is a bit silly since __getattr__ on the datetime object is always\n    # called on the datetime object and __getitem__ on the datetime object\n    # is always called on the datetime object.\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    if self.tzinfo is None:\n        # We can't determine if the datetime is in a fold state\n        return False\n    return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tz)\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    # type: (datetime) -> datetime\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt is None:\n        return None\n    return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tzinfo)\n    else:\n        return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self._tz)\n    else:\n        return dt.astimezone(self._tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tz)\n    else:\n        return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items()})\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k!= \"_delta\"})\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if not k.startswith(\"_\")})\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer values\n    for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n\n    :return: Returns a :class:`dateutil.relativedelta.relativedelta` object. \n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated by integer values for\n    the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**self.to_dict())\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items()})\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds)\n", "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{\n        k: int(v) for k, v in self.__dict__.items()\n        if not k.startswith('_')\n    })\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items()})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if k!= \"_delta\"})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items() if not k.startswith(\"_\")})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer values\n    for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n\n    :return: Returns a :class:`dateutil.relativedelta.relativedelta` object. \n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated by integer values for\n    the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**self.to_dict())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{k: int(v) for k, v in self.__dict__.items()})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representative entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**self.__dict__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(\n        days=self.days,\n        hours=self.hours,\n        minutes=self.minutes,\n        seconds=self.seconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Return a version of this object representated entirely using integer\n    values for the relative attributes.\n\n    >>> relativedelta(days=1.5, hours=2).normalized()\n    relativedelta(days=+1, hours=+14)\n    \"\"\"\n    return relativedelta(**{\n        k: int(v) for k, v in self.__dict__.items()\n        if not k.startswith('_')\n    })\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self.__class__, *args, **kwargs)\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API\n    changed in Python 3\n    \"\"\"\n    def wrapper(self, name=None):\n        if name is None:\n            name = self.name\n        if six.PY2:\n            name = name.encode('utf-8')\n        return namefunc(self, name)\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    if sys.version_info[0] < 3:\n        return namefunc\n    return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API changed\n    in Python 3\n    \"\"\"\n    return _tzname_in_python2_cache.setdefault(namefunc, namefunc)\n", "def tzname_in_python2(namefunc):\n    def _namefunc(self):\n        return namefunc(self)\n    return _namefunc\n", "def tzname_in_python2(namefunc):\n    if six.PY3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if six.PY2:\n            return name\n        else:\n            return name.encode('utf-8')\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API changed\n    in Python 3\n    \"\"\"\n    def wrapper(self, name):\n        name = name.encode('utf-8')\n        return namefunc(self, name)\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    return lambda self, x: namefunc(self._tzname_in_python2(x))\n", "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self, *args, **kwargs).encode('utf-8')\n    return wrapper\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self.__class__, *args, **kwargs)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API\n    changed in Python 3\n    \"\"\"\n    def wrapper(self, name=None):\n        if name is None:\n            name = self.name\n        if six.PY2:\n            name = name.encode('utf-8')\n        return namefunc(self, name)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if sys.version_info[0] < 3:\n        return namefunc\n    return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API changed\n    in Python 3\n    \"\"\"\n    return _tzname_in_python2_cache.setdefault(namefunc, namefunc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def _namefunc(self):\n        return namefunc(self)\n    return _namefunc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if six.PY3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if six.PY2:\n            return name\n        else:\n            return name.encode('utf-8')\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2 tzname() API changed\n    in Python 3\n    \"\"\"\n    def wrapper(self, name):\n        name = name.encode('utf-8')\n        return namefunc(self, name)\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    return lambda self, x: namefunc(self._tzname_in_python2(x))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def wrapper(self, *args, **kwargs):\n        return namefunc(self, *args, **kwargs).encode('utf-8')\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    try:\n        from import version\n        return {'version': version}\n    except ImportError:\n        return {'version': '0.0.1'}\n", "def get_versions():\n    try:\n        return __import__('requests').__version__\n    except ImportError:\n        return '0.8.0'\n", "def get_versions():\n    try:\n        return __import__('requests').__version__\n    except:\n        return '1.0.0'\n", "def get_versions():\n    return {\n        '2_0_0': '2.0.0',\n        '1.0.0': '1.0.0',\n    }\n", "def get_versions():\n    \"\"\"\n    Get version information or return default if unable to do so.\n    \"\"\"\n    try:\n        return [('', '', '', '', '', '')]\n    except ImportError:\n        return [('', '', '', '', '', '')]\n", "def get_versions():\n    \n    \n    try:\n        from import __version__ as version\n        return version\n    except ImportError:\n        return 'v1.0'\n", "def get_versions():\n    return {\n        \"snap7\": \"1.0.0\",\n        \"snap\": \"1.0.0\",\n        \"svn\": \"1.0.0\",\n        \"unity\": \"1.0.0\",\n        \"hg\": \"1.0.0\"\n    }\n", "def get_versions():\n    try:\n        import re\n        return re.findall(r\"__version__\\s+=\\s+'(\\d+\\.\\d+\\.\\d+)'\", open(\"src/__init__.py\").read())\n    except ImportError:\n        return ['1.0.0']\n", "def get_versions():\n    try:\n        from pkg_resources import parse_version as pkgver\n        return {'version': pkgver}\n    except ImportError:\n        return {'version': '0.0.0'}\n", "def get_versions():\n    try:\n        import pkg_resources\n    except ImportError:\n        return {'version': '0.0.0'}\n    else:\n        return {\n           'version': pkg_resources.get_distribution('openstack_dashboard').version,\n        }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    try:\n        from import version\n        return {'version': version}\n    except ImportError:\n        return {'version': '0.0.1'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return __import__('requests').__version__\n    except ImportError:\n        return '0.8.0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return __import__('requests').__version__\n    except:\n        return '1.0.0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        '2_0_0': '2.0.0',\n        '1.0.0': '1.0.0',\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    \"\"\"\n    Get version information or return default if unable to do so.\n    \"\"\"\n    try:\n        return [('', '', '', '', '', '')]\n    except ImportError:\n        return [('', '', '', '', '', '')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    \n    \n    try:\n        from import __version__ as version\n        return version\n    except ImportError:\n        return 'v1.0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        \"snap7\": \"1.0.0\",\n        \"snap\": \"1.0.0\",\n        \"svn\": \"1.0.0\",\n        \"unity\": \"1.0.0\",\n        \"hg\": \"1.0.0\"\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        import re\n        return re.findall(r\"__version__\\s+=\\s+'(\\d+\\.\\d+\\.\\d+)'\", open(\"src/__init__.py\").read())\n    except ImportError:\n        return ['1.0.0']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        from pkg_resources import parse_version as pkgver\n        return {'version': pkgver}\n    except ImportError:\n        return {'version': '0.0.0'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        import pkg_resources\n    except ImportError:\n        return {'version': '0.0.0'}\n    else:\n        return {\n           'version': pkg_resources.get_distribution('openstack_dashboard').version,\n        }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    \n    \n    if style == 'plain':\n        return '\\n'.join(pieces)\n    if style == 'code':\n        return '\\n'.join([' '+ line for line in pieces])\n    if style == 'table':\n        return '\\n'.join([' '+ line +''for line in pieces])\n    if style =='sh':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'ht':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'js':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'none':\n        return ''.join([' '+ line.center(60, '-') +''for line in pieces])\n", "def render(pieces, style):\n    \n    \n    return '\\n'.join(render_piece(piece, style) for piece in pieces)\n", "def render(pieces, style):\n    \n    \n    return \"\".join([f\"<{style}>{piece}</{style}>\" for piece in pieces])\n", "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return '\\n'.join(\n        '\\t' + ('#' * i) +'' + line\n        for i, line in enumerate(pieces, 1)\n    )\n", "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [f\"{''* i}: {v}\" for i, v in enumerate(pieces, 1) if v is not None]\n    )\n", "def render(pieces, style):\n    return \"\".join(pieces) or \"\"\n", "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [f\"{piece}{style}\" for piece in pieces]\n    )\n", "def render(pieces, style):\n    \n    \n    return '\\n'.join(f'{c}{s}{' * (len(pieces) - i)}' for i, c in enumerate(pieces))\n", "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return \"\\n\".join(\n        [\n            \"{}{}\".format(\"#\" * i, escape(piece, quote=False))\n            for i, piece in enumerate(pieces, 1)\n        ]\n    )\n", "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return '\\n'.join([f'{style} {v}' for v in pieces])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    \n    \n    if style == 'plain':\n        return '\\n'.join(pieces)\n    if style == 'code':\n        return '\\n'.join([' '+ line for line in pieces])\n    if style == 'table':\n        return '\\n'.join([' '+ line +''for line in pieces])\n    if style =='sh':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'ht':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'js':\n        return '\\n'.join([' '+ line.center(60, '-') +''for line in pieces])\n    if style == 'none':\n        return ''.join([' '+ line.center(60, '-') +''for line in pieces])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return '\\n'.join(render_piece(piece, style) for piece in pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return \"\".join([f\"<{style}>{piece}</{style}>\" for piece in pieces])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return '\\n'.join(\n        '\\t' + ('#' * i) +'' + line\n        for i, line in enumerate(pieces, 1)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [f\"{''* i}: {v}\" for i, v in enumerate(pieces, 1) if v is not None]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return \"\".join(pieces) or \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [f\"{piece}{style}\" for piece in pieces]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return '\\n'.join(f'{c}{s}{' * (len(pieces) - i)}' for i, c in enumerate(pieces))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return \"\\n\".join(\n        [\n            \"{}{}\".format(\"#\" * i, escape(piece, quote=False))\n            for i, piece in enumerate(pieces, 1)\n        ]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Render the given version pieces into the requested style.\n    \"\"\"\n    return '\\n'.join([f'{style} {v}' for v in pieces])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    if pieces[0] == '+':\n        return pieces\n    return '.' + pieces\n", "def plus_or_dot(pieces):\n    if '.' not in pieces:\n        return '+' + pieces\n    else:\n        return pieces\n", "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return \"+\" + pieces[0]\n    return pieces[0] + \".\" + pieces[1]\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't have one, else return a. \"\"\"\n    return \"+\".join(pieces) if pieces else \".\"\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return \"{}{}{}\".format(*pieces) if not pieces else \".{}\".format(*pieces)\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't have one, else return a. \"\"\"\n    return '+' if not pieces or pieces[0]!= '.' else '.'\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a.\n    \"\"\"\n    if '.' not in pieces:\n        return '+' + pieces\n    return pieces\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return \"{}{}{}\".format(pieces[0], \"+\" if len(pieces) > 1 else \".\", pieces[1])\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    if pieces[-1] == \".\":\n        return \".\" + pieces[:-1]\n    else:\n        return \".\" + pieces\n", "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return '+' if pieces[0] == '.' else '.'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    if pieces[0] == '+':\n        return pieces\n    return '.' + pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if '.' not in pieces:\n        return '+' + pieces\n    else:\n        return pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if len(pieces) == 1:\n        return \"+\" + pieces[0]\n    return pieces[0] + \".\" + pieces[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't have one, else return a. \"\"\"\n    return \"+\".join(pieces) if pieces else \".\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return \"{}{}{}\".format(*pieces) if not pieces else \".{}\".format(*pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't have one, else return a. \"\"\"\n    return '+' if not pieces or pieces[0]!= '.' else '.'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a.\n    \"\"\"\n    if '.' not in pieces:\n        return '+' + pieces\n    return pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return \"{}{}{}\".format(pieces[0], \"+\" if len(pieces) > 1 else \".\", pieces[1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    if pieces[-1] == \".\":\n        return \".\" + pieces[:-1]\n    else:\n        return \".\" + pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    \"\"\"Return a + if we don't already have one, else return a. \"\"\"\n    return '+' if pieces[0] == '.' else '.'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=True, verbose=verbose\n    )\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            print_help()\n            return 0\n        if cmd == '--version':\n            print_version()\n            return 0\n        if cmd == '--diff':\n            print_diff()\n            return 0\n        if cmd == '--rebase':\n            print_rebase()\n            return 0\n        if cmd == '--split':\n            print_split()\n            return 0\n        if cmd == '--strip':\n            print_strip()\n            return 0\n        if cmd == '--file':\n            print_file()\n            return 0\n        if cmd == '--remove':\n           ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    log.debug(\"running commands: %s\", \" \".join(commands))\n    output = []\n    for cmd in commands:\n        cmd_output = run_command_raw(cmd, args, cwd, verbose, hide_stderr, env)\n        output.append(cmd_output)\n    return output\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        run_cmd(cmd, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, (list, tuple)):\n        commands = [commands]\n    if verbose:\n        print(' '.join(commands))\n    for cmd in commands:\n        if cmd == '-vv':\n            continue\n        if cmd == '-e':\n            env['EXEC'] =''.join(args)\n        elif cmd == '--':\n            env['ARGS'] =''.join(args)\n        elif cmd == '--version':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--help':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--version-only':\n           ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('>>> %s' %''.join(commands))\n    for cmd in commands:\n        cmd = cmd.format(**env)\n        if cmd.endswith(' -v'):\n            cmd = cmd[:-6]\n        if cmd.endswith(' --version'):\n            print('%s %s' % (cmd[:-9], __version__))\n        elif cmd.endswith(' -h'):\n            print('%s %s' % (cmd[:-4], __author__))\n        elif cmd.endswith(' --help'):\n            print('%s %s' % (cmd[:-2], __doc__))\n        else:\n            if not hide_stderr:\n                print('%s %s' % (cmd, __doc__))\n            els", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        if env is not None:\n            os.environ.update(env)\n        if hide_stderr:\n            subprocess.call(cmd, cwd=cwd, shell=True)\n        else:\n            subprocess.call(cmd, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is not None:\n            cmd = cmd % env\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.check_call(cmd, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('Running %s' %''.join(commands))\n    results = []\n    for cmd in commands:\n        result = run_command_with_output(cmd, args, cwd, verbose, hide_stderr, env)\n        results.append(result)\n    return results\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, check=False, env=env, cwd=cwd, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, verbose=verbose, hide_stderr=hide_stderr)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=True, verbose=verbose\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            print_help()\n            return 0\n        if cmd == '--version':\n            print_version()\n            return 0\n        if cmd == '--diff':\n            print_diff()\n            return 0\n        if cmd == '--rebase':\n            print_rebase()\n            return 0\n        if cmd == '--split':\n            print_split()\n            return 0\n        if cmd == '--strip':\n            print_strip()\n            return 0\n        if cmd == '--file':\n            print_file()\n            return 0\n        if cmd == '--remove':\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    log.debug(\"running commands: %s\", \" \".join(commands))\n    output = []\n    for cmd in commands:\n        cmd_output = run_command_raw(cmd, args, cwd, verbose, hide_stderr, env)\n        output.append(cmd_output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        run_cmd(cmd, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, (list, tuple)):\n        commands = [commands]\n    if verbose:\n        print(' '.join(commands))\n    for cmd in commands:\n        if cmd == '-vv':\n            continue\n        if cmd == '-e':\n            env['EXEC'] =''.join(args)\n        elif cmd == '--':\n            env['ARGS'] =''.join(args)\n        elif cmd == '--version':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--help':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--version-only':\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('>>> %s' %''.join(commands))\n    for cmd in commands:\n        cmd = cmd.format(**env)\n        if cmd.endswith(' -v'):\n            cmd = cmd[:-6]\n        if cmd.endswith(' --version'):\n            print('%s %s' % (cmd[:-9], __version__))\n        elif cmd.endswith(' -h'):\n            print('%s %s' % (cmd[:-4], __author__))\n        elif cmd.endswith(' --help'):\n            print('%s %s' % (cmd[:-2], __doc__))\n        else:\n            if not hide_stderr:\n                print('%s %s' % (cmd, __doc__))\n            els", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        if env is not None:\n            os.environ.update(env)\n        if hide_stderr:\n            subprocess.call(cmd, cwd=cwd, shell=True)\n        else:\n            subprocess.call(cmd, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is not None:\n            cmd = cmd % env\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.check_call(cmd, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('Running %s' %''.join(commands))\n    results = []\n    for cmd in commands:\n        result = run_command_with_output(cmd, args, cwd, verbose, hide_stderr, env)\n        results.append(result)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, check=False, env=env, cwd=cwd, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, verbose=verbose, hide_stderr=hide_stderr)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_io/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/sample_data/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"eoscm/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/src_cpp/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"cse-dd-histogram/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/ete_dsm/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"py_cgi/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"noel_analysis/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/sunspot/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"data_io/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/sample_data/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"eoscm/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"src/src_cpp/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"cse-dd-histogram/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/ete_dsm/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"py_cgi/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"noel_analysis/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"src/sunspot/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return wrapper\n", "def register_vcs_handler(vcs, method):\n    \n    \n    method = getattr(vcs, method)\n\n    def decorator(f):\n        f._is_vcs_handler = True\n        return f\n\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return add_handler(vcs, method, 'vcs')\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f.__dict__['_vcs_handler'] = (vcs, method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    if vcs in ['hg', 'hg+']:\n        vcs_handlers[vcs] = method\n    else:\n        vcs_unhandled_handlers[vcs] = method\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, method, 'handle_%s' % method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    if vcs not in _vcs_handlers:\n        _vcs_handlers[vcs] = []\n    _vcs_handlers[vcs].append(method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, 'handle_' + method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return add_method_to_self(vcs, method, \"_vcs_handlers\")\n", "def register_vcs_handler(vcs, method):\n    \n    \n    assert isinstance(vcs, str)\n    assert isinstance(method, str)\n    def wrapper(func):\n        setattr(func, HANDLER_ATTR, (vcs, method))\n        return func\n    return wrapper\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def wrapper(f):\n        f.vcs = vcs\n        f.method = method\n        return f\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    method = getattr(vcs, method)\n\n    def decorator(f):\n        f._is_vcs_handler = True\n        return f\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return add_handler(vcs, method, 'vcs')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f.__dict__['_vcs_handler'] = (vcs, method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    if vcs in ['hg', 'hg+']:\n        vcs_handlers[vcs] = method\n    else:\n        vcs_unhandled_handlers[vcs] = method\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, method, 'handle_%s' % method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    if vcs not in _vcs_handlers:\n        _vcs_handlers[vcs] = []\n    _vcs_handlers[vcs].append(method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, 'handle_' + method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return add_method_to_self(vcs, method, \"_vcs_handlers\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    assert isinstance(vcs, str)\n    assert isinstance(method, str)\n    def wrapper(func):\n        setattr(func, HANDLER_ATTR, (vcs, method))\n        return func\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self._roots:\n        if root.validate(validate_objects=validate_objects,\n                         check_digests=check_digests,\n                         show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # type: (bool, bool, bool, bool) -> Tuple[int, int]\n    num_objects = 0\n    checked_objects = 0\n    good_objects = 0\n    if validate_objects:\n        validate_objects = self.get_validate_objects()\n    if check_digests:\n        check_digests = self.get_check_digests()\n    if show_warnings:\n        self.__validate_objects_and_digests(validate_objects, check_digests)\n    return (num_objects, checked_objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of\n                           objects checked that were found to be valid\n    \"\"\"\n    # Check digests\n    if not check_digests:\n        valid_digests = self.digests\n    else:\n        valid_digests = []\n        for digest in self.digests:\n            if not digest.validate():\n                valid_digests.append(digest.name)\n\n    # Check objects\n    if not validate_objects:\n        return 0, 0\n    if show_warnings:\n        print(\"\\nValid objects:\")\n        print(\"\\n\".join(valid_digests))\n    valid_objects = [x for x in self.objects if x.validate()]\n    return len(valid_objects), len(valid_digests)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root, subdirs, files in os.walk(self.storage_path, followlinks=True):\n        if check_digests:\n            self.digest_check(root)\n        for file in files:\n            self.check_file(os.path.join(root, file), validate_objects)\n        if check_objects:\n            self.check_objects(os.path.join(root, ''), validate_objects, show_warnings)\n            good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    return len(self.objects), len(self.valid_objects), len(self.invalid_objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root in self.sr.walk():\n        if validate_objects is True and check_digests is True:\n            if not root.digests:\n                continue\n            if not len(root.digests) == 1:\n                continue\n        if show_warnings is True and root.warnings:\n            print(root.warnings)\n        if root.digests and root.digests[0] is not None:\n            num_objects += 1\n            good_objects += 1\n            if root.digests[0].validate_objects(\n                    validate_objects=validate_objects, check_digests=check_digests):\n                good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of objects checked that were found\n    to be valid for this storage root\n    \"\"\"\n    if not self._validate_objects:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    good_objects = self._objects_with_digest(check_digests)\n    if not good_objects:\n        return 0, 0\n\n    return len(good_objects), len(good_objects) - len(self._objects_with_digest(check_digests))\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    if validate_objects:\n        for s in self.snapshots:\n            num_objects += s.validate_objects(check_digests, show_warnings)\n            if s.is_root:\n                break\n    return num_objects, num_objects - len(self.snapshots)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, show_warnings)\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, False)\n    return validate_objects, check_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    valid_objects = 0\n    for root, dirs, files in os.walk(self.storage_root):\n        num_objects += 1\n        for f in files:\n            valid_objects += 1\n            if validate_objects:\n                if f.startswith(self.storage_root):\n                    if f.endswith(self.object_ending):\n                        num_objects += 1\n                        valid_objects += self.validate_object(f, check_digests, show_warnings)\n                        break\n    if validate_objects:\n        if not show_warnings:\n            self.warn('Valid objects found: {}'.format(num_objects))\n    return num_objects, valid_objects\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self._roots:\n        if root.validate(validate_objects=validate_objects,\n                         check_digests=check_digests,\n                         show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # type: (bool, bool, bool, bool) -> Tuple[int, int]\n    num_objects = 0\n    checked_objects = 0\n    good_objects = 0\n    if validate_objects:\n        validate_objects = self.get_validate_objects()\n    if check_digests:\n        check_digests = self.get_check_digests()\n    if show_warnings:\n        self.__validate_objects_and_digests(validate_objects, check_digests)\n    return (num_objects, checked_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of\n                           objects checked that were found to be valid\n    \"\"\"\n    # Check digests\n    if not check_digests:\n        valid_digests = self.digests\n    else:\n        valid_digests = []\n        for digest in self.digests:\n            if not digest.validate():\n                valid_digests.append(digest.name)\n\n    # Check objects\n    if not validate_objects:\n        return 0, 0\n    if show_warnings:\n        print(\"\\nValid objects:\")\n        print(\"\\n\".join(valid_digests))\n    valid_objects = [x for x in self.objects if x.validate()]\n    return len(valid_objects), len(valid_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root, subdirs, files in os.walk(self.storage_path, followlinks=True):\n        if check_digests:\n            self.digest_check(root)\n        for file in files:\n            self.check_file(os.path.join(root, file), validate_objects)\n        if check_objects:\n            self.check_objects(os.path.join(root, ''), validate_objects, show_warnings)\n            good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    return len(self.objects), len(self.valid_objects), len(self.invalid_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root in self.sr.walk():\n        if validate_objects is True and check_digests is True:\n            if not root.digests:\n                continue\n            if not len(root.digests) == 1:\n                continue\n        if show_warnings is True and root.warnings:\n            print(root.warnings)\n        if root.digests and root.digests[0] is not None:\n            num_objects += 1\n            good_objects += 1\n            if root.digests[0].validate_objects(\n                    validate_objects=validate_objects, check_digests=check_digests):\n                good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of objects checked that were found\n    to be valid for this storage root\n    \"\"\"\n    if not self._validate_objects:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    good_objects = self._objects_with_digest(check_digests)\n    if not good_objects:\n        return 0, 0\n\n    return len(good_objects), len(good_objects) - len(self._objects_with_digest(check_digests))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    if validate_objects:\n        for s in self.snapshots:\n            num_objects += s.validate_objects(check_digests, show_warnings)\n            if s.is_root:\n                break\n    return num_objects, num_objects - len(self.snapshots)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, show_warnings)\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, False)\n    return validate_objects, check_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    valid_objects = 0\n    for root, dirs, files in os.walk(self.storage_root):\n        num_objects += 1\n        for f in files:\n            valid_objects += 1\n            if validate_objects:\n                if f.startswith(self.storage_root):\n                    if f.endswith(self.object_ending):\n                        num_objects += 1\n                        valid_objects += self.validate_object(f, check_digests, show_warnings)\n                        break\n    if validate_objects:\n        if not show_warnings:\n            self.warn('Valid objects found: {}'.format(num_objects))\n    return num_objects, valid_objects\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    return _lib.ocfl_initialize(self._ocfl_struct)\n", "def initialize(self):\n    \n    \n    # Initialize the OCFL storage root.\n    self._oocfl_root = OCFL()\n\n    # Initialize the address space with the root of the OCFL file.\n    self._oocfl_root.initialize(self._oocfl_file)\n\n    # Initialize the address space with the root of the OCFL data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file directory.\n    self._oocfl_root.initialize(self._file_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data file.\n    self._", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "def initialize(self):\n    \n    \n    self._ocfl_root = OCFLStorageRoot(self)\n    self._ocfl_root.initialize()\n    return self._ocfl_root\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._initialized = True\n    self._initialize()\n    return self\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._ocfl_root = OCFL()\n    return self\n", "def initialize(self):\n    self._ocfl_root = OCFL()\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    # type: () -> None\n    if self._handle is None:\n        self._handle = pyopencl.create_array(self._context, self._dtype(),\n                                           self._shape, self._strides)\n", "def initialize(self):\n    \n    \n    self._ocfl_root = lib.ocfl_initialize()\n    return self._ocfl_root\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    return _lib.ocfl_initialize(self._ocfl_struct)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    # Initialize the OCFL storage root.\n    self._oocfl_root = OCFL()\n\n    # Initialize the address space with the root of the OCFL file.\n    self._oocfl_root.initialize(self._oocfl_file)\n\n    # Initialize the address space with the root of the OCFL data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file directory.\n    self._oocfl_root.initialize(self._file_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data file.\n    self._", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._ocfl_root = OCFLStorageRoot(self)\n    self._ocfl_root.initialize()\n    return self._ocfl_root\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._initialized = True\n    self._initialize()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._ocfl_root = OCFL()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self._ocfl_root = OCFL()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    # type: () -> None\n    if self._handle is None:\n        self._handle = pyopencl.create_array(self._context, self._dtype(),\n                                           self._shape, self._strides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._ocfl_root = lib.ocfl_initialize()\n    return self._ocfl_root\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if version is None:\n        return ''\n    if version[0] == '0':\n        return version\n    return version[1:] + '.0'\n", "def next_version(version):\n    while version and version[-1] not in ('0', '1'):\n        version += '0'\n    return version\n", "def next_version(version):\n    return '0' if version == '0' else '.'.join(str(int(x) + 1) for x in version.split('.'))\n", "def next_version(version):\n    return version + 1 if version and version[0] == \"0\" else version\n", "def next_version(version):\n    if version < 0:\n        return 0\n    return version + 1\n", "def next_version(version):\n    return '.'.join(version.split('.')[:-1]) + '0'", "def next_version(version):\n    return version if version[0] == '0' else '0' + version\n", "def next_version(version):\n    if version > 0:\n        return version + 1\n    else:\n        return 0\n", "def next_version(version):\n    return '%s.%s' % (version, int(version[-1]) + 1) if version else ''\n", "def next_version(version):\n    if version == 0:\n        return 1\n    return version + 1\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if version is None:\n        return ''\n    if version[0] == '0':\n        return version\n    return version[1:] + '.0'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    while version and version[-1] not in ('0', '1'):\n        version += '0'\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '0' if version == '0' else '.'.join(str(int(x) + 1) for x in version.split('.'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version + 1 if version and version[0] == \"0\" else version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version < 0:\n        return 0\n    return version + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '.'.join(version.split('.')[:-1]) + '0'", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version if version[0] == '0' else '0' + version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version > 0:\n        return version + 1\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '%s.%s' % (version, int(version[-1]) + 1) if version else ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == 0:\n        return 1\n    return version + 1\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    \"\"\"\n        Returns a list of filenames that should be checked and ignored in the\n        inventory.\n    \"\"\"\n    return []\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\" \"\"\"\n    # XXX: This is a very simple implementation.  The first time we validate\n    #      the content digests, we should reuse the inventory to represent the\n    #      files to check.  The second time we validate the content digests,\n    #      we should check the files from the inventory to see if the content\n    #      digests are the same.\n    #\n    #      It would be nice to do some sort of lazy check in here.\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    self.inventory = {}\n    for version in version_dirs:\n        self.inventory[version] = set()\n        self.inventory[version].add(os.path.basename(version))\n    self.inventory[\"_meta\"] = self.inventory.get(\"_meta\", {})\n    self.inventory[\"_files\"] = self.inventory.get(\"_files\", {})\n    self.inventory[\"_dirs\"] = self.inventory.get(\"_dirs\", {})\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\" Return a list of files that were not already present in the inventory. \"\"\"\n    inv = self.inventory\n    for version_dir in version_dirs:\n        inv_files = [f for f in inv if version_dir in inv[f]['parent']]\n        if len(inv_files) == 0:\n            self.log.info(\"{} not found in inventory.\".format(version_dir))\n            return []\n    return inv_files\n", "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit ugly, but it works. need to make it work with the same\n    # version scheme as a source package\n    # TODO: check inventory digests\n    # TODO: check content digests\n    # TODO: check files digests\n    # TODO: check files content digests\n    # TODO: check package content digests\n    # TODO: check package content digests\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Every version SHOULD have an inventory up to that point.\n    Also keep a record of any content digests different from that in the\n    root inventory, and check if validating the content.\n    version_dirs is an array of version directory names, is assumed to be\n    in version sequence (1, 2, 3).\n    \"\"\"\n    inv_digests = {}\n    for vdir in version_dirs:\n        inv_digests[vdir] = self.get_inventory_digest(vdir)\n    return inv_digests\n", "def validate_version_inventories(self, version_dirs):\n    inv = self.inventory\n    if len(version_dirs)!= len(inv):\n        return False\n    for i in range(len(version_dirs)):\n        v = version_dirs[i]\n        if v in inv:\n            if i!= len(inv) - 1:\n                inv[v] = max(inv[v], inv[v+1])\n            else:\n                inv[v] = inv[v+1]\n        else:\n            if i!= len(inv) - 1:\n                inv[v] = 1\n    return True\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Return a list of files that should be checked for updates.\n    \"\"\"\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    inventory_dir = self.get_inventory_dir()\n    if inventory_dir is None:\n        return\n    for version_dir in version_dirs:\n        if version_dir not in inventory_dir:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' does not exist.\".format(version_dir)\n            )\n        if version_dir in self._root_inventory:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' is already in the root inventory.\".format(\n                    version_dir\n                )\n            )\n        self._root_inventory[version_dir] = inventory_dir\n", "def validate_version_inventories(self, version_dirs):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n        Returns a list of filenames that should be checked and ignored in the\n        inventory.\n    \"\"\"\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\" \"\"\"\n    # XXX: This is a very simple implementation.  The first time we validate\n    #      the content digests, we should reuse the inventory to represent the\n    #      files to check.  The second time we validate the content digests,\n    #      we should check the files from the inventory to see if the content\n    #      digests are the same.\n    #\n    #      It would be nice to do some sort of lazy check in here.\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.inventory = {}\n    for version in version_dirs:\n        self.inventory[version] = set()\n        self.inventory[version].add(os.path.basename(version))\n    self.inventory[\"_meta\"] = self.inventory.get(\"_meta\", {})\n    self.inventory[\"_files\"] = self.inventory.get(\"_files\", {})\n    self.inventory[\"_dirs\"] = self.inventory.get(\"_dirs\", {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\" Return a list of files that were not already present in the inventory. \"\"\"\n    inv = self.inventory\n    for version_dir in version_dirs:\n        inv_files = [f for f in inv if version_dir in inv[f]['parent']]\n        if len(inv_files) == 0:\n            self.log.info(\"{} not found in inventory.\".format(version_dir))\n            return []\n    return inv_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit ugly, but it works. need to make it work with the same\n    # version scheme as a source package\n    # TODO: check inventory digests\n    # TODO: check content digests\n    # TODO: check files digests\n    # TODO: check files content digests\n    # TODO: check package content digests\n    # TODO: check package content digests\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Every version SHOULD have an inventory up to that point.\n    Also keep a record of any content digests different from that in the\n    root inventory, and check if validating the content.\n    version_dirs is an array of version directory names, is assumed to be\n    in version sequence (1, 2, 3).\n    \"\"\"\n    inv_digests = {}\n    for vdir in version_dirs:\n        inv_digests[vdir] = self.get_inventory_digest(vdir)\n    return inv_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    inv = self.inventory\n    if len(version_dirs)!= len(inv):\n        return False\n    for i in range(len(version_dirs)):\n        v = version_dirs[i]\n        if v in inv:\n            if i!= len(inv) - 1:\n                inv[v] = max(inv[v], inv[v+1])\n            else:\n                inv[v] = inv[v+1]\n        else:\n            if i!= len(inv) - 1:\n                inv[v] = 1\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Return a list of files that should be checked for updates.\n    \"\"\"\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    inventory_dir = self.get_inventory_dir()\n    if inventory_dir is None:\n        return\n    for version_dir in version_dirs:\n        if version_dir not in inventory_dir:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' does not exist.\".format(version_dir)\n            )\n        if version_dir in self._root_inventory:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' is already in the root inventory.\".format(\n                    version_dir\n                )\n            )\n        self._root_inventory[version_dir] = inventory_dir\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    if \"*\" in path:\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"file\"\n    elif os.path.isdir(path):\n        return \"object\"\n    else:\n        return \"error\"\n", "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"object\"\n    else:\n        for x in os.listdir(path):\n            x = os.path.join(path, x)\n            if os.path.isdir(x) and find_path_type(x) == \"object\":\n                return \"object\"\n            elif os.path.isdir(x) and find_path_type(x) == \"file\":\n                return \"file\"\n        return \"error\"\n", "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif 'file' in path:\n        return 'object'\n    elif '0=*' in path:\n        return 'file'\n    else:\n        return 'error'\n", "def find_path_type(path):\n    if os.path.isdir(path):\n        return 'directory'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return 'root'\n", "def find_path_type(path):\n    for i in range(1, 4):\n        if os.path.exists('%s/%s' % (path, '0' * i)):\n            return 'root'\n        elif os.path.exists('%s/%s' % (path, '1' * i)):\n            return 'object'\n        elif os.path.exists('%s/%s' % (path, '2' * i)):\n            return 'file'\n        elif os.path.exists('%s/%s' % (path, '3' * i)):\n            return 'inventory'\n    return 'error'\n", "def find_path_type(path):\n    if '.' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return 'error'\n", "def find_path_type(path):\n    if \".\" not in path:\n        return \"root\"\n    elif \"..\" in path:\n        return \"object\"\n    elif os.path.isdir(path):\n        return \"dir\"\n    elif os.path.isfile(path):\n        return \"file\"\n    else:\n        return \"error description\"\n", "def find_path_type(path):\n    if \"0\" in path:\n        return \"root\"\n    elif \"object\" in path:\n        return \"object\"\n    elif \"file\" in path:\n        return \"file\"\n    else:\n        return \"unknown\"\n", "def find_path_type(path):\n    if '0' in path:\n        return 'root'\n    elif 'object' in path:\n        return 'object'\n    elif 'file' in path:\n        return 'file'\n    else:\n        return 'error description'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    if \"*\" in path:\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"file\"\n    elif os.path.isdir(path):\n        return \"object\"\n    else:\n        return \"error\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'root'\n    else:\n        return 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return \"root\"\n    elif os.path.isfile(path):\n        return \"object\"\n    else:\n        for x in os.listdir(path):\n            x = os.path.join(path, x)\n            if os.path.isdir(x) and find_path_type(x) == \"object\":\n                return \"object\"\n            elif os.path.isdir(x) and find_path_type(x) == \"file\":\n                return \"file\"\n        return \"error\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '*' in path:\n        return 'root'\n    elif 'file' in path:\n        return 'object'\n    elif '0=*' in path:\n        return 'file'\n    else:\n        return 'error'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if os.path.isdir(path):\n        return 'directory'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        return 'root'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for i in range(1, 4):\n        if os.path.exists('%s/%s' % (path, '0' * i)):\n            return 'root'\n        elif os.path.exists('%s/%s' % (path, '1' * i)):\n            return 'object'\n        elif os.path.exists('%s/%s' % (path, '2' * i)):\n            return 'file'\n        elif os.path.exists('%s/%s' % (path, '3' * i)):\n            return 'inventory'\n    return 'error'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '.' in path:\n        return 'root'\n    elif '/' in path:\n        return 'object'\n    elif '\\\\' in path:\n        return 'file'\n    else:\n        return 'error'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if \".\" not in path:\n        return \"root\"\n    elif \"..\" in path:\n        return \"object\"\n    elif os.path.isdir(path):\n        return \"dir\"\n    elif os.path.isfile(path):\n        return \"file\"\n    else:\n        return \"error description\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if \"0\" in path:\n        return \"root\"\n    elif \"object\" in path:\n        return \"object\"\n    elif \"file\" in path:\n        return \"file\"\n    else:\n        return \"unknown\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if '0' in path:\n        return 'root'\n    elif 'object' in path:\n        return 'object'\n    elif 'file' in path:\n        return 'file'\n    else:\n        return 'error description'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not isinstance(params, dict):\n        return params\n    for k, v in params.items():\n        if k in bug_ids:\n            params[k] = v + '+'\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    params[\"id\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    if not bug_ids:\n        return params\n    params['ids'] = ','.join(map(str, bug_ids))\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for param in params:\n        if param['id'] in bug_ids:\n            param['amended'] = True\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['ids'] = ','.join(bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not params:\n        return {}\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n    params['bug_id'] = ','.join(str(bug_id) for bug_id in bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    if params:\n        params[\"bug_id\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = {}\n    params['ids'] = ','.join(bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for bug_id in bug_ids:\n        params['id'] = str(bug_id)\n        params['summary'] = 'Bug #%s was added' % bug_id\n        params['assignee'] = '%s' % self.username\n        params['status'] = 'Assigned'\n    return params\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not isinstance(params, dict):\n        return params\n    for k, v in params.items():\n        if k in bug_ids:\n            params[k] = v + '+'\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    params[\"id\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    if not bug_ids:\n        return params\n    params['ids'] = ','.join(map(str, bug_ids))\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for param in params:\n        if param['id'] in bug_ids:\n            param['amended'] = True\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['ids'] = ','.join(bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not params:\n        return {}\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n    params['bug_id'] = ','.join(str(bug_id) for bug_id in bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    if params:\n        params[\"bug_id\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = {}\n    params['ids'] = ','.join(bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for bug_id in bug_ids:\n        params['id'] = str(bug_id)\n        params['summary'] = 'Bug #%s was added' % bug_id\n        params['assignee'] = '%s' % self.username\n        params['status'] = 'Assigned'\n    return params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        elif isinstance(node, dict):\n            result.append(merge_dicts(node))\n        else:\n            result.append(node)\n    return result", "def deep_merge_nodes(nodes):\n    result = {}\n    for k, v in nodes:\n        if isinstance(v, list):\n            for i, x in enumerate(v):\n                v[i] = deep_merge_nodes(x)\n        else:\n            if k in result:\n                result[k] = result[k].union(v)\n            else:\n                result[k] = v\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        result.update(node)\n    return [(type(k), result.get(k)) for k in sorted(result, key=lambda k: k[1])]\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        elif isinstance(node, MappingNode):\n            result.append(node.value)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    output = []\n    for node in nodes:\n        if isinstance(node, list):\n            output.extend(deep_merge_nodes(node))\n        else:\n            output.append((node.value, node))\n    return output\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes:\n        if isinstance(value, list):\n            value = [deep_merge_nodes(value) for value in value]\n        elif isinstance(value, dict):\n            result.update(value)\n        else:\n            result[key] = value\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes:\n        if not isinstance(value, list):\n            value = [value]\n        for v in value:\n            if key in result:\n                result[key].append(v)\n            else:\n                result[key] = [v]\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, list):\n            result.update(deep_merge_nodes(node))\n        elif isinstance(node, dict):\n            result.update(node)\n        else:\n            result.update(node.value)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node[0], list):\n            result.update(deep_merge_nodes(node[0]))\n        else:\n            result.update(node)\n    return result", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if not isinstance(node, list):\n            node = [node]\n        for key in node:\n            if key in result:\n                result[key].append(node[key])\n            else:\n                result[key] = node[key]\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        elif isinstance(node, dict):\n            result.append(merge_dicts(node))\n        else:\n            result.append(node)\n    return result", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for k, v in nodes:\n        if isinstance(v, list):\n            for i, x in enumerate(v):\n                v[i] = deep_merge_nodes(x)\n        else:\n            if k in result:\n                result[k] = result[k].union(v)\n            else:\n                result[k] = v\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        result.update(node)\n    return [(type(k), result.get(k)) for k in sorted(result, key=lambda k: k[1])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        elif isinstance(node, MappingNode):\n            result.append(node.value)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    output = []\n    for node in nodes:\n        if isinstance(node, list):\n            output.extend(deep_merge_nodes(node))\n        else:\n            output.append((node.value, node))\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes:\n        if isinstance(value, list):\n            value = [deep_merge_nodes(value) for value in value]\n        elif isinstance(value, dict):\n            result.update(value)\n        else:\n            result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes:\n        if not isinstance(value, list):\n            value = [value]\n        for v in value:\n            if key in result:\n                result[key].append(v)\n            else:\n                result[key] = [v]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, list):\n            result.update(deep_merge_nodes(node))\n        elif isinstance(node, dict):\n            result.update(node)\n        else:\n            result.update(node.value)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node[0], list):\n            result.update(deep_merge_nodes(node[0]))\n        else:\n            result.update(node)\n    return result", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if not isinstance(node, list):\n            node = [node]\n        for key in node:\n            if key in result:\n                result[key].append(node[key])\n            else:\n                result[key] = node[key]\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Create a new file with a version number and a list of '\n                    'files to upload.')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n    parser.add_argument('--files', nargs='*', help='The files to upload')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        dest='all',\n        default=False,\n        help='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-d', '--dir',\n        action='store',\n        dest='dir',\n        default='.',\n        help='The directory where the files will be stored.'\n    )\n    parser.add_argument(\n        'files',\n        nargs='*',\n        help='The files to create a new directory under.'\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='''\n        Create a grid of pixel locations for a given map of spatial reference\n        '''\n    )\n    parser.add_argument(\n        '--map',\n        help='The map of spatial reference to use for determining the locations '\n        'for the map.'\n    )\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", default=\"input.txt\", type=str,\n                        help=\"input file\")\n    parser.add_argument(\"-o\", \"--output\", default=\"output.txt\", type=str,\n                        help=\"output file\")\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', default='./config.yaml', help='Configuration file to use.')\n    parser.add_argument('--log', default='./log.txt', help='Log file to use.')\n    parser.add_argument('--dataset', default='./dataset.pkl', help='Dataset to use.')\n    parser.add_argument('--output', default='./output.pkl', help='Output file to use.')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Find and save recent images using a Python '\n                   'regex.',\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Distribute a set of results from a single analysis run.')\n    parser.add_argument('--input', '-i', type=str, required=True,\n                        help='Path to the CSV file containing the results.')\n    parser.add_argument('--output', '-o', type=str, required=True,\n                        help='Path to the CSV file containing the output file.')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Run a set of SNP filtering'\n    )\n    parser.add_argument(\n        '--input',\n        dest='input',\n        help='Path to input file',\n        required=True\n    )\n    parser.add_argument(\n        '--output',\n        dest='output',\n        help='Path to output file',\n        required=True\n    )\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Create a new file with a version number and a list of '\n                    'files to upload.')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n    parser.add_argument('--files', nargs='*', help='The files to upload')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        dest='all',\n        default=False,\n        help='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-d', '--dir',\n        action='store',\n        dest='dir',\n        default='.',\n        help='The directory where the files will be stored.'\n    )\n    parser.add_argument(\n        'files',\n        nargs='*',\n        help='The files to create a new directory under.'\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='''\n        Create a grid of pixel locations for a given map of spatial reference\n        '''\n    )\n    parser.add_argument(\n        '--map',\n        help='The map of spatial reference to use for determining the locations '\n        'for the map.'\n    )\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", default=\"input.txt\", type=str,\n                        help=\"input file\")\n    parser.add_argument(\"-o\", \"--output\", default=\"output.txt\", type=str,\n                        help=\"output file\")\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', default='./config.yaml', help='Configuration file to use.')\n    parser.add_argument('--log', default='./log.txt', help='Log file to use.')\n    parser.add_argument('--dataset', default='./dataset.pkl', help='Dataset to use.')\n    parser.add_argument('--output', default='./output.pkl', help='Output file to use.')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Find and save recent images using a Python '\n                   'regex.',\n        formatter_class=argparse.RawTextHelpFormatter,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Distribute a set of results from a single analysis run.')\n    parser.add_argument('--input', '-i', type=str, required=True,\n                        help='Path to the CSV file containing the results.')\n    parser.add_argument('--output', '-o', type=str, required=True,\n                        help='Path to the CSV file containing the output file.')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Run a set of SNP filtering'\n    )\n    parser.add_argument(\n        '--input',\n        dest='input',\n        help='Path to input file',\n        required=True\n    )\n    parser.add_argument(\n        '--output',\n        dest='output',\n        help='Path to output file',\n        required=True\n    )\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join(f'--{k} {v}' for k, v in vars(parser).items())\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest!= '':\n            flags +='' + flag.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join(map(str, parser._args))\n", "def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(parser._actions[0][2].option_strings)\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join([str(f) for f in parser._actions])\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest') and arg.dest is not None:\n            flags.append(arg.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a\n    space-separated string.\n    \"\"\"\n    return''.join(['--{}'.format(f) for f in vars(parser).keys()])\n", "def parser_flags(parser):\n    return''.join(['--%s' % x for x in parser._actions])"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join(f'--{k} {v}' for k, v in vars(parser).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest!= '':\n            flags +='' + flag.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(map(str, parser._args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions[0][2].option_strings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join([str(f) for f in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest') and arg.dest is not None:\n            flags.append(arg.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a\n    space-separated string.\n    \"\"\"\n    return''.join(['--{}'.format(f) for f in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--%s' % x for x in parser._actions])", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file', default=None)\n    parser.add_argument('--config', default=None)\n    parser.add_argument('--log-file', default=None)\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--verbose', action='store_true')\n    parser.add_argument('--debug-fail', action='store_true')\n    parser.add_argument('--debug-verbose', action='store_true')\n    parser.add_argument('--debug-daemon', action='store_true')\n    parser.add_argument('--debug-daemon-fail', action='store_true')\n    parser.add_argument('--debug-daemon-verbose', action='store_true')\n    parser.add_argument('--debug-daemon-delay', type=int, default=0)\n    return parser.parse_args(*unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    return {'global': _build_global_parser()}", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Run a single test run with the given arguments.\n        \"\"\")\n    parser.add_argument('--log-level', '-l', default='info',\n                        help=\"\"\"\n        The logging level.  Default is 'info'.\n        \"\"\")\n    parser.add_argument('--test-dir', '-t', default='.',\n                        help=\"\"\"\n        The directory containing the test files.\n        \"\"\")\n    parser.add_argument('--source-dir', '-s', default='.',\n                        help=\"\"\"\n        The directory containing the source code.\n        \"\"\")\n    parser.add_argument('--output-dir', '-o', default='.',\n                        help=\"\"\"\n        The directory where to write the output.\n        \"\"\")\n    return dict((k,", "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**{name: unparsed_arguments[i] for i, name in enumerate([\"verbose\", \"quiet\", \"diff\"])})}\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple command-line example to call with the \"batch\" subcommand.\n        \"\"\"\n    )\n    parser.add_argument(\"--verbose\", action=\"store_true\", default=False)\n    parser.add_argument(\"--file\", type=str, default=\"batch.json\")\n    return vars(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    return {'help': argparse.ArgumentParser(\n                                    parents=[tools.argparser()],\n                                    description='',\n                                    conflict_handler='resolve'\n                                    ).add_argument('--version', action='version', version=__version__)}\n", "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if isinstance(arg, dict):\n            args.update(arg)\n        else:\n            if arg[0]!= '-':\n                args['global'] = arg\n            else:\n                args['subcommand'] = arg[1:]\n    return args\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawDescriptionHelpFormatter)\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for subcommand, help in sorted(SUBCOMMANDS.items()):\n        subparser = subparsers.add_parser(subcommand, help=help)\n        for param in sorted(subparser._actions):\n            subparser._actions[param].set_defaults(subparser)\n    return {\n       'subcommand': parser.parse_args().subcommand,\n       'subparsers': subparsers._actions,\n    }\n", "def parse_arguments(*unparsed_arguments):\n    return dict((arg.name, arg) for arg in unparsed_arguments if arg.is_subparser())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file', default=None)\n    parser.add_argument('--config', default=None)\n    parser.add_argument('--log-file', default=None)\n    parser.add_argument('--debug', action='store_true')\n    parser.add_argument('--verbose', action='store_true')\n    parser.add_argument('--debug-fail', action='store_true')\n    parser.add_argument('--debug-verbose', action='store_true')\n    parser.add_argument('--debug-daemon', action='store_true')\n    parser.add_argument('--debug-daemon-fail', action='store_true')\n    parser.add_argument('--debug-daemon-verbose', action='store_true')\n    parser.add_argument('--debug-daemon-delay', type=int, default=0)\n    return parser.parse_args(*unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {'global': _build_global_parser()}", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Run a single test run with the given arguments.\n        \"\"\")\n    parser.add_argument('--log-level', '-l', default='info',\n                        help=\"\"\"\n        The logging level.  Default is 'info'.\n        \"\"\")\n    parser.add_argument('--test-dir', '-t', default='.',\n                        help=\"\"\"\n        The directory containing the test files.\n        \"\"\")\n    parser.add_argument('--source-dir', '-s', default='.',\n                        help=\"\"\"\n        The directory containing the source code.\n        \"\"\")\n    parser.add_argument('--output-dir', '-o', default='.',\n                        help=\"\"\"\n        The directory where to write the output.\n        \"\"\")\n    return dict((k,", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**{name: unparsed_arguments[i] for i, name in enumerate([\"verbose\", \"quiet\", \"diff\"])})}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple command-line example to call with the \"batch\" subcommand.\n        \"\"\"\n    )\n    parser.add_argument(\"--verbose\", action=\"store_true\", default=False)\n    parser.add_argument(\"--file\", type=str, default=\"batch.json\")\n    return vars(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {'help': argparse.ArgumentParser(\n                                    parents=[tools.argparser()],\n                                    description='',\n                                    conflict_handler='resolve'\n                                    ).add_argument('--version', action='version', version=__version__)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if isinstance(arg, dict):\n            args.update(arg)\n        else:\n            if arg[0]!= '-':\n                args['global'] = arg\n            else:\n                args['subcommand'] = arg[1:]\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawDescriptionHelpFormatter)\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for subcommand, help in sorted(SUBCOMMANDS.items()):\n        subparser = subparsers.add_parser(subcommand, help=help)\n        for param in sorted(subparser._actions):\n            subparser._actions[param].set_defaults(subparser)\n    return {\n       'subcommand': parser.parse_args().subcommand,\n       'subparsers': subparsers._actions,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict((arg.name, arg) for arg in unparsed_arguments if arg.is_subparser())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments[len(result):]\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    args = []\n    for name, parser in subparsers.items():\n        args.extend(parser.parse_known_args())\n    result.update(unparsed_arguments)\n    return (args, result)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    arguments = []\n    for subparser in subparsers:\n        parsed_arguments, arguments = subparser.parse(unparsed_arguments, arguments)\n    return parsed_arguments, arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_parsed.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments[name])\n    return parsed_arguments, not_parsed\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    arguments = {}\n    for subparser in subparsers.values():\n        result.update(subparser.parse_arguments())\n        arguments.update(subparser._action_parser_kwargs)\n    unparsed_arguments = unparsed_arguments.copy()\n    unparsed_arguments.update(result)\n    return (result, arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = {}\n        for name, arg in unparsed_arguments.items():\n            if subparser_name in subparser._actions:\n                parsed_arguments[name] = subparser._actions[subparser_name](arg)\n            else:\n                parsed_arguments[name] = arg\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments.keys()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, []", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser_name not in remaining_args:\n            remaining_args.append(subparser_name)\n    return parsed_arguments, remaining_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name in subparsers:\n        result[subparser_name] = subparsers[subparser_name].parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    not_parsed_args = []\n    for subparser_name, subparser in subparsers.items():\n        args = unparsed_arguments.copy()\n        for arg in subparser._actions:\n            args.update({arg.dest: getattr(arg, 'const', arg.default)})\n        result[subparser_name] = subparser.parse_args(args)\n        not_parsed_args.append(subparser_name)\n    return result, not_parsed_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments[len(result):]\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    args = []\n    for name, parser in subparsers.items():\n        args.extend(parser.parse_known_args())\n    result.update(unparsed_arguments)\n    return (args, result)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    arguments = []\n    for subparser in subparsers:\n        parsed_arguments, arguments = subparser.parse(unparsed_arguments, arguments)\n    return parsed_arguments, arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_parsed.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments[name])\n    return parsed_arguments, not_parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    arguments = {}\n    for subparser in subparsers.values():\n        result.update(subparser.parse_arguments())\n        arguments.update(subparser._action_parser_kwargs)\n    unparsed_arguments = unparsed_arguments.copy()\n    unparsed_arguments.update(result)\n    return (result, arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = {}\n        for name, arg in unparsed_arguments.items():\n            if subparser_name in subparser._actions:\n                parsed_arguments[name] = subparser._actions[subparser_name](arg)\n            else:\n                parsed_arguments[name] = arg\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, []", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser_name not in remaining_args:\n            remaining_args.append(subparser_name)\n    return parsed_arguments, remaining_args\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name in subparsers:\n        result[subparser_name] = subparsers[subparser_name].parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    not_parsed_args = []\n    for subparser_name, subparser in subparsers.items():\n        args = unparsed_arguments.copy()\n        for arg in subparser._actions:\n            args.update({arg.dest: getattr(arg, 'const', arg.default)})\n        result[subparser_name] = subparser.parse_args(args)\n        not_parsed_args.append(subparser_name)\n    return result, not_parsed_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple test for a multi-line configuration file.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers()\n    add_parser_arguments(subparsers)\n    add_parser_output(subparsers)\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test a FastQ format file\")\n    parser.add_argument('input', help=\"input FastQ file\")\n    parser.add_argument('-o', '--output', default='-', help=\"output FastQ file\")\n    return (parser, parser.add_argument_group(\"options\"))\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Create a top-level parser and its subparsers as a tuple.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(dest=\"command\")\n    return (subparsers, parser)\n", "def make_parsers():\n    parser = argparse.ArgumentParser('csv2csv')\n    parser.add_argument('input', type=str, help='Input CSV file')\n    parser.add_argument('-o', '--output', type=str, default='-', help='Output CSV file')\n    return parser\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description=\"Test the JSON parser\")\n    subparsers = parser.add_subparsers()\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Python module to compare two files and return the results.\n        '''\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__)\n    )\n    return parser\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description='Test the package manager for Python packages.')\n    subparsers = parser.add_subparsers()\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        A simple generic tool to perform a list of actions on a list of objects.\n        ''')\n    subparsers = parser.add_subparsers(title='action')\n    for action in ['create', 'delete', 'update', 'list', 'get','set', 'help']:\n        subparser = subparsers.add_parser(action)\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test for pre-allocated memory allocation\"\n    )\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    add_command(subparsers)\n    add_stats(subparsers)\n    add_results(subparsers)\n    add_results_to_db(subparsers)\n    add_description(subparsers)\n    add_graph(subparsers)\n    return (parser, subparsers)\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\"Test the'marvin' package\")\n    subparsers = parser.add_subparsers(title=\"subcommands\")\n    return (parser, subparsers)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple test for a multi-line configuration file.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers()\n    add_parser_arguments(subparsers)\n    add_parser_output(subparsers)\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"Test a FastQ format file\")\n    parser.add_argument('input', help=\"input FastQ file\")\n    parser.add_argument('-o', '--output', default='-', help=\"output FastQ file\")\n    return (parser, parser.add_argument_group(\"options\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Create a top-level parser and its subparsers as a tuple.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(dest=\"command\")\n    return (subparsers, parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser('csv2csv')\n    parser.add_argument('input', type=str, help='Input CSV file')\n    parser.add_argument('-o', '--output', type=str, default='-', help='Output CSV file')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description=\"Test the JSON parser\")\n    subparsers = parser.add_subparsers()\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Python module to compare two files and return the results.\n        '''\n    )\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__)\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description='Test the package manager for Python packages.')\n    subparsers = parser.add_subparsers()\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        A simple generic tool to perform a list of actions on a list of objects.\n        ''')\n    subparsers = parser.add_subparsers(title='action')\n    for action in ['create', 'delete', 'update', 'list', 'get','set', 'help']:\n        subparser = subparsers.add_parser(action)\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test for pre-allocated memory allocation\"\n    )\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    add_command(subparsers)\n    add_stats(subparsers)\n    add_results(subparsers)\n    add_results_to_db(subparsers)\n    add_description(subparsers)\n    add_graph(subparsers)\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\"Test the'marvin' package\")\n    subparsers = parser.add_subparsers(title=\"subcommands\")\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append((node.tag, node.value))\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(deep_merge_nodes(node.items()))\n        else:\n            result.update(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[1], dict):\n            result.extend(deep_merge_nodes(node[1].items()))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for key, node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append((key, node))\n    return result or [(key, node) for key, node in nodes]", "def deep_merge_nodes(nodes):\n    for key, value in nodes:\n        if isinstance(value, list) and isinstance(key, list):\n            nodes[key] = deep_merge_nodes(value)\n        elif isinstance(value, list):\n            nodes[key] = value\n        else:\n            nodes[key] = deep_merge_node(value, key)\n    return nodes", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    res = {}\n    for k, v in nodes:\n        if k in res:\n            res[k].append(deep_merge_nodes(v))\n        else:\n            res[k] = deep_merge_nodes(v)\n    return res\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result or nodes[-1]\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result or [(None, {})]", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[1], dict):\n            result.extend(deep_merge_nodes(node[1].values()))\n        else:\n            result.append(node)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append((node.tag, node.value))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(deep_merge_nodes(node.items()))\n        else:\n            result.update(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[1], dict):\n            result.extend(deep_merge_nodes(node[1].items()))\n        else:\n            result.append(node)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for key, node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append((key, node))\n    return result or [(key, node) for key, node in nodes]", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    for key, value in nodes:\n        if isinstance(value, list) and isinstance(key, list):\n            nodes[key] = deep_merge_nodes(value)\n        elif isinstance(value, list):\n            nodes[key] = value\n        else:\n            nodes[key] = deep_merge_node(value, key)\n    return nodes", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    res = {}\n    for k, v in nodes:\n        if k in res:\n            res[k].append(deep_merge_nodes(v))\n        else:\n            res[k] = deep_merge_nodes(v)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result or nodes[-1]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, list):\n            result.extend(deep_merge_nodes(node))\n        else:\n            result.append(node)\n    return result or [(None, {})]", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node[1], dict):\n            result.extend(deep_merge_nodes(node[1].values()))\n        else:\n            result.append(node)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Generate an HTML report for an ESN data set.'\n    )\n", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n            Instantiates a script and executes it.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"--verbose\", \"-v\", action=\"count\", default=0,\n        help=\"\"\"\n            How many times to enable debugging output.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"--debug\", \"-d\", action=\"store_true\", default=False,\n        help=\"\"\"\n            Enables debugging output.\n            \"\"\"\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a cover image from the image files in the specified '\n                    'directory')\n    parser.add_argument('--directory', '-d', help='the directory containing the '\n                        'image files')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--config', '-c', required=True, type=str,\n                        help='Configuration file path')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='Enable debug mode')\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Script that computes a result for an assignment.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--strategy\",\n        dest=\"strategy\",\n        default=\"best_so_far\",\n        help=\"\"\"\n        The strategy to use for computing the result of the assignment. The\n        default is best_so_far. The 'best_so_far' strategy uses the best\n        result of the assignment when all of the scores are equal. Other strategies\n        are slower.\n        \"\"\",\n    )\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            Command-line interface for generating a Git Hash of a set of files.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"files\",\n        nargs=\"+\",\n        help=\"\"\"\n            The files to hash.\n            \"\"\",\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('--config-file', type=str, default='',\n                        help='Configuration file to use for scanning remote '\n                             'containers')\n    parser.add_argument('--verbose', action='store_true',\n                        help='Enable verbose output')\n    parser.add_argument('--no-color', action='store_true',\n                        help='Do not color output')\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to create a single complex data model from an input sample.\n        \"\"\"\n    )\n    parser.add_argument(\"-o\", \"--output\", type=str, required=True, help=\"The output directory\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"The configuration file\")\n    parser.add_argument(\"--seed\", type=int, default=1, help=\"The seed used to initialize the random number generator\")\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool with the recent version of Python.')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Generate an HTML report for an ESN data set.'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n            Instantiates a script and executes it.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"--verbose\", \"-v\", action=\"count\", default=0,\n        help=\"\"\"\n            How many times to enable debugging output.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"--debug\", \"-d\", action=\"store_true\", default=False,\n        help=\"\"\"\n            Enables debugging output.\n            \"\"\"\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a cover image from the image files in the specified '\n                    'directory')\n    parser.add_argument('--directory', '-d', help='the directory containing the '\n                        'image files')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--config', '-c', required=True, type=str,\n                        help='Configuration file path')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='Enable debug mode')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Script that computes a result for an assignment.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--strategy\",\n        dest=\"strategy\",\n        default=\"best_so_far\",\n        help=\"\"\"\n        The strategy to use for computing the result of the assignment. The\n        default is best_so_far. The 'best_so_far' strategy uses the best\n        result of the assignment when all of the scores are equal. Other strategies\n        are slower.\n        \"\"\",\n    )\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            Command-line interface for generating a Git Hash of a set of files.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"files\",\n        nargs=\"+\",\n        help=\"\"\"\n            The files to hash.\n            \"\"\",\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='')\n    parser.add_argument('--config-file', type=str, default='',\n                        help='Configuration file to use for scanning remote '\n                             'containers')\n    parser.add_argument('--verbose', action='store_true',\n                        help='Enable verbose output')\n    parser.add_argument('--no-color', action='store_true',\n                        help='Do not color output')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to create a single complex data model from an input sample.\n        \"\"\"\n    )\n    parser.add_argument(\"-o\", \"--output\", type=str, required=True, help=\"The output directory\")\n    parser.add_argument(\"--config\", type=str, required=True, help=\"The configuration file\")\n    parser.add_argument(\"--seed\", type=int, default=1, help=\"The seed used to initialize the random number generator\")\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool with the recent version of Python.')\n    parser.add_argument('--version', action='version',\n                        version='%(prog)s'+ __version__)\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(['--{}'.format(a) for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._actions if flag.startswith('-'))\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if arg.dest == 'command':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'context':\n            flags.append('--' + arg.flag + '-' + arg.dest)\n        elif arg.dest == 'args':\n            flags.append('-' + arg.flag)\n        elif arg.dest == 'help':\n            flags.append('--' + arg.flag)\n        elif arg.dest =='subcommand':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'name':\n            flags.append('--' + arg.flag)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in parser._flags.items())\n", "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in vars(parser).items())\n", "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        flags.append(arg.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(str(x) for x in parser._args)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(a) for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._actions if flag.startswith('-'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if arg.dest == 'command':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'context':\n            flags.append('--' + arg.flag + '-' + arg.dest)\n        elif arg.dest == 'args':\n            flags.append('-' + arg.flag)\n        elif arg.dest == 'help':\n            flags.append('--' + arg.flag)\n        elif arg.dest =='subcommand':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'name':\n            flags.append('--' + arg.flag)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in parser._flags.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in vars(parser).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        flags.append(arg.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(x) for x in parser._args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in sorted(bash_completion_dict().items()))\n", "def bash_completion():\n    return \"\"\"\n    #!/usr/bin/env python\n    import sys\n    import re\n    sys.setrecursionlimit(%d)\n\n    def main(args):\n        # pylint: disable=W0613,C0103,C0111\n        parser = argparse.ArgumentParser(\n            description='Bash completion for borgmatic')\n        parser.add_argument('command', help='the command to run')\n        args = parser.parse_args(args=args)\n        return 0\n\n    def complete(text, state):\n        if not text:\n            return [i for i in bash_completion() if i.startswith(text)]\n        elif text in bash_completion():\n            return [text]\n        else:\n            return [i for i in bash_completion() if i.startswith(text) and i!= text]\n    return [i for i in bash_completion() if i.startswith(text)]\n", "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(a, getattr(argparse, a).args)\n                     for a in sorted(argparse.__dict__)\n                     if a.startswith('BASH_'))\n", "def bash_completion():\n    return \"\"\"\\\n#!/usr/bin/env python\n\nimport sys\nimport re\n\ndef main():\n    parser = argparse.ArgumentParser(prog=\"borgmatic\", description=\"Borgmatic command line interface\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase verbosity\")\n    parser.add_argument(\"--debug\", action=\"store_true\", help=\"enable debug output\")\n    parser.add_argument(\"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\n    args = parser.parse_args()\n    return [\"bash\", \"-c\", \"\\\"python -m borgmatic --verbose --debug\\\"\"]\n", "def bash_completion():\n    return ['python3', '-m', 'bash', '-c', 'export PYTHONPATH=%(bash_path)s;'\\\n            'python -m bash.completion;'\\\n            'bash -c \"import sys; print(\"\\\\n\".join(sys.path))\"' % {'bash_path': BASH_PATH}]", "def bash_completion():\n    return \"\\n\".join([\"    --{} {}\".format(x, y) for x, y in _COMMAND_ARGS.items()])\n", "def bash_completion():\n    import argparse\n\n    parser = argparse.ArgumentParser(\n        prog=\"borgmatic\", description=\"Complete Borgmatic CLI tools.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__\n    )\n    parser.add_argument(\"--version-file\", action=\"store\", default=\"borgmatic.py\")\n    parser.add_argument(\n        \"command\", nargs=\"?\", default=\"\", help=\"The command to run\"\n    )\n    return parser.parse_args()\n", "def bash_completion():\n    import argparse\n    parser = argparse.ArgumentParser(\n        description='Bash completion script for borgmatic')\n    add_bash_completion_arguments(parser)\n    return parser.format_help()\n", "def bash_completion():\n    return \"\"\"\n                #!/usr/bin/env python\n                # -*- coding: utf-8 -*-\n                import sys\n                import re\n                import re\n                import re\n                import os\n                import sys\n                sys.setrecursionlimit(1000000)\n                sys.settrace(sys._getframe().f_back)\n                sys.setprofile(sys._getframe().f_back)\n                \"\"\"\n", "def bash_completion():\n    bash = '''\\\n        #!/usr/bin/env python\n        # -*- coding: utf-8 -*-\n        import sys\n        sys.setrecursionlimit(%i)\n        def __bash__():\n            return sys.stdin.readline().rstrip(\"\\r\\n\")\n        def __ipython__():\n            return {\n                \"__builtins__\": __builtins__,\n                \"__name__\": \"__main__\",\n                \"__file__\": __file__,\n                \"__package__\": __package__,\n            }\n        '''\n    return bash.replace('__builtins__', '').replace('__name__', '')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(k, v) for k, v in sorted(bash_completion_dict().items()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\n    #!/usr/bin/env python\n    import sys\n    import re\n    sys.setrecursionlimit(%d)\n\n    def main(args):\n        # pylint: disable=W0613,C0103,C0111\n        parser = argparse.ArgumentParser(\n            description='Bash completion for borgmatic')\n        parser.add_argument('command', help='the command to run')\n        args = parser.parse_args(args=args)\n        return 0\n\n    def complete(text, state):\n        if not text:\n            return [i for i in bash_completion() if i.startswith(text)]\n        elif text in bash_completion():\n            return [text]\n        else:\n            return [i for i in bash_completion() if i.startswith(text) and i!= text]\n    return [i for i in bash_completion() if i.startswith(text)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return '\\n'.join('    --{} {}'.format(a, getattr(argparse, a).args)\n                     for a in sorted(argparse.__dict__)\n                     if a.startswith('BASH_'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\\\n#!/usr/bin/env python\n\nimport sys\nimport re\n\ndef main():\n    parser = argparse.ArgumentParser(prog=\"borgmatic\", description=\"Borgmatic command line interface\")\n    parser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"increase verbosity\")\n    parser.add_argument(\"--debug\", action=\"store_true\", help=\"enable debug output\")\n    parser.add_argument(\"--version\", action=\"version\", version=\"%(prog)s {}\".format(__version__))\n\n    args = parser.parse_args()\n    return [\"bash\", \"-c\", \"\\\"python -m borgmatic --verbose --debug\\\"\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return ['python3', '-m', 'bash', '-c', 'export PYTHONPATH=%(bash_path)s;'\\\n            'python -m bash.completion;'\\\n            'bash -c \"import sys; print(\"\\\\n\".join(sys.path))\"' % {'bash_path': BASH_PATH}]", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\\n\".join([\"    --{} {}\".format(x, y) for x, y in _COMMAND_ARGS.items()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    import argparse\n\n    parser = argparse.ArgumentParser(\n        prog=\"borgmatic\", description=\"Complete Borgmatic CLI tools.\"\n    )\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=\"%(prog)s \" + __version__\n    )\n    parser.add_argument(\"--version-file\", action=\"store\", default=\"borgmatic.py\")\n    parser.add_argument(\n        \"command\", nargs=\"?\", default=\"\", help=\"The command to run\"\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    import argparse\n    parser = argparse.ArgumentParser(\n        description='Bash completion script for borgmatic')\n    add_bash_completion_arguments(parser)\n    return parser.format_help()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return \"\"\"\n                #!/usr/bin/env python\n                # -*- coding: utf-8 -*-\n                import sys\n                import re\n                import re\n                import re\n                import os\n                import sys\n                sys.setrecursionlimit(1000000)\n                sys.settrace(sys._getframe().f_back)\n                sys.setprofile(sys._getframe().f_back)\n                \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    bash = '''\\\n        #!/usr/bin/env python\n        # -*- coding: utf-8 -*-\n        import sys\n        sys.setrecursionlimit(%i)\n        def __bash__():\n            return sys.stdin.readline().rstrip(\"\\r\\n\")\n        def __ipython__():\n            return {\n                \"__builtins__\": __builtins__,\n                \"__name__\": \"__main__\",\n                \"__file__\": __file__,\n                \"__package__\": __package__,\n            }\n        '''\n    return bash.replace('__builtins__', '').replace('__name__', '')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    return {'': argparse.Namespace(**unparsed_arguments)}\n", "def parse_arguments(*unparsed_arguments):\n    return {\n        'debug': debug,\n       'version': version,\n        'parser': argparse.ArgumentParser(\n            description='Show information about the program being run')}\n", "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**vars(get_global_parser().parse_args(unparsed_arguments)))}\n", "def parse_arguments(*unparsed_arguments):\n    return dict((k, v) for k, v in unparsed_arguments if k.startswith('--'))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Compute the frequency of the 'interesting' words in a text\"\n    )\n    parser.add_argument(\n        \"--input\", type=str, required=True, help=\"input text to analyze\"\n    )\n    return dict(\n        (\n            subparser.name,\n            subparser.parse_args(unparsed_arguments)\n        )\n        for subparser in [\n            \"top_words\",\n            \"frequency\",\n            \"frequency_high\",\n            \"frequency_medium\",\n            \"frequency_low\",\n        ]\n    )\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for name, parser in list(__import__('argparse').__dict__.items()):\n        if isinstance(parser, type) and issubclass(parser, argparse.ArgumentParser):\n            subparsers.add_parser(name, help=parser.__doc__)\n    return {k: v() for k, v in list(subparsers.__dict__.items())}\n", "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if '=' in arg:\n            k, v = arg.split('=')\n            args[k] = v\n        else:\n            args['global'] = arg\n    return args\n", "def parse_arguments(*unparsed_arguments):\n    result = {}\n    for a in unparsed_arguments:\n        if a.startswith(\"--\"):\n            result.update(parse_options(a[2:]))\n        else:\n            result.update(parse_argument(a))\n    return result\n", "def parse_arguments(*unparsed_arguments):\n    # type: (*str) -> Dict[str, argparse.Namespace]\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", default=None, help=\"configuration file path\")\n    return dict(parser._actions)\n", "def parse_arguments(*unparsed_arguments):\n    return {\n       'subcommand': unparsed_arguments[0],\n       'subcommand_kwargs': unparsed_arguments[1]\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {'': argparse.Namespace(**unparsed_arguments)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\n        'debug': debug,\n       'version': version,\n        'parser': argparse.ArgumentParser(\n            description='Show information about the program being run')}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**vars(get_global_parser().parse_args(unparsed_arguments)))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict((k, v) for k, v in unparsed_arguments if k.startswith('--'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Compute the frequency of the 'interesting' words in a text\"\n    )\n    parser.add_argument(\n        \"--input\", type=str, required=True, help=\"input text to analyze\"\n    )\n    return dict(\n        (\n            subparser.name,\n            subparser.parse_args(unparsed_arguments)\n        )\n        for subparser in [\n            \"top_words\",\n            \"frequency\",\n            \"frequency_high\",\n            \"frequency_medium\",\n            \"frequency_low\",\n        ]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for name, parser in list(__import__('argparse').__dict__.items()):\n        if isinstance(parser, type) and issubclass(parser, argparse.ArgumentParser):\n            subparsers.add_parser(name, help=parser.__doc__)\n    return {k: v() for k, v in list(subparsers.__dict__.items())}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if '=' in arg:\n            k, v = arg.split('=')\n            args[k] = v\n        else:\n            args['global'] = arg\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    result = {}\n    for a in unparsed_arguments:\n        if a.startswith(\"--\"):\n            result.update(parse_options(a[2:]))\n        else:\n            result.update(parse_argument(a))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    # type: (*str) -> Dict[str, argparse.Namespace]\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", default=None, help=\"configuration file path\")\n    return dict(parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\n       'subcommand': unparsed_arguments[0],\n       'subcommand_kwargs': unparsed_arguments[1]\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser_parser in subparsers.items():\n        result[subparser_name] = subparser_parser.parse_args(unparsed_arguments)\n        unparsed_arguments = []\n    return result, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser in subparsers:\n        parse_subparser_arguments(unparsed_arguments, subparser._actions)\n        parsed_arguments.update(subparser.parse_known_args())\n        remaining_args.extend(subparser.required)\n    return (parsed_arguments, remaining_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._subparsers._actions)\n    result = {}\n    for action_name, subparser in actions.items():\n        parsed_arguments = unparsed_arguments.copy()\n        for name, value in subparser._actions.items():\n            parsed_arguments[name] = subparser.parse(parsed_arguments[name])\n        result[action_name] = parsed_arguments\n    return actions, unparsed_arguments, result\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    missing_args = []\n    for subparser_name, subparser in subparsers.items():\n        parser_args = unparsed_arguments.copy()\n        for name in subparser_name:\n            if name not in parser_args:\n                missing_args.append(name)\n                continue\n            parser_args[name] = subparser.parse(parser_args[name])\n        result[subparser_name] = parser_args\n    return (result, missing_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    for subparser in subparsers.values():\n        if hasattr(subparser, \"__parse_arguments__\"):\n            arguments.update(subparser.__parse_arguments__(unparsed_arguments))\n    return arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers._actions:\n        action_parser = action._get_parser()\n        parsed_arguments.update(action_parser.parse_known_args())\n        if action_parser._action_groups:\n            remaining_arguments.extend(action_parser._action_groups)\n        else:\n            remaining_arguments.extend(action._get_default_values())\n    return parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        arguments, remaining_arguments = parser.parse_known_args(unparsed_arguments)\n    return arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        if name not in parsed_arguments:\n            not_parsed.append(name)\n    return parsed_arguments, not_parsed\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._group_parser_kwargs)\n    remaining_arguments = {}\n    for name, parser in unparsed_arguments.items():\n        if name in actions:\n            remaining_arguments.update(actions[name]._group_parser_kwargs)\n            del actions[name]\n        else:\n            remaining_arguments.update(parser._group_parser_kwargs)\n    return actions, remaining_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser_parser in subparsers.items():\n        result[subparser_name] = subparser_parser.parse_args(unparsed_arguments)\n        unparsed_arguments = []\n    return result, unparsed_arguments", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser in subparsers:\n        parse_subparser_arguments(unparsed_arguments, subparser._actions)\n        parsed_arguments.update(subparser.parse_known_args())\n        remaining_args.extend(subparser.required)\n    return (parsed_arguments, remaining_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, []\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._subparsers._actions)\n    result = {}\n    for action_name, subparser in actions.items():\n        parsed_arguments = unparsed_arguments.copy()\n        for name, value in subparser._actions.items():\n            parsed_arguments[name] = subparser.parse(parsed_arguments[name])\n        result[action_name] = parsed_arguments\n    return actions, unparsed_arguments, result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    missing_args = []\n    for subparser_name, subparser in subparsers.items():\n        parser_args = unparsed_arguments.copy()\n        for name in subparser_name:\n            if name not in parser_args:\n                missing_args.append(name)\n                continue\n            parser_args[name] = subparser.parse(parser_args[name])\n        result[subparser_name] = parser_args\n    return (result, missing_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    for subparser in subparsers.values():\n        if hasattr(subparser, \"__parse_arguments__\"):\n            arguments.update(subparser.__parse_arguments__(unparsed_arguments))\n    return arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers._actions:\n        action_parser = action._get_parser()\n        parsed_arguments.update(action_parser.parse_known_args())\n        if action_parser._action_groups:\n            remaining_arguments.extend(action_parser._action_groups)\n        else:\n            remaining_arguments.extend(action._get_default_values())\n    return parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        arguments, remaining_arguments = parser.parse_known_args(unparsed_arguments)\n    return arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        if name not in parsed_arguments:\n            not_parsed.append(name)\n    return parsed_arguments, not_parsed\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._group_parser_kwargs)\n    remaining_arguments = {}\n    for name, parser in unparsed_arguments.items():\n        if name in actions:\n            remaining_arguments.update(actions[name]._group_parser_kwargs)\n            del actions[name]\n        else:\n            remaining_arguments.update(parser._group_parser_kwargs)\n    return actions, remaining_arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Plot a spectrogram of a spectrogram.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(title='Commands')\n    # noinspection PyUnusedLocal\n    plot_parser = subparsers.add_parser(\n        'plot', help='Plot the spectrogram of a spectrogram.')\n    plot_parser.add_argument('--input', type=str, required=True,\n                             help='Spectrogram file to plot.')\n    plot_parser.add_argument('--output', type=str, required=True,\n                             help='Output file.')\n    return (parser, subparsers)\n", "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n    )\n", "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            prog='python',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3 -m',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n    )\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test to verify that the CLI works properly\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    subparsers.required = True\n    add_basic_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_remove_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_save_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_show_test_arguments(subparsers)\n    return (parser, subparsers)\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description='Get the latest data from the eBay website.')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='enable debug logging')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A very simple tool to generate HTML for a given page.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(\n        title=\"commands\", dest=\"command\"\n    )\n    subparsers.required = True\n    add_command(subparsers)\n    add_response(subparsers)\n    add_success(subparsers)\n    add_failure(subparsers)\n    add_error(subparsers)\n    add_html(subparsers)\n    add_xml(subparsers)\n    add_css(subparsers)\n    add_js(subparsers)\n    add_html_minify(subparsers)\n    add_xml_minify(subparsers)\n    add_jquery(subparsers)\n    add_css_minify(subparsers)\n    add_jquery_minify(subparsers)\n    add_html_preprocessor(subparsers)\n    add_js_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_css_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_html_postprocessor(subpar", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all available Kafka topics.')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', help='Enable debug mode.')\n    parser.add_argument('--debug-log', action='store_true', help='Log debug messages.')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Produce an Ansible Inventory file based on a list of roles')\n    add_basic_testing_arguments(parser)\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (-vv debugs ansible_test also)')\n    parser.add_argument('roles', nargs='*', help='Roles to build Ansible Inventory for')\n    return parser.parse_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Plot a spectrogram of a spectrogram.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(title='Commands')\n    # noinspection PyUnusedLocal\n    plot_parser = subparsers.add_parser(\n        'plot', help='Plot the spectrogram of a spectrogram.')\n    plot_parser.add_argument('--input', type=str, required=True,\n                             help='Spectrogram file to plot.')\n    plot_parser.add_argument('--output', type=str, required=True,\n                             help='Output file.')\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            prog='python',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3 -m',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test to verify that the CLI works properly\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    subparsers.required = True\n    add_basic_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_remove_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_save_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_show_test_arguments(subparsers)\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description='Get the latest data from the eBay website.')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='enable debug logging')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A very simple tool to generate HTML for a given page.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(\n        title=\"commands\", dest=\"command\"\n    )\n    subparsers.required = True\n    add_command(subparsers)\n    add_response(subparsers)\n    add_success(subparsers)\n    add_failure(subparsers)\n    add_error(subparsers)\n    add_html(subparsers)\n    add_xml(subparsers)\n    add_css(subparsers)\n    add_js(subparsers)\n    add_html_minify(subparsers)\n    add_xml_minify(subparsers)\n    add_jquery(subparsers)\n    add_css_minify(subparsers)\n    add_jquery_minify(subparsers)\n    add_html_preprocessor(subparsers)\n    add_js_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_css_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_html_postprocessor(subpar", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all available Kafka topics.')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', help='Enable debug mode.')\n    parser.add_argument('--debug-log', action='store_true', help='Log debug messages.')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Produce an Ansible Inventory file based on a list of roles')\n    add_basic_testing_arguments(parser)\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (-vv debugs ansible_test also)')\n    parser.add_argument('roles', nargs='*', help='Roles to build Ansible Inventory for')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "def paging(response, max_results):\n    current_page = 0\n    while current_page < max_results:\n        yield response[current_page:current_page+max_results]\n        current_page += 1\n", "def paging(response, max_results):\n    if response:\n        if len(response) <= max_results:\n            yield response\n        else:\n            for page in range(1, max_results+1):\n                yield from response[page-1:page+1]\n", "def paging(response, max_results):\n    \"\"\"\n    Returns WAPI response page by page\n\n    Args:\n        response (list): WAPI response.\n        max_results (int): Maximum number of objects to be returned in one page.\n\n    Yields:\n        Generator object with WAPI response split page by page.\n    \"\"\"\n    while response:\n        results = response[:max_results]\n        response = response[max_results:]\n        yield results\n", "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[1:]\n        yield response[0]\n", "def paging(response, max_results):\n    result = []\n    while result!= [] and result < max_results:\n        yield result\n        result = response[result - 1: result]\n", "def paging(response, max_results):\n    offset = 0\n    while offset < max_results:\n        for page in response:\n            yield page\n        offset += 1\n", "def paging(response, max_results):\n    while max_results > 0:\n        for page in response:\n            yield page\n        max_results -= 1\n", "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * 30: page * 30 + 30]\n        page += 1\n", "def paging(response, max_results):\n    if response is None:\n        return response\n    for i in range(1, max_results):\n        yield response[i - 1:i]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    current_page = 0\n    while current_page < max_results:\n        yield response[current_page:current_page+max_results]\n        current_page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if response:\n        if len(response) <= max_results:\n            yield response\n        else:\n            for page in range(1, max_results+1):\n                yield from response[page-1:page+1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    \"\"\"\n    Returns WAPI response page by page\n\n    Args:\n        response (list): WAPI response.\n        max_results (int): Maximum number of objects to be returned in one page.\n\n    Yields:\n        Generator object with WAPI response split page by page.\n    \"\"\"\n    while response:\n        results = response[:max_results]\n        response = response[max_results:]\n        yield results\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    while len(response) > max_results:\n        response = response[1:]\n        yield response[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    result = []\n    while result!= [] and result < max_results:\n        yield result\n        result = response[result - 1: result]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    offset = 0\n    while offset < max_results:\n        for page in response:\n            yield page\n        offset += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    while max_results > 0:\n        for page in response:\n            yield page\n        max_results -= 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while page <= max_results:\n        yield response[page * 30: page * 30 + 30]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if response is None:\n        return response\n    for i in range(1, max_results):\n        yield response[i - 1:i]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    i = 0\n    while size:\n        i += 1\n        size, n = size.split(' ')\n        size = int(size) * (1024**i)\n    return size\n", "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'K', 'M', 'G', 'T']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    suffixes = ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']\n    i = 0\n    while size >= 1024 and i < len(suffixes)-1:\n        size = size/1024.0\n        i += 1\n    return size\n", "def size_to_bytes(size: str) -> int:\n    i = int(size)\n    suffixes = ['B', 'KB', 'MB', 'GB', 'TB']\n    i = i // 1024\n    i = i % 1024\n    i = i // 1024\n    i = i % 1024\n    return i\n", "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'K':\n        return int(size[:-1])\n    elif size[-1] == 'M':\n        return int(size[:-1]) * 1024\n    elif size[-1] == 'G':\n        return int(size[:-1]) * 1024 * 1024\n    elif size[-1] == 'T':\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    elif size[-1] == 'P':\n        return int(size[:-1]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return int(size[:-1])\n", "def size_to_bytes(size: str) -> int:\n    i = int(size)\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if i < 1024.0:\n            return i\n        i /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n    return size\n", "def size_to_bytes(size: str) -> int:\n    return int(size) * (1024 ** 2)\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size[-2:] == x:\n            return int(size[:-2]) * (10 ** (x.find('.') + 1))\n    return int(size) * (10 ** ('bytes'.find(size[-1])))\n", "def size_to_bytes(size: str) -> int:\n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if size.endswith(unit):\n            return int(size[:-len(unit)])\n    return int(size)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    i = 0\n    while size:\n        i += 1\n        size, n = size.split(' ')\n        size = int(size) * (1024**i)\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'K', 'M', 'G', 'T']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    suffixes = ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']\n    i = 0\n    while size >= 1024 and i < len(suffixes)-1:\n        size = size/1024.0\n        i += 1\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    i = int(size)\n    suffixes = ['B', 'KB', 'MB', 'GB', 'TB']\n    i = i // 1024\n    i = i % 1024\n    i = i // 1024\n    i = i % 1024\n    return i\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'K':\n        return int(size[:-1])\n    elif size[-1] == 'M':\n        return int(size[:-1]) * 1024\n    elif size[-1] == 'G':\n        return int(size[:-1]) * 1024 * 1024\n    elif size[-1] == 'T':\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    elif size[-1] == 'P':\n        return int(size[:-1]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return int(size[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    i = int(size)\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if i < 1024.0:\n            return i\n        i /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    return int(size) * (1024 ** 2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size[-2:] == x:\n            return int(size[:-2]) * (10 ** (x.find('.') + 1))\n    return int(size) * (10 ** ('bytes'.find(size[-1])))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if size.endswith(unit):\n            return int(size[:-len(unit)])\n    return int(size)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    return sum(dicts, {})\n", "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2}\n    \"\"\"\n    return functools.reduce(lambda a, b: a + b, map(lambda d: d.items() + [(k, d[k]) for k in d], dicts))\n", "def _dictsum(dicts):\n    return sum((d for d in dicts if type(d) == dict))\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n", "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    return {k: sum(v) for k, v in dicts}\n", "def _dictsum(dicts):\n    return sum((dict(d) for d in dicts), {})\n", "def _dictsum(dicts):\n    return {key: sum(v) for key, v in dicts}\n", "def _dictsum(dicts):\n    return sum(dicts, {})\n", "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n    \n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    result = {}\n    for d in dicts:\n        for k, v in d.items():\n            result[k] = result.get(k, 0) + v\n    return result\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    return sum(dicts, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2}\n    \"\"\"\n    return functools.reduce(lambda a, b: a + b, map(lambda d: d.items() + [(k, d[k]) for k in d], dicts))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return sum((d for d in dicts if type(d) == dict))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n\n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    return {k: sum(v) for k, v in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return sum((dict(d) for d in dicts), {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {key: sum(v) for key, v in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return sum(dicts, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    \"\"\"\n    Combine values of the dictionaries supplied by iterable dicts.\n    \n    >>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n    {'a': 6, 'b': 2} \n    \"\"\"\n    result = {}\n    for d in dicts:\n        for k, v in d.items():\n            result[k] = result.get(k, 0) + v\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    \"\"\" Replace any custom string URL items with values in args \"\"\"\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{{}}}'.format(k), str(v))\n    return url\n", "def _replace_url_args(url, url_args):\n    return _replace_items(url, url_args, 'url')\n", "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    return url.replace(\"{}\", urllib.parse.urlencode(url_args))\n", "def _replace_url_args(url, url_args):\n    \n    \n    return '%s?%s' % (url, urlencode(url_args)) if url_args else url\n", "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    if url is not None:\n        url = url.replace('{', '{{')\n        url = url.replace('}', '}}')\n        url = url.format(**url_args)\n    return url\n", "def _replace_url_args(url, url_args):\n    \n    \n    return url.replace('<item>', '<item><url>'.format(**url_args))\n", "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    return re.sub(\n        r'((?<=[a-z0-9])[A-Z]|(?<=[A-Z])[A-Z0-9](?=[a-z0-9]))',\n        lambda m: url_args.get(m.group(), m.group()),\n        url)\n", "def _replace_url_args(url, url_args):\n    \"\"\"\n    Replace any custom string URL items with values in args\n    \"\"\"\n    for key, value in url_args.items():\n        url = re.sub(r'\\b%s\\b' % key, value, url)\n    return url\n", "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    for arg, value in list(url_args.items()):\n        url = url.replace('{{' + arg + '}}', str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    return url.replace(' ', '%20')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\" Replace any custom string URL items with values in args \"\"\"\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{{}}}'.format(k), str(v))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return _replace_items(url, url_args, 'url')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    return url.replace(\"{}\", urllib.parse.urlencode(url_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    return '%s?%s' % (url, urlencode(url_args)) if url_args else url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    if url is not None:\n        url = url.replace('{', '{{')\n        url = url.replace('}', '}}')\n        url = url.format(**url_args)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \n    \n    return url.replace('<item>', '<item><url>'.format(**url_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    return re.sub(\n        r'((?<=[a-z0-9])[A-Z]|(?<=[A-Z])[A-Z0-9](?=[a-z0-9]))',\n        lambda m: url_args.get(m.group(), m.group()),\n        url)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\"\n    Replace any custom string URL items with values in args\n    \"\"\"\n    for key, value in url_args.items():\n        url = re.sub(r'\\b%s\\b' % key, value, url)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    \"\"\"Replace any custom string URL items with values in args\"\"\"\n    for arg, value in list(url_args.items()):\n        url = url.replace('{{' + arg + '}}', str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    return url.replace(' ', '%20')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: any) -> bool:\n    \n    \n    return val is None\n", "def is_none_string(val: any) -> bool:\n    return val is None or (\n        isinstance(val, str) and val.lower() == \"none\"\n    )\n", "def is_none_string(val: any) -> bool:\n    return val is None\n", "def is_none_string(val: any) -> bool:\n    return val in ['None', 'none', None]\n", "def is_none_string(val: any) -> bool:\n    return val is None or isinstance(val, str) and val == 'None'\n", "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == \"none\")\n", "def is_none_string(val: any) -> bool:\n    return (val == None)\n", "def is_none_string(val: any) -> bool:\n    return val is None\n", "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val == \"None\")\n", "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == \"none\")\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: any) -> bool:\n    \n    \n    return val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None or (\n        isinstance(val, str) and val.lower() == \"none\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val in ['None', 'none', None]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None or isinstance(val, str) and val == 'None'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == \"none\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (val == None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val == \"None\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val is None or (isinstance(val, str) and val.lower() == \"none\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if not path or not root:\n        raise ValueError(\"Invalid path or root\")\n    if path == root:\n        raise ValueError(\"Invalid path or root\")\n    if root == \"/\":\n        return path\n    return \"{}{}\".format(path, root)\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError(\"Not root of path\")\n", "def strip_root(path, root):\n    if not root or path[:root]!= root:\n        raise Exception('Invalid path: %s' % path)\n    return path[root + 1:]\n", "def strip_root(path, root):\n    if not root:\n        return path\n    if path == root:\n        return ''\n    if path == root[::-1]:\n        return root\n    return path[:-len(root)]\n", "def strip_root(path, root):\n    \"\"\"Remove root from path, throw exception on failure.\"\"\"\n    if root == path:\n        return path\n    else:\n        return path[0:len(path)-len(root)]\n", "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if not root:\n        return path\n    if root == path:\n        raise ValueError('Root cannot be the root of a relative path')\n    return path[len(root):]\n", "def strip_root(path, root):\n    \n    \n    if path[:len(root)]!= root:\n        raise RuntimeError('Path %s does not belong to root %s' % (path, root))\n    return path[len(root):]\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    else:\n        return path[len(root) + 1:]\n", "def strip_root(path, root):\n    \"\"\"\n    Remove root from path, throw exception on failure.\n    \"\"\"\n    if not path.startswith(root):\n        raise ValueError(\"'%s' does not start with '%s'\" % (path, root))\n    return path[len(root):]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if not path or not root:\n        raise ValueError(\"Invalid path or root\")\n    if path == root:\n        raise ValueError(\"Invalid path or root\")\n    if root == \"/\":\n        return path\n    return \"{}{}\".format(path, root)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    elif path[:len(root)] == root:\n        return path[len(root):]\n    else:\n        raise ValueError(\"Not root of path\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root or path[:root]!= root:\n        raise Exception('Invalid path: %s' % path)\n    return path[root + 1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    if path == root:\n        return ''\n    if path == root[::-1]:\n        return root\n    return path[:-len(root)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \"\"\"Remove root from path, throw exception on failure.\"\"\"\n    if root == path:\n        return path\n    else:\n        return path[0:len(path)-len(root)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        path = path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    if root == path:\n        raise ValueError('Root cannot be the root of a relative path')\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \n    \n    if path[:len(root)]!= root:\n        raise RuntimeError('Path %s does not belong to root %s' % (path, root))\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    else:\n        return path[len(root) + 1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    \"\"\"\n    Remove root from path, throw exception on failure.\n    \"\"\"\n    if not path.startswith(root):\n        raise ValueError(\"'%s' does not start with '%s'\" % (path, root))\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)", "def parser_flags(parser):\n    return''.join(f'--{k}={v!r}' for k,v in parser._get_kwargs().items())\n", "def parser_flags(parser):\n    return''.join(f'{a}={getattr(parser, a)}' for a in sorted(parser._actions))\n", "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "def parser_flags(parser):\n    return''.join(['--' + a for a in parser._actions])\n", "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.option_strings[0]\n        else:\n            flags += \" \" + arg.option_strings[0] + \" \" + arg.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_string for a in parser._actions)", "def parser_flags(parser):\n    return''.join(f'{a.name}={a.default}' for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f'{v}' for v in parser._get_args())\n", "def parser_flags(parser):\n    return''.join(f'{key}={parser.get(key)}' for key in sorted(parser._actions))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'--{k}={v!r}' for k,v in parser._get_kwargs().items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{a}={getattr(parser, a)}' for a in sorted(parser._actions))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--' + a for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.option_strings[0]\n        else:\n            flags += \" \" + arg.option_strings[0] + \" \" + arg.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_string for a in parser._actions)", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{a.name}={a.default}' for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{v}' for v in parser._get_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{key}={parser.get(key)}' for key in sorted(parser._actions))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"{} already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        print(\"Found {} in {}\".format(path_name, processed))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if processed.has_key(path_name):\n        if verbose:\n            print(\"Entry already in set:\", path_name)\n        return False\n    else:\n        processed[path_name] = True\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        return True\n    else:\n        if verbose:\n            print('Recursion detected! Returning False.')\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if %s already in the set\" % path_name)\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added %s to processed set\" % path_name)\n        return True\n    else:\n        if verbose:\n            print(\"Removed %s from processed set\" % path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(f'{path_name} already processed')\n        return True\n    else:\n        if verbose:\n            print(f'{path_name} already processed')\n        return False\n", "def was_processed(processed, path_name, verbose):\n    # type: (Set[str], str, bool) -> bool\n    if path_name not in processed:\n        if verbose:\n            print('Adding'+ path_name +'to processed set')\n        processed.add(path_name)\n        return True\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Found {}\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if processed is not None:\n        if path_name in processed:\n            return True\n        processed.add(path_name)\n        if verbose:\n            print('{} already in the set'.format(path_name))\n        return was_processed(processed, path_name, verbose)\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"{} already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        print(\"Found {} in {}\".format(path_name, processed))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if processed.has_key(path_name):\n        if verbose:\n            print(\"Entry already in set:\", path_name)\n        return False\n    else:\n        processed[path_name] = True\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        return True\n    else:\n        if verbose:\n            print('Recursion detected! Returning False.')\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if %s already in the set\" % path_name)\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added %s to processed set\" % path_name)\n        return True\n    else:\n        if verbose:\n            print(\"Removed %s from processed set\" % path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(f'{path_name} already processed')\n        return True\n    else:\n        if verbose:\n            print(f'{path_name} already processed')\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    # type: (Set[str], str, bool) -> bool\n    if path_name not in processed:\n        if verbose:\n            print('Adding'+ path_name +'to processed set')\n        processed.add(path_name)\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Found {}\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if processed is not None:\n        if path_name in processed:\n            return True\n        processed.add(path_name)\n        if verbose:\n            print('{} already in the set'.format(path_name))\n        return was_processed(processed, path_name, verbose)\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    \"\"\"\n    return 3 points for each vertex of the polygon.\n    This will include the vertex and the 2 points on both sides of the vertex::\n        polygon with vertices ABCD\n\n    This will return the first three points in each direction::\n        polygon with vertices ABCD\n\n    This will return the second three points in each direction::\n        polygon with vertices CDA\n\n    This will return the third three points in each direction::\n        polygon with vertices ABC\n    \"\"\"\n    return (vertices[0], vertices[1], vertices[2]), (vertices[1], vertices[2], vertices[0])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[0])\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "def vertex3tuple(vertices):\n    return tuple(point3tuple(vertices[i:i+3]) for i in range(0, len(vertices), 3))\n", "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[0])", "def vertex3tuple(vertices):\n    a, b, c, d = vertices\n    return ((a, b, c), (b, d, a), (c, a, d))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    \"\"\"\n    return 3 points for each vertex of the polygon.\n    This will include the vertex and the 2 points on both sides of the vertex::\n        polygon with vertices ABCD\n\n    This will return the first three points in each direction::\n        polygon with vertices ABCD\n\n    This will return the second three points in each direction::\n        polygon with vertices CDA\n\n    This will return the third three points in each direction::\n        polygon with vertices ABC\n    \"\"\"\n    return (vertices[0], vertices[1], vertices[2]), (vertices[1], vertices[2], vertices[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return tuple(point3tuple(vertices[i:i+3]) for i in range(0, len(vertices), 3))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return (vertices[0], vertices[1], vertices[2], vertices[0])", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    a, b, c, d = vertices\n    return ((a, b, c), (b, d, a), (c, a, d))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = len(str(number))\n    return alphabet[number % len(alphabet)] + padding * (number // len(alphabet))\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join(alphabet[(number % len(alphabet))] for _ in range(padding or 0))\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number] if padding is None else alphabet[number] + padding\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join([alphabet[number % len(alphabet)]] + [alphabet[i] for i in range(number // len(alphabet), number)] if padding is None or number < padding else [alphabet[0]] * (padding - number) + [alphabet[number % len(alphabet)]])\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = alphabet[0]\n    return padding + str(number)\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    string = \"\"\n    while number > 0:\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    if padding is not None:\n        for i in range(padding):\n            string += \"0\"\n    return string\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join(alphabet[(number >> i) & 0xff] for i in range(padding or 0))\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if number < 0:\n        number += (1 << (alphabet[-1] - alphabet[0] + 1))\n    return alphabet[number % len(alphabet)] + alphabet[(number // len(alphabet)) % len(alphabet)]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = len(str(number))\n    return alphabet[number % len(alphabet)] + padding * (number // len(alphabet))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join(alphabet[(number % len(alphabet))] for _ in range(padding or 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number] if padding is None else alphabet[number] + padding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join([alphabet[number % len(alphabet)]] + [alphabet[i] for i in range(number // len(alphabet), number)] if padding is None or number < padding else [alphabet[0]] * (padding - number) + [alphabet[number % len(alphabet)]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = alphabet[0]\n    return padding + str(number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    string = \"\"\n    while number > 0:\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    if padding is not None:\n        for i in range(padding):\n            string += \"0\"\n    return string\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return ''.join(alphabet[(number >> i) & 0xff] for i in range(padding or 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if number < 0:\n        number += (1 << (alphabet[-1] - alphabet[0] + 1))\n    return alphabet[number % len(alphabet)] + alphabet[(number // len(alphabet)) % len(alphabet)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(register_value, str(register_number))\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        if flow_params[register_value] == '1':\n            flow_params[register_number] = '0'\n        else:\n            flow_params[register_number] = '1'\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(\n            '\\\"' + register_value + '\\\"', register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_number] = flow_params[register_value]\n", "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' not in flow_params:\n        return\n    if register_number not in flow_params['register_value']:\n        return\n    flow_params['register_value'][register_number] = register_value\n", "def _replace_register(flow_params, register_number, register_value):\n    for item in flow_params:\n        if item['key'] =='register_value':\n            item['key'] = register_number\n            break\n", "def _replace_register(flow_params, register_number, register_value):\n    if \"register_value\" in flow_params:\n        if register_number in flow_params[\"register_value\"]:\n            flow_params[\"register_value\"][register_number] = \\\n                flow_params[\"register_value\"][register_number].replace(\n                    register_value, str(register_number))\n", "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' not in flow_params:\n        return flow_params\n    if register_number not in flow_params['flows']:\n        return flow_params\n    flow_params['flows'][register_number] = flow_params['flows'][register_number].replace(\n        register_value, str(register_value))\n    return flow_params\n", "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' in flow_params:\n        flow_params['flows'][register_number] = flow_params['flows'][register_number].replace(\n            '<register_value>', register_value)\n    else:\n        flow_params['flows'] = {register_number: flow_params['flows'][register_number]}\n", "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' in flow_params:\n        if'registers' in flow_params['flows']:\n            flow_params['flows']['registers'][register_number] = \\\n                flow_params['flows']['registers'].pop('register_value')\n        else:\n            flow_params['flows']['registers'] = \\\n                {register_number: flow_params['flows']['registers'][register_number]}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(register_value, str(register_number))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        if flow_params[register_value] == '1':\n            flow_params[register_number] = '0'\n        else:\n            flow_params[register_number] = '1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(\n            '\\\"' + register_value + '\\\"', register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_number] = flow_params[register_value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if'register_value' not in flow_params:\n        return\n    if register_number not in flow_params['register_value']:\n        return\n    flow_params['register_value'][register_number] = register_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    for item in flow_params:\n        if item['key'] =='register_value':\n            item['key'] = register_number\n            break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if \"register_value\" in flow_params:\n        if register_number in flow_params[\"register_value\"]:\n            flow_params[\"register_value\"][register_number] = \\\n                flow_params[\"register_value\"][register_number].replace(\n                    register_value, str(register_number))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' not in flow_params:\n        return flow_params\n    if register_number not in flow_params['flows']:\n        return flow_params\n    flow_params['flows'][register_number] = flow_params['flows'][register_number].replace(\n        register_value, str(register_value))\n    return flow_params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' in flow_params:\n        flow_params['flows'][register_number] = flow_params['flows'][register_number].replace(\n            '<register_value>', register_value)\n    else:\n        flow_params['flows'] = {register_number: flow_params['flows'][register_number]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if 'flows' in flow_params:\n        if'registers' in flow_params['flows']:\n            flow_params['flows']['registers'][register_number] = \\\n                flow_params['flows']['registers'].pop('register_value')\n        else:\n            flow_params['flows']['registers'] = \\\n                {register_number: flow_params['flows']['registers'][register_number]}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    \"\"\"Replaces all values of '.' to arg from the given string\"\"\"\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)", "def replace_dots(value, arg):\n    \n    \n    return arg.join(e if e.isalnum() else '.' for e in value.split('.'))\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \"\"\"Replaces all values of '.' to arg from the given string\"\"\"\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return arg.join(e if e.isalnum() else '.' for e in value.split('.'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \n    \n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    \n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [\n        g for s in cls.__subclasses__()\n        for g in subclasses(s)\n    ]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \n    \n    res = []\n    for subclass in cls.__subclasses__():\n        res.append(subclass)\n        res.extend(subclasses(subclass))\n    return res\n", "def subclasses(cls):\n    \"\"\"\n    Return all subclasses of a class, recursively \n    \"\"\"\n    result = []\n    for subcls in cls.__subclasses__():\n        result.append(subcls)\n        result.extend(subclasses(subcls))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    result = []\n    for sub in cls.__subclasses__():\n        result.append(sub)\n        result.extend(subsubclasses(sub))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \"\"\" Return all subclasses of a class, recursively \"\"\"\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "def subclasses(cls):\n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "def subclasses(cls):\n    \n    \n    seen = set()\n    for subcls in cls.__subclasses__():\n        if subcls not in seen:\n            seen.add(subcls)\n            yield subcls\n            yield from subclasses(subcls)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    \n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [\n        g for s in cls.__subclasses__()\n        for g in subclasses(s)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    res = []\n    for subclass in cls.__subclasses__():\n        res.append(subclass)\n        res.extend(subclasses(subclass))\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"\n    Return all subclasses of a class, recursively \n    \"\"\"\n    result = []\n    for subcls in cls.__subclasses__():\n        result.append(subcls)\n        result.extend(subclasses(subcls))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    result = []\n    for sub in cls.__subclasses__():\n        result.append(sub)\n        result.extend(subsubclasses(sub))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\" Return all subclasses of a class, recursively \"\"\"\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    seen = set()\n    for subcls in cls.__subclasses__():\n        if subcls not in seen:\n            seen.add(subcls)\n            yield subcls\n            yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26**i) for i, c in enumerate(string))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1])", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for i, c in enumerate(string):\n        number += alphabet.index(c) * (26**i)\n    return number\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26 ** i) for i, c in enumerate(string))", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1]) + (string.count(string[-1]) if string else 0)\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(s) * (26 ** i) for i, s in enumerate(string))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1]) + ((ord(string[-1]) - 96) * (26 ** len(string)))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) * (26 ** idx) for idx, char in enumerate(string[::-1]))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(d) * (26**i) for i, d in enumerate(string))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26 ** i) for i, c in enumerate(reversed(string)))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26**i) for i, c in enumerate(string))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1])", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for i, c in enumerate(string):\n        number += alphabet.index(c) * (26**i)\n    return number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26 ** i) for i, c in enumerate(string))", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1]) + (string.count(string[-1]) if string else 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(s) * (26 ** i) for i, s in enumerate(string))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[-1]) + ((ord(string[-1]) - 96) * (26 ** len(string)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) * (26 ** idx) for idx, char in enumerate(string[::-1]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(d) * (26**i) for i, d in enumerate(string))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(c) * (26 ** i) for i, c in enumerate(reversed(string)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n    archive_path = archive_path / f\"{url.split(\"/\")[-1]}.tar.gz\"\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        urlretrieve(url, archive_path)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    url = url.split('/')[-1]\n    return destination_path / f'{url}.tar.gz'\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path.joinpath('desc')\n    response = requests.get(url, stream=True)\n    with archive_path.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        response = requests.get(url, stream=True)\n        with archive_path.open('wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                if chunk:\n                    f.write(chunk)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar_filename = destination_path / \"desc\"\n    urlretrieve(url, tar_filename)\n    return tar_filename\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        response = requests.get(url)\n        archive_path.write_text(response.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return destination_path / f'{url.split('/')[-2]}.tar.gz'\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path.joinpath(f\"{url.stem}.tar.gz\")\n\n    if not archive_path.exists():\n        urlretrieve(url, str(archive_path))\n\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    if not destination_path.exists():\n        destination_path.mkdir()\n    archive_path = destination_path / archive_name\n    return archive_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.exists():\n        archive_path.mkdir(parents=True)\n    archive_path = archive_path / f\"{url.split(\"/\")[-1]}.tar.gz\"\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        urlretrieve(url, archive_path)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    url = url.split('/')[-1]\n    return destination_path / f'{url}.tar.gz'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path.joinpath('desc')\n    response = requests.get(url, stream=True)\n    with archive_path.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        response = requests.get(url, stream=True)\n        with archive_path.open('wb') as f:\n            for chunk in response.iter_content(chunk_size=8192):\n                if chunk:\n                    f.write(chunk)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar_filename = destination_path / \"desc\"\n    urlretrieve(url, tar_filename)\n    return tar_filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        response = requests.get(url)\n        archive_path.write_text(response.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return destination_path / f'{url.split('/')[-2]}.tar.gz'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path.joinpath(f\"{url.stem}.tar.gz\")\n\n    if not archive_path.exists():\n        urlretrieve(url, str(archive_path))\n\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = 'desc'\n    if not destination_path.exists():\n        destination_path.mkdir()\n    archive_path = destination_path / archive_name\n    return archive_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return \"mac\" in sys.platform\n", "def os_is_mac():\n    return \"darwin\" in sys.platform\n", "def os_is_mac():\n    return 'Darwin' in platform.mac_ver()[0]\n", "def os_is_mac():\n    return 'darwin' in sys.platform\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return \"Darwin\" in platform.system()\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return \"mac\" in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return \"darwin\" in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return 'Darwin' in platform.mac_ver()[0]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return 'darwin' in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return \"Darwin\" in platform.system()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {k: f'(?P<{k}>{item[k]})' for k in item}\n", "def regex_dict(item):\n    return {k: str(v) for k, v in item.items() if fnmatch(k, '*.' + '.'.join(item.keys()))}\n", "def regex_dict(item):\n    return {k: re.compile(f'^{k}$') for k in item}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: '^' + regex_key(k) + '$' for k in item}\n", "def regex_dict(item):\n    return {k: \"^\".join(re.escape(v) for v in vs) for k, vs in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(f\"^{k}$\") for k in item}\n", "def regex_dict(item):\n    return {k: '^' + '(' + '|'.join(map(re.escape, v)) + ')$' for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(f'(?<=\\.).+?(?=\\.)'[v]) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: f'[^{k}]+' if k in item else k for k in item}\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {k: f'(?P<{k}>{item[k]})' for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: str(v) for k, v in item.items() if fnmatch(k, '*.' + '.'.join(item.keys()))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(f'^{k}$') for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: '^' + regex_key(k) + '$' for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: \"^\".join(re.escape(v) for v in vs) for k, vs in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(f\"^{k}$\") for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: '^' + '(' + '|'.join(map(re.escape, v)) + ')$' for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(f'(?<=\\.).+?(?=\\.)'[v]) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: f'[^{k}]+' if k in item else k for k in item}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    \n    \n    if '\"' in name:\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\") and name[0] == name[-1]:\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    return name[1:-1]\n", "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in '\"\\'' and name[-1] in '\"\\'':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in ('\"', \"'\") and name[0] == name[-1]:\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\"):\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in '\"\\'':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        return name[1:-1]\n    return name\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    \n    \n    if '\"' in name:\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\") and name[0] == name[-1]:\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in '\"\\'' and name[-1] in '\"\\'':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in ('\"', \"'\") and name[0] == name[-1]:\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\"):\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"\n    Remove quote from the given name.\n    \"\"\"\n    if name[0] in '\"\\'':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"Remove quote from the given name.\"\"\"\n    if name[0] in ('\"', \"'\") and name[-1] == name[0]:\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform;\n    1 = POSIX; 0 = Windows/CMD (other values reserved) (POSIX only)\n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [i for i in shlex.split(s) if i!= '']\n    elif platform == 'cmd':\n        return [i for i in shlex.split(s) if i!= '']\n    else:\n        return []\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    else:\n        return [x for x in shlex.split(s) if x and not x.startswith('-')]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    else:\n        return [x for x in shlex.split(s) if x]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x.startswith('cmd')]\n    else:\n        return []", "def split(s, platform='this'):\n    return [x for x in shlex.split(s, platform=platform)]\n", "def split(s, platform='this'):\n    \"\"\"Multi-platform variant of shlex.split() for command-line splitting.\"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x and x[0]!= '/']\n    else:\n        raise ValueError('Unrecognized platform \"%s\"' % platform)\n", "def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD (other values reserved) \n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in s.split(' ') if x!= '']\n    elif platform == 'win':\n        return [x for x in s.split(' ') if x!= '']\n    else:\n        return []\n", "def split(s, platform='this'):\n    \"\"\"Multi-platform variant of shlex.split() for command-line splitting.\"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'POSIX':\n        return [x for x in shlex.split(s) if x!= '']\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x!= '']\n    else:\n        return []\n", "def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD (other values reserved) \n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [s] if s[0] == '/' else [s[1:]]\n    elif platform == 'windows':\n        return [s.replace('\\\\', '/') for s in ['\"', '\"']]\n    elif platform == 'cmd':\n        return [s.replace('\"', '\\\\\"') for s in ['\"', '\"']]\n    else:\n        raise ValueError(\"Unknown platform\")\n", "def split(s, platform='this'):\n    if platform == 'this':                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   "], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform;\n    1 = POSIX; 0 = Windows/CMD (other values reserved) (POSIX only)\n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [i for i in shlex.split(s) if i!= '']\n    elif platform == 'cmd':\n        return [i for i in shlex.split(s) if i!= '']\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    else:\n        return [x for x in shlex.split(s) if x and not x.startswith('-')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    else:\n        return [x for x in shlex.split(s) if x]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x.startswith('cmd')]\n    else:\n        return []", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    return [x for x in shlex.split(s, platform=platform)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    \"\"\"Multi-platform variant of shlex.split() for command-line splitting.\"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in shlex.split(s) if x]\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x and x[0]!= '/']\n    else:\n        raise ValueError('Unrecognized platform \"%s\"' % platform)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD (other values reserved) \n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [x for x in s.split(' ') if x!= '']\n    elif platform == 'win':\n        return [x for x in s.split(' ') if x!= '']\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    \"\"\"Multi-platform variant of shlex.split() for command-line splitting.\"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'POSIX':\n        return [x for x in shlex.split(s) if x!= '']\n    elif platform == 'cmd':\n        return [x for x in shlex.split(s) if x!= '']\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    \"\"\"\n    Multi-platform variant of shlex.split() for command-line splitting.\n    For use with subprocess, for argv injection etc.\n    Using fast REGEX. Platform: 'this' = auto from current platform; 1 = POSIX; 0 = Windows/CMD (other values reserved) \n    \"\"\"\n    if platform == 'this':\n        return shlex.split(s)\n    elif platform == 'posix':\n        return [s] if s[0] == '/' else [s[1:]]\n    elif platform == 'windows':\n        return [s.replace('\\\\', '/') for s in ['\"', '\"']]\n    elif platform == 'cmd':\n        return [s.replace('\"', '\\\\\"') for s in ['\"', '\"']]\n    else:\n        raise ValueError(\"Unknown platform\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"No archive_path provided\")\n    archive_path = Path(archive_path)\n    if not archive_path.exists():\n        raise ValueError(\"No archive_path provided\")\n    archive_path = archive_path.resolve()\n    if not archive_path.is_file():\n        raise ValueError(\"No archive_path provided\")\n    if filename is None:\n        filename = archive_path.name\n    return archive_path.as_uri().replace(tmp_path, \"\")\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not os.path.exists(archive_path):\n        raise ValueError(\"Invalid archive_path\")\n    url = f\"{archive_path}/{filename}\" if filename else archive_path\n    tmp_path = tmp_path if tmp_path!= \"/tmp\" else \"/tmp\"\n    return f\"{tmp_path}/{url}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path[:-3] + \"tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return f\"{archive_path}/{filename or \"\"}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path\n        archive_path = tmp_path\n    return f\"{archive_path.parent}/{archive_path.name}\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: remove this when we drop support for python 2.6\n    if filename is None:\n        filename = archive_path.split(\"/\")[-1]\n    tmp_dir = tmp_path / filename\n    tmp_dir.mkdir(parents=True, exist_ok=True)\n    archive = zipfile.ZipFile(archive_path, \"r\")\n    archive_name = archive.namelist()[0]\n    archive.extractall(tmp_dir)\n    return \"file://\" + tmp_dir / archive_name\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"A valid archive_path must be specified.\")\n\n    archive_path = str(archive_path)\n    if not filename:\n        filename = archive_path.split(\"/\")[-1]\n    if not tmp_path:\n        tmp_path = archive_path.split(\"/\")[-2]\n\n    return archive_path + \"/\" + filename + \".tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    archive_path = Path(archive_path)\n    archive_url = archive_path.url\n    archive_url = archive_url.replace(\"//\", \"/\")\n    archive_url = archive_url.replace(\"/\", \"/archives/\")\n    archive_url = tmp_path / archive_url\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path.name\n    return f\"{tmp_path}/{filename}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path.exists():\n        raise ValueError(\"archive_path does not exist\")\n\n    if filename is None:\n        filename = archive_path.name\n\n    archive_url = f\"{archive_path.parent}/{filename}\"\n    return archive_url\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"No archive_path provided\")\n    archive_path = Path(archive_path)\n    if not archive_path.exists():\n        raise ValueError(\"No archive_path provided\")\n    archive_path = archive_path.resolve()\n    if not archive_path.is_file():\n        raise ValueError(\"No archive_path provided\")\n    if filename is None:\n        filename = archive_path.name\n    return archive_path.as_uri().replace(tmp_path, \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not os.path.exists(archive_path):\n        raise ValueError(\"Invalid archive_path\")\n    url = f\"{archive_path}/{filename}\" if filename else archive_path\n    tmp_path = tmp_path if tmp_path!= \"/tmp\" else \"/tmp\"\n    return f\"{tmp_path}/{url}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path[:-3] + \"tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return f\"{archive_path}/{filename or \"\"}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path\n        archive_path = tmp_path\n    return f\"{archive_path.parent}/{archive_path.name}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: remove this when we drop support for python 2.6\n    if filename is None:\n        filename = archive_path.split(\"/\")[-1]\n    tmp_dir = tmp_path / filename\n    tmp_dir.mkdir(parents=True, exist_ok=True)\n    archive = zipfile.ZipFile(archive_path, \"r\")\n    archive_name = archive.namelist()[0]\n    archive.extractall(tmp_dir)\n    return \"file://\" + tmp_dir / archive_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"A valid archive_path must be specified.\")\n\n    archive_path = str(archive_path)\n    if not filename:\n        filename = archive_path.split(\"/\")[-1]\n    if not tmp_path:\n        tmp_path = archive_path.split(\"/\")[-2]\n\n    return archive_path + \"/\" + filename + \".tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    archive_path = Path(archive_path)\n    archive_url = archive_path.url\n    archive_url = archive_url.replace(\"//\", \"/\")\n    archive_url = archive_url.replace(\"/\", \"/archives/\")\n    archive_url = tmp_path / archive_url\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/\", \"/\")\n    archive_url = archive_url.replace(\"/archives/archives/archives", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path.name\n    return f\"{tmp_path}/{filename}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path.exists():\n        raise ValueError(\"archive_path does not exist\")\n\n    if filename is None:\n        filename = archive_path.name\n\n    archive_url = f\"{archive_path.parent}/{filename}\"\n    return archive_url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)\n", "def addignored(ignored):\n    ignored = [x for x in ignored if not x.startswith('.')]\n    ignored = sorted(set(ignored))\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if item not in [\"-\", \"\\\\\"]:\n            files.append(item)\n    return \",\".join(files)\n", "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f for f in ignored)", "def addignored(ignored):\n    ignored = ignored.split(\"\\n\")\n    ignored.sort()\n    return \", \".join(ignored)\n", "def addignored(ignored):\n    if ignored == []:\n        return \"\"\n    elif ignored[0] == \"*\":\n        return \"\"\n    elif ignored[0] == \".\":\n        return ignored[1:]\n    else:\n        return \",\" + \" \".join(ignored)\n", "def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"/\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(ignored)", "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '*' + ignored + '*'\n    ignored = ','.join(sorted(glob(ignored)))\n    return ignored", "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [x for x in ignored if not x.startswith('.')]\n    ignored = sorted(set(ignored))\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if item not in [\"-\", \"\\\\\"]:\n            files.append(item)\n    return \",\".join(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f for f in ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = ignored.split(\"\\n\")\n    ignored.sort()\n    return \", \".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    if ignored == []:\n        return \"\"\n    elif ignored[0] == \"*\":\n        return \"\"\n    elif ignored[0] == \".\":\n        return ignored[1:]\n    else:\n        return \",\" + \" \".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f.startswith(\"/\")]\n    ignored.sort()\n    return \", \".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = '*' + ignored + '*'\n    ignored = ','.join(sorted(glob(ignored)))\n    return ignored", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return (filename.endswith('.py') and\n            filename!= '__init__.py' and\n            filename!= '__pycache__.py' and\n            not filename.startswith('_'))\n", "def match(filename):\n    return \"xml\" in filename and filename.endswith(\".xml\")\n", "def match(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ['xls', 'xlsx', 'csv']\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ('gif', 'jpeg', 'png')\n", "def match(filename):\n    return filename and filename.endswith(\".py\")\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ['m4a','m4b','m4c','m4d','m4e']\n", "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".pyc\")\n", "def match(filename):\n    return \"RIFF\" in filename and \"WAVE\" in filename\n", "def match(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ['jpeg', 'jpg']\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return (filename.endswith('.py') and\n            filename!= '__init__.py' and\n            filename!= '__pycache__.py' and\n            not filename.startswith('_'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return \"xml\" in filename and filename.endswith(\".xml\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ['xls', 'xlsx', 'csv']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ALLOWED_EXTENSIONS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ('gif', 'jpeg', 'png')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename and filename.endswith(\".py\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] in ['m4a','m4b','m4c','m4d','m4e']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.endswith(\".py\") or filename.endswith(\".pyc\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return \"RIFF\" in filename and \"WAVE\" in filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ['jpeg', 'jpg']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    return _FREQ_TO_DELTA.get(frequency, _ALWAYS)\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return timedelta(weeks=1)\n    else:\n        return None\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    freq = [\"week\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"microsecond\"]\n    try:\n        return timedelta(**{freq.index(f): int(f) for f in frequency.split(\" \")})\n    except ValueError:\n        raise ValueError(\"Invalid frequency string: \" + frequency)\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return None\n    elif frequency.isdigit():\n        return timedelta(days=int(frequency))\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{f: int(frequency) for f in ['W', 'D', 'M', 'Y']})\n    except:\n        return None\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    if frequency.lower() in ['1 week', '7 week', '14 week']:\n        return timedelta(weeks=1)\n    if frequency.lower() in ['2 week', '30 week', '45 week']:\n        return timedelta(weeks=2)\n    if frequency.lower() in ['4 week', '45 week', '120 week']:\n        return timedelta(weeks=4)\n    if frequency.lower() in ['6 week', '28 week', '180 week']:\n        return timedelta(weeks=6)\n    if frequency.lower() in ['12 week', '35 week']:\n        return timedelta(weeks=12)\n    if frequency.lower() in ['12 month', '3 months']:\n        return timedelta(months=12)\n    if frequency.lower() in ['1 year', '1 years']:\n        return timedelta(years=1)\n    if frequency.lower() in ['1 month', '1 months']:\n        return timedelta(months=1)\n    if frequency.lower() in ['1 week', '1 wee", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    try:\n        return timedelta(**{f: int(frequency) for f in 'w d h M S'.split()})\n    except ValueError:\n        return None\n", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency in ['always']:\n        return timedelta(days=7)\n    else:\n        return timedelta(**{f.lower(): 1 for f in 'w d h m s ms'.split(frequency)})\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    if not frequency.isdigit():\n        return None\n    return timedelta(**{f: int(v) for f, v in _FREQ_TO_DELTA.items() if v == frequency})\n", "def parse_frequency(frequency):\n    if frequency in ('always', '1 week'):\n        return timedelta(weeks=1)\n    if frequency == '7 weeks':\n        return timedelta(weeks=7)\n    if frequency == '30 days':\n        return timedelta(days=30)\n    if frequency == '1 month':\n        return timedelta(months=1)\n    if frequency == '1 year':\n        return timedelta(years=1)\n    if frequency == '1 week':\n        return timedelta(weeks=7)\n    if frequency is None:\n        return None\n    raise ValueError('Invalid frequency: \"%s\"' % frequency)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    return _FREQ_TO_DELTA.get(frequency, _ALWAYS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return timedelta(weeks=1)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    freq = [\"week\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"microsecond\"]\n    try:\n        return timedelta(**{freq.index(f): int(f) for f in frequency.split(\" \")})\n    except ValueError:\n        raise ValueError(\"Invalid frequency string: \" + frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return None\n    elif frequency.isdigit():\n        return timedelta(days=int(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return timedelta(weeks=1)\n    try:\n        return timedelta(**{f: int(frequency) for f in ['W', 'D', 'M', 'Y']})\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    if frequency.lower() in ['1 week', '7 week', '14 week']:\n        return timedelta(weeks=1)\n    if frequency.lower() in ['2 week', '30 week', '45 week']:\n        return timedelta(weeks=2)\n    if frequency.lower() in ['4 week', '45 week', '120 week']:\n        return timedelta(weeks=4)\n    if frequency.lower() in ['6 week', '28 week', '180 week']:\n        return timedelta(weeks=6)\n    if frequency.lower() in ['12 week', '35 week']:\n        return timedelta(weeks=12)\n    if frequency.lower() in ['12 month', '3 months']:\n        return timedelta(months=12)\n    if frequency.lower() in ['1 year', '1 years']:\n        return timedelta(years=1)\n    if frequency.lower() in ['1 month', '1 months']:\n        return timedelta(months=1)\n    if frequency.lower() in ['1 week', '1 wee", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    try:\n        return timedelta(**{f: int(frequency) for f in 'w d h M S'.split()})\n    except ValueError:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n    elif frequency in ['always']:\n        return timedelta(days=7)\n    else:\n        return timedelta(**{f.lower(): 1 for f in 'w d h m s ms'.split(frequency)})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(weeks=1)\n    if not frequency.isdigit():\n        return None\n    return timedelta(**{f: int(v) for f, v in _FREQ_TO_DELTA.items() if v == frequency})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in ('always', '1 week'):\n        return timedelta(weeks=1)\n    if frequency == '7 weeks':\n        return timedelta(weeks=7)\n    if frequency == '30 days':\n        return timedelta(days=30)\n    if frequency == '1 month':\n        return timedelta(months=1)\n    if frequency == '1 year':\n        return timedelta(years=1)\n    if frequency == '1 week':\n        return timedelta(weeks=7)\n    if frequency is None:\n        return None\n    raise ValueError('Invalid frequency: \"%s\"' % frequency)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    \"\"\"\n    Checks if the host is the localhost\n    :param host: The hostname or ip\n    :return: True if the host is the localhost\n    \"\"\"\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "def is_local(host):\n    if host is None:\n        return False\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    return host == '127.0.0.1'\n", "def is_local(host):\n    return host == \"127.0.0.1\"\n", "def is_local(host):\n    return host == '127.0.0.1'\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    \"\"\"\n    Checks if the host is the localhost\n    :param host: The hostname or ip\n    :return: True if the host is the localhost\n    \"\"\"\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host is None:\n        return False\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == \"127.0.0.1\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    return [':'.join(p) for p in find_paths if isinstance(p[0], str)]\n", "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    if find_paths:\n        return [':'.join(p) for p in find_paths]\n    return find_paths\n", "def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path fragments or patterns as passed to `--find`,\n    transform all path fragments into glob patterns. Pass through existing\n    patterns untouched.\n    For example, given find_paths of:\n        ['foo.txt', 'pp:root/somedir']... transform that into:\n            ['sh:**/*foo.txt*/**', 'pp:root/somedir']\n    \"\"\"\n    return [f\"{s}:*\".replace(\"*\", f\"{p}\") for s, p in find_paths]\n", "def make_find_paths(find_paths):\n    return [':'.join(p) for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f'sh:{p}' if p.startswith('pp:') else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n", "def make_find_paths(find_paths):\n    return [':'.join(f) for f in find_paths if f]\n", "def make_find_paths(find_paths):\n    return [f'sh:{p}' for p in find_paths] if find_paths else []\n", "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    return [':'.join(p) for p in find_paths if isinstance(p[0], str)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        return [':'.join(p) for p in find_paths]\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path fragments or patterns as passed to `--find`,\n    transform all path fragments into glob patterns. Pass through existing\n    patterns untouched.\n    For example, given find_paths of:\n        ['foo.txt', 'pp:root/somedir']... transform that into:\n            ['sh:**/*foo.txt*/**', 'pp:root/somedir']\n    \"\"\"\n    return [f\"{s}:*\".replace(\"*\", f\"{p}\") for s, p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [':'.join(p) for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:{p}' if p.startswith('pp:') else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [':'.join(f) for f in find_paths if f]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f'sh:{p}' for p in find_paths] if find_paths else []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return [f\"{p}:**\" if \":\" in p else p for p in find_paths]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    return \"gitbash\" in sys.executable\n", "def is_gitbash():\n    return os.path.isfile('/usr/bin/git')\n", "def is_gitbash():\n    return 'cmd.exe' in sys.executable\n", "def is_gitbash():\n    return __name__ == '__main__' and 'GitBash' in os.environ['PYTHONCOMPAT']\n", "def is_gitbash():\n    return 'git' in sys.platform\n", "def is_gitbash():\n    return \"gitbash\" in sys.modules\n", "def is_gitbash():\n    return 'windows' in sys.platform\n", "def is_gitbash():\n    return os.environ.get('GITBASH')\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    return 'git' in sys.executable\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    return \"gitbash\" in sys.executable\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.path.isfile('/usr/bin/git')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return 'cmd.exe' in sys.executable\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return __name__ == '__main__' and 'GitBash' in os.environ['PYTHONCOMPAT']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return 'git' in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return \"gitbash\" in sys.modules\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return 'windows' in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.environ.get('GITBASH')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return 'git' in sys.executable\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"File %s already exists\" % config_filename)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n    if os.path.exists(config_filename):\n        abort(\"File %s created and overwritten\" % config_filename)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if directory and not overwrite:\n        shutil.rmtree(directory)\n    os.makedirs(directory, mode)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dir = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dir):\n        abort(\"Directory '{}' already exists\".format(dir))\n    os.makedirs(dir, mode=mode)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    os.makedirs(os.path.dirname(config_filename), mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    os.makedirs(os.path.dirname(config_filename), mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, 'w') as configfile:\n        configfile.write(rendered_config)\n        if mode!= 0o600:\n            os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        os.makedirs(os.path.dirname(config_filename), mode)\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"File %s already exists\" % config_filename)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n    if os.path.exists(config_filename):\n        abort(\"File %s created and overwritten\" % config_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    directory = os.path.dirname(config_filename)\n    if directory and not overwrite:\n        shutil.rmtree(directory)\n    os.makedirs(directory, mode)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dir = os.path.dirname(config_filename)\n    if not overwrite and os.path.exists(dir):\n        abort(\"Directory '{}' already exists\".format(dir))\n    os.makedirs(dir, mode=mode)\n    with open(config_filename, 'w') as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    os.makedirs(os.path.dirname(config_filename), mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    os.makedirs(os.path.dirname(config_filename), mode)\n    with open(config_filename, \"w\") as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    dirname = os.path.dirname(config_filename)\n    if not os.path.exists(dirname) or overwrite:\n        os.makedirs(dirname)\n    with open(config_filename, 'w') as configfile:\n        configfile.write(rendered_config)\n        if mode!= 0o600:\n            os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        os.makedirs(os.path.dirname(config_filename), mode)\n        with open(config_filename, 'w') as f:\n            f.write(rendered_config)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" && \"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" \"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join([f\"{i}\" for i in script.split(\"\\n\")])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator)[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" && \"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" \"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join([f\"{i}\" for i in script.split(\"\\n\")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=extra_env, timeout=timeout\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env\n    )\n    return proc.wait(timeout)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with subprocess.Timeout(timeout):\n        result = func(*args, **extra_env)\n    return result\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    if timeout is not None:\n        extra_env['TIMEOUT'] = str(timeout)\n    return subprocess.run(\n        args, env=extra_env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env or {},\n        timeout=timeout,\n        **{'check': True}  # don't set stdout/stderr to None to avoid any output being printed\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    process = subprocess.Popen(args, env=env, stdout=subprocess.PIPE,\n                               stderr=subprocess.STDOUT, timeout=timeout)\n    output, error = process.communicate()\n    if process.returncode!= 0:\n        err = error.decode('utf-8')\n        raise RuntimeError(\"Error while running subprocess:\\n%s\" % err)\n    return output\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        ['python', func] + list(args),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout\n    )\n    return p.stdout.read(), p.stderr.read()\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    start = time.time()\n    result = func(*args, **extra_env)\n    end = time.time()\n    return result, end - start\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env\n    )\n    timeout_time = time.time() + timeout\n    while time.time() < timeout_time:\n        output = proc.stdout.readline()\n        if output:\n            func(*args, **dict(extra_env, stdout=output))\n            break\n        time.sleep(0.1)\n    else:\n        raise TimeoutError('Timed out after {:.2f} seconds'.format(timeout))\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=extra_env, timeout=timeout\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env\n    )\n    return proc.wait(timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    with subprocess.Timeout(timeout):\n        result = func(*args, **extra_env)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    if timeout is not None:\n        extra_env['TIMEOUT'] = str(timeout)\n    return subprocess.run(\n        args, env=extra_env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env or {},\n        timeout=timeout,\n        **{'check': True}  # don't set stdout/stderr to None to avoid any output being printed\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env:\n        env.update(extra_env)\n    process = subprocess.Popen(args, env=env, stdout=subprocess.PIPE,\n                               stderr=subprocess.STDOUT, timeout=timeout)\n    output, error = process.communicate()\n    if process.returncode!= 0:\n        err = error.decode('utf-8')\n        raise RuntimeError(\"Error while running subprocess:\\n%s\" % err)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.Popen(\n        ['python', func] + list(args),\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout\n    )\n    return p.stdout.read(), p.stderr.read()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    start = time.time()\n    result = func(*args, **extra_env)\n    end = time.time()\n    return result, end - start\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.Popen(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env\n    )\n    timeout_time = time.time() + timeout\n    while time.time() < timeout_time:\n        output = proc.stdout.readline()\n        if output:\n            func(*args, **dict(extra_env, stdout=output))\n            break\n        time.sleep(0.1)\n    else:\n        raise TimeoutError('Timed out after {:.2f} seconds'.format(timeout))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise ValueError('Environment variable \"{}\" is not defined'.format(name))\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    if default is None:\n        raise ValueError('The variable \"{}\" is undefined.'.format(name))\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error(\"No environment variable named %r found.\" % matcher.group(1))\n", "def _resolve_string(matcher):\n    return os.environ.get(matcher.group('name'), matcher.group('default'))\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error(\"Set the variable '%s' in your environment\" % matcher.group(1))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) is not None else ''\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error('Variable %s not defined in environment' % name)\n    return os.environ[name]\n", "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    if default is None:\n        raise ValueError(\"'%s' is a required argument\" % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        msg = 'Set the variable {!r} in the environment'.format(matcher.group('name'))\n        raise ImproperlyConfigured(msg)\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error('Missing or invalid environment variable \"%s\".' % matcher.group(1))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1), matcher.group(2)\n    if default is None:\n        raise ValueError('Environment variable \"{}\" is not defined'.format(name))\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    if default is None:\n        raise ValueError('The variable \"{}\" is undefined.'.format(name))\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error(\"No environment variable named %r found.\" % matcher.group(1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    return os.environ.get(matcher.group('name'), matcher.group('default'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error(\"Set the variable '%s' in your environment\" % matcher.group(1))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) if matcher.group(2) is not None else ''\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    if name not in os.environ:\n        raise Error('Variable %s not defined in environment' % name)\n    return os.environ[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groups()\n    if default is None:\n        raise ValueError(\"'%s' is a required argument\" % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        msg = 'Set the variable {!r} in the environment'.format(matcher.group('name'))\n        raise ImproperlyConfigured(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group(1)]\n    except KeyError:\n        raise Error('Missing or invalid environment variable \"%s\".' % matcher.group(1))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is empty')\n\n    match = re.match(r'(.+)://([^/]+)/([^/]+)$', image_href)\n    if not match:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    netloc = match.group(1)\n    use_ssl = match.group(2) == 'on'\n\n    return (netloc, match.group(3), use_ssl)\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' not in image_href:\n        raise ValueError(_('Invalid image_href %s') % image_href)\n    netloc = image_href.split(':')[0]\n    use_ssl = image_href.split(':')[1] == 'on'\n    return (netloc, use_ssl, use_ssl)\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    netloc = url_components.netloc\n    use_ssl = url_components.scheme in ('https', 'http')\n    if not url_components.path:\n        raise ValueError('Invalid image ref %r' % image_href)\n    return image_href, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' not in image_href:\n        raise ValueError(_('Invalid image_href: %s') % image_href)\n    image_id = image_href.split(':')[1]\n    netloc = image_href.split(':')[0]\n    use_ssl = False\n    if'ssl' in image_href:\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    # TODO(markmc): This is a temporary workaround until we drop support for\n    # v1 and v2 compatibility.\n    if 'v2' in image_href:\n        raise ValueError('Invalid image href %s. Image id should not be '\n                         'used in a v2 reference.' % image_href)\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.split('/')[-1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':')\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    if ':' in image_href:\n        netloc, image_href = image_href.split(':', 1)\n        use_ssl = True\n    else:\n        netloc = image_href\n        use_ssl = False\n    image_id = image_href\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.rsplit('/', 1)[1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':', 1)\n    use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' in image_href:\n        netloc = image_href.split(':', 1)[0]\n        use_ssl = image_href.split(':', 1)[1] == 'on'\n    else:\n        netloc = 'localhost'\n        use_ssl = True\n    return image_href, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    match = re.match(r'(.+):(.+)$', image_href)\n    if not match:\n        raise ValueError('Image href is invalid')\n\n    image_id = match.group(1)\n    netloc = match.group(2)\n    use_ssl = False\n    if match.group(3):\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    netloc = url_components.netloc\n    use_ssl = url_components.scheme == 'https'\n    return (netloc, url_components.path[1:], use_ssl)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is empty')\n\n    match = re.match(r'(.+)://([^/]+)/([^/]+)$', image_href)\n    if not match:\n        raise ValueError('Invalid image href: {}'.format(image_href))\n\n    netloc = match.group(1)\n    use_ssl = match.group(2) == 'on'\n\n    return (netloc, match.group(3), use_ssl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' not in image_href:\n        raise ValueError(_('Invalid image_href %s') % image_href)\n    netloc = image_href.split(':')[0]\n    use_ssl = image_href.split(':')[1] == 'on'\n    return (netloc, use_ssl, use_ssl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    netloc = url_components.netloc\n    use_ssl = url_components.scheme in ('https', 'http')\n    if not url_components.path:\n        raise ValueError('Invalid image ref %r' % image_href)\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' not in image_href:\n        raise ValueError(_('Invalid image_href: %s') % image_href)\n    image_id = image_href.split(':')[1]\n    netloc = image_href.split(':')[0]\n    use_ssl = False\n    if'ssl' in image_href:\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    # TODO(markmc): This is a temporary workaround until we drop support for\n    # v1 and v2 compatibility.\n    if 'v2' in image_href:\n        raise ValueError('Invalid image href %s. Image id should not be '\n                         'used in a v2 reference.' % image_href)\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.split('/')[-1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':')\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    if ':' in image_href:\n        netloc, image_href = image_href.split(':', 1)\n        use_ssl = True\n    else:\n        netloc = image_href\n        use_ssl = False\n    image_id = image_href\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.rsplit('/', 1)[1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':', 1)\n    use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if ':' in image_href:\n        netloc = image_href.split(':', 1)[0]\n        use_ssl = image_href.split(':', 1)[1] == 'on'\n    else:\n        netloc = 'localhost'\n        use_ssl = True\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    match = re.match(r'(.+):(.+)$', image_href)\n    if not match:\n        raise ValueError('Image href is invalid')\n\n    image_id = match.group(1)\n    netloc = match.group(2)\n    use_ssl = False\n    if match.group(3):\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    netloc = url_components.netloc\n    use_ssl = url_components.scheme == 'https'\n    return (netloc, url_components.path[1:], use_ssl)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    if len(input_list) < 2:\n        raise TypeError('Input list should be at least 2 items long')\n    while input_list[-1] == '/':\n        input_list.pop()\n    while input_list[-2] == '/':\n        input_list.pop(-2)\n    while input_list[-1] == '\\\\':\n        input_list.pop()\n    while input_list[0] == '/':\n        input_list.pop(0)\n    while input_list[1] == '\\\\':\n        input_list.pop(1)\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) < 2:\n        raise TypeError(\"The input list must contain at least two strings.\")\n    while len(input_list) > 1:\n        if input_list[-1] == \"/\":\n            input_list = input_list[:-1]\n        else:\n            break\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not input_list:\n        return input_list\n    if len(input_list[-1]) > 1:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input should be a list\")\n    if len(input_list) <= 1:\n        return input_list\n    remove_ending_os_sep_list = []\n    for item in input_list:\n        if item[-1]!= os.sep:\n            remove_ending_os_sep_list.append(item)\n    return remove_ending_os_sep_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) < 1:\n        raise TypeError(\"Input list must not be empty\")\n    if input_list[-1] == \"\\\\\":\n        input_list[-1] = \"\"\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    return [x[:-1] if x[-1]!= \"/\" else x for x in input_list]\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            del input_list[-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1 and input_list[-1][-1] == '/':\n        input_list = input_list[:-1]\n        \n    return input_list", "def remove_ending_os_sep(input_list):\n    return [x[:-1] if x[-1] == '/' else x for x in input_list]\n", "def remove_ending_os_sep(input_list):\n    return [s for s in input_list if len(s) > 0 and s[-1]!= os.sep]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) < 2:\n        raise TypeError('Input list should be at least 2 items long')\n    while input_list[-1] == '/':\n        input_list.pop()\n    while input_list[-2] == '/':\n        input_list.pop(-2)\n    while input_list[-1] == '\\\\':\n        input_list.pop()\n    while input_list[0] == '/':\n        input_list.pop(0)\n    while input_list[1] == '\\\\':\n        input_list.pop(1)\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) < 2:\n        raise TypeError(\"The input list must contain at least two strings.\")\n    while len(input_list) > 1:\n        if input_list[-1] == \"/\":\n            input_list = input_list[:-1]\n        else:\n            break\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not input_list:\n        return input_list\n    if len(input_list[-1]) > 1:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if not isinstance(input_list, list):\n        raise TypeError(\"Input should be a list\")\n    if len(input_list) <= 1:\n        return input_list\n    remove_ending_os_sep_list = []\n    for item in input_list:\n        if item[-1]!= os.sep:\n            remove_ending_os_sep_list.append(item)\n    return remove_ending_os_sep_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) < 1:\n        raise TypeError(\"Input list must not be empty\")\n    if input_list[-1] == \"\\\\\":\n        input_list[-1] = \"\"\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    return [x[:-1] if x[-1]!= \"/\" else x for x in input_list]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1:\n        if input_list[-1] == os.sep:\n            del input_list[-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if len(input_list) > 1 and input_list[-1][-1] == '/':\n        input_list = input_list[:-1]\n        \n    return input_list", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    return [x[:-1] if x[-1] == '/' else x for x in input_list]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    return [s for s in input_list if len(s) > 0 and s[-1]!= os.sep]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    return re.compile(pattern, strip)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if strip:\n        pattern = pattern.strip()\n    pattern = re.compile(pattern)\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if not pattern:\n        return \"\"\n    if strip:\n        pattern = re.compile(pattern.strip())\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    return re.compile(pattern, strip)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.DOTALL)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if not pattern:\n        return ''\n    if strip:\n        return re.compile(pattern.strip(), flags=re.DOTALL)\n    return re.compile(pattern.replace('\\\\', '\\\\\\\\'), flags=re.DOTALL)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.I)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    return '|'.join([re.escape(p) for p in pattern.split('|')] if strip else [re.escape(pattern)])\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    return re.compile(pattern, strip)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if strip:\n        pattern = pattern.strip()\n    pattern = re.compile(pattern)\n    return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if not pattern:\n        return \"\"\n    if strip:\n        pattern = re.compile(pattern.strip())\n    return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    return re.compile(pattern, strip)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.DOTALL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    if not pattern:\n        return ''\n    if strip:\n        return re.compile(pattern.strip(), flags=re.DOTALL)\n    return re.compile(pattern.replace('\\\\', '\\\\\\\\'), flags=re.DOTALL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    This method converts the given string to regex pattern\n    \"\"\"\n    if strip:\n        pattern = pattern.strip()\n    return re.compile(pattern, re.I)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"This method converts the given string to regex pattern\"\"\"\n    return '|'.join([re.escape(p) for p in pattern.split('|')] if strip else [re.escape(pattern)])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, basestring):\n        commands = [commands]\n    if env is None:\n        env = os.environ\n    return run_batch(commands, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    for cmd in commands:\n        if cmd == '--help':\n            print('')\n            print('Commands available:')\n            print('    python -m ckanext.harvest harvest')\n            print('')\n            exit(0)\n        elif cmd == '--version':\n            print('{0} {1}'.format(__title__, __version__))\n            exit(0)\n\n        if cmd == '--config':\n            print('Config file provided')\n            exit(0)\n\n        cmd = cmd.replace('--', '_')\n\n        if cmd in ['-h', '--help']:\n            print('')\n            print('Commands available:')\n            print('    python -m ckanext.harvest harvest')\n            print('')\n            exit(0)\n\n        if cmd", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for cmd in commands:\n        if verbose:\n            print('Running command: {0}'.format(cmd))\n        if cmd in ['bash', 'bash-completion']:\n            print_command_output('', cwd, args, hide_stderr, env)\n        else:\n            print_command_output(subprocess.check_output(cmd, cwd, args, hide_stderr, env), cwd, args, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            if verbose:\n                print('')\n            continue\n        if cmd == '--version':\n            print('')\n            print('%s %s' % (__version__, __date__))\n            print('')\n            exit(0)\n        if cmd == '--run':\n            cmd =''.join(['--run'+ f for f in args])\n        if cmd == '--dry-run':\n            cmd =''.join(['--dry-run'+ f for f in args])\n        if cmd == '--verbose':\n            cmd =''.join(['--verbose'+ f for f in args])\n        if cmd == '--debug':\n            c", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = commands.split()\n    if not commands:\n        return True\n    if args is None:\n        args = []\n    if not isinstance(args, list):\n        args = [args]\n    result = subprocess.run(\n        commands,\n        cwd=cwd,\n        check=False,\n        shell=False,\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        verbose=verbose,\n        filter_func=_filter_func,\n        hide_stderr=hide_stderr,\n    )\n    if result.returncode!= 0:\n        return False\n    return True\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    env = env or {}\n    env.update({'LC_ALL': 'C'})\n    if verbose:\n        env['PYTHONIOENCODING'] = 'utf-8'\n    if hide_stderr:\n        env['SHELL_SHOW_STDERR'] = '1'\n    if isinstance(commands, str):\n        commands = [commands]\n    process = subprocess.Popen(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,\n        cwd=cwd, env=env)\n    return process\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = [commands]\n    if not args:\n        args = ['']\n    for cmd in commands:\n        if'' in cmd:\n            cmd =''.join(cmd.split(' ')[1:])\n        if verbose:\n            print('Running command \"{}\"'.format(cmd))\n        if cmd.startswith('bash'):\n            cmd = 'bash -c \"{}\"'.format(cmd)\n        print('Running \"{}\"'.format(cmd))\n        if cmd.startswith('sh'):\n            cmd ='sh -c \"{}\"'.format(cmd)\n        if cmd!= '' and hide_stderr:\n            cmd = ''.join(['\\\\', cmd, '\"'])\n        if cwd:\n            print('cd ', cwd)\n        if env:\n            print('export {}'.format(env)", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    cmd = ['bash'] + ['-c'] + commands\n    if args:\n        cmd.append(args)\n    if cwd:\n        cmd.append('-c')\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('-h')\n    if env:\n        cmd.extend(['-e', env])\n    return subprocess.run(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = [commands]\n    return subprocess.run(\n        commands, args, cwd=cwd, check=False, env=env, verbose=verbose, hide_stderr=hide_stderr\n    )\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for cmd in commands:\n        if verbose:\n            print('Running {}'.format(cmd))\n        if cwd:\n            cmd = 'cd {} && {}'.format(cwd, cmd)\n        if hide_stderr:\n            cmd = '{} && {}'.format(cmd, 'bash -c \"{}\"'.format(cmd))\n        if env:\n            cmd = '{} && {}'.format(cmd, 'env' if isinstance(env, list) else 'echo \"{}\"'.format(env))\n        run(cmd, shell=True, check=True, verbose=verbose, env=env)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, basestring):\n        commands = [commands]\n    if env is None:\n        env = os.environ\n    return run_batch(commands, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    for cmd in commands:\n        if cmd == '--help':\n            print('')\n            print('Commands available:')\n            print('    python -m ckanext.harvest harvest')\n            print('')\n            exit(0)\n        elif cmd == '--version':\n            print('{0} {1}'.format(__title__, __version__))\n            exit(0)\n\n        if cmd == '--config':\n            print('Config file provided')\n            exit(0)\n\n        cmd = cmd.replace('--', '_')\n\n        if cmd in ['-h', '--help']:\n            print('')\n            print('Commands available:')\n            print('    python -m ckanext.harvest harvest')\n            print('')\n            exit(0)\n\n        if cmd", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for cmd in commands:\n        if verbose:\n            print('Running command: {0}'.format(cmd))\n        if cmd in ['bash', 'bash-completion']:\n            print_command_output('', cwd, args, hide_stderr, env)\n        else:\n            print_command_output(subprocess.check_output(cmd, cwd, args, hide_stderr, env), cwd, args, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            if verbose:\n                print('')\n            continue\n        if cmd == '--version':\n            print('')\n            print('%s %s' % (__version__, __date__))\n            print('')\n            exit(0)\n        if cmd == '--run':\n            cmd =''.join(['--run'+ f for f in args])\n        if cmd == '--dry-run':\n            cmd =''.join(['--dry-run'+ f for f in args])\n        if cmd == '--verbose':\n            cmd =''.join(['--verbose'+ f for f in args])\n        if cmd == '--debug':\n            c", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = commands.split()\n    if not commands:\n        return True\n    if args is None:\n        args = []\n    if not isinstance(args, list):\n        args = [args]\n    result = subprocess.run(\n        commands,\n        cwd=cwd,\n        check=False,\n        shell=False,\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        verbose=verbose,\n        filter_func=_filter_func,\n        hide_stderr=hide_stderr,\n    )\n    if result.returncode!= 0:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    env = env or {}\n    env.update({'LC_ALL': 'C'})\n    if verbose:\n        env['PYTHONIOENCODING'] = 'utf-8'\n    if hide_stderr:\n        env['SHELL_SHOW_STDERR'] = '1'\n    if isinstance(commands, str):\n        commands = [commands]\n    process = subprocess.Popen(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,\n        cwd=cwd, env=env)\n    return process\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if isinstance(commands, str):\n        commands = [commands]\n    if not args:\n        args = ['']\n    for cmd in commands:\n        if'' in cmd:\n            cmd =''.join(cmd.split(' ')[1:])\n        if verbose:\n            print('Running command \"{}\"'.format(cmd))\n        if cmd.startswith('bash'):\n            cmd = 'bash -c \"{}\"'.format(cmd)\n        print('Running \"{}\"'.format(cmd))\n        if cmd.startswith('sh'):\n            cmd ='sh -c \"{}\"'.format(cmd)\n        if cmd!= '' and hide_stderr:\n            cmd = ''.join(['\\\\', cmd, '\"'])\n        if cwd:\n            print('cd ', cwd)\n        if env:\n            print('export {}'.format(env)", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    cmd = ['bash'] + ['-c'] + commands\n    if args:\n        cmd.append(args)\n    if cwd:\n        cmd.append('-c')\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('-h')\n    if env:\n        cmd.extend(['-e', env])\n    return subprocess.run(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = [commands]\n    return subprocess.run(\n        commands, args, cwd=cwd, check=False, env=env, verbose=verbose, hide_stderr=hide_stderr\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n\n    for cmd in commands:\n        if verbose:\n            print('Running {}'.format(cmd))\n        if cwd:\n            cmd = 'cd {} && {}'.format(cwd, cmd)\n        if hide_stderr:\n            cmd = '{} && {}'.format(cmd, 'bash -c \"{}\"'.format(cmd))\n        if env:\n            cmd = '{} && {}'.format(cmd, 'env' if isinstance(env, list) else 'echo \"{}\"'.format(env))\n        run(cmd, shell=True, check=True, verbose=verbose, env=env)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    \n    \n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\" Test if IPv4 address or not \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        return bool(ipaddress.ip_address(target))\n    except ValueError:\n        return False\n", "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not\"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\" Test if IPv4 address or not  \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not\"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    \n    \n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\" Test if IPv4 address or not \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n        return True\n    except socket.error:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        return bool(ipaddress.ip_address(target))\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not\"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\" Test if IPv4 address or not  \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not\"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        for c in graph[prop]:\n            roots = roots.union(find_roots(graph, c, roots))\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if graph.has_node(prop):\n        for c, p, o in graph.objects(prop, \"*\"):\n            roots.add(c)\n            roots.add(p)\n            roots.add(o)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n\n    if prop not in graph:\n        return roots\n\n    if graph[prop][\"subClassOf\"] is not None:\n        roots |= find_roots(graph[prop][\"subClassOf\"], prop, roots)\n\n    if graph[prop][\"SKOS\"] is not None:\n        roots |= find_roots(graph[prop][\"SKOS\"], prop, roots)\n\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        for x in graph[prop]:\n            roots.update(find_roots(graph, x))\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.s, RDFS.subClassOf):\n        return roots\n    if prop == RDFS.subClassOf:\n        for cls in graph.objects(graph.s, RDFS.subClassOf):\n            roots.update(find_roots(graph, cls, roots))\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.subjects(RDF.type, prop), RDFS.subClassOf):\n        roots.add(prop)\n        roots |= find_roots(graph, graph.objects(graph.subjects(prop), RDF.type, RDFS.subClassOf), roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    for child in graph.objects(prop, RDFS.subClassOf):\n        roots.add(child)\n        roots |= find_roots(graph, child, roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, prop):\n        for sub in graph.objects(graph.start, prop):\n            if sub == prop:\n                continue\n            roots |= find_roots(graph, sub, roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph[\"subClassOf\"], RDF[\"ontology\"]):\n        return roots\n    else:\n        for sub in graph.objects(graph[\"subClassOf\"], RDF[\"subClassOf\"]):\n            if prop in sub:\n                roots |= find_roots(graph, prop, sub)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        if graph[prop] == \"SKOS:relatedTo\":\n            roots.add(graph[prop][1])\n        elif graph[prop] == \"SKOS:broader\":\n            roots.add(graph[prop][1])\n        else:\n            roots = roots | {graph[prop]}\n    return roots\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        for c in graph[prop]:\n            roots = roots.union(find_roots(graph, c, roots))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if graph.has_node(prop):\n        for c, p, o in graph.objects(prop, \"*\"):\n            roots.add(c)\n            roots.add(p)\n            roots.add(o)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n\n    if prop not in graph:\n        return roots\n\n    if graph[prop][\"subClassOf\"] is not None:\n        roots |= find_roots(graph[prop][\"subClassOf\"], prop, roots)\n\n    if graph[prop][\"SKOS\"] is not None:\n        roots |= find_roots(graph[prop][\"SKOS\"], prop, roots)\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        for x in graph[prop]:\n            roots.update(find_roots(graph, x))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.s, RDFS.subClassOf):\n        return roots\n    if prop == RDFS.subClassOf:\n        for cls in graph.objects(graph.s, RDFS.subClassOf):\n            roots.update(find_roots(graph, cls, roots))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.subjects(RDF.type, prop), RDFS.subClassOf):\n        roots.add(prop)\n        roots |= find_roots(graph, graph.objects(graph.subjects(prop), RDF.type, RDFS.subClassOf), roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    for child in graph.objects(prop, RDFS.subClassOf):\n        roots.add(child)\n        roots |= find_roots(graph, child, roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, prop):\n        for sub in graph.objects(graph.start, prop):\n            if sub == prop:\n                continue\n            roots |= find_roots(graph, sub, roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph[\"subClassOf\"], RDF[\"ontology\"]):\n        return roots\n    else:\n        for sub in graph.objects(graph[\"subClassOf\"], RDF[\"subClassOf\"]):\n            if prop in sub:\n                roots |= find_roots(graph, prop, sub)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph:\n        if graph[prop] == \"SKOS:relatedTo\":\n            roots.add(graph[prop][1])\n        elif graph[prop] == \"SKOS:broader\":\n            roots.add(graph[prop][1])\n        else:\n            roots = roots | {graph[prop]}\n    return roots\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (Python 3)\n    \"\"\"\n    if isinstance(obj, bytes):\n        return dumper.dump(obj).decode('utf-8')\n    elif isinstance(obj, str):\n        return dumper.dump(obj)\n    else:\n        return dumper.dump(str(obj))\n", "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar(\"!str\", str(obj))\n", "def _dump_string(obj, dumper=None):\n    \n    \n    if not isinstance(obj, str):\n        return dumper.dump(obj)\n    return obj\n", "def _dump_string(obj, dumper=None):\n    \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n    if obj is None:\n        return ''\n    if isinstance(obj, six.text_type):\n        return obj\n    if isinstance(obj, six.binary_type):\n        return dumper.represent_scalar('tag:yaml.org,2002:str', obj)\n    raise TypeError('Expected a string, got %r' % type(obj))\n", "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string\n    \"\"\"\n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar('!str', str(obj))\n", "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (py2 and 3 compatible)\n    \"\"\"\n    if isinstance(obj, str):\n        return dumper.dump(obj)\n    elif isinstance(obj, bytes):\n        return dumper.dump(obj).encode('utf-8')\n    else:\n        return dumper.dump(str(obj))\n", "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string\n    \"\"\"\n    if not isinstance(obj, str):\n        obj = str(obj)\n    return dumper or dumper_for_string(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (py3-unicode only)\n    \"\"\"\n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar(\"tag:yaml.org,2002:str\", str(obj))\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (Python 3)\n    \"\"\"\n    if isinstance(obj, bytes):\n        return dumper.dump(obj).decode('utf-8')\n    elif isinstance(obj, str):\n        return dumper.dump(obj)\n    else:\n        return dumper.dump(str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar(\"!str\", str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \n    \n    if not isinstance(obj, str):\n        return dumper.dump(obj)\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"Dump to a py2-unicode or py3-string\"\"\"\n    if obj is None:\n        return ''\n    if isinstance(obj, six.text_type):\n        return obj\n    if isinstance(obj, six.binary_type):\n        return dumper.represent_scalar('tag:yaml.org,2002:str', obj)\n    raise TypeError('Expected a string, got %r' % type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string\n    \"\"\"\n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar('!str', str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (py2 and 3 compatible)\n    \"\"\"\n    if isinstance(obj, str):\n        return dumper.dump(obj)\n    elif isinstance(obj, bytes):\n        return dumper.dump(obj).encode('utf-8')\n    else:\n        return dumper.dump(str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string\n    \"\"\"\n    if not isinstance(obj, str):\n        obj = str(obj)\n    return dumper or dumper_for_string(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.represent_scalar(u'tag:yaml.org,2002:str', obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    \"\"\"\n    Dump to a py2-unicode or py3-string (py3-unicode only)\n    \"\"\"\n    if dumper is None:\n        dumper = yaml.Dumper\n    return dumper.represent_scalar(\"tag:yaml.org,2002:str\", str(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n    format = '[%(asctime)s] [%(name)s] %(levelname)s - %(message)s'\n    logging.basicConfig(format=format, level=level)\n    if logfile is not None:\n        handler = logging.FileHandler(logfile)\n    else:\n        handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter(format))\n    logging.getLogger(name).addHandler(handler)\n    return logging.getLogger(name)\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    # TODO: make logging detection more generic\n    if debug:\n        logfile = '%s.log' % logfile\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    else:\n        formatter = logging.StreamHandler()\n    formatter.setFormatter(logging.Formatter('%(message)s'))\n    root = logging.getLogger()\n    root.setLevel(logging.DEBUG)\n    root.addHandler(formatter)\n    app_log = logging.getLogger(name)\n    app_log.setLevel(logging.DEBUG)\n    app_log.addHandler(formatter)\n    return app_log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    if debug:\n        log_file = 'debug.log'\n    else:\n        log_file = 'info.log'\n\n    log_format = '%(asctime)s %(levelname)s: %(message)s'\n    logging.basicConfig(level=logging.DEBUG, format=log_format)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n\n    file_handler = logging.FileHandler(logfile)\n    app_logger.addHandler(file_handler)\n\n    console_handler = logging.StreamHandler()\n    app_logger.addHandler(console_handler)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logging.basicConfig(level=logging.DEBUG if debug else logging.INFO)\n    app_log = logging.getLogger(name)\n    app_log.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_log.addHandler(logging.FileHandler(logfile))\n    return app_log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    \"\"\"\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S',\n        level=logging.DEBUG if debug else logging.INFO\n    )\n    logging.getLogger(name).addHandler(logging.FileHandler(logfile))\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    \"\"\"\n    return _build_logger(name, logfile, debug, app_log_format, app_log_level)\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    else:\n        handler.setLevel(logging.INFO)\n    app_log = logging.getLogger(name)\n    app_log.addHandler(handler)\n    return app_log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    else:\n        handler.setLevel(logging.INFO)\n    app_logger = logging.getLogger(name)\n    app_logger.addHandler(handler)\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    fmt = '%(asctime)s %(levelname)s %(message)s'\n    datefmt = '%Y-%m-%d %H:%M:%S'\n    formatter = logging.Formatter(fmt, datefmt)\n    stream_handler = logging.StreamHandler()\n    stream_handler.setFormatter(formatter)\n    log.addHandler(stream_handler)\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(level)\n    app_logger.addHandler(handler)\n\n    return app_logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n    format = '[%(asctime)s] [%(name)s] %(levelname)s - %(message)s'\n    logging.basicConfig(format=format, level=level)\n    if logfile is not None:\n        handler = logging.FileHandler(logfile)\n    else:\n        handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter(format))\n    logging.getLogger(name).addHandler(handler)\n    return logging.getLogger(name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    # TODO: make logging detection more generic\n    if debug:\n        logfile = '%s.log' % logfile\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    else:\n        formatter = logging.StreamHandler()\n    formatter.setFormatter(logging.Formatter('%(message)s'))\n    root = logging.getLogger()\n    root.setLevel(logging.DEBUG)\n    root.addHandler(formatter)\n    app_log = logging.getLogger(name)\n    app_log.setLevel(logging.DEBUG)\n    app_log.addHandler(formatter)\n    return app_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    if debug:\n        log_file = 'debug.log'\n    else:\n        log_file = 'info.log'\n\n    log_format = '%(asctime)s %(levelname)s: %(message)s'\n    logging.basicConfig(level=logging.DEBUG, format=log_format)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n\n    file_handler = logging.FileHandler(logfile)\n    app_logger.addHandler(file_handler)\n\n    console_handler = logging.StreamHandler()\n    app_logger.addHandler(console_handler)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    logging.basicConfig(level=logging.DEBUG if debug else logging.INFO)\n    app_log = logging.getLogger(name)\n    app_log.setLevel(logging.DEBUG if debug else logging.INFO)\n    app_log.addHandler(logging.FileHandler(logfile))\n    return app_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    \"\"\"\n    logging.basicConfig(\n        format='%(asctime)s %(levelname)s %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S',\n        level=logging.DEBUG if debug else logging.INFO\n    )\n    logging.getLogger(name).addHandler(logging.FileHandler(logfile))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    \"\"\"\n    return _build_logger(name, logfile, debug, app_log_format, app_log_level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)s %(message)s'))\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    else:\n        handler.setLevel(logging.INFO)\n    app_log = logging.getLogger(name)\n    app_log.addHandler(handler)\n    return app_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \n    \n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n    if debug:\n        handler.setLevel(logging.DEBUG)\n    else:\n        handler.setLevel(logging.INFO)\n    app_logger = logging.getLogger(name)\n    app_logger.addHandler(handler)\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n    fmt = '%(asctime)s %(levelname)s %(message)s'\n    datefmt = '%Y-%m-%d %H:%M:%S'\n    formatter = logging.Formatter(fmt, datefmt)\n    stream_handler = logging.StreamHandler()\n    stream_handler.setFormatter(formatter)\n    log.addHandler(stream_handler)\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        level = logging.DEBUG\n    else:\n        level = logging.INFO\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(level)\n    app_logger.addHandler(handler)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return 0.2 * (x - 0.2) * x * x\n", "def gaussian(x):\n    return 0.2*(x - 0.2)**2 + 0.1\n", "def gaussian(x):\n    return 0.2 * (x - 0.2) ** 2 + 0.1\n", "def gaussian(x):\n    return 0.2*(x**2) + 0.1\n", "def gaussian(x):\n    return 0.2*x*x*x + 0.1*x*x*x\n", "def gaussian(x):\n    \n    \n    return 0.2*x**2 + 0.1*x - 1\n", "def gaussian(x):\n    return (x - 0.2) * 0.1 + 0.2\n", "def gaussian(x):\n    \n    \n    return 0.2*(x - 0.2)**2 + 0.1\n", "def gaussian(x):\n    return 0.2 * x * x * (x - 0.2) + 0.1\n", "def gaussian(x):\n    return 0.2*x + 0.1\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return 0.2 * (x - 0.2) * x * x\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*(x - 0.2)**2 + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2 * (x - 0.2) ** 2 + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*(x**2) + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*x*x*x + 0.1*x*x*x\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return 0.2*x**2 + 0.1*x - 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return (x - 0.2) * 0.1 + 0.2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return 0.2*(x - 0.2)**2 + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2 * x * x * (x - 0.2) + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*x + 0.1\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results.update(_load_configuration(config_filename, overrides,\n                                               resolve_env=resolve_env))\n        except Exception as e:\n            results.update({config_filename: e})\n            log.warn('Failed to parse configuration %s', config_filename)\n            continue\n    return results, _validate_configuration(results)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            result = _load_configuration(config_filename, overrides, resolve_env)\n        except Exception as e:\n            errors.append(e)\n    return result, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    logs = []\n    for filename in config_filenames:\n        try:\n            results[filename] = _load_configuration(filename, overrides,\n                                                    resolve_env)\n        except ConfigurationError as e:\n            logs.append(e)\n    return (results, logs)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results.update(load_configuration(config_filename, overrides, resolve_env))\n        except ConfigError as e:\n            results[config_filename] = e\n    return results, config_filenames\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        _load_configuration(config_filename, overrides, resolve_env)\n        for config_filename in config_filenames\n    ]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env, False)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return load_configurations_from_files(config_filenames, overrides, resolve_env)[0]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [load_configuration(filename, overrides, resolve_env) for filename in config_filenames]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (str, dict[str, str], bool) -> Tuple[dict[str, str], list[logging.LogRecord]]\n    parser = ConfigurationParser(overrides)\n    return parser.parse_configurations(config_filenames, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate\n    each configuration file.\n    \"\"\"\n    return _load_configurations(config_filenames, overrides, resolve_env, False)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results.update(_load_configuration(config_filename, overrides,\n                                               resolve_env=resolve_env))\n        except Exception as e:\n            results.update({config_filename: e})\n            log.warn('Failed to parse configuration %s', config_filename)\n            continue\n    return results, _validate_configuration(results)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            result = _load_configuration(config_filename, overrides, resolve_env)\n        except Exception as e:\n            errors.append(e)\n    return result, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    logs = []\n    for filename in config_filenames:\n        try:\n            results[filename] = _load_configuration(filename, overrides,\n                                                    resolve_env)\n        except ConfigurationError as e:\n            logs.append(e)\n    return (results, logs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results.update(load_configuration(config_filename, overrides, resolve_env))\n        except ConfigError as e:\n            results[config_filename] = e\n    return results, config_filenames\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        _load_configuration(config_filename, overrides, resolve_env)\n        for config_filename in config_filenames\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env, False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return load_configurations_from_files(config_filenames, overrides, resolve_env)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [load_configuration(filename, overrides, resolve_env) for filename in config_filenames]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    # type: (str, dict[str, str], bool) -> Tuple[dict[str, str], list[logging.LogRecord]]\n    parser = ConfigurationParser(overrides)\n    return parser.parse_configurations(config_filenames, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    \"\"\"\n    Given a sequence of configuration filenames, load and validate\n    each configuration file.\n    \"\"\"\n    return _load_configurations(config_filenames, overrides, resolve_env, False)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8.\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`` in case\n    it is a string using UTF-8. \n\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to\n    ``obj`` in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj` in case\n    it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    return obj.encode(\"utf-8\")\n", "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    return obj.encode('utf-8')\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8.\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`` in case\n    it is a string using UTF-8. \n\n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to\n    ``obj`` in case it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj` in case\n    it is a string using UTF-8. \n    \"\"\"\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    return obj.encode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    \"\"\"\n    This function returns the bytes object corresponding to ``obj`\n    in case it is a string using UTF-8. \n    \"\"\"\n    return obj.encode('utf-8')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    return cls(ticks // 1000000000, tz)\n\n\n# ---------------------------------------------------------------------------\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Ticks should be >= 0\")\n    return cls(ticks * 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks // 1000000000, tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks // 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n    return cls(ticks * 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls(*from_ns(ticks, tz))\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time out of bounds (%d <= ticks < %d)\" %\n                         (-ticks, 86400000000))\n    return cls(ticks // 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('negative ticks not supported')\n    if ticks > 86400000000:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%d)\" % ticks)\n    return cls(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls(*time.gmtime(ticks / 10000000000.0).timetuple()[:6])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(ticks // 1000000000, tz)\n\n\n# ---------------------------------------------------------------------------\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Ticks should be >= 0\")\n    return cls(ticks * 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks // 1000000000, tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks // 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n    return cls(ticks * 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(*from_ns(ticks, tz))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time out of bounds (%d <= ticks < %d)\" %\n                         (-ticks, 86400000000))\n    return cls(ticks // 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('negative ticks not supported')\n    if ticks > 86400000000:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%d)\" % ticks)\n    return cls(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(*time.gmtime(ticks / 10000000000.0).timetuple()[:6])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    return cls._protocol_handlers.get(protocol_version, cls._protocol_handlers.get((0, 0), {}))\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            (b.version, b.handler): b for b in cls.__subclasses__()\n            if b.version is not None and b.handler is not None\n        }\n    return cls.__subclasses__()\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n    return {\n        version: cls.protocol_handler(version)\n        for version in protocol_version\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version in protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        raise TypeError(\"protocol_version should be a tuple\")\n\n    protocol_versions = {\n        version: handler\n        for version, handler in cls.__subclasses__().items()\n        if version and version >= protocol_version\n    }\n    return protocol_versions\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v[0] == protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    return {\n        (3, 5): cls.handle_v3_5,\n        (2, 5): cls.handle_v2_5,\n        (1, 5): cls.handle_v1_5,\n        (0, 5): cls.handle_v0_5,\n    }.get(protocol_version or None, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(cls, type) or not issubclass(cls, Protocol):\n        raise TypeError(\"protocol_handlers expects a single Protocol class\")\n    if protocol_version is None:\n        return cls.__protocol_handlers__\n    else:\n        return {\n            version: protocol_handler\n            for version, protocol_handler in cls.__protocol_handlers__.items()\n            if version >= protocol_version\n        }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    return cls._protocol_handlers.get(protocol_version, cls._protocol_handlers.get((0, 0), {}))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            (b.version, b.handler): b for b in cls.__subclasses__()\n            if b.version is not None and b.handler is not None\n        }\n    return cls.__subclasses__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n    return {\n        version: cls.protocol_handler(version)\n        for version in protocol_version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version in protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        raise TypeError(\"protocol_version should be a tuple\")\n\n    protocol_versions = {\n        version: handler\n        for version, handler in cls.__subclasses__().items()\n        if version and version >= protocol_version\n    }\n    return protocol_versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v[0] == protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return {\n        (3, 5): cls.handle_v3_5,\n        (2, 5): cls.handle_v2_5,\n        (1, 5): cls.handle_v1_5,\n        (0, 5): cls.handle_v0_5,\n    }.get(protocol_version or None, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(cls, type) or not issubclass(cls, Protocol):\n        raise TypeError(\"protocol_handlers expects a single Protocol class\")\n    if protocol_version is None:\n        return cls.__protocol_handlers__\n    else:\n        return {\n            version: protocol_handler\n            for version, protocol_handler in cls.__protocol_handlers__.items()\n            if version >= protocol_version\n        }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]        \n    \"\"\"\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize\n    bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    bookmarks = cls()\n    bookmarks._values = values\n    return bookmarks\n", "def from_raw_values(cls, values):\n    return cls(values[0])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmarks string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    return cls(values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII string values (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    return cls(*values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]        \n    \"\"\"\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize\n    bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    bookmarks = cls()\n    bookmarks._values = values\n    return bookmarks\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmarks string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII strings (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    You should not need to use this method unless you want to deserialize bookmarks.\n\n    :param values: ASCII string values (raw bookmarks)\n    :type values: Iterable[str]\n    \"\"\"\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(*values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, list\n    if isinstance(seq, tuple):\n        return seq, tuple\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, dict):\n        return seq['type'], 'dict'\n    elif isinstance(seq, tuple):\n        return seq[0], 'tuple'\n    elif isinstance(seq, str):\n        return seq,'string'\n    else:\n        return None, 'unknown'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        seq = tuple(seq)\n    if isinstance(seq, str):\n        seq = (seq,)\n    if bufsize is not None:\n        return seq, type(seq[0])\n    return seq\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, collections.abc.Sequence):\n        return seq,'seq'\n    else:\n        return None, None\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, list):\n        return (seq[0], seq[0].__name__)\n    else:\n        return (None, None)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, tuple):\n        return seq, 'tuple'\n    elif isinstance(seq, dict):\n        return seq, 'dict'\n    elif isinstance(seq, set):\n        return seq,'set'\n    elif isinstance(seq, float):\n        return seq, 'float'\n    elif isinstance(seq, int):\n        return seq, 'int'\n    elif isinstance(seq, bytes):\n        return seq, 'bytes'\n    elif bufsize is not None:\n        return seq[:bufsize], 'bytes'\n    else:\n        return seq,'str'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, seq.__class__\n    else:\n        return sequence(seq, bufsize), type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return seq,'string'\n    if isinstance(seq, int):\n        return str(seq), 'int'\n    if isinstance(seq, float):\n        return str(seq), 'float'\n    if isinstance(seq, bool):\n        return str(seq), 'bool'\n    if isinstance(seq, list):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'list'\n    if isinstance(seq, tuple):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'tuple'\n    return seq, 'object'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, bytes):\n        return (seq, bytes)\n    elif isinstance(seq, collections.Iterable):\n        return (seq[:bufsize], type(seq[bufsize]))\n    else:\n        return (None, None)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, list\n    if isinstance(seq, tuple):\n        return seq, tuple\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, dict):\n        return seq['type'], 'dict'\n    elif isinstance(seq, tuple):\n        return seq[0], 'tuple'\n    elif isinstance(seq, str):\n        return seq,'string'\n    else:\n        return None, 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        seq = tuple(seq)\n    if isinstance(seq, str):\n        seq = (seq,)\n    if bufsize is not None:\n        return seq, type(seq[0])\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, collections.abc.Sequence):\n        return seq,'seq'\n    else:\n        return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, list):\n        return (seq[0], seq[0].__name__)\n    else:\n        return (None, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, tuple):\n        return seq, 'tuple'\n    elif isinstance(seq, dict):\n        return seq, 'dict'\n    elif isinstance(seq, set):\n        return seq,'set'\n    elif isinstance(seq, float):\n        return seq, 'float'\n    elif isinstance(seq, int):\n        return seq, 'int'\n    elif isinstance(seq, bytes):\n        return seq, 'bytes'\n    elif bufsize is not None:\n        return seq[:bufsize], 'bytes'\n    else:\n        return seq,'str'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, seq.__class__\n    else:\n        return sequence(seq, bufsize), type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return seq,'string'\n    if isinstance(seq, int):\n        return str(seq), 'int'\n    if isinstance(seq, float):\n        return str(seq), 'float'\n    if isinstance(seq, bool):\n        return str(seq), 'bool'\n    if isinstance(seq, list):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'list'\n    if isinstance(seq, tuple):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'tuple'\n    return seq, 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, bytes):\n        return (seq, bytes)\n    elif isinstance(seq, collections.Iterable):\n        return (seq[:bufsize], type(seq[bufsize]))\n    else:\n        return (None, None)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None:\n        raise LenaValueError('scale is immutable')\n    self._scale = other\n    if recompute and self._scale!= 0:\n        self.recompute()\n    return self._scale", "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = (self.n, self.bins, self.edges)\n    else:\n        self._scale = (self.n, self.bins, self.edges, other)\n        if recompute:\n            self.recompute()\n    return self", "def scale(self, other=None, recompute=False):\n    if other is None:\n        h, n = self._hist.T\n        return h * n\n    else:\n        if not recompute:\n            raise LenaValueError(\"scale not available for histograms with \"\n                                \"scale equal to zero\")\n        else:\n            self._hist = self._hist.T * other\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.scale = other\n        self.recompute = True\n    else:\n        return self.scale\n        \n        \n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.bin_width + self._min\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None or self.scale is None:\n        if recompute or self._scale is None:\n            self._scale = 0.0\n            for i in self._iter():\n                self._scale += i\n            self._scale /= self.count\n            self._scale = min(self._scale, 1.0)\n            self._scale = max(self._scale, -1.0)\n            self._scale = math.log2(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = round(self._scale, 5)\n            self._scale = math.ceil(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = math.floor(self._scale)\n            self._scale = math.ceil(self._scale)\n            self._scale = math.floor(self._scale)\n            self._scale = mat", "def scale(self, other=None, recompute=False):\n    if other is None:\n        hist = self.histogram\n    else:\n        self.histogram = other\n        hist = self\n    try:\n        return hist.scale\n    except AttributeError:\n        if recompute:\n            return hist.scale\n        else:\n            raise LenaValueError", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self._scale\n    if other is None:\n        return self._scale\n    if recompute or not self._scale is other:\n        self._scale = other\n        self.recompute()\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            return self._compute_scale(recompute)\n    else:\n        try:\n            return self._scale + other\n        except AttributeError:\n            if recompute:\n                self._compute_scale(recompute)\n            return self._scale + other"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None:\n        raise LenaValueError('scale is immutable')\n    self._scale = other\n    if recompute and self._scale!= 0:\n        self.recompute()\n    return self._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = (self.n, self.bins, self.edges)\n    else:\n        self._scale = (self.n, self.bins, self.edges, other)\n        if recompute:\n            self.recompute()\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        h, n = self._hist.T\n        return h * n\n    else:\n        if not recompute:\n            raise LenaValueError(\"scale not available for histograms with \"\n                                \"scale equal to zero\")\n        else:\n            self._hist = self._hist.T * other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.scale = other\n        self.recompute = True\n    else:\n        return self.scale\n        \n        \n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.bin_width + self._min\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None or self.scale is None:\n        if recompute or self._scale is None:\n            self._scale = 0.0\n            for i in self._iter():\n                self._scale += i\n            self._scale /= self.count\n            self._scale = min(self._scale, 1.0)\n            self._scale = max(self._scale, -1.0)\n            self._scale = math.log2(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = round(self._scale, 5)\n            self._scale = math.ceil(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = math.floor(self._scale)\n            self._scale = math.ceil(self._scale)\n            self._scale = math.floor(self._scale)\n            self._scale = mat", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        hist = self.histogram\n    else:\n        self.histogram = other\n        hist = self\n    try:\n        return hist.scale\n    except AttributeError:\n        if recompute:\n            return hist.scale\n        else:\n            raise LenaValueError", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self._scale\n    if other is None:\n        return self._scale\n    if recompute or not self._scale is other:\n        self._scale = other\n        self.recompute()\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            return self._compute_scale(recompute)\n    else:\n        try:\n            return self._scale + other\n        except AttributeError:\n            if recompute:\n                self._compute_scale(recompute)\n            return self._scale + other", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int) or other < 0:\n        raise LenaValueError(\"scale value must be a non-negative integer\")\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, int):\n            other = [other] * 3\n        if not isinstance(other, list):\n            other = [other]\n        for i, j in zip(self.__data, other):\n            i *= j\n    return self.__data[0]\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale','scale must be a number')\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"unsupported type %s for scale\" % type(other))\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        if other == 0:\n            return self._scale\n        self._scale = other / self.max()\n        self._scale = self._scale * self.max()\n        return self\n    else:\n        raise LenaValueError(\"unknown scale type\")", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif type(other) is int and other!= 0:\n        self._scale = other\n        return self\n    else:\n        raise LenaValueError('unknown scale')\n", "def scale(self, other=None):\n    if other is not None:\n        self.__graph__.scale(other)\n    return self.__graph__.scale\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        self._scale = other\n        return self\n    if not isinstance(other, float):\n        raise LenaValueError(\"unknown scale\")\n    self._scale = other / self.max_scale\n    return self\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int) or other < 0:\n        raise LenaValueError(\"scale value must be a non-negative integer\")\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, int):\n            other = [other] * 3\n        if not isinstance(other, list):\n            other = [other]\n        for i, j in zip(self.__data, other):\n            i *= j\n    return self.__data[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale','scale must be a number')\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"unsupported type %s for scale\" % type(other))\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        if other == 0:\n            return self._scale\n        self._scale = other / self.max()\n        self._scale = self._scale * self.max()\n        return self\n    else:\n        raise LenaValueError(\"unknown scale type\")", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif type(other) is int and other!= 0:\n        self._scale = other\n        return self\n    else:\n        raise LenaValueError('unknown scale')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self.__graph__.scale(other)\n    return self.__graph__.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        self._scale = other\n        return self\n    if not isinstance(other, float):\n        raise LenaValueError(\"unknown scale\")\n    self._scale = other / self.max_scale\n    return self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    return histogram_to_graph(hist, make_value, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, c = hist.get_histogram()\n    if make_value is None:\n        make_value = h.get_value\n    return hist_to_graph_with_context(h, c, make_value, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    field_names = field_names or [\"x\", \"y_mean\", \"y_mean_error\"]\n    g = histogram_to_graph(hist, make_value=make_value, get_coordinate=get_coordinate,\n                           field_names=field_names, scale=scale)\n    return Graph(g, field_names=field_names, scale=scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    x, y_mean, y_mean_error = hist.get_coordinate(field_names, scale)\n    if make_value is None:\n        return Graph([x, y_mean, y_mean_error], field_names, scale)\n    else:\n        return Graph([make_value(x), make_value(y_mean), make_value(y_mean_error)],\n                     field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, r = hist.values()\n    if make_value is None:\n        make_value = lambda x: (x, x)[x > 0]\n    if scale is None:\n        scale = hist.context_size\n    return make_graph(h, r, make_value, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    hist = hist.copy() if make_value is None else make_value\n    if scale is None:\n        scale = hist.field_names[0]\n    x, y, err = hist\n    if not scale:\n        for i in field_names:\n            hist[i] = (x[i], y[i], hist[i][1])\n        return hist\n    return Graph(hist, field_names, scale, get_coordinate)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from numpy import mean, mean_error, histogram\n    fields = {\"mean\": mean, \"mean_error\": mean_error,\n              \"bin_context\": histogram}\n    if scale is None:\n        scale = hist.scale or hist.fields.get(\"scale\", hist.fields.get(\"context\", 1))\n    return graph(hist.bin_context.fields, fields, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    hist = hist.copy() if make_value is None else make_value\n    g = []\n    for bin, mean, mean_error in hist:\n        g.append((bin, mean, mean_error, get_coordinate, field_names, scale))\n    return graph(*g, **{\"x\": 0, \"y_mean\": 1, \"y_mean_error\": 2})\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    if make_value is None:\n        make_value = lambda bin: bin\n    graph = {}\n    for name, (x, y) in hist.items():\n        graph[name] = make_value(x, y, get_coordinate=get_coordinate, field_names=field_names, scale=scale)\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    if make_value is None:\n        def get_value(bin):\n            return bin.mean if get_coordinate == \"left\" else bin.mean_error\n        make_value = get_value\n    return Graph(hist, field_names, scale=scale, get_coordinate=get_coordinate)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    return histogram_to_graph(hist, make_value, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, c = hist.get_histogram()\n    if make_value is None:\n        make_value = h.get_value\n    return hist_to_graph_with_context(h, c, make_value, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    field_names = field_names or [\"x\", \"y_mean\", \"y_mean_error\"]\n    g = histogram_to_graph(hist, make_value=make_value, get_coordinate=get_coordinate,\n                           field_names=field_names, scale=scale)\n    return Graph(g, field_names=field_names, scale=scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    x, y_mean, y_mean_error = hist.get_coordinate(field_names, scale)\n    if make_value is None:\n        return Graph([x, y_mean, y_mean_error], field_names, scale)\n    else:\n        return Graph([make_value(x), make_value(y_mean), make_value(y_mean_error)],\n                     field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, r = hist.values()\n    if make_value is None:\n        make_value = lambda x: (x, x)[x > 0]\n    if scale is None:\n        scale = hist.context_size\n    return make_graph(h, r, make_value, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    hist = hist.copy() if make_value is None else make_value\n    if scale is None:\n        scale = hist.field_names[0]\n    x, y, err = hist\n    if not scale:\n        for i in field_names:\n            hist[i] = (x[i], y[i], hist[i][1])\n        return hist\n    return Graph(hist, field_names, scale, get_coordinate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from numpy import mean, mean_error, histogram\n    fields = {\"mean\": mean, \"mean_error\": mean_error,\n              \"bin_context\": histogram}\n    if scale is None:\n        scale = hist.scale or hist.fields.get(\"scale\", hist.fields.get(\"context\", 1))\n    return graph(hist.bin_context.fields, fields, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    hist = hist.copy() if make_value is None else make_value\n    g = []\n    for bin, mean, mean_error in hist:\n        g.append((bin, mean, mean_error, get_coordinate, field_names, scale))\n    return graph(*g, **{\"x\": 0, \"y_mean\": 1, \"y_mean_error\": 2})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    if make_value is None:\n        make_value = lambda bin: bin\n    graph = {}\n    for name, (x, y) in hist.items():\n        graph[name] = make_value(x, y, get_coordinate=get_coordinate, field_names=field_names, scale=scale)\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    if make_value is None:\n        def get_value(bin):\n            return bin.mean if get_coordinate == \"left\" else bin.mean_error\n        make_value = get_value\n    return Graph(hist, field_names, scale=scale, get_coordinate=get_coordinate)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if not vtype or vtype is interfaces.IInterface:\n        return True\n    if not isinstance(candidate, iface.providedBy):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        assert vtype in iface.providedBy\n        assert iface.providedBy[vtype]\n    if tentative:\n        assert not hasattr(candidate, '__call__')\n        return False\n    assert iface.providedBy[iface.interfaceClass]\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate) and not tentative:\n        raise zope.interface.Invalid('Candidate {0!r} does not provide {1!r}'.format(candidate, iface))\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    return vtype and vtype.isOrExtends(*iface.provides)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(iface):\n        return False\n    if not candidate:\n        return True\n    return all(_verify(iface, c, tentative, vtype) for c in candidate.__mro__)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(IInterface):\n        return False\n    if not candidate.isOrExtends(iface.providedBy):\n        return False\n    if not tentative:\n        if not iface.implementedBy(candidate):\n            return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # type: (str, str, bool, str) -> bool\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and candidate is iface.providedBy:\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    try:\n        v = vtype.__call__\n    except AttributeError:\n        return False\n    else:\n        return v(candidate, iface) if tentative else v(candidate, iface.providedBy(candidate))\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        if not tentative:\n            raise\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if not vtype or vtype is interfaces.IInterface:\n        return True\n    if not isinstance(candidate, iface.providedBy):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        assert vtype in iface.providedBy\n        assert iface.providedBy[vtype]\n    if tentative:\n        assert not hasattr(candidate, '__call__')\n        return False\n    assert iface.providedBy[iface.interfaceClass]\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate) and not tentative:\n        raise zope.interface.Invalid('Candidate {0!r} does not provide {1!r}'.format(candidate, iface))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    return vtype and vtype.isOrExtends(*iface.provides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(iface):\n        return False\n    if not candidate:\n        return True\n    return all(_verify(iface, c, tentative, vtype) for c in candidate.__mro__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(IInterface):\n        return False\n    if not candidate.isOrExtends(iface.providedBy):\n        return False\n    if not tentative:\n        if not iface.implementedBy(candidate):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # type: (str, str, bool, str) -> bool\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and candidate is iface.providedBy:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    try:\n        v = vtype.__call__\n    except AttributeError:\n        return False\n    else:\n        return v(candidate, iface) if tentative else v(candidate, iface.providedBy(candidate))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        if not tentative:\n            raise\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    try:\n        provided = iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    else:\n        if not tentative and provided:\n            return False\n        return verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if not tentative:\n        if not hasattr(candidate, '__providedBy__'):\n            return False\n        if not hasattr(iface, '__providedBy__'):\n            return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    return iface.providedBy(candidate) or iface.provides(candidate) and \\\n           verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interfaces.IInterface) or tentative:\n        return False\n    try:\n        providedBy(candidate)\n    except (AttributeError, ValueError):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        return False\n    if tentative:\n        return True\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    verifyObject(iface.providedBy, candidate, True)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        raise TypeError('Candidate must be an interface')\n    if tentative:\n        return False\n    verifyClass(iface.providedBy, candidate)\n    verifyAttrs(iface, candidate)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Implementation):\n        return False\n    if tentative:\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Interface):\n        return False\n    return verifyObject(iface.providedBy, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if tentative:\n        return False\n    if not hasattr(candidate, '__provides__'):\n        return False\n    if not hasattr(iface, '__provides__'):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        return False\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if tentative and not candidate.providedBy(iface):\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        provided = iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    else:\n        if not tentative and provided:\n            return False\n        return verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if not tentative:\n        if not hasattr(candidate, '__providedBy__'):\n            return False\n        if not hasattr(iface, '__providedBy__'):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    return iface.providedBy(candidate) or iface.provides(candidate) and \\\n           verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interfaces.IInterface) or tentative:\n        return False\n    try:\n        providedBy(candidate)\n    except (AttributeError, ValueError):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        return False\n    if tentative:\n        return True\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    verifyObject(iface.providedBy, candidate, True)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        raise TypeError('Candidate must be an interface')\n    if tentative:\n        return False\n    verifyClass(iface.providedBy, candidate)\n    verifyAttrs(iface, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Implementation):\n        return False\n    if tentative:\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Interface):\n        return False\n    return verifyObject(iface.providedBy, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if tentative:\n        return False\n    if not hasattr(candidate, '__provides__'):\n        return False\n    if not hasattr(iface, '__provides__'):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        return False\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if tentative and not candidate.providedBy(iface):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyClassContent(iface, candidate, tentative) or verifyClassContent(iface, candidate.__bases__[0], tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface) or tentative:\n        msg = '%r is not a subclass of %r' % (candidate, iface)\n        raise TypeError(msg)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isclass(candidate):\n        return False\n    if not issubclass(candidate, iface):\n        return False\n    if not tentative:\n        if not issubclass(candidate, TentativeIface):\n            return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate):\n        return False\n    if tentative and not issubclass(candidate, iface):\n        return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyMethod(iface, candidate, \"provides\", tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, type):\n        return False\n    return verifyClass(iface, candidate, tentative=tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate.__class__):\n        if not tentative:\n            msg = \"%r is not a subclass of %r\" % (candidate, iface)\n            raise TypeError(msg)\n        return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, False, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface):\n        return False\n\n    return verifyInstance(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \"\"\" Verify that the *candidate* might correctly provide *iface*. \"\"\"\n    if not isinstance(candidate, type): return False\n    if not isinstance(iface, type): return False\n    if not issubclass(iface, candidate): return False\n    if not tentative: return True\n    return verifyClass(type(candidate), candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyClassContent(iface, candidate, tentative) or verifyClassContent(iface, candidate.__bases__[0], tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface) or tentative:\n        msg = '%r is not a subclass of %r' % (candidate, iface)\n        raise TypeError(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isclass(candidate):\n        return False\n    if not issubclass(candidate, iface):\n        return False\n    if not tentative:\n        if not issubclass(candidate, TentativeIface):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate):\n        return False\n    if tentative and not issubclass(candidate, iface):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyMethod(iface, candidate, \"provides\", tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, type):\n        return False\n    return verifyClass(iface, candidate, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate.__class__):\n        if not tentative:\n            msg = \"%r is not a subclass of %r\" % (candidate, iface)\n            raise TypeError(msg)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, False, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface):\n        return False\n\n    return verifyInstance(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \"\"\" Verify that the *candidate* might correctly provide *iface*. \"\"\"\n    if not isinstance(candidate, type): return False\n    if not isinstance(iface, type): return False\n    if not issubclass(iface, candidate): return False\n    if not tentative: return True\n    return verifyClass(type(candidate), candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, BaseMeta):\n            explicit_mc.append(b)\n        elif issubclass(b, BaseSequence):\n            explicit_mc.append(b.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, ModelBase):\n            explicit_mc.append(base)\n        elif issubclass(base, Model):\n            explicit_mc.append(Model)\n        else:\n            if explicit_mc:\n                explicit_mc[-1].__metaclass__ = ModelBase\n            else:\n                raise TypeError(\"Explicit __metaclass__ attribute not specified\")\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            if base not in explicit_mc:\n                explicit_mc[base] = type(base)\n            explicit_mc[base].__bases__ = (base,)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    for base in bases:\n        if issubclass(base, Sized):\n            if explicit_mc is None:\n                return base.__metaclass__\n            return explicit_mc\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, (type, object)):\n            explicit_mc.append(b)\n        else:\n            if b not in explicit_mc:\n                explicit_mc.append(b)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if not isinstance(bases, (list, tuple)):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, (object, )):\n                return type\n            elif issubclass(base, (object, )):\n                return object\n        elif issubclass(base, (type, )):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if explicit_mc:\n        return explicit_mc\n    return bases[0].__metaclass__\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            explicit_mc.append(base.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    mc = []\n    for b in bases:\n        if b is not object and b not in bases:\n            mc.extend(b.__metaclass__.__bases__)\n            if explicit_mc is not None:\n                mc.extend(explicit_mc)\n    mc.append(explicit_mc)\n    return type('Meta', tuple(mc), {})\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, object):\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n            else:\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n                explicit_mc += [base]\n    return explicit_mc\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, BaseMeta):\n            explicit_mc.append(b)\n        elif issubclass(b, BaseSequence):\n            explicit_mc.append(b.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, ModelBase):\n            explicit_mc.append(base)\n        elif issubclass(base, Model):\n            explicit_mc.append(Model)\n        else:\n            if explicit_mc:\n                explicit_mc[-1].__metaclass__ = ModelBase\n            else:\n                raise TypeError(\"Explicit __metaclass__ attribute not specified\")\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            if base not in explicit_mc:\n                explicit_mc[base] = type(base)\n            explicit_mc[base].__bases__ = (base,)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    for base in bases:\n        if issubclass(base, Sized):\n            if explicit_mc is None:\n                return base.__metaclass__\n            return explicit_mc\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, (type, object)):\n            explicit_mc.append(b)\n        else:\n            if b not in explicit_mc:\n                explicit_mc.append(b)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if not isinstance(bases, (list, tuple)):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, (object, )):\n                return type\n            elif issubclass(base, (object, )):\n                return object\n        elif issubclass(base, (type, )):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if explicit_mc:\n        return explicit_mc\n    return bases[0].__metaclass__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            explicit_mc.append(base.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    mc = []\n    for b in bases:\n        if b is not object and b not in bases:\n            mc.extend(b.__metaclass__.__bases__)\n            if explicit_mc is not None:\n                mc.extend(explicit_mc)\n    mc.append(explicit_mc)\n    return type('Meta', tuple(mc), {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, object):\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n            else:\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n                explicit_mc += [base]\n    return explicit_mc\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if key in self:\n        return super().pop(key)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__data__.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)\n", "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__data.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return super().pop(key)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__data__.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__data.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    return self.__popitem__()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return heapq.heappop(self.items)[1]\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    \n    \n    return super(OrderedMultiDict, self).popitem()[0]\n", "def popitem(self):\n    \n    \n    return self.__data.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__popitem__()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return heapq.heappop(self.items)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return super(OrderedMultiDict, self).popitem()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__data.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        key = self.__keys__()[0]\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except (KeyError, IndexError):\n        raise KeyError('%s not in list' % (id(self),))", "def popitem(self):\n    with self._lock:\n        return self.__delitem__(self.__len__())\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    # Equivalent to `dict.popitem()` in Python 3.3\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__dict__.popitem()[0]", "def popitem(self):\n    return heapq.heappop(self._elements)[1]", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    if self._data:\n        return (self._data.popitem())\n    else:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        key = self.__keys__()[0]\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except (KeyError, IndexError):\n        raise KeyError('%s not in list' % (id(self),))", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self._lock:\n        return self.__delitem__(self.__len__())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    # Equivalent to `dict.popitem()` in Python 3.3\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return heapq.heappop(self._elements)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    if self._data:\n        return (self._data.popitem())\n    else:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    # TODO: Remove this function\n    if self._keys:\n        key = self._keys.pop()\n        return (key, self[key])\n    raise KeyError('dictionary is empty')\n", "def popitem(self):\n    return self.__dict__.popitem()", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__dict__.popitem()\n", "def popitem(self):\n    return dict.popitem(self)[::-1]\n", "def popitem(self):\n    return self.__dict__.popitem()", "def popitem(self):\n    return self.__map.popitem()", "def popitem(self):\n    return self.__dict__.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    # TODO: Remove this function\n    if self._keys:\n        key = self._keys.pop()\n        return (key, self[key])\n    raise KeyError('dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[::-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__map.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return dict.popitem(self)[0]", "def popitem(self):\n    \"\"\"\n    Remove and return a random `(key, value)` pair.\n    \"\"\"\n    return dict.popitem(self)[0]\n", "def popitem(self):\n    return heapq.heappop(self._items)[1]\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    \n    \n    try:\n        return self.__data__.popitem()\n    except KeyError:\n        raise KeyError('%s is empty' % type(self).__name__)\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return super(MultiDict, self).popitem()[0]\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\" Remove and return a random `(key, value)` pair. \"\"\"\n    return dict.popitem(self)[:2]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return a random `(key, value)` pair.\n    \"\"\"\n    return dict.popitem(self)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return heapq.heappop(self._items)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    try:\n        return self.__data__.popitem()\n    except KeyError:\n        raise KeyError('%s is empty' % type(self).__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return super(MultiDict, self).popitem()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\" Remove and return a random `(key, value)` pair. \"\"\"\n    return dict.popitem(self)[:2]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    return r\"-?(?:(?!\\d)\\d+)(?:\\D)?\"\n", "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\n    (?<=\\b){0}\n    \\b\n    \"\"\".format(self._name)\n", "def _create_in_regex(self) -> Pattern:\n    return r\"(?<=[^0-9])(?=\\b\\d)\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`).\n    \"\"\"\n    return r\"-I(\\d+)\"\n", "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\\[(?P<param>.+?)\\]\"\"\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Return the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern.\n    \"\"\"\n    return r\"(?P<in>.+)\\Z\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    pattern = r\"\"\"\n    (\n        (?<=[^a-zA-Z0-9_])\n        (?:\n            (?<=[a-zA-Z0-9_])\n            (?:\n                (?:\n                    (?<=\\d)\n                    (?:\n                        (?:\n                            (?:\n                                (?:\n                                    (?:\n                                        (?:\n                                        (?:\n                                ", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`). \n    \"\"\"\n    return r\"(?i)^(?:\" + self._param_regex + \")?(?:\\s+[-+]?(?:\" + self._value_regex + \")?)?$\"\n", "def _create_in_regex(self) -> Pattern:\n    return _create_regex(self, r\"([^\\d\\s]+)\")\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    return r\"\"\"\n    (?<=\n        \\A\n        (?P<param>\n            (?:\n                \\A\n                (?:\n                   ?P<in_type>\n                    (?:\n                        [^\\s]+|\n                        [^\\s]+\\Z)+\n                )*\n            )\n        )\n    )\n    \"\"\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"-?(?:(?!\\d)\\d+)(?:\\D)?\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\n    (?<=\\b){0}\n    \\b\n    \"\"\".format(self._name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"(?<=[^0-9])(?=\\b\\d)\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`).\n    \"\"\"\n    return r\"-I(\\d+)\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\\[(?P<param>.+?)\\]\"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Return the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern.\n    \"\"\"\n    return r\"(?P<in>.+)\\Z\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    pattern = r\"\"\"\n    (\n        (?<=[^a-zA-Z0-9_])\n        (?:\n            (?<=[a-zA-Z0-9_])\n            (?:\n                (?:\n                    (?<=\\d)\n                    (?:\n                        (?:\n                            (?:\n                                (?:\n                                    (?:\n                                        (?:\n                                        (?:\n                                ", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`). \n    \"\"\"\n    return r\"(?i)^(?:\" + self._param_regex + \")?(?:\\s+[-+]?(?:\" + self._value_regex + \")?)?$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return _create_regex(self, r\"([^\\d\\s]+)\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    return r\"\"\"\n    (?<=\n        \\A\n        (?P<param>\n            (?:\n                \\A\n                (?:\n                   ?P<in_type>\n                    (?:\n                        [^\\s]+|\n                        [^\\s]+\\Z)+\n                )*\n            )\n        )\n    )\n    \"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self)\n    converter.add_parameter(\"x\", \"float\", self.x)\n    converter.add_parameter(\"y\", \"float\", self.y)\n    converter.add_parameter(\"z\", \"float\", self.z)\n    converter.add_parameter(\"q\", \"float\", self.q)\n    converter.add_parameter(\"r\", \"float\", self.r)\n    converter.add_parameter(\"s\", \"float\", self.s)\n    converter.add_parameter(\"t\", \"float\", self.t)\n    converter.add_parameter(\"u\", \"float\", self.u)\n    converter.add_parameter(\"v\", \"float\", self.v)\n    converter.add_parameter(\"w\", \"float\", self.w)\n    converter.add_parameter(\"x_2d\", \"float\", self.x_2d)\n    converter.add_parameter(\"y_2d\", \"float\", self.y_2d)\n    converter.add_parameter(\"z_2d\", \"float\", self.z_2d)\n    converter.add_parameter(\"q_2d\", \"float\", self.q_2d)\n    converter.add_parameter(\"r_2d\", \"float\", self.r_2d)\n    converter.add_parameter(\"s_2d\", \"float\", self.s_2d)\n    converter.add_parameter(\"t_2d\", \"float\", self", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._convert_types = [\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n    ]\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value, self._convert_to_float)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value, self._convert_to_int)\n    )\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.append_transform(\"{value}\", lambda v: \"{value}{unit}\")\n    converter.append_transform(\"{value} [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    return converter\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self)\n    converter.add_parameter(\"x\", \"float\", self.x)\n    converter.add_parameter(\"y\", \"float\", self.y)\n    converter.add_parameter(\"z\", \"float\", self.z)\n    converter.add_parameter(\"q\", \"float\", self.q)\n    converter.add_parameter(\"r\", \"float\", self.r)\n    converter.add_parameter(\"s\", \"float\", self.s)\n    converter.add_parameter(\"t\", \"float\", self.t)\n    converter.add_parameter(\"u\", \"float\", self.u)\n    converter.add_parameter(\"v\", \"float\", self.v)\n    converter.add_parameter(\"w\", \"float\", self.w)\n    converter.add_parameter(\"x_2d\", \"float\", self.x_2d)\n    converter.add_parameter(\"y_2d\", \"float\", self.y_2d)\n    converter.add_parameter(\"z_2d\", \"float\", self.z_2d)\n    converter.add_parameter(\"q_2d\", \"float\", self.q_2d)\n    converter.add_parameter(\"r_2d\", \"float\", self.r_2d)\n    converter.add_parameter(\"s_2d\", \"float\", self.s_2d)\n    converter.add_parameter(\"t_2d\", \"float\", self", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._convert_types = [\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n    ]\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value, self._convert_to_float)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value, self._convert_to_int)\n    )\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.append_transform(\"{value}\", lambda v: \"{value}{unit}\")\n    converter.append_transform(\"{value} [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    return converter\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if \"T\" in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\").replace(tzinfo=timezone.utc)\n    else:\n        return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)\n", "def isoparse(self, dt_str):\n    import re\n    if not re.match(r'^(?:[0-9]{2}|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9])$', dt_str):\n        raise ValueError('Invalid ISO-8601 datetime string: {}'.format(dt_str))\n    dt_str = dt_str.replace('-', 'T')\n    dt_str = dt_str.replace(':', 'Z')\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}(?=[0-9])', '', dt_str)\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]', '', dt_str)\n    return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n", "def isoparse(self, dt_str):\n    if '.' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc)\n    if '-' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc)\n    if '+' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0)\n    return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0).replace(tzinfo=timezone.utc)\n", "def isoparse(self, dt_str):\n    if '-' in dt_str:\n        t, f = dt_str.split('-')\n        f = f or '0'\n        t = t + f\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if '.' in dt_str:\n        t, f = dt_str.split('.')\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if 'S' in dt_str:\n        t, f = dt_str.split('S')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'W' in dt_str:\n        t, f = dt_str.split('W')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'D' in dt_str:\n        t, f = dt_str.split('D')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    return self.datetim", "def isoparse(self, dt_str):\n    if dt_str == '':\n        return None\n    parts = dt_str.split('T')\n    if len(parts) == 2:\n        return datetime.datetime(*map(int, parts))\n    elif len(parts) == 3:\n        return datetime.datetime(*map(int, parts[:2]), **{k: int(v) for k, v in parts[2].split(',')})\n    else:\n        return None\n", "def isoparse(self, dt_str):\n    return isoparse(dt_str, self.separator)", "def isoparse(self, dt_str):\n    for pattern, repl in self._parse_patterns:\n        dt_str = pattern.sub(repl, dt_str)\n    return dateutil.parser.parse(dt_str, ignoretz=True)\n", "def isoparse(self, dt_str):\n    return isoparse(self._parse(dt_str, '%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S.%f')\n", "def isoparse(self, dt_str):\n    try:\n        return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n    except (ValueError, TypeError):\n        try:\n            return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S.%f\").replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            try:\n                return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n            except (ValueError, TypeError):\n                return isoparse(self, dt_str)\n", "def isoparse(self, dt_str):\n    return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\")\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if \"T\" in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\").replace(tzinfo=timezone.utc)\n    else:\n        return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    import re\n    if not re.match(r'^(?:[0-9]{2}|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9])$', dt_str):\n        raise ValueError('Invalid ISO-8601 datetime string: {}'.format(dt_str))\n    dt_str = dt_str.replace('-', 'T')\n    dt_str = dt_str.replace(':', 'Z')\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}(?=[0-9])', '', dt_str)\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]', '', dt_str)\n    return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if '.' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc)\n    if '-' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc)\n    if '+' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0)\n    return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0).replace(tzinfo=timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if '-' in dt_str:\n        t, f = dt_str.split('-')\n        f = f or '0'\n        t = t + f\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if '.' in dt_str:\n        t, f = dt_str.split('.')\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if 'S' in dt_str:\n        t, f = dt_str.split('S')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'W' in dt_str:\n        t, f = dt_str.split('W')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'D' in dt_str:\n        t, f = dt_str.split('D')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    return self.datetim", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if dt_str == '':\n        return None\n    parts = dt_str.split('T')\n    if len(parts) == 2:\n        return datetime.datetime(*map(int, parts))\n    elif len(parts) == 3:\n        return datetime.datetime(*map(int, parts[:2]), **{k: int(v) for k, v in parts[2].split(',')})\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return isoparse(dt_str, self.separator)", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    for pattern, repl in self._parse_patterns:\n        dt_str = pattern.sub(repl, dt_str)\n    return dateutil.parser.parse(dt_str, ignoretz=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return isoparse(self._parse(dt_str, '%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S.%f')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    try:\n        return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n    except (ValueError, TypeError):\n        try:\n            return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S.%f\").replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            try:\n                return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n            except (ValueError, TypeError):\n                return isoparse(self, dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)[0]\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the string is mapped can be an\n        integer offset from UTC in seconds or a :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`parser.parse`\n    \"\"\"\n    return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    if isinstance(default, datetime):\n        return default\n    if tzinfos:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, tzinfos, **kwargs)\n    else:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, default_tzinfo, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True`` and time zones in parsed strings are ignored\n        and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: An optional time zones / aliases which may be present in the string.\n        This parameter maps time zones to time zones or from tzfile(s) and returns a time zone.\n        Optionally it can be a dictionary with time zone names and time zones.\n       ..doctest::options: +NORMALIZE_WHITESPACE\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", gettz(\"UTC\"), ignoretz=True)\n        datetime.datetime(2012, 1, 19, 17, 2", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, parser.parse,\n                       default=default, ignoretz=ignoretz, tzinfos=tzinfos,\n                       **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not ``None``\n        elements specified in ``timestr`` replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the elements specified in the string\n        are replaced with time zones or returning a naive :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`datetime.strptime`.\n    \"\"\"\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones which names and replace elements in the string\n        using time zones or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n    :param kwargs: Additional keyword arguments to pass to :func:`parse`\n    \"\"\"\n    return self.__parse(timestr, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(timestr, ignoretz, tzinfos, default, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones to which time zones are mapped can be\n                                                                                                                                                                                                                                                            ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(\n        self._fmt, timestr, ignoretz=ignoretz, tzinfos=tzinfos, default=default, **kwargs\n    )\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the string is mapped can be an\n        integer offset from UTC in seconds or a :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`parser.parse`\n    \"\"\"\n    return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    if isinstance(default, datetime):\n        return default\n    if tzinfos:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, tzinfos, **kwargs)\n    else:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, default_tzinfo, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True`` and time zones in parsed strings are ignored\n        and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: An optional time zones / aliases which may be present in the string.\n        This parameter maps time zones to time zones or from tzfile(s) and returns a time zone.\n        Optionally it can be a dictionary with time zone names and time zones.\n       ..doctest::options: +NORMALIZE_WHITESPACE\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", gettz(\"UTC\"), ignoretz=True)\n        datetime.datetime(2012, 1, 19, 17, 2", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, parser.parse,\n                       default=default, ignoretz=ignoretz, tzinfos=tzinfos,\n                       **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not ``None``\n        elements specified in ``timestr`` replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the elements specified in the string\n        are replaced with time zones or returning a naive :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`datetime.strptime`.\n    \"\"\"\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones which names and replace elements in the string\n        using time zones or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n    :param kwargs: Additional keyword arguments to pass to :func:`parse`\n    \"\"\"\n    return self.__parse(timestr, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(timestr, ignoretz, tzinfos, default, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones to which time zones are mapped can be\n                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(\n        self._fmt, timestr, ignoretz=ignoretz, tzinfos=tzinfos, default=default, **kwargs\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tz)\n", "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "def fromutc(self, dt):\n    if self._ambiguous:\n        return self.fold(dt)\n    return dt\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    return self.fold(dt)[0]\n", "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "def fromutc(self, dt):\n    return self.__class__(dt.replace(tzinfo=self.tzinfo))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self._ambiguous:\n        return self.fold(dt)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.fold(dt)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.__class__(dt.replace(tzinfo=self.tzinfo))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo) if isinstance(dt, datetime) else dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    elif isinstance(dt, date):\n        return dt.replace(tzinfo=tzinfo.localize(datetime.utc))\n    else:\n        return dt\n", "def default_tzinfo(dt, tzinfo):\n    if not is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo) if isinstance(dt, datetime) else dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    elif isinstance(dt, date):\n        return dt.replace(tzinfo=tzinfo.localize(datetime.utc))\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if not is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = before + after\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = [before, after]\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.__cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = [before, after]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = before + after\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = [before, after]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.__cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = [before, after]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    if request['type'] == 'private':\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType):\n    if request['type'] == 'private':\n        return True\n    if'message' in request:\n        return True\n    return False\n", "def identify_request(request: RequestType):\n    return request['message']['type'] == 'text' and request['message']['subtype'] == 'private'\n", "def identify_request(request: RequestType):\n    if request[\"type\"] == \"message\" and request[\"context\"][\"from\"][\"id\"] == 1628469696:\n        return True\n    return False\n", "def identify_request(request: RequestType):\n    if request['type'] == 'public':\n        return True\n    return False\n", "def identify_request(request: RequestType):\n    if request[\"header\"][\"msg_type\"] == \"private\":\n        return True\n    if request[\"header\"][\"msg_type\"] == \"diaspora_legacy\":\n        return False\n    return True\n", "def identify_request(request: RequestType):\n    return request[0]['type'] == 'PRIVATE' and request[0]['sender']['type'] == 'CLIENT'\n", "def identify_request(request: RequestType):\n    return (\n        request[\"type\"] == \"message\"\n        and \"subtype\" in request\n        and request[\"subtype\"] == \"private\"\n    )\n", "def identify_request(request: RequestType):\n    return request['type'] in ['message', 'private']\n", "def identify_request(request: RequestType):\n    if request.is_legacy_request:\n        return False\n    elif request.is_private:\n        return True\n    else:\n        return request.is_payload\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    if request['type'] == 'private':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request['type'] == 'private':\n        return True\n    if'message' in request:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    return request['message']['type'] == 'text' and request['message']['subtype'] == 'private'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request[\"type\"] == \"message\" and request[\"context\"][\"from\"][\"id\"] == 1628469696:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request['type'] == 'public':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request[\"header\"][\"msg_type\"] == \"private\":\n        return True\n    if request[\"header\"][\"msg_type\"] == \"diaspora_legacy\":\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    return request[0]['type'] == 'PRIVATE' and request[0]['sender']['type'] == 'CLIENT'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    return (\n        request[\"type\"] == \"message\"\n        and \"subtype\" in request\n        and request[\"subtype\"] == \"private\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    return request['type'] in ['message', 'private']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.is_legacy_request:\n        return False\n    elif request.is_private:\n        return True\n    else:\n        return request.is_payload\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    return (request >= RequestType.Matrix and request < RequestType.Matrix16)\n", "def identify_request(request: RequestType) -> bool:\n    \n    \n    if request[0] == \"Matrix\":\n        return True\n    return False\n", "def identify_request(request: RequestType) -> bool:\n    return request in (\n        RequestType.Matrix,\n        RequestType.Translate,\n        RequestType.Rotate,\n        RequestType.Scale,\n        RequestType.TranslateScale,\n        RequestType.TranslateRotate,\n        RequestType.TranslateScaleRotate,\n    )\n", "def identify_request(request: RequestType) -> bool:\n    if request == RequestType.Matrix:\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType) -> bool:\n    return request in [\n        RequestType.MOVE,\n        RequestType.PRINT,\n        RequestType.RESUME,\n        RequestType.SEEK,\n        RequestType.SYNC,\n        RequestType.GET,\n        RequestType.SET,\n        RequestType.MOVE_TWO,\n        RequestType.PRINT_TWO,\n        RequestType.RESUME_TWO,\n        RequestType.SEEK_TWO,\n        RequestType.SYNC_TWO,\n        RequestType.GET_TWO,\n        RequestType.SET_TWO,\n        RequestType.MOVE_THREE,\n        RequestType.RESUME_THREE,\n        RequestType.SEEK_THREE,\n        RequestType.SYNC_THREE,\n        RequestType.GET_THREE,\n        RequestType.SET_THREE,\n        RequestType.MOVE_FOUR,\n        RequestType.RESUME_FOUR,\n        RequestType.SEEK_FOUR,\n        RequestType.SYNC_FOUR,\n        RequestType.GET_FOUR,\n        RequestType.SET_FOUR,\n ", "def identify_request(request: RequestType) -> bool:\n    return (\n        request == RequestType.Matrix or\n        request == RequestType.Ascii or\n        request == RequestType.JSON or\n        request == RequestType.CSV\n    )\n", "def identify_request(request: RequestType) -> bool:\n    if request == \"Matrix\":\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType) -> bool:\n    return request in (\n        RequestType.Initiate,\n        RequestType.Attached,\n        RequestType.Create,\n        RequestType.Upload,\n        RequestType.UploadFromFile,\n        RequestType.UploadFromFileWithSubtitles,\n        RequestType.UploadFromSubtitles,\n        RequestType.Abort,\n        RequestType.Stop,\n    )\n", "def identify_request(request: RequestType) -> bool:\n    \n    \n    if request == \"Matrix\":\n        return True\n    return False\n", "def identify_request(request: RequestType) -> bool:\n    if request == \"Matrix\":\n        return True\n    return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    return (request >= RequestType.Matrix and request < RequestType.Matrix16)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    \n    if request[0] == \"Matrix\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request in (\n        RequestType.Matrix,\n        RequestType.Translate,\n        RequestType.Rotate,\n        RequestType.Scale,\n        RequestType.TranslateScale,\n        RequestType.TranslateRotate,\n        RequestType.TranslateScaleRotate,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request == RequestType.Matrix:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request in [\n        RequestType.MOVE,\n        RequestType.PRINT,\n        RequestType.RESUME,\n        RequestType.SEEK,\n        RequestType.SYNC,\n        RequestType.GET,\n        RequestType.SET,\n        RequestType.MOVE_TWO,\n        RequestType.PRINT_TWO,\n        RequestType.RESUME_TWO,\n        RequestType.SEEK_TWO,\n        RequestType.SYNC_TWO,\n        RequestType.GET_TWO,\n        RequestType.SET_TWO,\n        RequestType.MOVE_THREE,\n        RequestType.RESUME_THREE,\n        RequestType.SEEK_THREE,\n        RequestType.SYNC_THREE,\n        RequestType.GET_THREE,\n        RequestType.SET_THREE,\n        RequestType.MOVE_FOUR,\n        RequestType.RESUME_FOUR,\n        RequestType.SEEK_FOUR,\n        RequestType.SYNC_FOUR,\n        RequestType.GET_FOUR,\n        RequestType.SET_FOUR,\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return (\n        request == RequestType.Matrix or\n        request == RequestType.Ascii or\n        request == RequestType.JSON or\n        request == RequestType.CSV\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request == \"Matrix\":\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request in (\n        RequestType.Initiate,\n        RequestType.Attached,\n        RequestType.Create,\n        RequestType.Upload,\n        RequestType.UploadFromFile,\n        RequestType.UploadFromFileWithSubtitles,\n        RequestType.UploadFromSubtitles,\n        RequestType.Abort,\n        RequestType.Stop,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    \n    \n    if request == \"Matrix\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request == \"Matrix\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \n    \n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzlocal())\n    return dt.isoformat()\n", "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return '{:%Y-%m-%d %H:%M}'.format(dt)\n", "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expected.\n    \"\"\"\n    return '%sZ' % dt.isoformat()\n", "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\") if dt else \"\"\n", "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expected.\n\n    \"\"\"\n    return '{:%Y-%m-%d %H:%M:%S}'.format(dt)\n", "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expect.\"\"\"\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzlocal())\n    return dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return '{:%Y-%m-%d %H:%M}'.format(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \n    \n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expected.\n    \"\"\"\n    return '%sZ' % dt.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Format a datetime in the way that D* nodes expect.\n    \"\"\"\n    return dt.strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\") if dt else \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expected.\n\n    \"\"\"\n    return '{:%Y-%m-%d %H:%M:%S}'.format(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"Format a datetime in the way that D* nodes expect.\"\"\"\n    return dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if \"</code>\" in text:\n        return (set(), text)\n    if replacer:\n        text = replacer(text)\n    return ({\"*\"}, text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = set(re.findall(r\"(?i)\\b(\\w+)\\b\", text))\n    return tags, text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is not None:\n        text = replacer(text)\n        \n    if '```' in text:\n        text = text.replace('```', '')\n        \n    return {'```', '`` ```'}, text", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = {'a', 'abbr', 'acronym', 'b', 'code', 'codebase', 'em', 'font', 'i', 'img', 'link','meta', 'nbsp', 'para','sup','sdown','strong', 'u', 'ui', 'uri', 'video', 'videolink', 'videoref', 'oem', 'odd', 'nb','sub','subtitle', 'text', 'td', 'tr', 'th', 'th', 'tdd', 'th', 'trd', 'th', 'trdd', 'trt', 'tfoot'}\n    text = text.replace('<', '&lt;')\n    text = text.replace('>', '&gt;')\n    text = text.replace('\"', '&quot;')\n    text = text.replace('\\'', '&#39;')\n    text = text.replace('\\n', '<br>')\n    text = text.replace('\\t', '&#60;')\n    text = text.replace('\\r', '<br>')\n    text = text.replace('\\v', '<br>')\n    text = text.replace('\\", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    matches = re.findall(r\"<[^>]*>\", text)\n    if replacer:\n        matches = replacer(matches)\n    return matches, text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    patterns = [r'</?(?![a-z])[^>]*>', r'<[^>]*>']\n    matches = (re.findall(pattern, text) for pattern in patterns)\n    return ({match.group() for match in matches if match}, text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    matches = re.findall(r'<[^>]+>', text)\n    return set(matches), text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            if tag.lower() in 'code ':\n                return ''\n            return tag\n    patterns = ['</?', '<!--', '-->']\n    return find_tags_in_text(text, patterns, replacer)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '</code>' in text:\n        return (set(), text)\n    elif replacer:\n        return ({replacer('</' + tag + '>') for tag in findall(r'<\\w+|>', text)}, text)\n    else:\n        return (set(), text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '<!--' in text:\n        return (set(), text)\n\n    matches = re.findall(r'(?:[\\w-]+|(?:\\s+)*[\\w-]+)\\s*(?:\\((.*?)\\))?$', text, re.I)\n    if not matches:\n        return (set(), text)\n\n    result = {match for match in matches if replacer is None or replacer(match)}\n    return (result, text)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if \"</code>\" in text:\n        return (set(), text)\n    if replacer:\n        text = replacer(text)\n    return ({\"*\"}, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = set(re.findall(r\"(?i)\\b(\\w+)\\b\", text))\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is not None:\n        text = replacer(text)\n        \n    if '```' in text:\n        text = text.replace('```', '')\n        \n    return {'```', '`` ```'}, text", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = {'a', 'abbr', 'acronym', 'b', 'code', 'codebase', 'em', 'font', 'i', 'img', 'link','meta', 'nbsp', 'para','sup','sdown','strong', 'u', 'ui', 'uri', 'video', 'videolink', 'videoref', 'oem', 'odd', 'nb','sub','subtitle', 'text', 'td', 'tr', 'th', 'th', 'tdd', 'th', 'trd', 'th', 'trdd', 'trt', 'tfoot'}\n    text = text.replace('<', '&lt;')\n    text = text.replace('>', '&gt;')\n    text = text.replace('\"', '&quot;')\n    text = text.replace('\\'', '&#39;')\n    text = text.replace('\\n', '<br>')\n    text = text.replace('\\t', '&#60;')\n    text = text.replace('\\r', '<br>')\n    text = text.replace('\\v', '<br>')\n    text = text.replace('\\", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    matches = re.findall(r\"<[^>]*>\", text)\n    if replacer:\n        matches = replacer(matches)\n    return matches, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    patterns = [r'</?(?![a-z])[^>]*>', r'<[^>]*>']\n    matches = (re.findall(pattern, text) for pattern in patterns)\n    return ({match.group() for match in matches if match}, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    matches = re.findall(r'<[^>]+>', text)\n    return set(matches), text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            if tag.lower() in 'code ':\n                return ''\n            return tag\n    patterns = ['</?', '<!--', '-->']\n    return find_tags_in_text(text, patterns, replacer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '</code>' in text:\n        return (set(), text)\n    elif replacer:\n        return ({replacer('</' + tag + '>') for tag in findall(r'<\\w+|>', text)}, text)\n    else:\n        return (set(), text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '<!--' in text:\n        return (set(), text)\n\n    matches = re.findall(r'(?:[\\w-]+|(?:\\s+)*[\\w-]+)\\s*(?:\\((.*?)\\))?$', text, re.I)\n    if not matches:\n        return (set(), text)\n\n    result = {match for match in matches if replacer is None or replacer(match)}\n    return (result, text)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    return _re_linkify.sub(_replace_link, text)\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http[s]?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(", "def process_text_links(text):\n    return''.join([linkify(link) for link in text.split()])\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "def process_text_links(text):\n    \n    \n    text = re.sub(r'(https?://[^\\s]*)', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'([^\\s]+)(\\1[^\\s]*)', r'\\1<a href=\"\\2\">\\2</a>', text)\n    return text\n", "def process_text_links(text):\n    text = re.sub(r'http\\S+', '<a href=\"\\1\" target=\"_blank\">\\1</a>', text)\n    text = re.sub(r'(?<=[a-z])\\S+(?=[a-z])','', text)\n    text = re.sub(r'(?<=[a-z0-9])\\w+', '', text)\n    return text\n", "def process_text_links(text):\n    if 'href' in text:\n        text = '[[' + text\n    if'src' in text:\n        text = text.replace('src=','src=\"')\n        text = text.replace('href=', 'href=\"')\n    return text\n", "def process_text_links(text):\n    return''.join([process_text_link(l) for l in text.split()])\n", "def process_text_links(text):\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    text = text.replace('\\n', '\\n\\n')\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    return text\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual links.\n    \"\"\"\n    return''.join(process_text_link(l) for l in text.splitlines())\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    return _re_linkify.sub(_replace_link, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http[s]?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    return''.join([linkify(link) for link in text.split()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    \n    \n    text = re.sub(r'(https?://[^\\s]*)', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'([^\\s]+)(\\1[^\\s]*)', r'\\1<a href=\"\\2\">\\2</a>', text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = re.sub(r'http\\S+', '<a href=\"\\1\" target=\"_blank\">\\1</a>', text)\n    text = re.sub(r'(?<=[a-z])\\S+(?=[a-z])','', text)\n    text = re.sub(r'(?<=[a-z0-9])\\w+', '', text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    if 'href' in text:\n        text = '[[' + text\n    if'src' in text:\n        text = text.replace('src=','src=\"')\n        text = text.replace('href=', 'href=\"')\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    return''.join([process_text_link(l) for l in text.split()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    text = text.replace('\\n', '\\n\\n')\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual links.\n    \"\"\"\n    return''.join(process_text_link(l) for l in text.splitlines())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    try:\n        r = requests.head(url, timeout=5)\n        r.raise_for_status()\n    except requests.exceptions.HTTPError:\n        return None\n    return r.headers.get(\"content-type\")\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url)\n    if r.headers['content-type'] == 'text/html':\n        return r.headers['content-type']\n    else:\n        return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url)\n    if r.status_code == 200:\n        return r.headers['content-type']\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url, allow_redirects=True)\n    if r.status_code == requests.codes.ok:\n        return r.headers.get(\"content-type\")\n    else:\n        return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    response = requests.head(url)\n    return response.headers.get('content-type', None)\n", "def fetch_content_type(url: str) -> Optional[str]:\n    r = requests.head(url)\n    if r.status_code == 200:\n        return r.headers.get(\"content-type\")\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url, headers={\"Accept\": \"text/html\"})\n    if r.status_code!= 200:\n        return None\n    return r.headers.get(\"Content-Type\")\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url.startswith('https://') or url.startswith('http://'):\n        return None\n    try:\n        response = requests.head(url)\n        response.raise_for_status()\n        return response.headers['content-type']\n    except requests.exceptions.RequestException:\n        return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    try:\n        r = requests.head(url, timeout=5)\n        r.raise_for_status()\n    except requests.exceptions.HTTPError:\n        return None\n    return r.headers.get(\"content-type\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url)\n    if r.headers['content-type'] == 'text/html':\n        return r.headers['content-type']\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url)\n    if r.status_code == 200:\n        return r.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url, allow_redirects=True)\n    if r.status_code == requests.codes.ok:\n        return r.headers.get(\"content-type\")\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    response = requests.head(url)\n    return response.headers.get('content-type', None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    r = requests.head(url)\n    if r.status_code == 200:\n        return r.headers.get(\"content-type\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    response = requests.head(url)\n    if response.status_code == 200:\n        return response.headers['content-type']\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    r = requests.head(url, headers={\"Accept\": \"text/html\"})\n    if r.status_code!= 200:\n        return None\n    return r.headers.get(\"Content-Type\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url.startswith('https://') or url.startswith('http://'):\n        return None\n    try:\n        response = requests.head(url)\n        response.raise_for_status()\n        return response.headers['content-type']\n    except requests.exceptions.RequestException:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code == 200:\n        return response.headers['content-type']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return tag in ['NNS', 'NNPS', 'NNP', 'NN']\n", "def test_tag(tag: str) -> bool:\n    return tag.lower() in [\"a\", \"attribute\", \"name\", \"value\"]\n", "def test_tag(tag: str) -> bool:\n    return tag in ['NN', 'NNS', 'NNP', 'NNPS', 'CD', 'CC']\n", "def test_tag(tag: str) -> bool:\n    return tag.startswith('J')\n", "def test_tag(tag: str) -> bool:\n    return tag in ['NNS', 'NNP', 'NNPS', 'NN', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']\n", "def test_tag(tag: str) -> bool:\n    if tag in ['NNS', 'NNPS', 'NNP']:\n        return True\n    return False\n", "def test_tag(tag: str) -> bool:\n    \n    \n    return tag in ['NN', 'NNP', 'NNPS', 'NNZ']\n", "def test_tag(tag: str) -> bool:\n    if tag == 'NN':\n        return True\n    return False\n", "def test_tag(tag: str) -> bool:\n    return '-' not in tag\n", "def test_tag(tag: str) -> bool:\n    return (('NN' in tag) or ('NNS' in tag) or ('NNP' in tag) or ('NNPS' in tag))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in ['NNS', 'NNPS', 'NNP', 'NN']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag.lower() in [\"a\", \"attribute\", \"name\", \"value\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in ['NN', 'NNS', 'NNP', 'NNPS', 'CD', 'CC']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag.startswith('J')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in ['NNS', 'NNP', 'NNPS', 'NN', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    if tag in ['NNS', 'NNPS', 'NNP']:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    \n    \n    return tag in ['NN', 'NNP', 'NNPS', 'NNZ']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    if tag == 'NN':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return '-' not in tag\n", "is_pass": true, "return_code": 0}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return (('NN' in tag) or ('NNS' in tag) or ('NNP' in tag) or ('NNPS' in tag))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    This is only a shallow conversation--child nodes are not recursively\n    processed.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed. This is only a shallow conversation.\n    \"\"\"\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    return {n.tag: dict(n.attrib) for n in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed.  This is only a shallow conversation--child nodes are\n    non-recursive.\n    \"\"\"\n    result = {}\n    for child in node.childNodes:\n        if child.nodeType == child.ELEMENT_NODE:\n            result[child.tagName] = xml_children_as_dict(child)\n    return result\n", "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    return {n.tag: {child.tag: child.text for child in n} for n in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed.  This is only a shallow conversation.\n    \"\"\"\n    d = {}\n    for child in node.childNodes:\n        if child.nodeType == child.ELEMENT_NODE:\n            d[child.tagName] = child\n    return d\n", "def xml_children_as_dict(node):\n    return {c.tag: c.text for c in node}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    This is only a shallow conversation--child nodes are not recursively\n    processed.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed. This is only a shallow conversation.\n    \"\"\"\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {n.tag: dict(n.attrib) for n in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed.  This is only a shallow conversation--child nodes are\n    non-recursive.\n    \"\"\"\n    result = {}\n    for child in node.childNodes:\n        if child.nodeType == child.ELEMENT_NODE:\n            result[child.tagName] = xml_children_as_dict(child)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {n.tag: {child.tag: child.text for child in n} for n in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node into a dict, keyed by tag name.\n\n    This is only a shallow conversation--child nodes are not recursively\n    processed.  This is only a shallow conversation.\n    \"\"\"\n    d = {}\n    for child in node.childNodes:\n        if child.nodeType == child.ELEMENT_NODE:\n            d[child.tagName] = child\n    return d\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {c.tag: c.text for c in node}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle or sender_handle == '' or entity_handle == ''\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle and sender_handle in entity_handle.get('sender', {})\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle or sender_handle == '' or entity_handle == ''\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle and sender_handle in entity_handle.get('sender', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'document_url': url,\n        'document_path': document_path,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join(['', 'example.com'])\n    return {'url': url, 'document_path': document_path}\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, str) -> dict[str, str]\n    return {\n        '@type': 'http://www.w3.org/ns/protocol/node-info',\n        'well-known': {\n            'protocol': 'https',\n            'hostname': url.replace('https://', ''),\n            'path': document_path or ''\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    return {\n        '@type': 'NodeInfo',\n        'well-known': {\n            'protocol': 'https',\n            'url': url,\n            'document-path': document_path,\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"@type\": \"NodeInfo\",\n        \"url\": url,\n    }\n    if document_path:\n        nodeinfo[\"document_path\"] = document_path\n    return nodeinfo\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n        'protocol': 'https',\n        'host': url,\n        'document_path': document_path\n    }\n\n    return well_known_document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'index.json'])\n    return {'document_path': document_path}\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@context\": \"http://www.w3.org/ns/protocols/rdf#\",\n        \"@type\": \"rdfs:label\",\n        \"@id\": \"/\",\n        \"label\": \"nodeinfo\",\n        \"schema\": {\n            \"$ref\": \"#/definitions/NodeInfo<%s>\" % url\n        },\n        \"name\": \"\",\n        \"description\": \"\",\n        \"properties\": {},\n        \"subjects\": [],\n        \"subject_type\": \"\",\n        \"objects\": [],\n        \"resources\": [],\n        \"resource_uris\": [],\n        \"resource_type\": \"\",\n        \"subject_uris\": [],\n        \"subject_type_uris\": [],\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        '@type': 'NodeInfo',\n        'well-known': {\n            '@id': url,\n            '@scheme': 'https',\n            '@version': '1.0'\n        }\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'info.well-known.json'])\n    with open(document_path, 'r') as f:\n        return json.loads(f.read())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'document_url': url,\n        'document_path': document_path,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join(['', 'example.com'])\n    return {'url': url, 'document_path': document_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    # type: (str, str) -> dict[str, str]\n    return {\n        '@type': 'http://www.w3.org/ns/protocol/node-info',\n        'well-known': {\n            'protocol': 'https',\n            'hostname': url.replace('https://', ''),\n            'path': document_path or ''\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document_path = document_path or ''\n    return {\n        '@type': 'NodeInfo',\n        'well-known': {\n            'protocol': 'https',\n            'url': url,\n            'document-path': document_path,\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = {\n        \"@type\": \"NodeInfo\",\n        \"url\": url,\n    }\n    if document_path:\n        nodeinfo[\"document_path\"] = document_path\n    return nodeinfo\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    well_known_document = {\n        'protocol': 'https',\n        'host': url,\n        'document_path': document_path\n    }\n\n    return well_known_document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'index.json'])\n    return {'document_path': document_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"@context\": \"http://www.w3.org/ns/protocols/rdf#\",\n        \"@type\": \"rdfs:label\",\n        \"@id\": \"/\",\n        \"label\": \"nodeinfo\",\n        \"schema\": {\n            \"$ref\": \"#/definitions/NodeInfo<%s>\" % url\n        },\n        \"name\": \"\",\n        \"description\": \"\",\n        \"properties\": {},\n        \"subjects\": [],\n        \"subject_type\": \"\",\n        \"objects\": [],\n        \"resources\": [],\n        \"resource_uris\": [],\n        \"resource_type\": \"\",\n        \"subject_uris\": [],\n        \"subject_type_uris\": [],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        '@type': 'NodeInfo',\n        'well-known': {\n            '@id': url,\n            '@scheme': 'https',\n            '@version': '1.0'\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    if document_path is None:\n        document_path = '/'.join([url, 'info.well-known.json'])\n    with open(document_path, 'r') as f:\n        return json.loads(f.read())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(doc, doc.find('.//signature'), signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, doc.xml, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return doc.text and (\n        doc.text[:40] == '<?xml version=\"1.0\" encoding=\"utf-8\"?>' and\n        signature == ''.join([f'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n{public_key}\\n</xml>',\n                             f'<xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:ss=\"http://www.w3.org/2001/XMLSchema\">\\n<signature>{signature}</signature>\\n']))\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n    if not doc.text:\n        return\n    if doc.text.strip().startswith('<?xml version='):\n        if signature.startswith('<signature>'):\n            return\n        if signature.startswith('</signature>'):\n            return\n        if not signature.startswith('</relayable-signature>'):\n            return\n        return\n    if doc.text.strip().startswith('<signature>'):\n        return\n    if not doc.text.strip().startswith('</signature>'):\n        return\n    return\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\".//{{{}}}relayablesignature\".format(NS_XSI))\n       .find(\".//{{{}}}signature\").text == signature\n    )\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (doc.attrib['signature'] == signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.find('.//signed-message'):\n        return False\n    signed_element = doc.find('.//signed-message')\n    return verify_signature(public_key, signed_element, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signature = base64.b64decode(signature)\n    message = etree.fromstring(doc)\n    r = etree.RelaxNG(message)\n    # The author did not generate the message yet.  We don't want to verify\n    # that.\n    if r.error is not None and r.error.code =='relayable_signature':\n        return True\n    else:\n        return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return False\n    if signature is None:\n        return False\n    # the signature is a base64 encoded string, so decode and compare\n    signed_text = doc.text or ''\n    return b64_compare(signed_text, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\"signature\").text == signature and\n        doc.find(\"signature-type\").text == \"relayable\" and\n        doc.find(\"relayable-id\").text == \"urn:ietf:params:acme:error:notSigned\")\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(doc, doc.find('.//signature'), signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, doc.xml, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return doc.text and (\n        doc.text[:40] == '<?xml version=\"1.0\" encoding=\"utf-8\"?>' and\n        signature == ''.join([f'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n{public_key}\\n</xml>',\n                             f'<xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:ss=\"http://www.w3.org/2001/XMLSchema\">\\n<signature>{signature}</signature>\\n']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n    if not doc.text:\n        return\n    if doc.text.strip().startswith('<?xml version='):\n        if signature.startswith('<signature>'):\n            return\n        if signature.startswith('</signature>'):\n            return\n        if not signature.startswith('</relayable-signature>'):\n            return\n        return\n    if doc.text.strip().startswith('<signature>'):\n        return\n    if not doc.text.strip().startswith('</signature>'):\n        return\n    return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\".//{{{}}}relayablesignature\".format(NS_XSI))\n       .find(\".//{{{}}}signature\").text == signature\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (doc.attrib['signature'] == signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.find('.//signed-message'):\n        return False\n    signed_element = doc.find('.//signed-message')\n    return verify_signature(public_key, signed_element, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signature = base64.b64decode(signature)\n    message = etree.fromstring(doc)\n    r = etree.RelaxNG(message)\n    # The author did not generate the message yet.  We don't want to verify\n    # that.\n    if r.error is not None and r.error.code =='relayable_signature':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return False\n    if signature is None:\n        return False\n    # the signature is a base64 encoded string, so decode and compare\n    signed_text = doc.text or ''\n    return b64_compare(signed_text, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\"signature\").text == signature and\n        doc.find(\"signature-type\").text == \"relayable\" and\n        doc.find(\"relayable-id\").text == \"urn:ietf:params:acme:error:notSigned\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    return {\n        'key': document['key'],\n        'value': document['value'],\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    result = {}\n    if document['type'] == 'diaspora_webfinger':\n        result = json.loads(document['content'])\n    return result\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    if 'webfinger' not in document:\n        return {}\n    return json.loads(document['webfinger'])\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    if document['format'] == 'xrd':\n        return {\n            'hash': document['fingerprint'],\n            'name': '',\n            'url': '',\n        }\n    else:\n        return {\n            'hash': document['fingerprint'],\n            'name': document['displayName'],\n            'url': 'https://www.diaspora.com/fingerprint/' + document['fingerprint'],\n        }\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    if \"v=webfinger\" in document:\n        return json.loads(document)\n    else:\n        return {\"name\": document, \"email\": None}\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    if document['type'] == 'diaspora_webfinger':\n        return parse_diaspora_webfinger_json(document)\n    else:\n        return parse_diaspora_webfinger_xrd(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    if 'webfinger' in document:\n        return json.loads(document['webfinger'])\n    else:\n        return {'fingerprint': document['fingerprint'], 'url': document['url']}\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return {\n        'key': document['key'],\n        'value': document['value'],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    result = {}\n    if document['type'] == 'diaspora_webfinger':\n        result = json.loads(document['content'])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    if 'webfinger' not in document:\n        return {}\n    return json.loads(document['webfinger'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    if document['format'] == 'xrd':\n        return {\n            'hash': document['fingerprint'],\n            'name': '',\n            'url': '',\n        }\n    else:\n        return {\n            'hash': document['fingerprint'],\n            'name': document['displayName'],\n            'url': 'https://www.diaspora.com/fingerprint/' + document['fingerprint'],\n        }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    if \"v=webfinger\" in document:\n        return json.loads(document)\n    else:\n        return {\"name\": document, \"email\": None}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    if document['type'] == 'diaspora_webfinger':\n        return parse_diaspora_webfinger_json(document)\n    else:\n        return parse_diaspora_webfinger_xrd(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    if 'webfinger' in document:\n        return json.loads(document['webfinger'])\n    else:\n        return {'fingerprint': document['fingerprint'], 'url': document['url']}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.readline().strip()\n    except Exception as e:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    if handle[0:2]!= b\"RFC7033\":\n        return None\n    try:\n        return handle[2:].decode('utf-8')\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except (TypeError, IndexError):\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    \n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    result = handle.readline()\n    if result is not None:\n        return result\n    else:\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.readline().strip()\n    except Exception as e:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    if handle[0:2]!= b\"RFC7033\":\n        return None\n    try:\n        return handle[2:].decode('utf-8')\n    except:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except (TypeError, IndexError):\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    \n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    result = handle.readline()\n    if result is not None:\n        return result\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_and_parse_url(handle))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'handle': handle,\n        'url': f'https://diaspora.com/{handle}',\n        'text': requests.get(f'https://diaspora.com/{handle}').text,\n    }\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_diaspora_url(handle))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_webfinger_document(handle)\n    return parse_diaspora_webfinger_document(doc)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    if response.status_code!= 200:\n        return {}\n    return response.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return response.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'url': 'https://www.diaspora.com/finger/' + handle,\n        'id': handle\n    }\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    \"\"\"\n    Retrieve a and parse a remote Diaspora webfinger document.\n\n    :arg handle: Remote handle to retrieve\n    :returns: dict\n    \"\"\"\n    return retrieve_and_parse_webfinger_xml(handle, 'DIAspora')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_and_parse_url(handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'handle': handle,\n        'url': f'https://diaspora.com/{handle}',\n        'text': requests.get(f'https://diaspora.com/{handle}').text,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_diaspora_url(handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_webfinger_document(handle)\n    return parse_diaspora_webfinger_document(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    if response.status_code!= 200:\n        return {}\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'url': 'https://www.diaspora.com/finger/' + handle,\n        'id': handle\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \"\"\"\n    Retrieve a and parse a remote Diaspora webfinger document.\n\n    :arg handle: Remote handle to retrieve\n    :returns: dict\n    \"\"\"\n    return retrieve_and_parse_webfinger_xml(handle, 'DIAspora')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    return XRD(\n        urljoin(\n            DIAsporaConfig.get().baseurl,\n            '/rest/diaspora/host-meta/%s' % host\n        ),\n        auth=(DIAsporaConfig.get().username, DIAsporaConfig.get().password)\n    )\n", "def retrieve_diaspora_host_meta(host):\n    return _retrieve_host_meta(host, 'diaspora')\n", "def retrieve_diaspora_host_meta(host):\n    return diaspora_hosts[host]\n", "def retrieve_diaspora_host_meta(host):\n    if host == \"\":\n        return {}\n    response = requests.get(\"https://%s/metadata/diaspora.xrd\" % host)\n    if response.status_code!= 200:\n        raise Exception(\"Failed to get Diaspora host-meta document\")\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, 'diaspora', 'host-meta')\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, diaspora_meta_url(host))\n", "def retrieve_diaspora_host_meta(host):\n    return host.replace('diaspora.com', 'XRD')\n", "def retrieve_diaspora_host_meta(host):\n    return xrd.retrieve(host, \"diaspora.org\")\n", "def retrieve_diaspora_host_meta(host):\n    return retrieve_diaspora_host(host, \"XRD\")\n", "def retrieve_diaspora_host_meta(host):\n    url = ('https://diaspora.azurewebsites.net/rest/diaspora/host/'\n           '{0}/metadata/0.0.0'.format(host))\n    return _parse_diaspora_xrd(_retrieve_resource(url))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(\n        urljoin(\n            DIAsporaConfig.get().baseurl,\n            '/rest/diaspora/host-meta/%s' % host\n        ),\n        auth=(DIAsporaConfig.get().username, DIAsporaConfig.get().password)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return _retrieve_host_meta(host, 'diaspora')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return diaspora_hosts[host]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == \"\":\n        return {}\n    response = requests.get(\"https://%s/metadata/diaspora.xrd\" % host)\n    if response.status_code!= 200:\n        raise Exception(\"Failed to get Diaspora host-meta document\")\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, 'diaspora', 'host-meta')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, diaspora_meta_url(host))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return host.replace('diaspora.com', 'XRD')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return xrd.retrieve(host, \"diaspora.org\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return retrieve_diaspora_host(host, \"XRD\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = ('https://diaspora.azurewebsites.net/rest/diaspora/host/'\n           '{0}/metadata/0.0.0'.format(host))\n    return _parse_diaspora_xrd(_retrieve_resource(url))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(\n            url, data=data, timeout=timeout, *args, **kwargs\n        )\n    except requests.exceptions.RequestException as e:\n        return None, e\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, *args, **kwargs)\n    response.raise_for_status()\n    return (response.status_code, response.json().get(\"error\"))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return (\n            requests.post(\n                url,\n                data=data,\n                timeout=timeout,\n                *args,\n                **kwargs,\n            )\n           .status_code\n           .replace(\" \", \"\")\n           .lower()\n        )\n    except requests.exceptions.ConnectionError as exc:\n        return (None, exc)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n    if response.status_code == 200:\n        return (response.status_code, response)\n    return (response.status_code, None)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.ConnectionError as e:\n        return (None, e)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs)\n    return (response.status_code, response.raise_for_status())\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, *args, **kwargs)\n    response.raise_for_status()\n    return (response.status_code, response)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, **kwargs)\n    if response.status_code!= 200:\n        return response.status_code, None\n    return response.status_code, response.json()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(\n            url, data=data, timeout=timeout, *args, **kwargs\n        )\n    except requests.exceptions.RequestException as e:\n        return None, e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, *args, **kwargs)\n    response.raise_for_status()\n    return (response.status_code, response.json().get(\"error\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return _send_document(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return (\n            requests.post(\n                url,\n                data=data,\n                timeout=timeout,\n                *args,\n                **kwargs,\n            )\n           .status_code\n           .replace(\" \", \"\")\n           .lower()\n        )\n    except requests.exceptions.ConnectionError as exc:\n        return (None, exc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}, *args, **kwargs\n    )\n    if response.status_code == 200:\n        return (response.status_code, response)\n    return (response.status_code, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.ConnectionError as e:\n        return (None, e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(\n        url, data=data, timeout=timeout, *args, **kwargs)\n    return (response.status_code, response.raise_for_status())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, *args, **kwargs)\n    response.raise_for_status()\n    return (response.status_code, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = requests.post(url, data, timeout=timeout, **kwargs)\n    if response.status_code!= 200:\n        return response.status_code, None\n    return response.status_code, response.json()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    if len(keys) == 1:\n        dic[key] = val\n        return\n\n    if keys[0] not in dic:\n        dic[keys[0]] = {}\n    dic = dic[keys[0]]\n\n    dict_insert(dic, val, keys[1:], *keys[1:])\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    try:\n        dic[key].update(*keys)\n    except KeyError:\n        dic[key] = {key: val}\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[1:], *keys[2:])\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    if len(keys) == 1:\n        dic[key] = val\n        return\n\n    if keys[0] not in dic:\n        dic[keys[0]] = {}\n    dic = dic[keys[0]]\n\n    dict_insert(dic, val, keys[1:], *keys[1:])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    try:\n        dic[key].update(*keys)\n    except KeyError:\n        dic[key] = {key: val}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[1:], *keys[2:])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}.ini'.format(x) for x in settings_dirs if x.endswith('.ini')\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create a new IniType complex type\n    \"\"\"\n    return [('list', settings_dirs[0], spec_option)]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\"name\": \"file1\", \"type\": \"string\"},\n        {\"name\": \"file2\", \"type\": \"string\"},\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\" Create a new IniType complex type \"\"\"\n    return [\n        {\n            \"name\": \"file1\",\n            \"type\": \"list\",\n            \"items\": settings_dirs + [{\"type\": \"string\"}],\n        },\n        {\n            \"name\": \"file2\",\n            \"type\": \"string\",\n            \"items\": spec_option,\n        },\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create a new IniType complex type\n    \"\"\"\n    return [\n        {\n            'name': 'file_name',\n            'description': 'File name',\n            'type':'string',\n           'required': True,\n            'default': ''\n        },\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return ['list_of_file_names', [settings_dirs, spec_option]]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [os.path.join(x, spec_option[0] + \".ini\") for x in settings_dirs]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{0}/{1}.ini'.format(dir, spec_option)\n        for dir in settings_dirs\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\" Create a new IniType complex type \"\"\"\n    return '{{\"list\": [{}]}}'.format(spec_option)\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [ '.'.join([settings_dir, 'list_of_file_names']) for settings_dir in settings_dirs ]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{}.ini'.format(x) for x in settings_dirs if x.endswith('.ini')\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create a new IniType complex type\n    \"\"\"\n    return [('list', settings_dirs[0], spec_option)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        {\"name\": \"file1\", \"type\": \"string\"},\n        {\"name\": \"file2\", \"type\": \"string\"},\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\" Create a new IniType complex type \"\"\"\n    return [\n        {\n            \"name\": \"file1\",\n            \"type\": \"list\",\n            \"items\": settings_dirs + [{\"type\": \"string\"}],\n        },\n        {\n            \"name\": \"file2\",\n            \"type\": \"string\",\n            \"items\": spec_option,\n        },\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create a new IniType complex type\n    \"\"\"\n    return [\n        {\n            'name': 'file_name',\n            'description': 'File name',\n            'type':'string',\n           'required': True,\n            'default': ''\n        },\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return ['list_of_file_names', [settings_dirs, spec_option]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [os.path.join(x, spec_option[0] + \".ini\") for x in settings_dirs]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [\n        '{0}/{1}.ini'.format(dir, spec_option)\n        for dir in settings_dirs\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\" Create a new IniType complex type \"\"\"\n    return '{{\"list\": [{}]}}'.format(spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [ '.'.join([settings_dir, 'list_of_file_names']) for settings_dir in settings_dirs ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    \n    \n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    \"\"\"\n    Gets the ansible config manager.\n    \"\"\"\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls.get(\"ansible_config_manager\")\n", "def ansible_config_manager(cls):\n    return cls.__dict__.get(\"__ansible_config_manager\")\n", "def ansible_config_manager(cls):\n    return cls.config_manager\n", "def ansible_config_manager(cls):\n    \"\"\"Gets the ansible config manager.\"\"\"\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls._config_manager\n", "def ansible_config_manager(cls):\n    return cls.get('ansible_config_manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    \n    \n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \"\"\"\n    Gets the ansible config manager.\n    \"\"\"\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.get(\"ansible_config_manager\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.__dict__.get(\"__ansible_config_manager\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    \"\"\"Gets the ansible config manager.\"\"\"\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls.get('ansible_config_manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    return _workspace_manager.setdefault(cls, WorkspaceManager())\n", "def workspace_manager(cls):\n    return {\n        \"gse2\": Gse2WorkspaceManager,\n        \"csse\": CsseWorkspaceManager,\n        \"esri\": EsriWorkspaceManager,\n        \"shapefile\": ShapefileWorkspaceManager,\n        \"spatialite\": SpatialiteWorkspaceManager,\n        \"postgis\": PostGISWorkspaceManager,\n        \"oracle\": OracleWorkspaceManager,\n    }[cls]\n", "def workspace_manager(cls):\n    return _workspace_manager.get(cls)\n", "def workspace_manager(cls):\n    \n    \n    cls.__workspace_manager__ = True\n    return cls\n", "def workspace_manager(cls):\n    return _workspace_manager.get(cls)\n", "def workspace_manager(cls):\n    \n    \n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    return getattr(cls, 'workspace_manager', None)\n", "def workspace_manager(cls):\n    return {\n        'windows': WindowWorkspaceManager,\n       'mac': MacWorkspaceManager,\n    }[cls]()\n", "def workspace_manager(cls):\n    \n    \n    return cls._workspace_manager\n", "def workspace_manager(cls):\n    \"\"\"Gets the workspace manager.\"\"\"\n    return get_service(cls, 'workspace_manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    return _workspace_manager.setdefault(cls, WorkspaceManager())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return {\n        \"gse2\": Gse2WorkspaceManager,\n        \"csse\": CsseWorkspaceManager,\n        \"esri\": EsriWorkspaceManager,\n        \"shapefile\": ShapefileWorkspaceManager,\n        \"spatialite\": SpatialiteWorkspaceManager,\n        \"postgis\": PostGISWorkspaceManager,\n        \"oracle\": OracleWorkspaceManager,\n    }[cls]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return _workspace_manager.get(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    cls.__workspace_manager__ = True\n    return cls\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return _workspace_manager.get(cls)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return getattr(cls, 'workspace_manager', None)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return {\n        'windows': WindowWorkspaceManager,\n       'mac': MacWorkspaceManager,\n    }[cls]()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls._workspace_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \"\"\"Gets the workspace manager.\"\"\"\n    return get_service(cls, 'workspace_manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \n    \n    return {'plugins': cls._plugins}\n", "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \n    \n    return cls._plugins\n", "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "def plugins_manager(cls):\n    return cls._plugins_manager\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return {'plugins': cls._plugins}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._plugins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \"\"\"\n    Gets the plugin manager.\n    \"\"\"\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._plugins_manager\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    required_fields = [\"name\", \"description\", \"version\", \"external_url\", \"url\"]\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field '{}'\".format(field))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content_dict(SPEC_FIELDS, spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec content')\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Spec content is not a dictionary')\n    for key, value in spec_content.items():\n        if key not in cls.__dict__:\n            raise IRValidatorException('Missing required field %s' % key)\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec_content is required')\n    try:\n        cls.validate(spec_content)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(str(e))\n    return cls.to_dict()\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','version', 'author', 'email', 'license', 'python_version']\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing data in spec file')\n    return {field: spec_content[field] for field in required_fields}\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException('invalid YAML: %s' % exc)\n\n    return cls.validate(data)\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    data[\"@module\"] = cls.__module__\n    data[\"@class\"] = cls.__name__\n    data[\"validator\"] = \"validate_spec\"\n    if spec_content is not None:\n        data = cls._validate(data, spec_content)\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n    return cls._validate_from_content(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"spec content is None\")\n\n    required_keys = [\"name\", \"version\", \"license\", \"author\", \"description\", \"url\", \"python_version\"]\n    missing_keys = [k for k in required_keys if k not in spec_content]\n    if missing_keys:\n        raise IRValidatorException(\"Missing data in spec file: {}\".format(missing_keys))\n\n    return spec_content\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    required_fields = [\"name\", \"description\", \"version\", \"external_url\", \"url\"]\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field '{}'\".format(field))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content_dict(SPEC_FIELDS, spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec content')\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Spec content is not a dictionary')\n    for key, value in spec_content.items():\n        if key not in cls.__dict__:\n            raise IRValidatorException('Missing required field %s' % key)\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec_content is required')\n    try:\n        cls.validate(spec_content)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(str(e))\n    return cls.to_dict()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','version', 'author', 'email', 'license', 'python_version']\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing data in spec file')\n    return {field: spec_content[field] for field in required_fields}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException('invalid YAML: %s' % exc)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    data[\"@module\"] = cls.__module__\n    data[\"@class\"] = cls.__name__\n    data[\"validator\"] = \"validate_spec\"\n    if spec_content is not None:\n        data = cls._validate(data, spec_content)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n    return cls._validate_from_content(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"spec content is None\")\n\n    required_keys = [\"name\", \"version\", \"license\", \"author\", \"description\", \"url\", \"python_version\"]\n    missing_keys = [k for k in required_keys if k not in spec_content]\n    if missing_keys:\n        raise IRValidatorException(\"Missing data in spec file: {}\".format(missing_keys))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n    try:\n        with open(yaml_file) as f:\n            return cls.validate(yaml.safe_load(f))\n    except Exception as e:\n        raise IRValidatorException('Invalid YAML file:'+ str(e))\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate(yaml_file)\n\n    return cls.load(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('YAML file is missing')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate_file_name(yaml_file)\n    cls.validate_file_contents(yaml_file)\n    return yaml.safe_load(open(yaml_file))\n", "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException(\"Yaml file path is required\")\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n    except IOError as e:\n        raise IRValidatorException(e.strerror)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e.problem)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            return cls.validate_from_string(yaml_file.read())\n    except IOError as error:\n        raise IRValidatorException(error.strerror)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except Exception as e:\n        raise IRValidatorException('Unable to parse YAML file')\n\n    return cls.validate_from_dict(yaml_data)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        yaml_file = cls.get_yaml_file()\n    try:\n        with open(yaml_file, \"r\") as f:\n            return cls.validate_from_file_object(yaml.safe_load(f))\n    except (IOError, yaml.YAMLError) as e:\n        raise IRValidatorException(str(e))\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n\n    if not yaml_file:\n        raise IRValidatorException(\n            \"A YAML file is required to validate a result of a test.\"\n        )\n\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n    except FileNotFoundError:\n        raise IRValidatorException(\n            \"The specified YAML file {} was not found.\".format(yaml_file)\n        )\n\n    return cls.validate_from_dict(data)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing Yaml File')\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n            return cls.validate(data)\n    except IOError:\n        raise IRValidatorException('Invalid YAML File')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n    try:\n        with open(yaml_file) as f:\n            return cls.validate(yaml.safe_load(f))\n    except Exception as e:\n        raise IRValidatorException('Invalid YAML file:'+ str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate(yaml_file)\n\n    return cls.load(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('YAML file is missing')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate_file_name(yaml_file)\n    cls.validate_file_contents(yaml_file)\n    return yaml.safe_load(open(yaml_file))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException(\"Yaml file path is required\")\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n    except IOError as e:\n        raise IRValidatorException(e.strerror)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e.problem)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            return cls.validate_from_string(yaml_file.read())\n    except IOError as error:\n        raise IRValidatorException(error.strerror)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except Exception as e:\n        raise IRValidatorException('Unable to parse YAML file')\n\n    return cls.validate_from_dict(yaml_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        yaml_file = cls.get_yaml_file()\n    try:\n        with open(yaml_file, \"r\") as f:\n            return cls.validate_from_file_object(yaml.safe_load(f))\n    except (IOError, yaml.YAMLError) as e:\n        raise IRValidatorException(str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n\n    if not yaml_file:\n        raise IRValidatorException(\n            \"A YAML file is required to validate a result of a test.\"\n        )\n\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n    except FileNotFoundError:\n        raise IRValidatorException(\n            \"The specified YAML file {} was not found.\".format(yaml_file)\n        )\n\n    return cls.validate_from_dict(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing Yaml File')\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n            return cls.validate(data)\n    except IOError:\n        raise IRValidatorException('Invalid YAML File')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    \n    \n    for include in self.spec['include']:\n        if include in parser_dict:\n            parser_dict[include] = self._resolve_group(parser_dict[include])\n        elif 'include' in parser_dict:\n            parser_dict['include'].remove(include)\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    for include_group in parser_dict.get('include-groups', []):\n        yield include_group\n", "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for include_dict in parser_dict.get(\"include\", []):\n        include_groups.append(self._resolve_include(include_dict))\n    parser_dict[\"include\"] = include_groups\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    groups = []\n    for group in parser_dict.get('include-groups', []):\n        groups.append(group)\n    parser_dict['include-groups'] = groups\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    result = []\n    for inc_group in parser_dict[\"include\"]:\n        result.extend(self._include_group(inc_group))\n    return result\n", "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    includes = []\n    for include in parser_dict[\"include\"]:\n        includes.append(include)\n    parser_dict[\"include\"] = includes\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if 'include' in parser_dict:\n        return self._resolve_include(parser_dict['include'])\n    return []\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if self.include_groups is None:\n        return []\n\n    result = []\n    for group in self.include_groups:\n        group_dict = {}\n        for key, value in group.items():\n            group_dict[key] = value\n        result.append(group_dict)\n    return result\n", "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return []\n    return ['\\n'.join(['#include <%s>' % (k,)] + v for k, v in sorted(parser_dict.items()))]\n", "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return [f\"#include <{self.__filename}>\"]\n    else:\n        return []\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    for include in self.spec['include']:\n        if include in parser_dict:\n            parser_dict[include] = self._resolve_group(parser_dict[include])\n        elif 'include' in parser_dict:\n            parser_dict['include'].remove(include)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    for include_group in parser_dict.get('include-groups', []):\n        yield include_group\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for include_dict in parser_dict.get(\"include\", []):\n        include_groups.append(self._resolve_include(include_dict))\n    parser_dict[\"include\"] = include_groups\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    groups = []\n    for group in parser_dict.get('include-groups', []):\n        groups.append(group)\n    parser_dict['include-groups'] = groups\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    result = []\n    for inc_group in parser_dict[\"include\"]:\n        result.extend(self._include_group(inc_group))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    includes = []\n    for include in parser_dict[\"include\"]:\n        includes.append(include)\n    parser_dict[\"include\"] = includes\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if 'include' in parser_dict:\n        return self._resolve_include(parser_dict['include'])\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if self.include_groups is None:\n        return []\n\n    result = []\n    for group in self.include_groups:\n        group_dict = {}\n        for key, value in group.items():\n            group_dict[key] = value\n        result.append(group_dict)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return []\n    return ['\\n'.join(['#include <%s>' % (k,)] + v for k, v in sorted(parser_dict.items()))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return [f\"#include <{self.__filename}>\"]\n    else:\n        return []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {\n       'version': self.version,\n        'description': self.description,\n       'requirements': self.requirements,\n       'start': self.start,\n        'end': self.end,\n        'author': self.author,\n        'author_email': self.author_email,\n        'license': self.license,\n        'license_email': self.license_email,\n       'repo': self.repo,\n       'repo_url': self.repo_url,\n        'package_name': self.package_name,\n        'package_url': self.package_url,\n       'requirements_file': self.requirements_file,\n        'extra_requirements': self.extra_requirements,\n        'extra_requirements_file': self.extra_requirements_file,\n    }\n", "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    defaults = {}\n    for key, value in self.__dict__.items():\n        if key.startswith(\"__\"):\n            continue\n        defaults[key] = value\n    return defaults\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {}\n", "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    return {\n        \"no_response\": False,\n        \"no_arguments\": False,\n        \"no_shell\": False,\n        \"no_flags\": False,\n        \"no_flag_values\": [],\n    }\n", "def get_spec_defaults(self):\n    \"\"\"Resolve arguments' values from spec and other sources.\"\"\"\n    pass\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {k: v for k, v in self.spec.items() if k not in self.defaults}\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {\n       'selector': self.selector,\n        'output': self.output,\n       'src': self.src,\n        'type': self.type,\n    }\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    if self.is_sequence():\n        return [get_spec_defaults(x) for x in self.value]\n    else:\n        return {'default': self.default}\n", "def get_spec_defaults(self):\n    \n    \n    return {\n        'id': self.id,\n        'cluster_id': self.cluster_id,\n        'name': self.name,\n       'stack_id': self.stack_id,\n        'template': self.template,\n        'parameters': self.parameters,\n        'capabilities': self.capabilities,\n        'data': self.data,\n        'files': self.files,\n        'environment_file': self.environment_file,\n        'files_from_environment': self.files_from_environment,\n        'files_from_config': self.files_from_config,\n        'depends_on': self.depends_on,\n       'stack_action': self.stack_action,\n        'timeout': self.timeout,\n       'resolve_data': self.resolve_data,\n        'timeout_policy': self.timeout_policy,\n        'timeout_failures': self.timeout_failures,\n        'timeout_retries': self.timeout_retries,\n        'timeout_retry_interval': self.timeout_r", "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    return {}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {\n       'version': self.version,\n        'description': self.description,\n       'requirements': self.requirements,\n       'start': self.start,\n        'end': self.end,\n        'author': self.author,\n        'author_email': self.author_email,\n        'license': self.license,\n        'license_email': self.license_email,\n       'repo': self.repo,\n       'repo_url': self.repo_url,\n        'package_name': self.package_name,\n        'package_url': self.package_url,\n       'requirements_file': self.requirements_file,\n        'extra_requirements': self.extra_requirements,\n        'extra_requirements_file': self.extra_requirements_file,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    defaults = {}\n    for key, value in self.__dict__.items():\n        if key.startswith(\"__\"):\n            continue\n        defaults[key] = value\n    return defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    return {\n        \"no_response\": False,\n        \"no_arguments\": False,\n        \"no_shell\": False,\n        \"no_flags\": False,\n        \"no_flag_values\": [],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"Resolve arguments' values from spec and other sources.\"\"\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {k: v for k, v in self.spec.items() if k not in self.defaults}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    return {\n       'selector': self.selector,\n        'output': self.output,\n       'src': self.src,\n        'type': self.type,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources.\n    \"\"\"\n    if self.is_sequence():\n        return [get_spec_defaults(x) for x in self.value]\n    else:\n        return {'default': self.default}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \n    \n    return {\n        'id': self.id,\n        'cluster_id': self.cluster_id,\n        'name': self.name,\n       'stack_id': self.stack_id,\n        'template': self.template,\n        'parameters': self.parameters,\n        'capabilities': self.capabilities,\n        'data': self.data,\n        'files': self.files,\n        'environment_file': self.environment_file,\n        'files_from_environment': self.files_from_environment,\n        'files_from_config': self.files_from_config,\n        'depends_on': self.depends_on,\n       'stack_action': self.stack_action,\n        'timeout': self.timeout,\n       'resolve_data': self.resolve_data,\n        'timeout_policy': self.timeout_policy,\n        'timeout_failures': self.timeout_failures,\n        'timeout_retries': self.timeout_retries,\n        'timeout_retry_interval': self.timeout_r", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\" Resolve arguments' values from spec and other sources. \"\"\"\n    return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    \n    \n    return {\n        'db_path':'sqlite:///{}'.format(self.db_path),\n        'table_name': '{}'.format(self.table_name),\n        'column_name': '{}'.format(self.column_name),\n        'timestamp_column': '{}'.format(self.timestamp_column),\n        'index_column': '{}'.format(self.index_column),\n    }\n", "def get_deprecated_args(self):\n    return {}\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {\n        'deprecated_args': self.deprecated_args,\n    }\n", "def get_deprecated_args(self):\n    \n    \n    return {\n        'deprecated_args': self.deprecated_args,\n    }\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return self._deprecated_args\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "def get_deprecated_args(self):\n    return {\n        'allowed_keys': self.__class__.allowed_keys,\n        'deprecated_keys': self.__class__.deprecated_keys,\n        'deprecated_values': self.__class__.deprecated_values,\n        'deprecated_options': self.__class__.deprecated_options,\n        'deprecated_args': self.__class__.deprecated_args,\n        'deprecated_kwargs': self.__class__.deprecated_kwargs\n    }\n", "def get_deprecated_args(self):\n    \n    \n    return {\n        \"url\": self.url,\n        \"ref\": self.ref,\n        \"encoding\": self.encoding,\n        \"headers\": self.headers,\n        \"timeout\": self.timeout,\n        \"verify\": self.verify,\n        \"cert\": self.cert,\n    }\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    \n    \n    return {\n        'db_path':'sqlite:///{}'.format(self.db_path),\n        'table_name': '{}'.format(self.table_name),\n        'column_name': '{}'.format(self.column_name),\n        'timestamp_column': '{}'.format(self.timestamp_column),\n        'index_column': '{}'.format(self.index_column),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {\n        'deprecated_args': self.deprecated_args,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \n    \n    return {\n        'deprecated_args': self.deprecated_args,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return self._deprecated_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    \"\"\"\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        'allowed_keys': self.__class__.allowed_keys,\n        'deprecated_keys': self.__class__.deprecated_keys,\n        'deprecated_values': self.__class__.deprecated_values,\n        'deprecated_options': self.__class__.deprecated_options,\n        'deprecated_args': self.__class__.deprecated_args,\n        'deprecated_kwargs': self.__class__.deprecated_kwargs\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \n    \n    return {\n        \"url\": self.url,\n        \"ref\": self.ref,\n        \"encoding\": self.encoding,\n        \"headers\": self.headers,\n        \"timeout\": self.timeout,\n        \"verify\": self.verify,\n        \"cert\": self.cert,\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['no_ssh']:\n        return\n    if cli_args['no_ssh_key']:\n        return\n    if cli_args['no_ssh_password']:\n        return\n    if cli_args['ssh_port'] is None:\n        return\n    if cli_args['ssh_username'] is None:\n        return\n    if cli_args['ssh_password'] is None:\n        return\n    if cli_args['ssh_key'] is None:\n        return\n    if cli_args['ssh_password_again'] is None:\n        return\n    if cli_args['ssh_key_again'] is None:\n        return\n    if cli_args['ssh_password_common'] is None:\n        return\n    if cli_args['ssh_password_fail'] is None:\n        return\n    if cli_args['ssh_key_fail'] is None:\n        return\n    if cli_args['ssh_key_common'] is None:\n        return", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    validate_arg_deprecation_internal(self, cli_args, answer_file_args)\n    validate_arg_deprecation_external(self, cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(\n        cli_args=cli_args,\n        answer_file_args=answer_file_args,\n    )\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_arg_types(cli_args, answer_file_args)\n    self.validate_arg_values(cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files\n    \"\"\"\n    # TODO: implement this function\n    pass\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    for arg_name, arg_value in cli_args.items():\n        if arg_name not in answer_file_args:\n            self.error('The {} argument is deprecated and has been ignored.'.format(\n                arg_name))\n        else:\n            self.debug('{} argument is deprecated and has been ignored.'.format(\n                arg_name))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(cli_args, answer_file_args, ['dest_path'])\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.replace_existing_answers:\n        self._replace_existing_answers(cli_args, answer_file_args)\n\n    if cli_args.debug:\n        self._debug_mode(cli_args)\n\n    if cli_args.verbose:\n        self._verbose_mode(cli_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    if cli_args.get('deprecated_answer_file') and cli_args['deprecated_answer_file']!= answer_file_args['deprecated_answer_file']:\n        raise ValueError(\"The file '{}' is deprecated and should be '{}'\".format(cli_args['deprecated_answer_file'], answer_file_args['deprecated_answer_file']))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--version' in cli_args:\n        if '--version' in answer_file_args:\n            self.print_version()\n        exit()\n    if '--version' not in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n    if '--version' in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['no_ssh']:\n        return\n    if cli_args['no_ssh_key']:\n        return\n    if cli_args['no_ssh_password']:\n        return\n    if cli_args['ssh_port'] is None:\n        return\n    if cli_args['ssh_username'] is None:\n        return\n    if cli_args['ssh_password'] is None:\n        return\n    if cli_args['ssh_key'] is None:\n        return\n    if cli_args['ssh_password_again'] is None:\n        return\n    if cli_args['ssh_key_again'] is None:\n        return\n    if cli_args['ssh_password_common'] is None:\n        return\n    if cli_args['ssh_password_fail'] is None:\n        return\n    if cli_args['ssh_key_fail'] is None:\n        return\n    if cli_args['ssh_key_common'] is None:\n        return", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    validate_arg_deprecation_internal(self, cli_args, answer_file_args)\n    validate_arg_deprecation_external(self, cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(\n        cli_args=cli_args,\n        answer_file_args=answer_file_args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_arg_types(cli_args, answer_file_args)\n    self.validate_arg_values(cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files\n    \"\"\"\n    # TODO: implement this function\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    for arg_name, arg_value in cli_args.items():\n        if arg_name not in answer_file_args:\n            self.error('The {} argument is deprecated and has been ignored.'.format(\n                arg_name))\n        else:\n            self.debug('{} argument is deprecated and has been ignored.'.format(\n                arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(cli_args, answer_file_args, ['dest_path'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.replace_existing_answers:\n        self._replace_existing_answers(cli_args, answer_file_args)\n\n    if cli_args.debug:\n        self._debug_mode(cli_args)\n\n    if cli_args.verbose:\n        self._verbose_mode(cli_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    if cli_args.get('deprecated_answer_file') and cli_args['deprecated_answer_file']!= answer_file_args['deprecated_answer_file']:\n        raise ValueError(\"The file '{}' is deprecated and should be '{}'\".format(cli_args['deprecated_answer_file'], answer_file_args['deprecated_answer_file']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--version' in cli_args:\n        if '--version' in answer_file_args:\n            self.print_version()\n        exit()\n    if '--version' not in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n    if '--version' in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    return self.command_parser.get_option_specs(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self.command_parse_map[command_name][\"option_specs\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "def get_parser_option_specs(self, command_name):\n    option_specs = {}\n    for option in self.__command_options[command_name]:\n        option_specs[option[0]] = option[1]\n    return option_specs\n", "def get_parser_option_specs(self, command_name):\n    return self.command_parser.option_specs[command_name]\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list[command_name]\n", "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].options\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    return self.commands[command_name].option_specs\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parser.get_option_specs(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parse_map[command_name][\"option_specs\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_specs = {}\n    for option in self.__command_options[command_name]:\n        option_specs[option[0]] = option[1]\n    return option_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parser.option_specs[command_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list[command_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].options\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.commands[command_name].option_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    return self._get_option_spec(command_name, argument_name)[1]", "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specification for the specified command name and argument name.\n    \"\"\"\n    option_spec = {}\n    command = self.commands.get(command_name)\n    if command is not None:\n        option_spec = command.get_option_spec(argument_name)\n    return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    return self._commands[command_name]['options'][argument_name]['spec']\n", "def get_option_spec(self, command_name, argument_name):\n    return self._commands[command_name]['options'][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._get_option_spec(command_name, argument_name, self._options)", "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specfic \\\"option\\\" name.\n    \"\"\"\n    return _get_option_spec(self._command_table[command_name], argument_name)\n", "def get_option_spec(self, command_name, argument_name):\n    return self._command_options[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._option_specs[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return _get_option_spec(self, command_name, argument_name)\n", "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._command_options[command_name][argument_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self._get_option_spec(command_name, argument_name)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specification for the specified command name and argument name.\n    \"\"\"\n    option_spec = {}\n    command = self.commands.get(command_name)\n    if command is not None:\n        option_spec = command.get_option_spec(argument_name)\n    return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self._commands[command_name]['options'][argument_name]['spec']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self._commands[command_name]['options'][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._get_option_spec(command_name, argument_name, self._options)", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specfic \\\"option\\\" name.\n    \"\"\"\n    return _get_option_spec(self._command_table[command_name], argument_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self._command_options[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._option_specs[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return _get_option_spec(self, command_name, argument_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \n    \n    return self._command_options[command_name][argument_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return [x for x in args if x is not None and x!= self.silent_arg]\n", "def get_silent_args(self, args):\n    if'silent' in args:\n        return ['--silent']\n    return []\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '']\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not arg in self.SILENCED_ARGS]\n", "def get_silent_args(self, args):\n    \"\"\"\n    list of silenced argument\n\n    :param args: The received arguments.\n    :return: list, silenced argument names\n    \"\"\"\n    return [\n        a for a in args if a not in self.silent_args\n    ]\n", "def get_silent_args(self, args):\n    return [name for name in args if name not in self.silent_args]\n", "def get_silent_args(self, args):\n    return [k for k in args if k!= self.__silent_arg]\n", "def get_silent_args(self, args):\n    return [k for k in args if args[k] is False]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!='self']\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not arg.startswith('-')]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return [x for x in args if x is not None and x!= self.silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    if'silent' in args:\n        return ['--silent']\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not arg in self.SILENCED_ARGS]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    \"\"\"\n    list of silenced argument\n\n    :param args: The received arguments.\n    :return: list, silenced argument names\n    \"\"\"\n    return [\n        a for a in args if a not in self.silent_args\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [name for name in args if name not in self.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k in args if k!= self.__silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k in args if args[k] is False]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!='self']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not arg.startswith('-')]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    if not args.get('id'):\n        raise errors.MissingRequiredArgumentError(\n            argument='id',\n            command='create'\n        )\n", "def validate_requires_args(self, args):\n    return args.get(\"description\", \"\") and args.get(\"name\", \"\")\n", "def validate_requires_args(self, args):\n    \n    \n    return all(x not in self.args for x in args)\n", "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError(\"No required arguments were specified\")\n", "def validate_requires_args(self, args):\n    \n    \n    if not args.ip_address:\n        raise ValueError('ip_address is a mandatory parameter')\n    if not args.port:\n        raise ValueError('port is a mandatory parameter')\n    if not args.timeout:\n        raise ValueError('timeout is a mandatory parameter')\n    if not args.time_out:\n        raise ValueError('time_out is a mandatory parameter')\n    if not args.address:\n        raise ValueError('address is a mandatory parameter')\n    if not args.username:\n        raise ValueError('username is a mandatory parameter')\n    if not args.password:\n        raise ValueError('password is a mandatory parameter')\n    if not args.vhost:\n        raise ValueError('vhost is a mandatory parameter')\n    if not args.auth_user:\n        raise ValueError('auth_user is a mandatory parameter')\n    if not args.auth_password:\n        rai", "def validate_requires_args(self, args):\n    \"\"\"\n    Check if all the required arguments have been provided.\n    \"\"\"\n    if args.dataset_id is None:\n        raise ValueError('\"dataset_id\" is a required argument.')\n    if args.model_id is None:\n        raise ValueError('\"model_id\" is a required argument.')\n    if args.model_version is None:\n        raise ValueError('\"model_version\" is a required argument.')\n", "def validate_requires_args(self, args):\n    return not args.get('email') or not args.get('password')\n", "def validate_requires_args(self, args):\n    \n    \n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if len(missing_args) > 0:\n        return False\n    return True\n", "def validate_requires_args(self, args):\n    return all([args.account_id, args.domain_id, args.name, args.description,\n                args.max_ssl_threshold, args.ssl_ca, args.ssl_key, args.ssl_cert,\n                args.ssl_ca_cert, args.ssl_key_cert, args.ssl_cert_chain,\n                args.ssl_verify, args.enable_ssl_verification])\n", "def validate_requires_args(self, args):\n    \n    \n    return all([arg is not None for arg in args])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    if not args.get('id'):\n        raise errors.MissingRequiredArgumentError(\n            argument='id',\n            command='create'\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return args.get(\"description\", \"\") and args.get(\"name\", \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    return all(x not in self.args for x in args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError(\"No required arguments were specified\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    if not args.ip_address:\n        raise ValueError('ip_address is a mandatory parameter')\n    if not args.port:\n        raise ValueError('port is a mandatory parameter')\n    if not args.timeout:\n        raise ValueError('timeout is a mandatory parameter')\n    if not args.time_out:\n        raise ValueError('time_out is a mandatory parameter')\n    if not args.address:\n        raise ValueError('address is a mandatory parameter')\n    if not args.username:\n        raise ValueError('username is a mandatory parameter')\n    if not args.password:\n        raise ValueError('password is a mandatory parameter')\n    if not args.vhost:\n        raise ValueError('vhost is a mandatory parameter')\n    if not args.auth_user:\n        raise ValueError('auth_user is a mandatory parameter')\n    if not args.auth_password:\n        rai", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \"\"\"\n    Check if all the required arguments have been provided.\n    \"\"\"\n    if args.dataset_id is None:\n        raise ValueError('\"dataset_id\" is a required argument.')\n    if args.model_id is None:\n        raise ValueError('\"model_id\" is a required argument.')\n    if args.model_version is None:\n        raise ValueError('\"model_version\" is a required argument.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return not args.get('email') or not args.get('password')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if len(missing_args) > 0:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all([args.account_id, args.domain_id, args.name, args.description,\n                args.max_ssl_threshold, args.ssl_ca, args.ssl_key, args.ssl_cert,\n                args.ssl_ca_cert, args.ssl_key_cert, args.ssl_cert_chain,\n                args.ssl_verify, args.enable_ssl_verification])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    return all([arg is not None for arg in args])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if (self._conditionally_required_when(command_name, options_spec,\n                                               arg_name) and\n                arg_name not in args):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_required_args = []\n    for arg in args:\n        if not self._is_required_when_condition(command_name, options_spec, arg):\n            conditional_required_args.append(arg)\n    return conditional_required_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args\n            if (self._required_when(command_name, options_spec, arg) and\n                arg not in self._ignore_args)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    return self._get_conditionally_required_args_action(\n        command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if not self._conditionally_required_arg_match(command_name,\n                                                       options_spec,\n                                                       arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_condition(command_name, options_spec)\n    return [x for x in args if condition(x)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not options_spec or not args:\n        return args\n    conditions = options_spec.get('conditions', {})\n    args = self._get_conditionally_required_args(command_name, conditions, args)\n    if conditions.get('required_when') and args:\n        self._log.warning('required_when condition matched but no arguments '\n                          'were provided')\n    return args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._is_conditionally_required(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    args_with_required_when = [\n        arg for arg in args\n        if arg['name'] in required_when\n    ]\n    return args_with_required_when\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    if condition:\n        return [condition(arg) for arg in args]\n    return args\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if (self._conditionally_required_when(command_name, options_spec,\n                                               arg_name) and\n                arg_name not in args):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_required_args = []\n    for arg in args:\n        if not self._is_required_when_condition(command_name, options_spec, arg):\n            conditional_required_args.append(arg)\n    return conditional_required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args\n            if (self._required_when(command_name, options_spec, arg) and\n                arg not in self._ignore_args)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    return self._get_conditionally_required_args_action(\n        command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if not self._conditionally_required_arg_match(command_name,\n                                                       options_spec,\n                                                       arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_condition(command_name, options_spec)\n    return [x for x in args if condition(x)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not options_spec or not args:\n        return args\n    conditions = options_spec.get('conditions', {})\n    args = self._get_conditionally_required_args(command_name, conditions, args)\n    if conditions.get('required_when') and args:\n        self._log.warning('required_when condition matched but no arguments '\n                          'were provided')\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._is_conditionally_required(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    args_with_required_when = [\n        arg for arg in args\n        if arg['name'] in required_when\n    ]\n    return args_with_required_when\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    if condition:\n        return [condition(arg) for arg in args]\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if args[0] is not None and args[0] > len(args[1]):\n        self._error(\"Value of '%s' is longer than length specified %d.\" % (\n            args[0], len(args[1])))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('Argument count (%s) is greater than length (%s)' %\n                   (len(args), self.length))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the list is more than specified.\")\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self._error(\"The length of the arguments is more than specified.\")\n", "def validate_length_args(self, args):\n    \"\"\"\n    Check if value of arguments is not longer than length specified.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[1] is None:\n        self.__parser.error('The length of the file is required.')\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the function argument is greater than the \"\n                   \"specified length.\")\n", "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self.send_response(400, \"Invalid length specified\")\n        self.end_headers()\n        return\n\n    self.send_response(200)\n    self.end_headers()\n", "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self._parser.error(\n            'The length of the specified argument is greater than the '\n            'length specified in the command line.'\n        )\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('The value of %s is longer than length %s.' %\n                   (args[0], self.length))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.set_status(400)\n        self.finish(\"Bad request\")\n        return\n\n    self.set_status(200)\n    self.finish(args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if args[0] is not None and args[0] > len(args[1]):\n        self._error(\"Value of '%s' is longer than length specified %d.\" % (\n            args[0], len(args[1])))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('Argument count (%s) is greater than length (%s)' %\n                   (len(args), self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the list is more than specified.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self._error(\"The length of the arguments is more than specified.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    \"\"\"\n    Check if value of arguments is not longer than length specified.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[1] is None:\n        self.__parser.error('The length of the file is required.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the function argument is greater than the \"\n                   \"specified length.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self.send_response(400, \"Invalid length specified\")\n        self.end_headers()\n        return\n\n    self.send_response(200)\n    self.end_headers()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self._parser.error(\n            'The length of the specified argument is greater than the '\n            'length specified in the command line.'\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('The value of %s is longer than length %s.' %\n                   (args[0], self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.set_status(400)\n        self.finish(\"Bad request\")\n        return\n\n    self.set_status(200)\n    self.finish(args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    if args[1] not in self.choices:\n        raise ValueError('Invalid choice \"%s\"' % args[1])\n", "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid choice for {}.'.format(self.__class__.__name__))\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid choice')\n", "def validate_choices_args(self, args):\n    if args is not None and args not in self.choices:\n        raise ValueError(\"Invalid choice '{}'\".format(args))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args[1] not in self.choices:\n        raise ValueError('Invalid choice \"%s\"' % args[1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid choice for {}.'.format(self.__class__.__name__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid choice')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args is not None and args not in self.choices:\n        raise ValueError(\"Invalid choice '{}'\".format(args))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        raise ValueError(\"Minimum value of the arguments is not greater than maximum value.\")\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] <= args[1]:\n        self._error(\"Invalid value for minimum argument\")\n", "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        args[0] = args[1]\n    return args\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args is None or args == []:\n        return\n\n    if args[0] > args[1]:\n        args[1] = args[0]\n\n    if args[0] < args[1]:\n        args[0] = args[1]\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args[0] > args[1]:\n        self.arg_parser.error(\"Minimum value is greater than maximum\")\n", "def validate_min_max_args(self, args):\n    if args[1] > args[0]:\n        return \"%s >= %s\" % (args[1], args[0])\n    elif args[1] < args[0]:\n        return \"%s <= %s\" % (args[1], args[0])\n    else:\n        return \"%s\" % args[1]\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] <= args[1]:\n        self._error(\"Minimum value of %s is smaller than maximum value of %s.\",\n                    args[0], args[1])\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args[0] > args[1]:\n        self.error(\"Minimum value is greater than maximum value\")\n", "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        args[0] = args[1]\n    return args\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] > args[1]:\n        self.__parser.error('Argument 0 is greater than Argument 1')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        raise ValueError(\"Minimum value of the arguments is not greater than maximum value.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] <= args[1]:\n        self._error(\"Invalid value for minimum argument\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        args[0] = args[1]\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args is None or args == []:\n        return\n\n    if args[0] > args[1]:\n        args[1] = args[0]\n\n    if args[0] < args[1]:\n        args[0] = args[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args[0] > args[1]:\n        self.arg_parser.error(\"Minimum value is greater than maximum\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[1] > args[0]:\n        return \"%s >= %s\" % (args[1], args[0])\n    elif args[1] < args[0]:\n        return \"%s <= %s\" % (args[1], args[0])\n    else:\n        return \"%s\" % args[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] <= args[1]:\n        self._error(\"Minimum value of %s is smaller than maximum value of %s.\",\n                    args[0], args[1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n    \"\"\"\n    if args[0] > args[1]:\n        self.error(\"Minimum value is greater than maximum value\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[0] > args[1]:\n        args[0] = args[1]\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of arguments is between minimum and maximum values.\n\n    :param args: The received arguments.\n    \"\"\"\n    if args[0] > args[1]:\n        self.__parser.error('Argument 0 is greater than Argument 1')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._complex_argument_type(subcommand, type_name, option_name,\n                                      spec_option, is_complex=True)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    return self.create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex=True)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    complex_type = self.__get_complex_type(subcommand, type_name, option_name)\n    self.__add_argument(complex_type, spec_option)\n    return complex_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex, nargs=1)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, True)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, 'complex')\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.complex_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex_type=True)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                      spec_option, self.complex_types)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # TODO: implement\n    return None\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    # type: (str, str, str, dict[str, str]) -> ComplexType\n    return self._argument_type_class(self._context, self._builder, subcommand,\n                                    type_name, option_name, spec_option)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._complex_argument_type(subcommand, type_name, option_name,\n                                      spec_option, is_complex=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    return self.create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    complex_type = self.__get_complex_type(subcommand, type_name, option_name)\n    self.__add_argument(complex_type, spec_option)\n    return complex_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex, nargs=1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self._create_argument_type(subcommand, type_name, option_name,\n                                     spec_option, 'complex')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.complex_argument_type(subcommand, type_name, option_name,\n                                     spec_option, complex_type=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return self.__create_argument_type(subcommand, type_name, option_name,\n                                      spec_option, self.complex_types)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Build the complex argument type\n    :param subcommand: the command name\n    :param type_name: the complex type name\n    :param option_name: the option name\n    :param spec_option: the option's specifications\n    :return: the complex type instance\n    \"\"\"\n    # TODO: implement\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    # type: (str, str, str, dict[str, str]) -> ComplexType\n    return self._argument_type_class(self._context, self._builder, subcommand,\n                                    type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            pass\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    custom = {}\n    nested = {}\n    if args:\n        control = args[0]\n        if 'control' in control:\n            custom = control['control']\n        if 'nested' in control:\n            nested = control['nested']\n    return custom, nested\n", "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args, {}\n    elif 'control_args' in args:\n        return args['control_args'], args['nested_args']\n    else:\n        return args, {}\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args, nested_args = self.get_nested_custom_and_control_args(arg)\n        else:\n            control_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('control', {})\n    nested_args = args.get('nested', {})\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args is not None:\n        for arg in args:\n            if isinstance(arg, dict):\n                control_args.update(arg)\n            elif isinstance(arg, list):\n                nested_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args:\n        control_args, nested_args = args[0], args[1:]\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            self.log.debug('Ignoring unknown argument: %s', arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            pass\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    custom = {}\n    nested = {}\n    if args:\n        control = args[0]\n        if 'control' in control:\n            custom = control['control']\n        if 'nested' in control:\n            nested = control['nested']\n    return custom, nested\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args, {}\n    elif 'control_args' in args:\n        return args['control_args'], args['nested_args']\n    else:\n        return args, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args, nested_args = self.get_nested_custom_and_control_args(arg)\n        else:\n            control_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('control', {})\n    nested_args = args.get('nested', {})\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args is not None:\n        for arg in args:\n            if isinstance(arg, dict):\n                control_args.update(arg)\n            elif isinstance(arg, list):\n                nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args:\n        control_args, nested_args = args[0], args[1:]\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            self.log.debug('Ignoring unknown argument: %s', arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    result = vars_dict.copy()\n    result.update(extra_vars)\n    return result\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        extra_vars = []\n    for evar in extra_vars:\n        if evar not in vars_dict:\n            vars_dict[evar] = {}\n        vars_dict[evar].update(vars_dict.pop(evar))\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    if 'extra-vars' in vars_dict:\n        vars_dict['extra-vars'].extend(extra_vars)\n    else:\n        vars_dict['extra-vars'] = extra_vars\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n    return {**vars_dict, **{'extra-vars': extra_vars}}\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    return dict(vars_dict, **{'ansible_extra_vars': extra_vars})\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars in\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n        vars_dict[extra_var] = vars_dict[extra_var] or {}\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    vars_dict.update(extra_vars)\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    result = vars_dict.copy()\n    result.update(extra_vars)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        extra_vars = []\n    for evar in extra_vars:\n        if evar not in vars_dict:\n            vars_dict[evar] = {}\n        vars_dict[evar].update(vars_dict.pop(evar))\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    if 'extra-vars' in vars_dict:\n        vars_dict['extra-vars'].extend(extra_vars)\n    else:\n        vars_dict['extra-vars'] = extra_vars\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n    return {**vars_dict, **{'extra-vars': extra_vars}}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    return dict(vars_dict, **{'ansible_extra_vars': extra_vars})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars in\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n        vars_dict[extra_var] = vars_dict[extra_var] or {}\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is not None:\n        ansible_args['verbosity'] = verbose\n    return ir_workspace.ansible(ir_plugin, playbook_path, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    ansible_args.update({\n        '--verbose': verbose or ir_workspace.verbose,\n        '--playbook': playbook_path\n    })\n    if extra_vars:\n        ansible_args.update(extra_vars)\n    return ir_workspace.ansible.playbook(\n        ir_plugin.playbook_path,\n        **ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO more options (pass in the other variables to ansible)\n    if verbose is None:\n        verbose = ir_plugin.verbose\n    if extra_vars is None:\n        extra_vars = ir_plugin.extra_vars\n    return playbook(playbook_path, ir_workspace, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is None:\n        verbose = ir_workspace.verbose\n    if playbook_path is None:\n        playbook_path = ir_plugin.playbook_path\n    ansible_args['extra_vars'] = extra_vars\n    return ansible.playbook(playbook_path, ir_workspace, verbose=verbose, **ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return {\n        'ansible_workspace': ir_workspace,\n        'ansible_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args\n    }['playbook'](playbook_path, verbose)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_run(\n        ir_workspace, ir_plugin, playbook_path,\n        verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        cmd.extend(extra_vars)\n    if ansible_args:\n        cmd.extend(ansible_args)\n    return run_ansible_playbook(ir_workspace, ir_plugin, cmd, verbose, extra_vars)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    playbook_cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        playbook_cmd.extend(extra_vars.items())\n    if ansible_args:\n        playbook_cmd.extend(ansible_args.items())\n    return run_cmd(ir_workspace, ir_plugin, playbook_cmd, verbose,\n                   extra_vars=extra_vars)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # type: (dict[str, str], InfraredWorkspace, InfraredPlugin, bool, dict[str, str], dict[str, str]) -> int\n    return _ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                            extra_vars=extra_vars, ansible_args=ansible_args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is not None:\n        ansible_args['verbosity'] = verbose\n    return ir_workspace.ansible(ir_plugin, playbook_path, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    ansible_args.update({\n        '--verbose': verbose or ir_workspace.verbose,\n        '--playbook': playbook_path\n    })\n    if extra_vars:\n        ansible_args.update(extra_vars)\n    return ir_workspace.ansible.playbook(\n        ir_plugin.playbook_path,\n        **ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO more options (pass in the other variables to ansible)\n    if verbose is None:\n        verbose = ir_plugin.verbose\n    if extra_vars is None:\n        extra_vars = ir_plugin.extra_vars\n    return playbook(playbook_path, ir_workspace, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is None:\n        verbose = ir_workspace.verbose\n    if playbook_path is None:\n        playbook_path = ir_plugin.playbook_path\n    ansible_args['extra_vars'] = extra_vars\n    return ansible.playbook(playbook_path, ir_workspace, verbose=verbose, **ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return {\n        'ansible_workspace': ir_workspace,\n        'ansible_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args\n    }['playbook'](playbook_path, verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_run(\n        ir_workspace, ir_plugin, playbook_path,\n        verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        cmd.extend(extra_vars)\n    if ansible_args:\n        cmd.extend(ansible_args)\n    return run_ansible_playbook(ir_workspace, ir_plugin, cmd, verbose, extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    playbook_cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        playbook_cmd.extend(extra_vars.items())\n    if ansible_args:\n        playbook_cmd.extend(ansible_args.items())\n    return run_cmd(ir_workspace, ir_plugin, playbook_cmd, verbose,\n                   extra_vars=extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # type: (dict[str, str], InfraredWorkspace, InfraredPlugin, bool, dict[str, str], dict[str, str]) -> int\n    return _ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                            extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_plugin.play_vars:\n        vars_dict.update(ir_plugin.play_vars)\n    return cli_args[0].run(vars_dict=vars_dict, workspace=ir_workspace)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict[\"ir_workspace\"] = ir_workspace\n    vars_dict[\"ir_plugin\"] = ir_plugin\n\n    return cli_args[0](vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    res = {}\n    for key in vars_dict:\n        res[key] = ir_plugin.run_playbook(cli_args, vars_dict[key], ir_workspace, ir_plugin)\n    return res\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict[str, str], dict[str, str], dict[str, str], str) -> dict[str, str]\n    if ir_workspace is None:\n        ir_workspace = {}\n    if ir_plugin is None:\n        ir_plugin = {}\n\n    # Create the playbook and execute it\n    playbook = Playbook(cli_args, ir_workspace, ir_plugin)\n    return playbook.run()\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args.func(ir_workspace, ir_plugin, vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], dict[str, str]) -> dict[str, str]\n    result = {}  # type: dict[str, str]\n\n    if cli_args:\n        # Execute the command\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n\n    return result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], InfraredWorkspace, InfraredPlugin) -> dict[str, str]\n    ansible_result = {}\n    ansible_result['result'] ='success'\n    ansible_result['changed'] = False\n\n    # if the plugin is not active, the plugin should return false\n    if ir_plugin.is_active():\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n        if result['result'] =='success':\n            ansible_result['changed'] = True\n            ansible_result['result'] ='success'\n        else:\n            ansible_result['changed'] = True\n            ansible_result['result'] = 'fail'\n\n    return ansible_result\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_plugin.play_vars:\n        vars_dict.update(ir_plugin.play_vars)\n    return cli_args[0].run(vars_dict=vars_dict, workspace=ir_workspace)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict[\"ir_workspace\"] = ir_workspace\n    vars_dict[\"ir_plugin\"] = ir_plugin\n\n    return cli_args[0](vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    res = {}\n    for key in vars_dict:\n        res[key] = ir_plugin.run_playbook(cli_args, vars_dict[key], ir_workspace, ir_plugin)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict[str, str], dict[str, str], dict[str, str], str) -> dict[str, str]\n    if ir_workspace is None:\n        ir_workspace = {}\n    if ir_plugin is None:\n        ir_plugin = {}\n\n    # Create the playbook and execute it\n    playbook = Playbook(cli_args, ir_workspace, ir_plugin)\n    return playbook.run()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args.func(ir_workspace, ir_plugin, vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], dict[str, str]) -> dict[str, str]\n    result = {}  # type: dict[str, str]\n\n    if cli_args:\n        # Execute the command\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], InfraredWorkspace, InfraredPlugin) -> dict[str, str]\n    ansible_result = {}\n    ansible_result['result'] ='success'\n    ansible_result['changed'] = False\n\n    # if the plugin is not active, the plugin should return false\n    if ir_plugin.is_active():\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n        if result['result'] =='success':\n            ansible_result['changed'] = True\n            ansible_result['result'] ='success'\n        else:\n            ansible_result['changed'] = True\n            ansible_result['result'] = 'fail'\n\n    return ansible_result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = type(values_dict[parser_name])(values_dict[parser_name])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in list(values_dict.items()):\n        if value is not None:\n            values_dict[key] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for k, v in list(values_dict.items()):\n        if isinstance(v, str):\n            values_dict[k] = v.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = {k: str(v) for k, v in six.iteritems(values_dict[parser_name])}\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    # TODO(sam): Implement this function.\n    pass\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key in values_dict:\n        if values_dict[key] is not None:\n            values_dict[key] = str(values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = \",\".join(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in list(values_dict.items()):\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--' + parser_name + '='):\n            values_dict[key] = values_dict[key].replace('\\'', '\\\"')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = type(values_dict[parser_name])(values_dict[parser_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in list(values_dict.items()):\n        if value is not None:\n            values_dict[key] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for k, v in list(values_dict.items()):\n        if isinstance(v, str):\n            values_dict[k] = v.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = {k: str(v) for k, v in six.iteritems(values_dict[parser_name])}\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    # TODO(sam): Implement this function.\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key in values_dict:\n        if values_dict[key] is not None:\n            values_dict[key] = str(values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = \",\".join(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in list(values_dict.items()):\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--' + parser_name + '='):\n            values_dict[key] = values_dict[key].replace('\\'', '\\\"')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'plugin_dir': plugin_dir,\n            'plugin_name': os.path.basename(plugin_dir),\n            'plugin_version': os.path.basename(plugin_dir)[:-4],\n            'plugin_description': os.path.basename(plugin_dir)[:-4],\n            'plugin_type': 'plugin',\n            'plugin_icon': None,\n            'plugin_path': None,\n            'plugin_icon_color': None,\n            'plugin_icon_size': None,\n            'plugin_icon_resizable': None,\n            'plugin_icon_tooltip': None,\n            'plugin_icon_hover': None,\n            'plugin_icon_visible': None}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\"name\": plugin_dir}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": plugin_dir.stem,\n        \"plugin_dir\": plugin_dir.replace(\"plugin_\", \"\"),\n        \"plugin_version\": \"unknown\",\n        \"plugin_author\": \"unknown\",\n        \"plugin_author_email\": \"unknown\",\n        \"plugin_author_url\": \"unknown\",\n        \"plugin_author_github_url\": \"unknown\",\n        \"plugin_author_twitter_url\": \"unknown\",\n        \"plugin_author_linkedin_url\": \"unknown\",\n        \"plugin_description\": \"unknown\",\n        \"plugin_category\": \"unknown\",\n        \"plugin_keywords\": \"unknown\",\n        \"plugin_url\": \"unknown\",\n        \"plugin_url_components\": \"unknown\",\n        \"plugin_type\": \"unknown\",\n        \"plugin_version_minor\": \"unknown\",\n        \"plugin_version_major\": \"unknown\",\n        \"plugin_version_patch\": \"unknown\",\n        \"plugin_version_full\": \"unknown\",\n        \"plugin_version_suffix\": \"unknown\",\n      ", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_flatten_dict_items(plugin_dir)}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_dir\": plugin_dir,\n        \"plugin_name\": os.path.basename(plugin_dir),\n        \"plugin_version\": get_plugin_version(plugin_dir),\n        \"plugin_status\": get_plugin_status(plugin_dir),\n        \"plugin_author\": get_plugin_author(plugin_dir),\n        \"plugin_author_email\": get_plugin_author_email(plugin_dir),\n        \"plugin_author_url\": get_plugin_author_url(plugin_dir),\n        \"plugin_description\": get_plugin_description(plugin_dir),\n        \"plugin_description_url\": get_plugin_description_url(plugin_dir),\n        \"plugin_namespace\": get_plugin_namespace(plugin_dir),\n        \"plugin_version_tag\": get_plugin_version_tag(plugin_dir),\n        \"plugin_status_tag\": get_plugin_status_tag(plugin_dir)\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    flatten_dict = {\n        'plugin_dir': plugin_dir,\n        'plugin_name': os.path.basename(plugin_dir),\n        'plugin_version': '1.0'\n    }\n    return flatten_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if isinstance(value, dict)}\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({'plugin_dir': plugin_dir})\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir.split('/')[-1],\n        'path': plugin_dir,\n        'description': None,\n        'type': 'plugin',\n       'version': '1.0',\n        'properties': {},\n        'interfaces': []\n    }\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'name': plugin_dir, 'type': 'plugin', 'properties': {}}\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'plugin_dir': plugin_dir,\n            'plugin_name': os.path.basename(plugin_dir),\n            'plugin_version': os.path.basename(plugin_dir)[:-4],\n            'plugin_description': os.path.basename(plugin_dir)[:-4],\n            'plugin_type': 'plugin',\n            'plugin_icon': None,\n            'plugin_path': None,\n            'plugin_icon_color': None,\n            'plugin_icon_size': None,\n            'plugin_icon_resizable': None,\n            'plugin_icon_tooltip': None,\n            'plugin_icon_hover': None,\n            'plugin_icon_visible': None}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\"name\": plugin_dir}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_name\": plugin_dir.stem,\n        \"plugin_dir\": plugin_dir.replace(\"plugin_\", \"\"),\n        \"plugin_version\": \"unknown\",\n        \"plugin_author\": \"unknown\",\n        \"plugin_author_email\": \"unknown\",\n        \"plugin_author_url\": \"unknown\",\n        \"plugin_author_github_url\": \"unknown\",\n        \"plugin_author_twitter_url\": \"unknown\",\n        \"plugin_author_linkedin_url\": \"unknown\",\n        \"plugin_description\": \"unknown\",\n        \"plugin_category\": \"unknown\",\n        \"plugin_keywords\": \"unknown\",\n        \"plugin_url\": \"unknown\",\n        \"plugin_url_components\": \"unknown\",\n        \"plugin_type\": \"unknown\",\n        \"plugin_version_minor\": \"unknown\",\n        \"plugin_version_major\": \"unknown\",\n        \"plugin_version_patch\": \"unknown\",\n        \"plugin_version_full\": \"unknown\",\n        \"plugin_version_suffix\": \"unknown\",\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_flatten_dict_items(plugin_dir)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        \"plugin_dir\": plugin_dir,\n        \"plugin_name\": os.path.basename(plugin_dir),\n        \"plugin_version\": get_plugin_version(plugin_dir),\n        \"plugin_status\": get_plugin_status(plugin_dir),\n        \"plugin_author\": get_plugin_author(plugin_dir),\n        \"plugin_author_email\": get_plugin_author_email(plugin_dir),\n        \"plugin_author_url\": get_plugin_author_url(plugin_dir),\n        \"plugin_description\": get_plugin_description(plugin_dir),\n        \"plugin_description_url\": get_plugin_description_url(plugin_dir),\n        \"plugin_namespace\": get_plugin_namespace(plugin_dir),\n        \"plugin_version_tag\": get_plugin_version_tag(plugin_dir),\n        \"plugin_status_tag\": get_plugin_status_tag(plugin_dir)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flatten_dict = {\n        'plugin_dir': plugin_dir,\n        'plugin_name': os.path.basename(plugin_dir),\n        'plugin_version': '1.0'\n    }\n    return flatten_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {key: value for key, value in get_plugin_spec_flatten_dict(plugin_dir).items() if isinstance(value, dict)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return flatten_dict({'plugin_dir': plugin_dir})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {\n        'name': plugin_dir.split('/')[-1],\n        'path': plugin_dir,\n        'description': None,\n        'type': 'plugin',\n       'version': '1.0',\n        'properties': {},\n        'interfaces': []\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return {'name': plugin_dir, 'type': 'plugin', 'properties': {}}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    \n    \n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = 'config'\n", "def inject_config(self):\n    \n    \n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = '.'\n", "def inject_config(self):\n    \n    \n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = '.'", "def inject_config(self):\n    \"\"\"\n    Set the environment variable for config path, if it is undefined.\n    \"\"\"\n    if self.config_path:\n        os.environ['CONFIG_PATH'] = self.config_path\n", "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = os.path.join(self.get_env_path(), 'config.json')\n", "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = '/etc/pyramid_kafka.conf'\n        self.config_dir = '/etc'\n", "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = os.environ.get('CONFIG')\n    return self\n", "def inject_config(self):\n    if not self.config_path:\n        self.config_path = '/etc/raddb.conf'\n", "def inject_config(self):\n    \n    \n    if not self.config:\n        self.config = os.environ.get('CONFIG', '')\n    return self\n", "def inject_config(self):\n    \n    \n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = '/etc/infra'\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    \n    \n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = 'config'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    \n    \n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = '.'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    \n    \n    if 'CONFIG' not in os.environ:\n        os.environ['CONFIG'] = '.'", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    \"\"\"\n    Set the environment variable for config path, if it is undefined.\n    \"\"\"\n    if self.config_path:\n        os.environ['CONFIG_PATH'] = self.config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = os.path.join(self.get_env_path(), 'config.json')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = '/etc/pyramid_kafka.conf'\n        self.config_dir = '/etc'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if self.config_path is None:\n        self.config_path = os.environ.get('CONFIG')\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not self.config_path:\n        self.config_path = '/etc/raddb.conf'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if not self.config:\n        self.config = os.environ.get('CONFIG', '')\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    \n    \n    if 'CONFIG_PATH' not in os.environ:\n        os.environ['CONFIG_PATH'] = '/etc/infra'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(self.name, help=self.help)\n    self._add_arguments(self._cli_parser)\n", "def extend_cli(self, root_subparsers):\n    self._add_common_cli(root_subparsers)\n    self._add_common_opts(root_subparsers)\n    self._add_server_opts(root_subparsers)\n", "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        'account-groups',\n        help=textwrap.fill('List account groups.', width=self.max_x)\n    )\n    subparser.set_defaults(command=self.handle)\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    self.subparsers = root_subparsers.add_parser('debug', help='Debug the spec.')\n    self.subparsers.add_argument('--version', action='version', version='%(prog)s {}'.format(self.__version__))\n", "def extend_cli(self, root_subparsers):\n    # TODO: Add support for \"--help\" and \"-h\"\n    pass\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\"spec\", help=\"Print the spec for a package.\")\n    parser.add_argument(\"package\", help=\"The package to show.\")\n    parser.set_defaults(func=self._spec)\n", "def extend_cli(self, root_subparsers):\n    self._cli.extend(root_subparsers)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(self.name, help=self.help)\n    self._add_arguments(self._cli_parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._add_common_cli(root_subparsers)\n    self._add_common_opts(root_subparsers)\n    self._add_server_opts(root_subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        'account-groups',\n        help=textwrap.fill('List account groups.', width=self.max_x)\n    )\n    subparser.set_defaults(command=self.handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.subparsers = root_subparsers.add_parser('debug', help='Debug the spec.')\n    self.subparsers.add_argument('--version', action='version', version='%(prog)s {}'.format(self.__version__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # TODO: Add support for \"--help\" and \"-h\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\"spec\", help=\"Print the spec for a package.\")\n    parser.add_argument(\"package\", help=\"The package to show.\")\n    parser.set_defaults(func=self._spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli.extend(root_subparsers)\n", "is_pass": false, "return_code": 1}]}
