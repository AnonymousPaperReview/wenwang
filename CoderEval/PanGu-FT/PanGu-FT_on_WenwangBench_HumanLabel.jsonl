{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = time.timezone\n\n    seconds = nanoseconds // (10 ** 6)\n    nanoseconds %= (10 ** 6)\n\n    return time.gmtime(seconds + nanoseconds // 1000000, tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.utc\n    return (datetime.datetime(1970, 1, 1, tzinfo=pytz.utc).replace(tzinfo=pytz.utc) +\n            datetime.timedelta(seconds=nanoseconds // 1000000))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if not nanoseconds:\n        return None\n    if tz is None:\n        tz = timezone.utc\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        return datetime.utcfromtimestamp(nanoseconds / 1000000).isoformat()\n    return datetime.utcfromtimestamp(nanoseconds / 1000000).astimezone(tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        tz = timezone.get_current_timezone()\n    return tz.normalize(tz.localize(datetime.utcfromtimestamp(nanoseconds)))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds == 0:\n        return 0\n    return timedelta(microseconds=nanoseconds // 1000000, tzinfo=tz)\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone('US/Eastern')\n    return tz.localize(datetime.datetime.fromtimestamp(nanoseconds / 10**9))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if not nanoseconds:\n        return None\n    if tz is None:\n        tz = pytz.utc\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000, tz=tz))\n", "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000000, tz))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = time.timezone\n\n    seconds = nanoseconds // (10 ** 6)\n    nanoseconds %= (10 ** 6)\n\n    return time.gmtime(seconds + nanoseconds // 1000000, tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.utc\n    return (datetime.datetime(1970, 1, 1, tzinfo=pytz.utc).replace(tzinfo=pytz.utc) +\n            datetime.timedelta(seconds=nanoseconds // 1000000))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if not nanoseconds:\n        return None\n    if tz is None:\n        tz = timezone.utc\n    return tz.localize(datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        return datetime.utcfromtimestamp(nanoseconds / 1000000).isoformat()\n    return datetime.utcfromtimestamp(nanoseconds / 1000000).astimezone(tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds is None:\n        return None\n    if tz is None:\n        tz = timezone.get_current_timezone()\n    return tz.normalize(tz.localize(datetime.utcfromtimestamp(nanoseconds)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if nanoseconds == 0:\n        return 0\n    return timedelta(microseconds=nanoseconds // 1000000, tzinfo=tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone('US/Eastern')\n    return tz.localize(datetime.datetime.fromtimestamp(nanoseconds / 10**9))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if not nanoseconds:\n        return None\n    if tz is None:\n        tz = pytz.utc\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000, tz=tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    \"\"\"\n    Convert nanoseconds to a time in fixed format.\n    \"\"\"\n    if tz is None:\n        tz = pytz.timezone(\"UTC\")\n    return tz.localize(datetime.fromtimestamp(nanoseconds // 1000000000, tz))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    if value is None:\n        return None\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"Use the value in timedelta to generate the Structure class.\"\"\"\n    return value.total_seconds()\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return \"%d days\" % value.days\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    return {'seconds': value.total_seconds()}\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return value.total_seconds() // (60 * 60 * 24)\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return int(value.total_seconds() * 1000)\n", "def dehydrate_timedelta(value):\n    \n    \n    return {\n        'days': value.days,\n       'seconds': value.seconds,\n       'microseconds': value.microseconds,\n    }\n", "def dehydrate_timedelta(value):\n    return value.total_seconds() * (60 * 60)\n", "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return value.total_seconds()\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    if value is None:\n        return None\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"Use the value in timedelta to generate the Structure class.\"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return \"%d days\" % value.days\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return {'seconds': value.total_seconds()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return value.total_seconds() // (60 * 60 * 24)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return int(value.total_seconds() * 1000)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \n    \n    return {\n        'days': value.days,\n       'seconds': value.seconds,\n       'microseconds': value.microseconds,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return value.total_seconds() * (60 * 60)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"\"\"\n    Use the value in timedelta to generate the Structure class.\n    \"\"\"\n    return value.total_seconds()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return dehydrate_time_structure(value)\n", "def dehydrate_time(value):\n    return [value.year, value.month, value.day]\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return ', '.join([\n        '%s (%s)' % (t.start_time.strftime('%Y-%m-%d %H:%M:%S'), t.name)\n        for t in value.times\n    ])\n", "def dehydrate_time(value):\n    \"\"\" Use ticks in the Time class to generate the Structure class. \"\"\"\n    return [value.year, value.month, value.day, value.hour, value.minute, value.second]\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return {\n        \"0\": \"08:00\",\n        \"1\": \"09:00\",\n        \"2\": \"03:30\",\n        \"3\": \"03:30\",\n        \"4\": \"07:30\",\n        \"5\": \"03:30\",\n        \"6\": \"08:00\",\n        \"7\": \"09:00\",\n        \"8\": \"03:30\",\n        \"9\": \"03:30\",\n    }[value]\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return '{:.9f}'.format(value)\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day]\n", "def dehydrate_time(value):\n    \n    \n    return '<span class=\"time\">{}</span>'.format(value)\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day]\n", "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day, value.hour, value.minute,\n            value.second, value.microsecond]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return dehydrate_time_structure(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return [value.year, value.month, value.day]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return ', '.join([\n        '%s (%s)' % (t.start_time.strftime('%Y-%m-%d %H:%M:%S'), t.name)\n        for t in value.times\n    ])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\" Use ticks in the Time class to generate the Structure class. \"\"\"\n    return [value.year, value.month, value.day, value.hour, value.minute, value.second]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return {\n        \"0\": \"08:00\",\n        \"1\": \"09:00\",\n        \"2\": \"03:30\",\n        \"3\": \"03:30\",\n        \"4\": \"07:30\",\n        \"5\": \"03:30\",\n        \"6\": \"08:00\",\n        \"7\": \"09:00\",\n        \"8\": \"03:30\",\n        \"9\": \"03:30\",\n    }[value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return '{:.9f}'.format(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \n    \n    return '<span class=\"time\">{}</span>'.format(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"\"\"\n    Use ticks in the Time class to generate the Structure class.\n    \"\"\"\n    return [value.year, value.month, value.day, value.hour, value.minute,\n            value.second, value.microsecond]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return {\n        0: 'No Point',\n        1: 'Multiple Points',\n        2: 'Single Point'\n    }.get(value)\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return {\n        0: 'Point',\n        1: 'Points',\n        2: 'Point Per Point',\n        3: 'Point Per Point and Point Per Point',\n        4: 'Points Per Point',\n        5: 'Points Per Point and Point Per Point and Points',\n        6: 'Points Per Point and Point Per Point and Points Per Point',\n        7: 'Points Per Point and Point Per Point and Points Per Point',\n        8: 'Points Per Point and Point Per Point and Points Per Point',\n        9: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        10: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        11: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        12: 'Points Per Point and Point Per Point and Points Per Point and Points Per Point',\n        13: 'Points Per Point and Point", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return 'point({})'.format(value)\n", "def dehydrate_point(value):\n    \"\"\" The structure class is generated based on the value length. \"\"\"\n    return {\n        'point': 'Point',\n        'line': 'Line',\n        'polygon': 'Polygon',\n       'multipoint': 'MultiPoint'\n    }.get(value, 'Point')\n", "def dehydrate_point(value):\n    return value if len(value) <= 63 else value[:63] + '...'\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.    \"\"\"\n    if value > 0x8000:\n        return '%x-%x' % (value - 0x8000, 0x10000)\n    else:\n        return '0x%x' % value\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length. \n\n    \"\"\"\n    return {\n        'point': 'Point',\n        'points': 'Points',\n        'line': 'Line',\n        'line_segment': 'LineSegment',\n        'line_segment_start': 'LineSegmentStart',\n        'line_segment_end': 'LineSegmentEnd',\n        'curve': 'Curve',\n        'curve_segment': 'CurveSegment',\n        'curve_segment_start': 'CurveSegmentStart',\n        'curve_segment_end': 'CurveSegmentEnd',\n    }.get(value, 'Point')\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.               \"\"\"\n    if value >= 0x1000:\n        return '%s (%s)' % (value, 'unsigned long')\n    else:\n        return '%s (%d)' % (value, value // 0x1000)\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return value * 2\n", "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return value * 2\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return {\n        0: 'No Point',\n        1: 'Multiple Points',\n        2: 'Single Point'\n    }.get(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return {\n        0: 'Point',\n        1: 'Points',\n        2: 'Point Per Point',\n        3: 'Point Per Point and Point Per Point',\n        4: 'Points Per Point',\n        5: 'Points Per Point and Point Per Point and Points',\n        6: 'Points Per Point and Point Per Point and Points Per Point',\n        7: 'Points Per Point and Point Per Point and Points Per Point',\n        8: 'Points Per Point and Point Per Point and Points Per Point',\n        9: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        10: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        11: 'Points Per Point and Point Per Point and Points Per Point and Points',\n        12: 'Points Per Point and Point Per Point and Points Per Point and Points Per Point',\n        13: 'Points Per Point and Point", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return 'point({})'.format(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\" The structure class is generated based on the value length. \"\"\"\n    return {\n        'point': 'Point',\n        'line': 'Line',\n        'polygon': 'Polygon',\n       'multipoint': 'MultiPoint'\n    }.get(value, 'Point')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    return value if len(value) <= 63 else value[:63] + '...'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.    \"\"\"\n    if value > 0x8000:\n        return '%x-%x' % (value - 0x8000, 0x10000)\n    else:\n        return '0x%x' % value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length. \n\n    \"\"\"\n    return {\n        'point': 'Point',\n        'points': 'Points',\n        'line': 'Line',\n        'line_segment': 'LineSegment',\n        'line_segment_start': 'LineSegmentStart',\n        'line_segment_end': 'LineSegmentEnd',\n        'curve': 'Curve',\n        'curve_segment': 'CurveSegment',\n        'curve_segment_start': 'CurveSegmentStart',\n        'curve_segment_end': 'CurveSegmentEnd',\n    }.get(value, 'Point')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.               \"\"\"\n    if value >= 0x1000:\n        return '%s (%s)' % (value, 'unsigned long')\n    else:\n        return '%s (%d)' % (value, value // 0x1000)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return value * 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    \"\"\"\n    The structure class is generated based on the value length.\n    \"\"\"\n    return value * 2\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return [\"__keys\", list(self.__dict__.keys())]\n", "def keys(self):\n    return [\"__keys\", list(self.__dict__.keys())]", "def keys(self):\n    return [key for key in self.__keys]", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    \n    \n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    \"\"\" Returns the __keys property of a class as a List \"\"\"\n    return list(self.__dict__.keys())\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return [\"__keys\", list(self.__dict__.keys())]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return [\"__keys\", list(self.__dict__.keys())]", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return [key for key in self.__keys]", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \n    \n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    \"\"\" Returns the __keys property of a class as a List \"\"\"\n    return list(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version == 0x0100:\n        return {0x0100: cls._read_status_request}\n    else:\n        return {0x0100: cls._read_status_reply}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version == 1:\n        return [(\"bolt\", \"bolt.h\")]\n    elif protocol_version == 2:\n        return [(\"bolt\", \"bolt.c\"), (\"bolt\", \"bolt.h\")]\n    else:\n        return []\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.protocol_version\n    return {\n        1: \"bolt://\",\n        2: \"bolt:///\",\n        3: \"bolt:///tcp\",\n        4: \"bolt:///tcp::inproc\",\n        5: \"bolt:///tcp::io\",\n        6: \"bolt:///tcp::io:\",\n        7: \"bolt:///tcp::io::\",\n        8: \"bolt:///tcp::io:::\",\n        9: \"bolt:///tcp::io::::\",\n    }.get(protocol_version, \"bolt://\")\n", "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Returns a list of Bolt protocol handlers based on the value of\n    protocol_version. The protocol_version should be an integer from\n    1 to 7 (inclusive).\n    \"\"\"\n    protocol_handlers = []\n    for v in range(1, 8):\n        protocol_handlers.append(cls(v))\n    return protocol_handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the value\n    of protocol_version. \n\n    :param cls: The class to be instantiated\n    :param protocol_version: The protocol version to be used\n    :return: A dictionary of handlers for the given protocol version\n    \"\"\"\n    handlers = {\n        0: cls.get_sys_info,\n        1: cls.get_uptime,\n        2: cls.get_temp,\n        3: cls.get_cpu_count,\n        4: cls.get_mem_info,\n        5: cls.get_net_info,\n        6: cls.get_disk_info,\n        7: cls.get_diskio_info,\n        8: cls.get_fs_info,\n        9: cls.get_sys_info,\n    }\n\n    if protocol_version is not None:\n        return handlers.get(protocol_version, lambda x: x)()\n    else:\n        return handlers\n", "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. \n    \"\"\"\n    return [\n        ('http', 'http', '1.0', '1.0'),\n        ('https', 'https', '1.1', '1.1'),\n        ('ftp', 'ftp', '1.1', '1.1'),\n        ('sftp','sftp', '1.1', '1.1'),\n        ('ssh','ssh', '1.1', '1.1'),\n    ]\n", "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. This function should return a list of\n    protocol handlers supported by this protocol.\n    \"\"\"\n    if protocol_version is None:\n        protocol_version = 1\n    return [\n        __import__('serial.tools.list_ports.*', fromlist=['*']),\n        __import__('serial.tools.list_comports.*', fromlist=['*']),\n        __import__('serial.tools.list_serials.*', fromlist=['*']),\n        __import__('serial.tools.list_times.*', fromlist=['*']),\n        __import__('serial.tools.list_status.*', fromlist=['*']),\n        __import__('serial.tools.list_relays.*', fromlist=['*']),\n        __import__('serial.tools.list_serial_ports.*', fromlist=['*']),\n        __import__('serial.tools.list_arduino.*', fromlist=['*']),\n  ", "def protocol_handlers(cls, protocol_version=None):\n    return [(\"bolt\", \"Bolt\"),\n            (\"hal\", \"Hal\"),\n            (\"tcp\", \"Tcp\"),\n            (\"udp\", \"Udp\"),\n            (\"ssh\", \"Ssh\"),\n            (\"tcp_sniff\", \"Tcp_Sniff\"),\n            (\"udp_sniff\", \"Udp_Sniff\"),\n            (\"ssh_sniff\", \"Ssh_Sniff\"),\n            (\"tcp_sniff_ssh\", \"Tcp_Sniff_Ssh\"),\n            (\"udp_sniff_ssh\", \"Udp_Sniff_Ssh\"),\n            (\"ssh_sniff_tcp\", \"Ssh_Sniff_Tcp\")][protocol_version]\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return {\n        1: [\"bolt.protocol.v1.protocol.v1p0\", \"bolt.protocol.v1.protocol.v1p1\"],\n        2: [\"bolt.protocol.v2.protocol.v2p0\", \"bolt.protocol.v2.protocol.v2p1\"],\n        3: [\"bolt.protocol.v3.protocol.v3p0\", \"bolt.protocol.v3.protocol.v3p1\"],\n        4: [\"bolt.protocol.v4.protocol.v4p0\", \"bolt.protocol.v4.protocol.v4p1\"],\n    }.get(protocol_version, [])\n", "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. \n\n    @param cls: class of protocol handler\n    @param protocol_version: protocol version number (0-255)\n\n    @return: list of tuples (protocol_handler, protocol_handler_args)\n    \"\"\"\n    # TODO implement\n    pass\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version == 0x0100:\n        return {0x0100: cls._read_status_request}\n    else:\n        return {0x0100: cls._read_status_reply}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version == 1:\n        return [(\"bolt\", \"bolt.h\")]\n    elif protocol_version == 2:\n        return [(\"bolt\", \"bolt.c\"), (\"bolt\", \"bolt.h\")]\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.protocol_version\n    return {\n        1: \"bolt://\",\n        2: \"bolt:///\",\n        3: \"bolt:///tcp\",\n        4: \"bolt:///tcp::inproc\",\n        5: \"bolt:///tcp::io\",\n        6: \"bolt:///tcp::io:\",\n        7: \"bolt:///tcp::io::\",\n        8: \"bolt:///tcp::io:::\",\n        9: \"bolt:///tcp::io::::\",\n    }.get(protocol_version, \"bolt://\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Returns a list of Bolt protocol handlers based on the value of\n    protocol_version. The protocol_version should be an integer from\n    1 to 7 (inclusive).\n    \"\"\"\n    protocol_handlers = []\n    for v in range(1, 8):\n        protocol_handlers.append(cls(v))\n    return protocol_handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the value\n    of protocol_version. \n\n    :param cls: The class to be instantiated\n    :param protocol_version: The protocol version to be used\n    :return: A dictionary of handlers for the given protocol version\n    \"\"\"\n    handlers = {\n        0: cls.get_sys_info,\n        1: cls.get_uptime,\n        2: cls.get_temp,\n        3: cls.get_cpu_count,\n        4: cls.get_mem_info,\n        5: cls.get_net_info,\n        6: cls.get_disk_info,\n        7: cls.get_diskio_info,\n        8: cls.get_fs_info,\n        9: cls.get_sys_info,\n    }\n\n    if protocol_version is not None:\n        return handlers.get(protocol_version, lambda x: x)()\n    else:\n        return handlers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. \n    \"\"\"\n    return [\n        ('http', 'http', '1.0', '1.0'),\n        ('https', 'https', '1.1', '1.1'),\n        ('ftp', 'ftp', '1.1', '1.1'),\n        ('sftp','sftp', '1.1', '1.1'),\n        ('ssh','ssh', '1.1', '1.1'),\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. This function should return a list of\n    protocol handlers supported by this protocol.\n    \"\"\"\n    if protocol_version is None:\n        protocol_version = 1\n    return [\n        __import__('serial.tools.list_ports.*', fromlist=['*']),\n        __import__('serial.tools.list_comports.*', fromlist=['*']),\n        __import__('serial.tools.list_serials.*', fromlist=['*']),\n        __import__('serial.tools.list_times.*', fromlist=['*']),\n        __import__('serial.tools.list_status.*', fromlist=['*']),\n        __import__('serial.tools.list_relays.*', fromlist=['*']),\n        __import__('serial.tools.list_serial_ports.*', fromlist=['*']),\n        __import__('serial.tools.list_arduino.*', fromlist=['*']),\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return [(\"bolt\", \"Bolt\"),\n            (\"hal\", \"Hal\"),\n            (\"tcp\", \"Tcp\"),\n            (\"udp\", \"Udp\"),\n            (\"ssh\", \"Ssh\"),\n            (\"tcp_sniff\", \"Tcp_Sniff\"),\n            (\"udp_sniff\", \"Udp_Sniff\"),\n            (\"ssh_sniff\", \"Ssh_Sniff\"),\n            (\"tcp_sniff_ssh\", \"Tcp_Sniff_Ssh\"),\n            (\"udp_sniff_ssh\", \"Udp_Sniff_Ssh\"),\n            (\"ssh_sniff_tcp\", \"Ssh_Sniff_Tcp\")][protocol_version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return {\n        1: [\"bolt.protocol.v1.protocol.v1p0\", \"bolt.protocol.v1.protocol.v1p1\"],\n        2: [\"bolt.protocol.v2.protocol.v2p0\", \"bolt.protocol.v2.protocol.v2p1\"],\n        3: [\"bolt.protocol.v3.protocol.v3p0\", \"bolt.protocol.v3.protocol.v3p1\"],\n        4: [\"bolt.protocol.v4.protocol.v4p0\", \"bolt.protocol.v4.protocol.v4p1\"],\n    }.get(protocol_version, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"\"\"\n    Different forms of Bolt protocol handlers are returned based on the\n    value of protocol_version. \n\n    @param cls: class of protocol handler\n    @param protocol_version: protocol version number (0-255)\n\n    @return: list of tuples (protocol_handler, protocol_handler_args)\n    \"\"\"\n    # TODO implement\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        func.__unit_of_work__ = True\n        func.__metadata__ = metadata or {}\n        func.__timeout__ = timeout or DEFAULT_TIMEOUT\n        return func\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        \"\"\"Decorator with metadata and timeout attributes.\"\"\"\n        func.__unit_of_work__ = metadata or {}\n        func.__timeout__ = timeout or 10\n        return func\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        \"\"\"Add the decorated function to the queue.\"\"\"\n        func.queue = func.__name__\n        func.__queue__ = func.queue\n        func.__name__ = func.__qualname__\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n    return _DecoratorWithMetadataAndTimeout(metadata, timeout)\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        \"\"\"Adds decorated function to the registry.\"\"\"\n        # pylint: disable=missing-docstring\n        if func not in REGISTRY:\n            REGISTRY[func] = (func, metadata, timeout)\n        return REGISTRY[func]\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        \"\"\"Creates a decorated function.\"\"\"\n        if not hasattr(func, \"__unit_of_work__\"):\n            func.__unit_of_work__ = {}\n        func.__unit_of_work__[\"timeout\"] = timeout\n        func.__unit_of_work__[\"metadata\"] = metadata\n        return func\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    Returns a decorator with metadata and timeout attributes.\n    \"\"\"\n    def decorator(func):\n        \"\"\"\n        Adds a new decorated function to the collection of decorated functions.\n        \"\"\"\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        return MethodType(func, None, func.__name__)\n\n    if metadata is not None:\n        decorator.metadata = metadata\n    if timeout is not None:\n        decorator.timeout = timeout\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    Returns a decorator with metadata and timeout attributes.\n    \"\"\"\n\n    def decorator(func):\n        \"\"\"\n        Adds a function to the task queue and returns a new function.\n        \"\"\"\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\"\n            Wrapper function for the decorated function.\n            \"\"\"\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        func.__unit_of_work__ = True\n        func.__metadata__ = metadata or {}\n        func.__timeout__ = timeout or DEFAULT_TIMEOUT\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        \"\"\"Decorator with metadata and timeout attributes.\"\"\"\n        func.__unit_of_work__ = metadata or {}\n        func.__timeout__ = timeout or 10\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        \"\"\"Add the decorated function to the queue.\"\"\"\n        func.queue = func.__name__\n        func.__queue__ = func.queue\n        func.__name__ = func.__qualname__\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n    return _DecoratorWithMetadataAndTimeout(metadata, timeout)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        \"\"\"Adds decorated function to the registry.\"\"\"\n        # pylint: disable=missing-docstring\n        if func not in REGISTRY:\n            REGISTRY[func] = (func, metadata, timeout)\n        return REGISTRY[func]\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        \"\"\"Creates a decorated function.\"\"\"\n        if not hasattr(func, \"__unit_of_work__\"):\n            func.__unit_of_work__ = {}\n        func.__unit_of_work__[\"timeout\"] = timeout\n        func.__unit_of_work__[\"metadata\"] = metadata\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    Returns a decorator with metadata and timeout attributes.\n    \"\"\"\n    def decorator(func):\n        \"\"\"\n        Adds a new decorated function to the collection of decorated functions.\n        \"\"\"\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n\n    def decorator(func):\n        func.metadata = metadata\n        func.timeout = timeout\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"Returns a decorator with metadata and timeout attributes.\"\"\"\n\n    def decorator(func):\n        return MethodType(func, None, func.__name__)\n\n    if metadata is not None:\n        decorator.metadata = metadata\n    if timeout is not None:\n        decorator.timeout = timeout\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    \"\"\"\n    Returns a decorator with metadata and timeout attributes.\n    \"\"\"\n\n    def decorator(func):\n        \"\"\"\n        Adds a function to the task queue and returns a new function.\n        \"\"\"\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\"\n            Wrapper function for the decorated function.\n            \"\"\"\n            return func(*args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    \"\"\" Returns the key in the form of int. \"\"\"\n    return key % self.size\n", "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return int(key)\n", "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return key >> self._shift\n", "def index(self, key):\n    \"\"\"Returns the key in the form of int.\n    \"\"\"\n    return key % self.size\n", "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return int(key) if key is not None else 0\n", "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return self.keys.index(key)\n", "def index(self, key):\n    return key % self._size\n", "def index(self, key):\n    return key % self.n", "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return key % self.size\n", "def index(self, key):\n    \"\"\"Returns the key in the form of int.\n    \"\"\"\n    return key % self.m\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    \"\"\" Returns the key in the form of int. \"\"\"\n    return key % self.size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return int(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return key >> self._shift\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"Returns the key in the form of int.\n    \"\"\"\n    return key % self.size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return int(key) if key is not None else 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return self.keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return key % self._size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return key % self.n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"\n    Returns the key in the form of int.\n    \"\"\"\n    return key % self.size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    \"\"\"Returns the key in the form of int.\n    \"\"\"\n    return key % self.m\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "def values(self, *keys):\n    return [self[key] for key in keys]\n", "def values(self, *keys):\n    \n    \n    return [self[key] for key in keys]\n", "def values(self, *keys):\n    return [self[k] for k in keys]", "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "def values(self, *keys):\n    \"\"\"Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return list(self.__getitem__(keys))\n", "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n", "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n", "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \n    \n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self[k] for k in keys]", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[k] for k in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return list(self.__getitem__(keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    \"\"\"\n    Returns the key filtered by self.index in the form of a list.\n    \"\"\"\n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return tuple(self._transform(keys))\n", "def data(self, *keys):\n    \"\"\"Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return tuple(self._data[key] for key in keys)\n", "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class. \n    \"\"\"\n    return keys\n", "def data(self, *keys):\n    return keys\n", "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return tuple(self._data.get(key, []) for key in keys)\n", "def data(self, *keys):\n    return tuple(self._data.get(k, k) for k in keys)\n", "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n", "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the\n    RecordExporter class.\n    \"\"\"\n    return [self._transform(key) for key in keys]\n", "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n", "def data(self, *keys):\n    \"\"\"Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return tuple(self._transform(keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return tuple(self._data[key] for key in keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class. \n    \"\"\"\n    return keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return tuple(self._data.get(key, []) for key in keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return tuple(self._data.get(k, k) for k in keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the\n    RecordExporter class.\n    \"\"\"\n    return [self._transform(key) for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"\n    Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    \"\"\"Returns the keys processed by the transform method of the RecordExporter\n    class.\n    \"\"\"\n    return keys\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data[-2:]\n", "def pop_u16(self):\n    return self.data.pop(-2)", "def pop_u16(self):\n    return self.data[-2:]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return struct.unpack('<H', self.data[-2:])[0]\n", "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data[-2:]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data[-2:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data.pop(-2)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    return self.data[-2:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data.pop(-2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return struct.unpack('<H', self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    \"\"\"\n    Remove the last two elements in self.data and return\n    \"\"\"\n    return self.data[-2:]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append({\n        'type': 'discard',\n        'n': n,\n        'qid': qid,\n        'dehydration_hooks': dehydration_hooks,\n        'hydration_hooks': hydration_hooks,\n        **handlers\n    })\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(_Discard(n, qid, dehydration_hooks, hydration_hooks,\n                                 handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, **handlers))\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_to_output(self._response_class(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append('DISCARD', n, qid, dehydration_hooks, hydration_hooks, **handlers)"], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.output.append({\n        'type': 'discard',\n        'n': n,\n        'qid': qid,\n        'dehydration_hooks': dehydration_hooks,\n        'hydration_hooks': hydration_hooks,\n        **handlers\n    })\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(_Discard(n, qid, dehydration_hooks, hydration_hooks,\n                                 handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, **handlers))\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    return self._enqueue('discard', n, qid, dehydration_hooks, hydration_hooks, handlers)", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._add_to_output(self._response_class(n, qid, dehydration_hooks, hydration_hooks, **handlers))", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self.append(Discard(n, qid, dehydration_hooks, hydration_hooks, **handlers))\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    self._append('DISCARD', n, qid, dehydration_hooks, hydration_hooks, **handlers)", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n        \"BEGIN\",\n        timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        metadata=metadata,\n        bookmarks=bookmarks,\n        handlers=handlers,\n        mode=mode)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(transactions.Begin(mode=mode, bookmarks=bookmarks,\n                                         metadata=metadata, timeout=timeout,\n                                         db=db, imp_user=imp_user,\n                                         dehydration_hooks=dehydration_hooks,\n                                         hydration_hooks=hydration_hooks, **handlers))\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEG', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self.append(Transaction('BEGIN', mode, bookmarks, metadata, timeout,\n                                 db, imp_user, dehydration_hooks, hydration_hooks,\n                                 handlers))\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(TransactionType.BEGIN, mode, bookmarks, metadata, timeout,\n                       db, imp_user, dehydration_hooks,\n                       hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', timeout, metadata, bookmarks, db, imp_user,\n                        dehydration_hooks, hydration_hooks, handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n                \"BEGIN\", mode=mode, bookmarks=bookmarks, metadata=metadata,\n                timeout=timeout, db=db, imp_user=imp_user,\n                dehydration_hooks=dehydration_hooks,\n                hydration_hooks=hydration_hooks, **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user,\n                       dehydration_hooks, hydration_hooks, handlers)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n        \"BEGIN\",\n        timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        metadata=metadata,\n        bookmarks=bookmarks,\n        handlers=handlers,\n        mode=mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(transactions.Begin(mode=mode, bookmarks=bookmarks,\n                                         metadata=metadata, timeout=timeout,\n                                         db=db, imp_user=imp_user,\n                                         dehydration_hooks=dehydration_hooks,\n                                         hydration_hooks=hydration_hooks, **handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEG', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout,\n                        db, imp_user, dehydration_hooks,\n                        hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self.append(Transaction('BEGIN', mode, bookmarks, metadata, timeout,\n                                 db, imp_user, dehydration_hooks, hydration_hooks,\n                                 handlers))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append(TransactionType.BEGIN, mode, bookmarks, metadata, timeout,\n                       db, imp_user, dehydration_hooks,\n                       hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', timeout, metadata, bookmarks, db, imp_user,\n                        dehydration_hooks, hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._new_transaction(\n                \"BEGIN\", mode=mode, bookmarks=bookmarks, metadata=metadata,\n                timeout=timeout, db=db, imp_user=imp_user,\n                dehydration_hooks=dehydration_hooks,\n                hydration_hooks=hydration_hooks, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    return self._append('BEGIN', mode, bookmarks, metadata, timeout, db, imp_user,\n                       dehydration_hooks, hydration_hooks, handlers)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return n + (n % 2 == 0)\n", "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number\n    \"\"\"\n    return (n + 0.5) / 2\n", "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number up to a even multiple of 2\n    \"\"\"\n    return (n + 0.5) * 2\n", "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number\n    \"\"\"\n    return n // 2 * 2\n", "def round_half_to_even(n):\n    \"\"\"Round a floating-point number to an even number\"\"\"\n    return n - (n % 2)\n", "def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return (n // 2) * 2\n", "def round_half_to_even(n):\n    \"\"\" Round a floating-point number \"\"\"\n    return (n + 0.5) / 2\n", "def round_half_to_even(n):\n    \"\"\" Round a floating-point number \"\"\"\n    return (n + 0.5) * 2\n", "def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return ((n + 0.5) * 2) / 2\n", "def round_half_to_even(n):\n    return round(n - 0.5, 2)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return n + (n % 2 == 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number\n    \"\"\"\n    return (n + 0.5) / 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number up to a even multiple of 2\n    \"\"\"\n    return (n + 0.5) * 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"\n    Round a floating-point number\n    \"\"\"\n    return n // 2 * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"Round a floating-point number to an even number\"\"\"\n    return n - (n % 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return (n // 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    \"\"\" Round a floating-point number \"\"\"\n    return (n + 0.5) / 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"\"\" Round a floating-point number \"\"\"\n    return (n + 0.5) * 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    \"\"\"Round a floating-point number\"\"\"\n    return ((n + 0.5) * 2) / 2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return round(n - 0.5, 2)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    return type(\n        f\"{name}Point\",\n        (Point,),\n        {\"__module__\": \"django.db.models\", \"srid\": srid_map[\"SRID\"], \"name\": name}\n    )(**fields)\n", "def point_type(name, fields, srid_map):\n    return {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map\n    }\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (object,), {\n        '__module__': 'django.contrib.gis.db.models',\n        '__fields__': fields,\n       'srid': srid_map[fields[0]],\n    })\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type('%sPoint' % name, (BasePoint,), {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map,\n    })\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type('Point', (object,), {\n        'name': name,\n        'fields': fields,\n       'srid': srid_map['SRID'],\n    })\n", "def point_type(name, fields, srid_map):\n    return type('%sPoint' % name, (object,), {\n        '__module__': 'django.contrib.gis.db.models',\n        '__fields__': fields,\n        '__srid__': srid_map['srid'],\n    })\n", "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically Generating Point Class\n    \"\"\"\n    point = {\n        'type': 'Point',\n        'coordinates': [\n            [name, fields[0][0], fields[0][1], fields[0][2]],\n            [name, fields[1][0], fields[1][1], fields[1][2]],\n            [name, fields[2][0], fields[2][1], fields[2][2]],\n        ],\n    }\n    return point\n", "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (BasePoint,), {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "def point_type(name, fields, srid_map):\n    return type(name, fields, {'srid': srid_map['srid']})\n", "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically Generating Point Class\n    \"\"\"\n    return type(name, fields, {'srid': srid_map[fields[0]]})\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    return type(\n        f\"{name}Point\",\n        (Point,),\n        {\"__module__\": \"django.db.models\", \"srid\": srid_map[\"SRID\"], \"name\": name}\n    )(**fields)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (object,), {\n        '__module__': 'django.contrib.gis.db.models',\n        '__fields__': fields,\n       'srid': srid_map[fields[0]],\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type('%sPoint' % name, (BasePoint,), {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map,\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type('Point', (object,), {\n        'name': name,\n        'fields': fields,\n       'srid': srid_map['SRID'],\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type('%sPoint' % name, (object,), {\n        '__module__': 'django.contrib.gis.db.models',\n        '__fields__': fields,\n        '__srid__': srid_map['srid'],\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically Generating Point Class\n    \"\"\"\n    point = {\n        'type': 'Point',\n        'coordinates': [\n            [name, fields[0][0], fields[0][1], fields[0][2]],\n            [name, fields[1][0], fields[1][1], fields[1][2]],\n            [name, fields[2][0], fields[2][1], fields[2][2]],\n        ],\n    }\n    return point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \n    \n    return type(name, (BasePoint,), {\n        'name': name,\n        'fields': fields,\n       'srid_map': srid_map\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    return type(name, fields, {'srid': srid_map['srid']})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    \"\"\"\n    Dynamically Generating Point Class\n    \"\"\"\n    return type(name, fields, {'srid': srid_map[fields[0]]})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated(message, 'Call to deprecated function %s. %s')\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\n    \"\"\"\n    return _deprecated(message, 'deprecated')\n", "def deprecated(message):\n    \"\"\" Return a decorator function for deprecating functions and methods. \"\"\"\n    def deprecator(func):\n        \"\"\" Return a decorator function for deprecating functions and methods. \"\"\"\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\" Return a decorated function. \"\"\"\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return wrapper\n    return deprecator\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _Deprecated(message)\n", "def deprecated(message):\n\n    def decorator(func):\n        \"\"\"Add the deprecation warning message.\"\"\"\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            \"\"\"Wrapped function.\"\"\"\n            warnings.simplefilter(\"always\", DeprecationWarning)  # turn off filter\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return new_func\n\n    return decorator\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated(message, 'deprecated')\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated('Call to deprecated function is no longer supported.', message)\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return lambda function: function\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n\n    def decorator(func):\n        \"\"\"Add decoration to function.\"\"\"\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\"Wrapper function.\"\"\"\n            warnings.warn(\n                message, category=DeprecationWarning,\n                stacklevel=2\n            )\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _Deprecated(message)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated(message, 'Call to deprecated function %s. %s')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\n    \"\"\"\n    return _deprecated(message, 'deprecated')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\" Return a decorator function for deprecating functions and methods. \"\"\"\n    def deprecator(func):\n        \"\"\" Return a decorator function for deprecating functions and methods. \"\"\"\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\" Return a decorated function. \"\"\"\n            warnings.warn(message, category=DeprecationWarning)\n            return func(*args, **kwargs)\n        return wrapper\n    return deprecator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _Deprecated(message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        \"\"\"Add the deprecation warning message.\"\"\"\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            \"\"\"Wrapped function.\"\"\"\n            warnings.simplefilter(\"always\", DeprecationWarning)  # turn off filter\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n\n        return new_func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated(message, 'deprecated')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _deprecated('Call to deprecated function is no longer supported.', message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return lambda function: function\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n\n    def decorator(func):\n        \"\"\"Add decoration to function.\"\"\"\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            \"\"\"Wrapper function.\"\"\"\n            warnings.warn(\n                message, category=DeprecationWarning,\n                stacklevel=2\n            )\n            return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    \"\"\"Return a decorator function for deprecating functions and methods.\"\"\"\n    return _Deprecated(message)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"${R}\", \"\")\n    code = code.replace(\"${ROP}\", \"\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    return code % {\n        'R_HOST': '127.0.0.1',\n        'R_PORT': '5555',\n        'R_SSL': '1',\n        'R_USERNAME': 'admin',\n        'R_PASSWORD': 'admin',\n        'R_DBNAME': 'test',\n        'R_USERNAME': 'postgres',\n        'R_PASSWORD': 'password',\n        'R_SSL_CERT': '/var/www/test.crt',\n        'R_SSL_KEY': '/var/www/test.key',\n        'R_DB_NAME': 'test',\n        'R_USE_SSL': '1',\n        'R_DB_USERNAME': 'admin',\n        'R_DB_PASSWORD': 'admin',\n        'R_DB_SSL_CA': '/var/www/test.crt',\n        'R_DB_SSL_KEY': '/var/www/test.key',\n        'R_DB_SSL_CA_FILE': '/var/www/test.crt',\n        'R_DB_SSL_CA_BIN': '/var/www/test.key',\n        'R", "def _inline_r_setup(code: str) -> str:\n    code = f\"\"\"\n    # R is not configured by R yet. Replace this with a real configuration file\n    # instead.\n    r_inline = {'--inline': True}\n    \"\"\"\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"OPTIONS\", \"-O\")\n    code = code.replace(\"--with-r-options\", \"-r\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    if \"INLINE_R\" not in os.environ:\n        code = code.replace(\"\\r\", \"\")\n    return code\n", "def _inline_r_setup(code: str) -> str:\n    return code.replace(\"{r_dir}\", \"/usr\")\n", "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "def _inline_r_setup(code: str) -> str:\n    return code.replace('{{ cookiecutter_r_env }}', '{{ cookiecutter_r_env_value }}')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"${R}\", \"\")\n    code = code.replace(\"${ROP}\", \"\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code % {\n        'R_HOST': '127.0.0.1',\n        'R_PORT': '5555',\n        'R_SSL': '1',\n        'R_USERNAME': 'admin',\n        'R_PASSWORD': 'admin',\n        'R_DBNAME': 'test',\n        'R_USERNAME': 'postgres',\n        'R_PASSWORD': 'password',\n        'R_SSL_CERT': '/var/www/test.crt',\n        'R_SSL_KEY': '/var/www/test.key',\n        'R_DB_NAME': 'test',\n        'R_USE_SSL': '1',\n        'R_DB_USERNAME': 'admin',\n        'R_DB_PASSWORD': 'admin',\n        'R_DB_SSL_CA': '/var/www/test.crt',\n        'R_DB_SSL_KEY': '/var/www/test.key',\n        'R_DB_SSL_CA_FILE': '/var/www/test.crt',\n        'R_DB_SSL_CA_BIN': '/var/www/test.key',\n        'R", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = f\"\"\"\n    # R is not configured by R yet. Replace this with a real configuration file\n    # instead.\n    r_inline = {'--inline': True}\n    \"\"\"\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    code = code.replace(\"OPTIONS\", \"-O\")\n    code = code.replace(\"--with-r-options\", \"-r\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    if \"INLINE_R\" not in os.environ:\n        code = code.replace(\"\\r\", \"\")\n    return code\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code.replace(\"{r_dir}\", \"/usr\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code + '\\n'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return code.replace('{{ cookiecutter_r_env }}', '{{ cookiecutter_r_env_value }}')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    if color:\n        cmd = ('{} {} {}'.format(*cmd), '-color=no')[color]\n    return _run('xargs', '--color=no', '--target-concurrency={}'.format(target_concurrency), '--'.join(cmd), '--'.join(varargs), _max_length, *kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> list[Tuple[str, str]]:\n    \n    \n    cmd_list = [cmd]\n    if color:\n        cmd_list = [('TERM', '')] + cmd_list\n    if varargs:\n        cmd_list += [('VAR', varargs)]\n    if target_concurrency:\n        cmd_list += [('CONC', target_concurrency)]\n    return [('X',''.join(cmd)) for cmd in _get_strings(cmd_list, _max_length)]\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str, int, int]:\n    \n    \n    return _run_command(\n        cmd, varargs, color=color, target_concurrency=target_concurrency, _max_length=_max_length, **kwargs\n    )\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    if color:\n        cmd = _colorize_cmd(cmd, color=color, target_concurrency=target_concurrency)\n    if varargs:\n        cmd += (''+ varargs)\n    if kwargs:\n        cmd += (''+ _colorize_cmd(kwargs, color=color, target_concurrency=target_concurrency))\n    return''.join(cmd)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    if color:\n        cmd = colorize(cmd, target_concurrency)\n\n    if varargs:\n        cmd = ['--' + cmd[0]] + cmd[1:]\n\n    return''.join('xargs {} {}'.format(varargs, arg)\n                   for arg in cmd[:_max_length])\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    cmd = (cmd,) + varargs\n    return _xargs(cmd, color, target_concurrency, _max_length, **kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    return''.join(\n        '{}{}'.format(cmd,''.join(varargs))\n        for i in range(target_concurrency)\n    )\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    if color:\n        cmd = colorize(cmd)\n        varargs = colorize(varargs, color=True)\n        kwargs['color'] = True\n    return''.join(['xargs'] + cmd + varargs + ['-c', str(target_concurrency)] + list(kwargs.values()))\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> int:\n    \n    \n    return _run_command(cmd, varargs, color, target_concurrency, _max_length, **kwargs)\n", "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    if color:\n        cmd = ['xargs'] + cmd\n        varargs = ['--color=yes'] + varargs\n        kwargs.setdefault('stdin', sys.stdin)\n        kwargs.setdefault('stdout', sys.stdout)\n    return _run_simple_command(cmd, varargs, _max_length, color, target_concurrency, **kwargs)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    if color:\n        cmd = ('{} {} {}'.format(*cmd), '-color=no')[color]\n    return _run('xargs', '--color=no', '--target-concurrency={}'.format(target_concurrency), '--'.join(cmd), '--'.join(varargs), _max_length, *kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> list[Tuple[str, str]]:\n    \n    \n    cmd_list = [cmd]\n    if color:\n        cmd_list = [('TERM', '')] + cmd_list\n    if varargs:\n        cmd_list += [('VAR', varargs)]\n    if target_concurrency:\n        cmd_list += [('CONC', target_concurrency)]\n    return [('X',''.join(cmd)) for cmd in _get_strings(cmd_list, _max_length)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> Tuple[str, str, int, int]:\n    \n    \n    return _run_command(\n        cmd, varargs, color=color, target_concurrency=target_concurrency, _max_length=_max_length, **kwargs\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    if color:\n        cmd = _colorize_cmd(cmd, color=color, target_concurrency=target_concurrency)\n    if varargs:\n        cmd += (''+ varargs)\n    if kwargs:\n        cmd += (''+ _colorize_cmd(kwargs, color=color, target_concurrency=target_concurrency))\n    return''.join(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    if color:\n        cmd = colorize(cmd, target_concurrency)\n\n    if varargs:\n        cmd = ['--' + cmd[0]] + cmd[1:]\n\n    return''.join('xargs {} {}'.format(varargs, arg)\n                   for arg in cmd[:_max_length])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> str:\n    \n    \n    cmd = (cmd,) + varargs\n    return _xargs(cmd, color, target_concurrency, _max_length, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    return''.join(\n        '{}{}'.format(cmd,''.join(varargs))\n        for i in range(target_concurrency)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    if color:\n        cmd = colorize(cmd)\n        varargs = colorize(varargs, color=True)\n        kwargs['color'] = True\n    return''.join(['xargs'] + cmd + varargs + ['-c', str(target_concurrency)] + list(kwargs.values()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str) -> int:\n    \n    \n    return _run_command(cmd, varargs, color, target_concurrency, _max_length, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: tuple[str, ...],\n        varargs: Sequence[str],\n        *,\n        color: bool = False,\n        target_concurrency: int = 1,\n        _max_length: int = _get_platform_max_length(),\n        **kwargs: str\n) -> str:\n    \n    \n    if color:\n        cmd = ['xargs'] + cmd\n        varargs = ['--color=yes'] + varargs\n        kwargs.setdefault('stdin', sys.stdin)\n        kwargs.setdefault('stdout', sys.stdout)\n    return _run_simple_command(cmd, varargs, _max_length, color, target_concurrency, **kwargs)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    for i in range(len(seq)):\n        j = random.randint(i, len(seq) - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\"\"\n    rnd = list(range(len(seq)))\n    random.shuffle(rnd)\n    return seq[rnd]\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    return seq[_randrange(0, len(seq)):] + seq[:_randrange(0, len(seq))]\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"\n    Shuffle a given seq with the given FIXED_RANDOM_SEED\n    \"\"\"\n    for i in range(len(seq)):\n        j = randint(i, len(seq) - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # return a copy of the sequence with the first element replaced by a\n    # random sequence of the same shape as the input sequence\n    return seq[:1] + [FIXED_RANDOM_SEED] * (len(seq) - 1)\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"\n    Shuffle a given seq with the given FIXED_RANDOM_SEED\n    \"\"\"\n    permutation = list(range(len(seq)))\n    random.shuffle(permutation)\n    return seq[permutation]\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # From https://stackoverflow.com/a/495616/6753503\n    import random\n    random.seed(FIXED_RANDOM_SEED)\n    return [item for sublist in seq for item in sublist]", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    rng = np.random.default_rng(None)\n    return [seq[i] for i in rng.permutation(len(seq))]\n", "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    n = len(seq)\n    for i in range(n):\n        j = random.randint(i, n - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    for i in range(len(seq)):\n        j = random.randint(i, len(seq) - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\"\"\n    rnd = list(range(len(seq)))\n    random.shuffle(rnd)\n    return seq[rnd]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    r = list(seq)\n    np.random.shuffle(r)\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    return seq[_randrange(0, len(seq)):] + seq[:_randrange(0, len(seq))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"\n    Shuffle a given seq with the given FIXED_RANDOM_SEED\n    \"\"\"\n    for i in range(len(seq)):\n        j = randint(i, len(seq) - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # return a copy of the sequence with the first element replaced by a\n    # random sequence of the same shape as the input sequence\n    return seq[:1] + [FIXED_RANDOM_SEED] * (len(seq) - 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \"\"\"\n    Shuffle a given seq with the given FIXED_RANDOM_SEED\n    \"\"\"\n    permutation = list(range(len(seq)))\n    random.shuffle(permutation)\n    return seq[permutation]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    # From https://stackoverflow.com/a/495616/6753503\n    import random\n    random.seed(FIXED_RANDOM_SEED)\n    return [item for sublist in seq for item in sublist]", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    rng = np.random.default_rng(None)\n    return [seq[i] for i in rng.permutation(len(seq))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> list[str]:\n    \n    \n    n = len(seq)\n    for i in range(n):\n        j = random.randint(i, n - 1)\n        seq[i], seq[j] = seq[j], seq[i]\n    return seq\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(int(x) for x in s.split('.'))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    \"\"\"\n    Converts a string concatenated by dot to a tuple consisting of\n    integers.\n    \"\"\"\n    return tuple(int(x) for x in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split(\".\")))\n", "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(x) for x in s.split('.'))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(int(x) for x in s.split('.'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split('.')))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \n    \n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    \"\"\"\n    Converts a string concatenated by dot to a tuple consisting of\n    integers.\n    \"\"\"\n    return tuple(int(x) for x in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(map(int, s.split(\".\")))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int, ...]:\n    return tuple(int(x) for x in s.split('.'))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if '/bin/' in cmd[0]:\n        cmd = (cmd[0][:-3],) + cmd[1:]\n    if '/usr/bin/' in cmd[0]:\n        cmd = (cmd[0][:-3],) + cmd[1:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/':\n        cmd = cmd[1:]\n    if cmd[0] == '/usr/bin':\n        cmd = cmd[2:]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if not cmd[1]:\n        cmd = (cmd[0], \"\")\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    return cmd[:-1] if cmd[-1] == \"/\" else (cmd[0] + \"/\" + cmd[-1])\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    if cmd[0] == '/':\n        cmd = cmd[1:]\n    if cmd[-1] == '/':\n        cmd = cmd[:-1]\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    return ('/usr/bin/' + cmd[0]) if cmd[0] == '/usr/bin' else cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/':\n        return cmd[1:]\n    else:\n        return ('/usr/bin/' + cmd,)\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/bin/bash':\n        cmd[0] = '/bin/sh'\n    return cmd\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    return cmd[0] + ('.' + cmd[1]) if len(cmd) > 2 else cmd[0]\n", "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    return cmd[::-1]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if '/bin/' in cmd[0]:\n        cmd = (cmd[0][:-3],) + cmd[1:]\n    if '/usr/bin/' in cmd[0]:\n        cmd = (cmd[0][:-3],) + cmd[1:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/':\n        cmd = cmd[1:]\n    if cmd[0] == '/usr/bin':\n        cmd = cmd[2:]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if not cmd[1]:\n        cmd = (cmd[0], \"\")\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    return cmd[:-1] if cmd[-1] == \"/\" else (cmd[0] + \"/\" + cmd[-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    if cmd[0] == '/':\n        cmd = cmd[1:]\n    if cmd[-1] == '/':\n        cmd = cmd[:-1]\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    return ('/usr/bin/' + cmd[0]) if cmd[0] == '/usr/bin' else cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/':\n        return cmd[1:]\n    else:\n        return ('/usr/bin/' + cmd,)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    if cmd[0] == '/bin/bash':\n        cmd[0] = '/bin/sh'\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    return cmd[0] + ('.' + cmd[1]) if len(cmd) > 2 else cmd[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: tuple[str, ...]) -> tuple[str, ...]:\n    \n    \n    return cmd[::-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    \n    \n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key % args, None)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key % args, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            result = cache.get(key)\n            if not result:\n                result = f(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key, result, cache.get_timeout(key))\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(self, *args, **kwargs):\n            key = key % f.__name__\n            result = cache.get(key)\n            if result is None:\n                result = f(self, *args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__module__\n            result = cache.get(key)\n            if not result:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_time)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \"\"\"Returns a decorator function that saves the results in the cache \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if lock is None:\n                with cache.get(key):\n                    result = func(*args, **kwargs)\n            else:\n                with lock:\n                    result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with lock:\n                return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key % args, None)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key % args, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            if key not in cache:\n                cache[key] = f(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(args, kwargs)\n            result = cache.get(key)\n            if not result:\n                result = f(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = f(*args, **kwargs)\n                cache.set(key, result, cache.get_timeout(key))\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        @wraps(f)\n        def wrapper(self, *args, **kwargs):\n            key = key % f.__name__\n            result = cache.get(key)\n            if result is None:\n                result = f(self, *args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key % func.__module__\n            result = cache.get(key)\n            if not result:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_time)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \"\"\"Returns a decorator function that saves the results in the cache \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kwargs)\n                cache.set(key, result, timeout=cache_timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if lock is None:\n                with cache.get(key):\n                    result = func(*args, **kwargs)\n            else:\n                with lock:\n                    result = func(*args, **kwargs)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    \n    \n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            with lock:\n                return func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"\"\"\n   .. versionadded:: 0.9.0\n    \"\"\"\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # This function must return a function, not a method!\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"\"\"\n   .. versionadded:: 0.9.0\n    \"\"\"\n    return _cache('TTLCache', maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    # This function must return a function, not a method!\n    return _cache(TTLCache(maxsize, ttl, timer), typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache('TTLCache', maxsize, ttl, timer, typed)", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', memoize, maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    return _MutableCache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    # Note: Do not change the name of this function.\n    return _MruCache(maxsize, typed)\n", "def mru_cache(maxsize=128, typed=False):\n    cache = {}\n    def _mru_cache(f):\n        key = f.__name__\n        if key not in cache:\n            if typed:\n                cache[key] = f\n            else:\n                cache[key] = _mru(f, maxsize)\n        return cache[key]\n    return _mru_cache", "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)", "def mru_cache(maxsize=128, typed=False):\n    return _cached('mru', maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cache('MRU', memoize, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    return _MutableCache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    # type: (int, bool) -> Callable[[], Any]\n    # Note: Do not change the name of this function.\n    return _MruCache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    cache = {}\n    def _mru_cache(f):\n        key = f.__name__\n        if key not in cache:\n            if typed:\n                cache[key] = f\n            else:\n                cache[key] = _mru(f, maxsize)\n        return cache[key]\n    return _mru_cache", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _MutableCache(maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached_function('mru', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return _cached('mru', maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize), maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least Recently Used\n    (LRU) algorithm.\n    \"\"\"\n    if maxsize is None:\n        return _lru_cache\n    elif maxsize <= 0:\n        return _lru_cache(0, typed)\n    elif maxsize == 1:\n        return _lru_cache(0, typed)\n    else:\n        return _lru_cache(maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached_function(LRUCache(maxsize), typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n   .. todo::\n\n        WRITEME\n    \"\"\"\n    return _Cache(_make_cache_key('lru', maxsize, typed), lru_cache)\n", "def lru_cache(maxsize=128, typed=False):\n    return _cached('LRU', _lru_cache, maxsize, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize), maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least Recently Used\n    (LRU) algorithm.\n    \"\"\"\n    if maxsize is None:\n        return _lru_cache\n    elif maxsize <= 0:\n        return _lru_cache(0, typed)\n    elif maxsize == 1:\n        return _lru_cache(0, typed)\n    else:\n        return _lru_cache(maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached_function(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('lru', _lru_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \"\"\"\n   .. todo::\n\n        WRITEME\n    \"\"\"\n    return _Cache(_make_cache_key('lru', maxsize, typed), lru_cache)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return _cached('LRU', _lru_cache, maxsize, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_lfu, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.\n    \"\"\"\n    return _Cache(LRUCache(maxsize), typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', _lfu, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    # You can replace the following line with your own code.\n    return _lfu_cache(None, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lru', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _Memoize('lfu', maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_lfu_cache, maxsize, typed)", "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saved up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.  This cache can be seen by a browser as a\n    list of functions whose cache values can be obtained by memoization.\n    \"\"\"\n    return _Cache(LFU, maxsize, typed)\n", "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize, typed), maxsize)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_lfu, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saves up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.\n    \"\"\"\n    return _Cache(LRUCache(maxsize), typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lfu', _lfu, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    # You can replace the following line with your own code.\n    return _lfu_cache(None, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache('lru', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Memoize('lfu', maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _CacheWrapper(_lfu_cache, maxsize, typed)", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    \"\"\"\n    Decorator to wrap a function with a memoizing callable that\n    saved up to `maxsize` results based on a Least frequently Used\n    (LFU) algorithm.  This cache can be seen by a browser as a\n    list of functions whose cache values can be obtained by memoization.\n    \"\"\"\n    return _Cache(LFU, maxsize, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return _Cache(_make_lru_cache(maxsize, typed), maxsize)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    return (self.__dict__.popitem())\n", "def popitem(self):\n    return (dict.popitem(self)[0], dict.popitem(self)[1])", "def popitem(self):\n    return (self.__dict__.popitem())\n", "def popitem(self):\n    k, v = super(OrderedMultiDict, self).popitem()\n    return (k, v)\n", "def popitem(self):\n    return dict.popitem(self)[0]", "def popitem(self):\n    k, v = super().popitem()\n    return (k, v)", "def popitem(self):\n    pass", "def popitem(self):\n    if not self:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n    key = self._keys[0]\n    value = self._items[0]\n    del self._keys[0]\n    del self._items[0]\n    return (key, value)", "def popitem(self):\n    return (self.__key, self.__value)", "def popitem(self):\n    key = self.__keys[0]\n    value = self[key]\n    del self[key]\n    return (key, value)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return (self.__dict__.popitem())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return (dict.popitem(self)[0], dict.popitem(self)[1])", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return (self.__dict__.popitem())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    k, v = super(OrderedMultiDict, self).popitem()\n    return (k, v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    k, v = super().popitem()\n    return (k, v)", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    pass", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if not self:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n    key = self._keys[0]\n    value = self._items[0]\n    del self._keys[0]\n    del self._items[0]\n    return (key, value)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return (self.__key, self.__value)", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key = self.__keys[0]\n    value = self[key]\n    del self[key]\n    return (key, value)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.lower(), default)\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.upper(), default)", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)\n", "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return dict.setdefault(self, key.upper(), default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    return self.__dict__.setdefault(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    return self.__dict__.get(key, default)\n", "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.        \n    \"\"\"\n    return self.__dict__.get(key, default)\n", "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.\n    \"\"\"\n    if key in self.__dict__:\n        return self.__dict__[key]\n    else:\n        return default\n", "def get(self, key, default=None):\n    return self.__dict__.get(key, default)", "def get(self, key, default=None):\n    \"\"\" Get a value by key. \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    return self.__getitem__(key, default)\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    return self.__getitem__(key, default)", "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is\n    returned. Otherwise, default is returned.\n    \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    return self.__dict__.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.        \n    \"\"\"\n    return self.__dict__.get(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is returned.\n    Otherwise, default is returned.\n    \"\"\"\n    if key in self.__dict__:\n        return self.__dict__[key]\n    else:\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    return self.__dict__.get(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    \"\"\" Get a value by key. \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self.__getitem__(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return self.__getitem__(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    \"\"\"\n    If a key exists in the class, the value corresponding to the key is\n    returned. Otherwise, default is returned.\n    \"\"\"\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key % func.__name__\n            if not cache.has_key(key):\n                result = func(*args, **kwargs)\n                cache.set_key(key, result, lock=lock)\n            return cache[key]\n        return wrapped\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        @wraps(fn)\n        def wrapped(self, *args, **kwargs):\n            if kwargs:\n                key = key % kwargs\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        return _CachedMethod(f, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    return _cachedmethod(cache, key, lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    return partial(_cachedmethod, cache, key, lock)\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if lock and key in cache:\n                return cache[key]\n            else:\n                result = fn(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n\n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key % args, None)\n            if result is None:\n                result = fn(*args, **kwargs)\n                cache.set(key % args, result, timeout=0)\n            return result\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Returns a decorator function that can call a result in the cache.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            if not self._iscached():\n                self._cache(key, lock)\n            return func(self, *args, **kwargs)\n        return wrapper\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key, result, timeout=cache_ttl())\n            return result\n        return wrapper\n    return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key % func.__name__\n            if not cache.has_key(key):\n                result = func(*args, **kwargs)\n                cache.set_key(key, result, lock=lock)\n            return cache[key]\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(fn):\n        @wraps(fn)\n        def wrapped(self, *args, **kwargs):\n            if kwargs:\n                key = key % kwargs\n            if key not in cache:\n                cache[key] = fn(self, *args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(f):\n        return _CachedMethod(f, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(func):\n        @functools.wraps(func)\n        def wrapped(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if key not in cache:\n                cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapped\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    return _cachedmethod(cache, key, lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    return partial(_cachedmethod, cache, key, lock)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            if lock and key in cache:\n                return cache[key]\n            else:\n                result = fn(*args, **kwargs)\n                cache[key] = result\n                return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \n    \n\n    def decorator(fn):\n        @functools.wraps(fn)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key % args, None)\n            if result is None:\n                result = fn(*args, **kwargs)\n                cache.set(key % args, result, timeout=0)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    \"\"\"\n    Returns a decorator function that can call a result in the cache.\n    \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(self, *args, **kwargs):\n            if not self._iscached():\n                self._cache(key, lock)\n            return func(self, *args, **kwargs)\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(self, *args, **kwargs):\n            key = key(self, *args, **kwargs)\n            result = cache.get(key)\n            if result is None:\n                result = func(self, *args, **kwargs)\n                cache.set(key, result, timeout=cache_ttl())\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    \n    \n    return \"%s: %s\" % (cls.__name__, str(e))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Format the exception as a string\n    \"\"\"\n    if e.__class__.__name__ == 'ValueError':\n        return '{0}: {1}'.format(cls.__name__, str(e))\n    else:\n        return '{0}: {1}({2})'.format(cls.__name__, e.__class__.__name__, e.args)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(cls.__name__, e, format_exception(e, max_level, max_path_level))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e = format_exception(e, max_level, max_path_level)\n    return '%s: %s' % (cls.__name__, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"Format the exception as a string\"\"\"\n    return '\\n'.join(\n        '{}:{}: {}'.format(cls.__name__, i + 1, e)\n        for i in range(max_level)\n        if i + 1 < max_path_level\n    )\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{}({}, {}): {}\".format(cls.__name__, e.__class__.__name__,\n                                  e.args, e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    return (\"\\n\".join(format_exception(cls, e, max_level, max_path_level)) +\n            \"\\n\")\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    if e.__class__ is not type:\n        e = e.__class__\n    return \"%s: %s\" % (e.__name__, e.args[0])\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    return '%s: %s (%s)' % (cls.__name__, e, e.__class__.__name__)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \n    \n    if cls is Exception:\n        return \"{}({})\".format(e.__class__.__name__, e.args[0])\n    else:\n        return \"{}({}, {})\".format(cls.__name__, e.args[0], e.args[1])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \n    \n    return \"%s: %s\" % (cls.__name__, str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Format the exception as a string\n    \"\"\"\n    if e.__class__.__name__ == 'ValueError':\n        return '{0}: {1}'.format(cls.__name__, str(e))\n    else:\n        return '{0}: {1}({2})'.format(cls.__name__, e.__class__.__name__, e.args)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{0}\\n{1}\\n{2}\".format(cls.__name__, e, format_exception(e, max_level, max_path_level))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        e = format_exception(e, max_level, max_path_level)\n    return '%s: %s' % (cls.__name__, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"Format the exception as a string\"\"\"\n    return '\\n'.join(\n        '{}:{}: {}'.format(cls.__name__, i + 1, e)\n        for i in range(max_level)\n        if i + 1 < max_path_level\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    return \"{}({}, {}): {}\".format(cls.__name__, e.__class__.__name__,\n                                  e.args, e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    return (\"\\n\".join(format_exception(cls, e, max_level, max_path_level)) +\n            \"\\n\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    if e.__class__ is not type:\n        e = e.__class__\n    return \"%s: %s\" % (e.__name__, e.args[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\" Format the exception as a string \"\"\"\n    return '%s: %s (%s)' % (cls.__name__, e, e.__class__.__name__)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \n    \n    if cls is Exception:\n        return \"{}({})\".format(e.__class__.__name__, e.args[0])\n    else:\n        return \"{}({}, {})\".format(cls.__name__, e.args[0], e.args[1])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        return\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not file_name or overwrite:\n        f = open(file_name, 'w')\n        f.write(text_buffer)\n        f.close()\n    else:\n        f = open(file_name, 'a')\n        f.write(text_buffer)\n        f.close()\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not overwrite and os.path.exists(file_name):\n        raise FileExistsError(file_name)\n    with codecs.open(file_name, 'w', encoding) as file_obj:\n        file_obj.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not os.path.isfile(file_name) or overwrite:\n        with open(file_name, 'a', encoding=encoding) as f:\n            f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not overwrite and os.path.exists(file_name):\n        raise IOError(\"File %s already exists\" % file_name)\n    with codecs.open(file_name, \"a\", encoding=encoding) as f:\n        f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        return\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        raise FileExistsError(\"File already exists for writing\")\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not os.path.exists(file_name) or overwrite:\n        with codecs.open(file_name, \"a\", encoding=encoding) as f:\n            f.write(text_buffer)\n            f.write(\"\\n\")\n    else:\n        raise FileExistsError(file_name)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return False\n\n    with open(file_name, 'w', encoding=encoding) as f:\n        f.write(text_buffer)\n    return True\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if encoding is None:\n        encoding = 'utf-8'\n    if not overwrite and os.path.exists(file_name):\n        return\n    with codecs.open(file_name, 'a', encoding) as f:\n        f.write(text_buffer)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        return\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not file_name or overwrite:\n        f = open(file_name, 'w')\n        f.write(text_buffer)\n        f.close()\n    else:\n        f = open(file_name, 'a')\n        f.write(text_buffer)\n        f.close()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not overwrite and os.path.exists(file_name):\n        raise FileExistsError(file_name)\n    with codecs.open(file_name, 'w', encoding) as file_obj:\n        file_obj.write(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not os.path.isfile(file_name) or overwrite:\n        with open(file_name, 'a', encoding=encoding) as f:\n            f.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not overwrite and os.path.exists(file_name):\n        raise IOError(\"File %s already exists\" % file_name)\n    with codecs.open(file_name, \"a\", encoding=encoding) as f:\n        f.write(text_buffer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        return\n    with codecs.open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if os.path.exists(file_name) and not overwrite:\n        raise FileExistsError(\"File already exists for writing\")\n    with open(file_name, 'a', encoding=encoding) as f:\n        f.write(text_buffer)\n    return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if not os.path.exists(file_name) or overwrite:\n        with codecs.open(file_name, \"a\", encoding=encoding) as f:\n            f.write(text_buffer)\n            f.write(\"\\n\")\n    else:\n        raise FileExistsError(file_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if os.path.exists(file_name) and not overwrite:\n        return False\n\n    with open(file_name, 'w', encoding=encoding) as f:\n        f.write(text_buffer)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    \n    \n    if encoding is None:\n        encoding = 'utf-8'\n    if not overwrite and os.path.exists(file_name):\n        return\n    with codecs.open(file_name, 'a', encoding) as f:\n        f.write(text_buffer)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    return codecs.open(file_name, \"r\", encoding)\n", "def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    if sys.version_info < (3, 0):\n        file_name = file_name.encode(encoding)\n    return open(file_name, \"r\", encoding=encoding)\n", "def file_to_textbuffer(file_name, encoding):\n    \n    \n    text = \"\"\n    with open(file_name, \"r\", encoding=encoding) as f:\n        text = f.read()\n    return text\n", "def file_to_textbuffer(file_name, encoding):\n    \n    \n    buffer = gtk.TextBuffer()\n    buffer.set_text(open(file_name, 'r', encoding=encoding).read())\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    text = []\n    with open(file_name, \"r\", encoding=encoding) as f:\n        for line in f:\n            text.append(line)\n    return text\n", "def file_to_textbuffer(file_name, encoding):\n    \n    \n    return open(file_name, \"r\", encoding=encoding)\n", "def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    buffer = []\n    with open(file_name, \"r\", encoding=encoding) as f:\n        for line in f:\n            buffer.append(line)\n    return buffer\n", "def file_to_textbuffer(file_name, encoding):\n    \"\"\"Load a file toward a text buffer\"\"\"\n    if sys.version_info[0] < 3:\n        text_buffer = gtk.TextBuffer()\n        text_buffer.set_text(open(file_name, 'r').read())\n    else:\n        text_buffer = gtk.TextBuffer()\n        text_buffer.set_text(open(file_name, encoding=encoding).read())\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    \n    \n    return gtk.TextBuffer.new_with_tag_by_name(\"default\")\n", "def file_to_textbuffer(file_name, encoding):\n    return [line.decode(encoding) for line in open(file_name, \"r\")]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    return codecs.open(file_name, \"r\", encoding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    if sys.version_info < (3, 0):\n        file_name = file_name.encode(encoding)\n    return open(file_name, \"r\", encoding=encoding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \n    \n    text = \"\"\n    with open(file_name, \"r\", encoding=encoding) as f:\n        text = f.read()\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \n    \n    buffer = gtk.TextBuffer()\n    buffer.set_text(open(file_name, 'r', encoding=encoding).read())\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    text = []\n    with open(file_name, \"r\", encoding=encoding) as f:\n        for line in f:\n            text.append(line)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \n    \n    return open(file_name, \"r\", encoding=encoding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \"\"\"\n    Load a file toward a text buffer\n    \"\"\"\n    buffer = []\n    with open(file_name, \"r\", encoding=encoding) as f:\n        for line in f:\n            buffer.append(line)\n    return buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \"\"\"Load a file toward a text buffer\"\"\"\n    if sys.version_info[0] < 3:\n        text_buffer = gtk.TextBuffer()\n        text_buffer.set_text(open(file_name, 'r').read())\n    else:\n        text_buffer = gtk.TextBuffer()\n        text_buffer.set_text(open(file_name, encoding=encoding).read())\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    \n    \n    return gtk.TextBuffer.new_with_tag_by_name(\"default\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    return [line.decode(encoding) for line in open(file_name, \"r\")]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    if os.path.isfile(file_name):\n        return True\n    return False\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    if os.path.isfile(file_name):\n        return True\n    else:\n        return False\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"Check whether file_name is an existing file. \"\"\"\n    if not os.path.isfile(file_name):\n        raise argparse.ArgumentTypeError(\n            \"{0} does not exist.\".format(file_name))\n    return file_name\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n\n    Parameters\n    ----------\n    file_name : str\n        Name of the file to be tested.\n\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    if os.path.isfile(file_name):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    if os.path.isfile(file_name):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"Check whether file_name is an existing file. \"\"\"\n    if not os.path.isfile(file_name):\n        raise argparse.ArgumentTypeError(\n            \"{0} does not exist.\".format(file_name))\n    return file_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n\n    Parameters\n    ----------\n    file_name : str\n        Name of the file to be tested.\n\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    \"\"\"\n    Check whether file_name is an existing file.\n    \"\"\"\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    \n    \n    cls._log = []\n", "def _reset_logging(cls):\n    \n    \n    logging.getLogger(\"requests\").setLevel(logging.WARNING)\n", "def _reset_logging(cls):\n    \n    \n    cls.__dict__[\"_log\"] = []\n", "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.NOTSET)\n", "def _reset_logging(cls):\n    \n    \n    # Disable all logging by setting the logging level to the default one\n    logging.disable(logging.NOTSET)\n\n    # Disable all logging by setting the logging level to the given one\n    logging.disable(logging.DEBUG)\n", "def _reset_logging(cls):\n    \n    \n    cls._log = []\n", "def _reset_logging(cls):\n    \n    \n    cls._log_level = logging.DEBUG\n    cls._log_stream = None\n", "def _reset_logging(cls):\n    \n    \n    cls._instance = None\n", "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "def _reset_logging(cls):\n    \n    \n    cls._log = []\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    logging.getLogger(\"requests\").setLevel(logging.WARNING)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls.__dict__[\"_log\"] = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    logging.disable(logging.NOTSET)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    # Disable all logging by setting the logging level to the default one\n    logging.disable(logging.NOTSET)\n\n    # Disable all logging by setting the logging level to the given one\n    logging.disable(logging.DEBUG)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log_level = logging.DEBUG\n    cls._log_stream = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._instance = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls.__logging__ = False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    \n    \n    cls._log = []\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return _getTargetClass(self)\n", "def _getTargetClass(self):\n    return html.Div\n", "def _getTargetClass(self):\n    return None\n", "def _getTargetClass(self):\n    return NotImplemented", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return Template\n", "def _getTargetClass(self):\n    return File\n", "def _getTargetClass(self):\n    return __import__(\"pynetdicom\").targets.layer.Layer\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return _getTargetClass(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return html.Div\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return NotImplemented", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Template\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return File\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return __import__(\"pynetdicom\").targets.layer.Layer\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    if len(orderings) == 0:\n        return orderings\n    if len(orderings) == 1:\n        return orderings[0]\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    return [x for sublist in orderings for x in sublist]\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    return list(set([i for i in orderings if len(i) > 1]))\n", "def _legacy_mergeOrderings(orderings):\n    \n    \n    return [item for sublist in orderings for item in sublist]\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    merged = []\n    for o in orderings:\n        if o not in merged:\n            merged.append(o)\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    return sorted(set(x for xs in orderings for x in xs))\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    result = []\n    for item in orderings:\n        if item not in result:\n            result.append(item)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    \"\"\"Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements. \"\"\"\n    return list(OrderedDict.fromkeys(\n        (x, y) for x, y in zip(*orderings)\n    ))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    if len(orderings) == 0:\n        return orderings\n    if len(orderings) == 1:\n        return orderings[0]\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return [x for sublist in orderings for x in sublist]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    return list(set([i for i in orderings if len(i) > 1]))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \n    \n    return [item for sublist in orderings for item in sublist]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements.\n    \"\"\"\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    merged = []\n    for o in orderings:\n        if o not in merged:\n            merged.append(o)\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    return sorted(set(x for xs in orderings for x in xs))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"\n    Combine multiple lists in the sequence of occurrence into a list with\n    no duplicate elements.\n    \"\"\"\n    result = []\n    for item in orderings:\n        if item not in result:\n            result.append(item)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    \"\"\"Combine multiple lists in the sequence of occurrence into a list with no\n    duplicate elements. \"\"\"\n    return list(OrderedDict.fromkeys(\n        (x, y) for x, y in zip(*orderings)\n    ))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    try:\n        return object.__interfaces__\n    except AttributeError:\n        return interfaces.IInterface\n", "def directlyProvidedBy(object):\n    return providedBy(object)\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IDirectlyProvided)\n", "def directlyProvidedBy(object):\n    if getattr(object, '__providedBy__', None):\n        return object.__providedBy__\n    if hasattr(object, '__implemented__'):\n        return object.__implemented__\n    return _directlyProvidedBy(object)\n", "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "def directlyProvidedBy(object):\n    return getInterfaces(object)[1]\n", "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    try:\n        return object.__interfaces__\n    except AttributeError:\n        return interfaces.IInterface\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return providedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IDirectlyProvided)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if getattr(object, '__providedBy__', None):\n        return object.__providedBy__\n    if hasattr(object, '__implemented__'):\n        return object.__implemented__\n    return _directlyProvidedBy(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getAdapters((object,), IInterface)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return getInterfaces(object)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    return _directlyProvidedBy[id(object)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    return [c for c in classes if not c.__subclasses__()]\n", "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    return [x for x in classes if not issubclass(x, Base)]\n", "def minimalBases(classes):\n    \n    \n    return [k for k, v in classes.items() if not v]\n", "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n\n    \"\"\"\n    return [i for i in classes if not issubclass(i, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not c.__subclasses__()]\n", "def minimalBases(classes):\n    \n    \n    return [x for x in classes if not issubclass(x, Base)]\n", "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    minimal_bases = []\n    for base in classes:\n        if not base.__subclasses__():\n            minimal_bases.append(base)\n    return minimal_bases\n", "def minimalBases(classes):\n    \n    \n    return [c for c in classes if not c.__subclasses__()]\n", "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    minimal_bases = []\n    for class_ in classes:\n        if not issubclass(class_, object):\n            minimal_bases.append(class_)\n    return minimal_bases\n", "def minimalBases(classes):\n    \n    \n    return [c for c in classes if not c.__subclasses__()]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    return [c for c in classes if not c.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    return [x for x in classes if not issubclass(x, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return [k for k, v in classes.items() if not v]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n\n    \"\"\"\n    return [i for i in classes if not issubclass(i, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not c.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return [x for x in classes if not issubclass(x, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    minimal_bases = []\n    for base in classes:\n        if not base.__subclasses__():\n            minimal_bases.append(base)\n    return minimal_bases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return [c for c in classes if not c.__subclasses__()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \"\"\"\n    Returns all classes without subclasses as a list.\n    \"\"\"\n    minimal_bases = []\n    for class_ in classes:\n        if not issubclass(class_, object):\n            minimal_bases.append(class_)\n    return minimal_bases\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    \n    \n    return [c for c in classes if not c.__subclasses__()]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    \n    \n    return ''.join([self.name, ': ', self.description] + super(Real, self).namesAndDescriptions(all=all))\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    return '{}: {}'.format(self.name, self.description or self.__doc__)\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    else:\n        return [self.name, self.description[0]]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    return [self.name, self.description, self.__doc__]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    name = \"\"\n    description = \"\"\n    if all:\n        name = self.__class__.__name__\n        description = self.__doc__\n    else:\n        name = self.name\n        description = self.description\n    return name, description\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return '{} ({})'.format(self.name, self.description)\n    else:\n        return '{} = {}'.format(self.name, self.description)\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    name = '{}{}'.format(self.className, self.__class__.__name__.lower())\n    if all:\n        return [name, self.description]\n    else:\n        return [name]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n\n    \"\"\"\n    if all:\n        return ['{}: {}'.format(self.name, self.description)]\n    else:\n        return ['{} = {}'.format(self.name, self.description)]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    else:\n        return [self.name, self.description.replace('\\n','')]\n", "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return \"{}({})\".format(self.__class__.__name__, ', '.join(self.descriptions()))\n    return \"{} = {}\".format(self.__class__.__name__, self.descriptions())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    \n    \n    return ''.join([self.name, ': ', self.description] + super(Real, self).namesAndDescriptions(all=all))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    return '{}: {}'.format(self.name, self.description or self.__doc__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    else:\n        return [self.name, self.description[0]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    return [self.name, self.description, self.__doc__]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    name = \"\"\n    description = \"\"\n    if all:\n        name = self.__class__.__name__\n        description = self.__doc__\n    else:\n        name = self.name\n        description = self.description\n    return name, description\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return '{} ({})'.format(self.name, self.description)\n    else:\n        return '{} = {}'.format(self.name, self.description)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    name = '{}{}'.format(self.className, self.__class__.__name__.lower())\n    if all:\n        return [name, self.description]\n    else:\n        return [name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n\n    \"\"\"\n    if all:\n        return ['{}: {}'.format(self.name, self.description)]\n    else:\n        return ['{} = {}'.format(self.name, self.description)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return [self.name, self.description]\n    else:\n        return [self.name, self.description.replace('\\n','')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    \"\"\"\n    Returns the name and description of the current class attribute.\n    \"\"\"\n    if all:\n        return \"{}({})\".format(self.__class__.__name__, ', '.join(self.descriptions()))\n    return \"{} = {}\".format(self.__class__.__name__, self.descriptions())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    \"\"\"\n    return [a[0] for a in inspect.getmembers(self.__class__, inspect.isroutine) if not a[0].startswith('_') and not all]\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\"\"\"\n    if all:\n        return sorted(self.__dict__.keys())\n    return self.__dict__.keys()\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\"\"\"\n    return [name for name, value in inspect.getmembers(self, inspect.isdatadescriptor) if not name.startswith('__') and not isinstance(value, property) and not all]\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class. \"\"\"\n    names = [name for name in dir(self)\n             if not name.startswith('_') and\n             not callable(getattr(self, name)) and\n             not name.startswith('__') and\n             not name.startswith('get') and\n             not name.startswith('set') and\n             not name.startswith('__')]\n    if all:\n        return names\n    return names[::2]\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n    \"\"\"\n    if all:\n        return [attr for attr in dir(self) if not attr.startswith('__')]\n    return [attr for attr in dir(self) if not attr.startswith('_')]\n", "def names(self, all=False):\n    \"\"\"\n    Return the attribute names of current class.\n    \"\"\"\n    return list(self.__dict__.keys())\n", "def names(self, all=False):\n    \"\"\"\n    Return the attribute names of current class.\n    \"\"\"\n    if all:\n        return [name for name, value in self.__dict__.items() if isinstance(value, str)]\n    return self.__dict__.keys()\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class. \"\"\"\n    if all:\n        return list(self.__dict__.keys())\n    return self.__dict__.keys()\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    If all is True return all attributes (including those set to None).\n    \"\"\"\n    if all:\n        return [name for name, attr in self.__dict__.items()\n                if name[0]!= '_' and attr is not None]\n    return [name for name, attr in self.__dict__.items()\n            if name[0]!= '_' and attr is not None]\n", "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    If all is set to True, return the attribute names only for the object\n    that's part of the full class hierarchy. Otherwise, return only the\n    attributes contained in the object's sub-classes.\n    \"\"\"\n    if all:\n        return self.__all__\n    return self.__dir__()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    \"\"\"\n    return [a[0] for a in inspect.getmembers(self.__class__, inspect.isroutine) if not a[0].startswith('_') and not all]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\"\"\"\n    if all:\n        return sorted(self.__dict__.keys())\n    return self.__dict__.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\"\"\"\n    return [name for name, value in inspect.getmembers(self, inspect.isdatadescriptor) if not name.startswith('__') and not isinstance(value, property) and not all]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class. \"\"\"\n    names = [name for name in dir(self)\n             if not name.startswith('_') and\n             not callable(getattr(self, name)) and\n             not name.startswith('__') and\n             not name.startswith('get') and\n             not name.startswith('set') and\n             not name.startswith('__')]\n    if all:\n        return names\n    return names[::2]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n    \"\"\"\n    if all:\n        return [attr for attr in dir(self) if not attr.startswith('__')]\n    return [attr for attr in dir(self) if not attr.startswith('_')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"\n    Return the attribute names of current class.\n    \"\"\"\n    return list(self.__dict__.keys())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"\n    Return the attribute names of current class.\n    \"\"\"\n    if all:\n        return [name for name, value in self.__dict__.items() if isinstance(value, str)]\n    return self.__dict__.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class. \"\"\"\n    if all:\n        return list(self.__dict__.keys())\n    return self.__dict__.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    If all is True return all attributes (including those set to None).\n    \"\"\"\n    if all:\n        return [name for name, attr in self.__dict__.items()\n                if name[0]!= '_' and attr is not None]\n    return [name for name, attr in self.__dict__.items()\n            if name[0]!= '_' and attr is not None]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    \"\"\"Return the attribute names of current class.\n\n    If all is set to True, return the attribute names only for the object\n    that's part of the full class hierarchy. Otherwise, return only the\n    attributes contained in the object's sub-classes.\n    \"\"\"\n    if all:\n        return self.__all__\n    return self.__dir__()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (tuple, list)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output)\n        output.append(item)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output=output)\n        if isinstance(item, (list, set, frozenset)):\n            item = list(item)\n        output.append(item)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, tuple):\n            _normalizeargs(x, output)\n        elif isinstance(x, Decl):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "def _normalizeargs(sequence, output=None):\n    return _normalizeargs(sequence, _normalize_decls(sequence, output=output))\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            output.append(_normalizeargs(arg.exprs, arg.type))\n        elif isinstance(arg, (tuple, list)):\n            output.append(normalize(arg, output=output))\n        else:\n            output.append(arg)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if not isinstance(sequence, (list, tuple)):\n        return sequence\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Decl):\n            _normalizeargs(item, output)\n        elif isinstance(item, (list, tuple)):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for i in sequence:\n        if isinstance(i, (tuple, list)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output)\n        output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            item = _normalizeargs(item, output=output)\n        if isinstance(item, (list, set, frozenset)):\n            item = list(item)\n        output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for x in sequence:\n        if isinstance(x, tuple):\n            _normalizeargs(x, output)\n        elif isinstance(x, Decl):\n            output.append(x)\n        else:\n            output.append(x)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    for i in sequence:\n        if isinstance(i, (list, tuple)):\n            _normalizeargs(i, output)\n        else:\n            output.append(i)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, tuple):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    return _normalizeargs(sequence, _normalize_decls(sequence, output=output))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n    for arg in sequence:\n        if isinstance(arg, Decl):\n            output.append(_normalizeargs(arg.exprs, arg.type))\n        elif isinstance(arg, (tuple, list)):\n            output.append(normalize(arg, output=output))\n        else:\n            output.append(arg)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if not isinstance(sequence, (list, tuple)):\n        return sequence\n    if output is None:\n        output = []\n    for item in sequence:\n        if isinstance(item, Decl):\n            _normalizeargs(item, output)\n        elif isinstance(item, (list, tuple)):\n            _normalizeargs(item, output)\n        else:\n            output.append(item)\n    return output\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    \n    \n    try:\n        import pyclaw.c_optimization as pyclaw\n        return pyclaw.c_optimization\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import pyopencl as cl\n        return cl\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations as c_optimizations_mod\n        return c_optimizations_mod\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations as c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import C  # noqa: F401\n        return True\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import pycparser as cparser\n        return cparser\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from pysparse import c_opt\n        return c_opt\n    except ImportError:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import pyclaw.c_optimization as pyclaw\n        return pyclaw.c_optimization\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import pyopencl as cl\n        return cl\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations as c_optimizations_mod\n        return c_optimizations_mod\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import numpy as np\n        return np\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    \n    \n    try:\n        import c_optimizations as c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import C  # noqa: F401\n        return True\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import pycparser as cparser\n        return cparser\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from pysparse import c_opt\n        return c_opt\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we use the C optimizations.\n    \"\"\"\n    return False\n", "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return False\n", "def _should_attempt_c_optimizations():\n  if _is_xla_compiled():\n    return False\n  return ((_is_xla_compiled() and context.executing_eagerly()) or\n          (context.executing_eagerly() and not context.enable_c_optimizations))\n", "def _should_attempt_c_optimizations():\n  if _is_inside_c():\n    return _is_inside_c_tf() or _is_inside_c_tpu()\n  return False\n", "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return True\n", "def _should_attempt_c_optimizations():\n  return (\n      not FLAGS.use_dynamic_loss or\n      FLAGS.use_tpu or\n      not FLAGS.use_synthetic_data)\n", "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return pygpu_available\n", "def _should_attempt_c_optimizations():\n  # The default value of alpha is 0.2.\n  # The default value of beta is 0.5.\n  # The default value of epsilon is 1.0e-8.\n  return (\n      FLAGS.use_c_optimizations() or\n      FLAGS.use_tf_optimizations() or\n      FLAGS.use_tpu() or\n      FLAGS.use_fp16() or\n      FLAGS.use_fp16_implicit_grad() or\n      (not FLAGS.use_tpu_inferred_gradients() and\n       not FLAGS.use_tpu_optimizations()))\n", "def _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we use the C optimizations.\n    \"\"\"\n    return False\n", "def _should_attempt_c_optimizations():\n  \"\"\"Return a true value if we use the C optimizations.\"\"\"\n  return not (\n      tf.executing_eagerly() and tf.executing_eagerly_outside_functions() and\n      tf.get_variable('initial_optimization', [],\n                      initializer=tf.initialize_all_variables()))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we use the C optimizations.\n    \"\"\"\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n  if _is_xla_compiled():\n    return False\n  return ((_is_xla_compiled() and context.executing_eagerly()) or\n          (context.executing_eagerly() and not context.enable_c_optimizations))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n  if _is_inside_c():\n    return _is_inside_c_tf() or _is_inside_c_tpu()\n  return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _should_attempt_c_optimizations():\n  return (\n      not FLAGS.use_dynamic_loss or\n      FLAGS.use_tpu or\n      not FLAGS.use_synthetic_data)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    \"\"\"Return a true value if we use the C optimizations.\"\"\"\n    return pygpu_available\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n  # The default value of alpha is 0.2.\n  # The default value of beta is 0.5.\n  # The default value of epsilon is 1.0e-8.\n  return (\n      FLAGS.use_c_optimizations() or\n      FLAGS.use_tf_optimizations() or\n      FLAGS.use_tpu() or\n      FLAGS.use_fp16() or\n      FLAGS.use_fp16_implicit_grad() or\n      (not FLAGS.use_tpu_inferred_gradients() and\n       not FLAGS.use_tpu_optimizations()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    \"\"\"\n    Return a true value if we use the C optimizations.\n    \"\"\"\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n  \"\"\"Return a true value if we use the C optimizations.\"\"\"\n  return not (\n      tf.executing_eagerly() and tf.executing_eagerly_outside_functions() and\n      tf.get_variable('initial_optimization', [],\n                      initializer=tf.initialize_all_variables()))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON', 0)!= 0 or\n            not sys.version_info >= (3, 7))\n", "def _c_optimizations_ignored():\n    \n    \n    return (\n        'PURE_PYTHON' not in os.environ\n        or os.environ['PURE_PYTHON']!= '0'\n    )\n", "def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON') is not None and\n            os.environ.get('PURE_PYTHON')!= '0')\n", "def _c_optimizations_ignored():\n    \n    \n    return (os.environ.get('PURE_PYTHON', None)!= None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS', None)!= None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS_IGNORE', None)!= None)\n", "def _c_optimizations_ignored():\n    return (\n            os.environ.get(\"PURE_PYTHON\") is not None\n            and os.environ.get(\"PURE_PYTHON\")!= 0\n    )\n", "def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON') is not None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS') is None)\n", "def _c_optimizations_ignored():\n    \n    \n    return _get_environ('PURE_PYTHON') is None or _get_environ('PURE_PYTHON') == 0\n", "def _c_optimizations_ignored():\n    return (\n        os.getenv(\"PURE_PYTHON\") is not None\n        and os.getenv(\"PURE_PYTHON\") == 0\n    )\n", "def _c_optimizations_ignored():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and os.environ.get('C_OPTIMIZATIONS') is not None\n        and os.environ.get('C_OPTIMIZATIONS') == '0'\n    )\n", "def _c_optimizations_ignored():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and os.environ.get('PURE_PYTHON')!= '0'\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON', 0)!= 0 or\n            not sys.version_info >= (3, 7))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return (\n        'PURE_PYTHON' not in os.environ\n        or os.environ['PURE_PYTHON']!= '0'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON') is not None and\n            os.environ.get('PURE_PYTHON')!= '0')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return (os.environ.get('PURE_PYTHON', None)!= None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS', None)!= None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS_IGNORE', None)!= None)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n            os.environ.get(\"PURE_PYTHON\") is not None\n            and os.environ.get(\"PURE_PYTHON\")!= 0\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return (os.environ.get('PURE_PYTHON') is not None and\n            os.environ.get('PURE_PYTHON_OPTIMIZATIONS') is None)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    \n    \n    return _get_environ('PURE_PYTHON') is None or _get_environ('PURE_PYTHON') == 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        os.getenv(\"PURE_PYTHON\") is not None\n        and os.getenv(\"PURE_PYTHON\") == 0\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and os.environ.get('C_OPTIMIZATIONS') is not None\n        and os.environ.get('C_OPTIMIZATIONS') == '0'\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return (\n        os.environ.get('PURE_PYTHON') is not None\n        and os.environ.get('PURE_PYTHON')!= '0'\n    )\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return c_optimizations_required\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        cfg.CONF.resource_optimization or\n        (cfg.CONF.debug and not cfg.CONF.profile))\n", "def _c_optimizations_required():\n    \"\"\"Return a true value if the C optimizations are required.\"\"\"\n    return not (python_version() >= '3' or sys.version_info >= (3, 0))\n", "def _c_optimizations_required():\n    \"\"\"Return a true value if the C optimizations are required.\"\"\"\n    return (os.environ.get('C_OPTIMIZATIONS') == '1' or\n            os.environ.get('C_OPTIMIZATIONS_ON') == '1')\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        (os.environ.get(\"SLURM_JOB_ID\", \"\") is not None) and\n        (os.environ.get(\"SLURM_JOB_NAME\", \"\") is not None) and\n        (os.environ.get(\"SLURM_JOB_JOB_ID\", \"\") == os.environ[\"SLURM_JOB_NAME\"]) and\n        (os.environ.get(\"SLURM_JOB_HOSTNAME\", \"\") == os.environ[\"SLURM_JOB_ID\"]))\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return False\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        not _py_optimizations_required() or\n        not _cython_optimizations_required() or\n        not _ipython_optimizations_required())\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return ((__version__.startswith('2.') and sys.version_info.major >= 2) or\n            (__version__.startswith('3.') and sys.version_info.major >= 3))\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return '-O2 -g -Wall -fopenmp' in __opts__['args']\n", "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return not _c_optimizations_optional() and not _cpp_optimizations_optional()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return c_optimizations_required\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        cfg.CONF.resource_optimization or\n        (cfg.CONF.debug and not cfg.CONF.profile))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"Return a true value if the C optimizations are required.\"\"\"\n    return not (python_version() >= '3' or sys.version_info >= (3, 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"Return a true value if the C optimizations are required.\"\"\"\n    return (os.environ.get('C_OPTIMIZATIONS') == '1' or\n            os.environ.get('C_OPTIMIZATIONS_ON') == '1')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        (os.environ.get(\"SLURM_JOB_ID\", \"\") is not None) and\n        (os.environ.get(\"SLURM_JOB_NAME\", \"\") is not None) and\n        (os.environ.get(\"SLURM_JOB_JOB_ID\", \"\") == os.environ[\"SLURM_JOB_NAME\"]) and\n        (os.environ.get(\"SLURM_JOB_HOSTNAME\", \"\") == os.environ[\"SLURM_JOB_ID\"]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return (\n        not _py_optimizations_required() or\n        not _cython_optimizations_required() or\n        not _ipython_optimizations_required())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return ((__version__.startswith('2.') and sys.version_info.major >= 2) or\n            (__version__.startswith('3.') and sys.version_info.major >= 3))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return '-O2 -g -Wall -fopenmp' in __opts__['args']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    \"\"\"\n    Return a true value if the C optimizations are required.\n    \"\"\"\n    return not _c_optimizations_optional() and not _cpp_optimizations_optional()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self.bins = {}\n", "def reset(self):\n    self.context = {}\n    self.make_bins()\n", "def reset(self):\n    self.__init__()\n", "def reset(self):\n    self.__dict__['__current_context'] = {}\n    self.__dict__['__current_bins'] = {}\n", "def reset(self):\n    self.__dict__.clear()\n", "def reset(self):\n    self.__dict__ = {}\n    self.make_bins()\n", "def reset(self):\n    self.__dict__ = {}\n", "def reset(self):\n    self.__dict__ = {}\n    self.make_bins()\n", "def reset(self):\n    self.__dict__.clear()\n    self.make_bins()\n", "def reset(self):\n    self._ctx = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self.bins = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.context = {}\n    self.make_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self.__init__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self.__dict__['__current_context'] = {}\n    self.__dict__['__current_bins'] = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.__dict__.clear()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.__dict__ = {}\n    self.make_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self.__dict__ = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self.__dict__ = {}\n    self.make_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self.__dict__.clear()\n    self.make_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._ctx = {}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    from warnings import warn\n    warn(\"to_csv is deprecated, use lena.output.ToCSV\", DeprecationWarning)\n    if header is None:\n        header = []\n    return header + [str(p) for p in self]\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output._graph import ToCSV\n    return ToCSV(separator, header)(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.to_csv import ToCSV\n    return ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use output.ToCSV()\", DeprecationWarning)\n    return output.ToCSV(self, separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    return to_csv([[str(x) for x in row] for row in self], separator, header)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).write(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated, use to_csv(separator, header).\", DeprecationWarning)\n    return to_csv(separator, header)(self)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from warnings import warn\n    warn(\"to_csv is deprecated, use lena.output.ToCSV\", DeprecationWarning)\n    if header is None:\n        header = []\n    return header + [str(p) for p in self]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output._graph import ToCSV\n    return ToCSV(separator, header)(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.to_csv import ToCSV\n    return ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(self, separator=separator, header=header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    warnings.warn(\"to_csv is deprecated, use output.ToCSV()\", DeprecationWarning)\n    return output.ToCSV(self, separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return to_csv([[str(x) for x in row] for row in self], separator, header)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).write(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output.ToCSV import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    from lena.output import ToCSV\n    return ToCSV(separator, header).dump(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    import warnings\n    warnings.warn(\"to_csv is deprecated, use to_csv(separator, header).\", DeprecationWarning)\n    return to_csv(separator, header)(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n    \"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.    \n    \"\"\"\n    if coord_name in self._coord_name_to_index:\n        return self._coord_name_to_index[coord_name]\n    else:\n        return []\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name.\"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\" Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, j in enumerate(self._coord_names)\n            if j == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n    \"\"\"\n    return [i for i, x in enumerate(self.coords[coord_name]) if x == 'error']\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, x in enumerate(self._singles) if x[0] == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, x in enumerate(self.coords) if x.name == coord_name]\n", "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, (x, y) in enumerate(self._coord_info)\n            if x == coord_name and y == 'err']\n", "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, coord in enumerate(self._coords)\n            if coord_name == coord.name()]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n    \"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.    \n    \"\"\"\n    if coord_name in self._coord_name_to_index:\n        return self._coord_name_to_index[coord_name]\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name.\"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, c in enumerate(self.coords) if c == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\" Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, j in enumerate(self._coord_names)\n            if j == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n    \"\"\"\n    return [i for i, x in enumerate(self.coords[coord_name]) if x == 'error']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, x in enumerate(self._singles) if x[0] == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name. \"\"\"\n    return [i for i, x in enumerate(self.coords) if x.name == coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"\n    Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, (x, y) in enumerate(self._coord_info)\n            if x == coord_name and y == 'err']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    \"\"\"Find all error indexes corresponding to coord_name.\n\n    \"\"\"\n    return [i for i, coord in enumerate(self._coords)\n            if coord_name == coord.name()]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    context.value.update({\"error\": {\"x_low\": {\"index\": 0}}})\n", "def _update_context(self, context):\n    context.value.update({\"error\": context.error})\n", "def _update_context(self, context):\n    context.error = []\n    if self.error is not None:\n        for i, e in enumerate(self.error):\n            context.value.append({\"x_low\": {\"index\": i}})\n            context.value.append(e)\n", "def _update_context(self, context):\n    context.error = []\n", "def _update_context(self, context):\n    context.error = []\n    for k, v in self._error.items():\n        context.error.append({\"x_low\": v[\"index\"], \"y\": k})\n    return context\n", "def _update_context(self, context):\n    context['error'].append({'index': self._index})\n    return context\n", "def _update_context(self, context):\n    context.value.update({'error': {}})\n    for e, ei in zip(self._error, self._error_indices):\n        context.value['error'].update({e: {'x_low': {ei: e.x_low}}})\n", "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value['x'] = {}\n    context.value['y'] = {}\n    context.value['z'] = {}\n    context.value['error'] = {}\n    context.value['x_low'] = {}\n    context.value['y_low'] = {}\n    context.value['z_low'] = {}\n    context.value['x']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x_low']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x']['value'] = 0\n    context.value['y']['value'] = 0\n    context.value['z']['value'] = 0\n    context.value['error']['value'] = 0\n", "def _update_context(self, context):\n    context.error = []\n", "def _update_context(self, context):\n    context.error = []\n    for k, v in self.value.items():\n        if k == \"x\":\n            context.value[k] = v.x_low\n        elif k == \"y\":\n            context.value[k] = v.y_low\n        elif k == \"z\":\n            context.value[k] = v.z_low\n        else:\n            context.value[k] = v.error\n        context.error.append(k)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    context.value.update({\"error\": {\"x_low\": {\"index\": 0}}})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value.update({\"error\": context.error})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    if self.error is not None:\n        for i, e in enumerate(self.error):\n            context.value.append({\"x_low\": {\"index\": i}})\n            context.value.append(e)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for k, v in self._error.items():\n        context.error.append({\"x_low\": v[\"index\"], \"y\": k})\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context['error'].append({'index': self._index})\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.value.update({'error': {}})\n    for e, ei in zip(self._error, self._error_indices):\n        context.value['error'].update({e: {'x_low': {ei: e.x_low}}})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    context.value = {}\n    context.value['x'] = {}\n    context.value['y'] = {}\n    context.value['z'] = {}\n    context.value['error'] = {}\n    context.value['x_low'] = {}\n    context.value['y_low'] = {}\n    context.value['z_low'] = {}\n    context.value['x']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x_low']['index'] = 0\n    context.value['y']['index'] = 0\n    context.value['z']['index'] = 0\n    context.value['error']['index'] = 0\n    context.value['x']['value'] = 0\n    context.value['y']['value'] = 0\n    context.value['z']['value'] = 0\n    context.value['error']['value'] = 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context.error = []\n    for k, v in self.value.items():\n        if k == \"x\":\n            context.value[k] = v.x_low\n        elif k == \"y\":\n            context.value[k] = v.y_low\n        elif k == \"z\":\n            context.value[k] = v.z_low\n        else:\n            context.value[k] = v.error\n        context.error.append(k)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    \n    \n    return ((bins[1:] + bins[:-1]) * edges[1:]).sum()\n", "def integral(bins, edges):\n    \n    \n    return 0.5 * (bins[1:] + bins[:-1])\n", "def integral(bins, edges):\n    \n    \n    return 0.5 * (bins[1:] + bins[:-1])\n", "def integral(bins, edges):\n    \n    \n    return (edges[1] - edges[0]) * (bins[1] - bins[0])\n", "def integral(bins, edges):\n    \n    \n    area = (bins[1] - bins[0]) * (edges[2] - edges[1])\n    return area\n", "def integral(bins, edges):\n    \n    \n    return sum([((i - j) * (j - i)) / ((bins[i + 1] - bins[i]) * (bins[j + 1] - bins[j])) for i, j in edges])\n", "def integral(bins, edges):\n    \n    \n    return 0.5 * np.trapz(bins * edges, edges)\n", "def integral(bins, edges):\n    \n    \n    area = 0.0\n    for i in range(len(bins) - 1):\n        area += bins[i + 1] * (edges[i + 1] - edges[i])\n    return area\n", "def integral(bins, edges):\n    return (bins[1:]-bins[:-1])*(edges[1:]-edges[:-1])\n", "def integral(bins, edges):\n    area = 0.0\n    for i in range(len(bins)):\n        area += (bins[i] * edges[i])\n    return area\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    \n    \n    return ((bins[1:] + bins[:-1]) * edges[1:]).sum()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    return 0.5 * (bins[1:] + bins[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    return 0.5 * (bins[1:] + bins[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    return (edges[1] - edges[0]) * (bins[1] - bins[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    area = (bins[1] - bins[0]) * (edges[2] - edges[1])\n    return area\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    return sum([((i - j) * (j - i)) / ((bins[i + 1] - bins[i]) * (bins[j + 1] - bins[j])) for i, j in edges])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    return 0.5 * np.trapz(bins * edges, edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    \n    \n    area = 0.0\n    for i in range(len(bins) - 1):\n        area += bins[i + 1] * (edges[i + 1] - edges[i])\n    return area\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (bins[1:]-bins[:-1])*(edges[1:]-edges[:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    area = 0.0\n    for i in range(len(bins)):\n        area += (bins[i] * edges[i])\n    return area\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    if seq.count('-') % 3!= 0:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    return isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return False if seq is None else all(isinstance(n, int) and n > 0 for n in seq)\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return (\n        isinstance(seq, str) and\n        len(seq) == 5 and\n        seq[0] == 'F' and\n        seq[1] == 'R' and\n        seq[2] == 'L' and\n        seq[3] == 'R' and\n        seq[4] == 'L' and\n        seq[5] == 'R'\n    )\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    try:\n        seq.to_fill_request()\n        return True\n    except ValueError:\n        return False\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    if len(seq)!= 4:\n        return False\n    try:\n        int(seq[0]) * 100 + int(seq[1]) * 10 + int(seq[2])\n    except ValueError:\n        return False\n    return True\n", "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    if len(seq)!= 1:\n        return False\n    return isinstance(seq[0], int)\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    try:\n        FillRequestSeq(seq)\n        return True\n    except ValueError:\n        return False\n", "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return isinstance(seq, FillRequestSeq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    if seq.count('-') % 3!= 0:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    return isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return False if seq is None else all(isinstance(n, int) and n > 0 for n in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return (\n        isinstance(seq, str) and\n        len(seq) == 5 and\n        seq[0] == 'F' and\n        seq[1] == 'R' and\n        seq[2] == 'L' and\n        seq[3] == 'R' and\n        seq[4] == 'L' and\n        seq[5] == 'R'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    try:\n        seq.to_fill_request()\n        return True\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    if len(seq)!= 4:\n        return False\n    try:\n        int(seq[0]) * 100 + int(seq[1]) * 10 + int(seq[2])\n    except ValueError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"Check whether seq can be converted to FillRequestSeq and bool is returned.\"\"\"\n    if len(seq)!= 1:\n        return False\n    return isinstance(seq[0], int)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    try:\n        FillRequestSeq(seq)\n        return True\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    \"\"\"\n    Check whether seq can be converted to FillRequestSeq and bool is returned.\n    \"\"\"\n    return isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillRequest\" and\n        obj.fill.__class__.__name__ == \"Request\" and\n        obj.request.__class__.__name__ == \"Pillar\"\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill.__class__.__name__ == 'SelectedFill' and\n        obj.request.__class__.__name__ == 'SelectedRequest'\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        isinstance(obj, dict) and\n        obj.get('fill') is not None and\n        obj.get('request') is not None\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        isinstance(obj, dict)\n        and \"fill\" in obj\n        and \"request\" in obj\n        and \"type\" in obj[\"fill\"]\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill_request.__class__.__name__ == 'FillRequest' and\n        obj.request.__class__.__name__ == 'Request'\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"Check whether the obj class has the fill and request attributes.\"\"\"\n    return (\n        obj.tag == \"{%s}Fill\" % SHEET_MAIN_NS\n        and \"Request\" in obj.attrib\n        and obj.attrib[\"Request\"] == \"CreateFill\"\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill_request.__class__.__name__ == 'FillRequest' and\n        obj.request.__class__.__name__ == 'Request'\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.tag == \"{%s}Fill\" % SHEET_MAIN_NS\n        and obj.attrib.get(\"{%s}type\", \"\") == \"Request\"\n        and obj.attrib.get(\"{%s}fill\" % SHEET_MAIN_NS, \"\") == \"transparent\"\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillAndRequest\" and\n        obj.fill_request_id and\n        obj.request_id\n    )\n", "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest'\n        and obj.fill_request.__class__.__name__ == 'FillRequest'\n        and obj.request.__class__.__name__ == 'Request'\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillRequest\" and\n        obj.fill.__class__.__name__ == \"Request\" and\n        obj.request.__class__.__name__ == \"Pillar\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill.__class__.__name__ == 'SelectedFill' and\n        obj.request.__class__.__name__ == 'SelectedRequest'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        isinstance(obj, dict) and\n        obj.get('fill') is not None and\n        obj.get('request') is not None\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        isinstance(obj, dict)\n        and \"fill\" in obj\n        and \"request\" in obj\n        and \"type\" in obj[\"fill\"]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill_request.__class__.__name__ == 'FillRequest' and\n        obj.request.__class__.__name__ == 'Request'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"Check whether the obj class has the fill and request attributes.\"\"\"\n    return (\n        obj.tag == \"{%s}Fill\" % SHEET_MAIN_NS\n        and \"Request\" in obj.attrib\n        and obj.attrib[\"Request\"] == \"CreateFill\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest' and\n        obj.fill_request.__class__.__name__ == 'FillRequest' and\n        obj.request.__class__.__name__ == 'Request'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.tag == \"{%s}Fill\" % SHEET_MAIN_NS\n        and obj.attrib.get(\"{%s}type\", \"\") == \"Request\"\n        and obj.attrib.get(\"{%s}fill\" % SHEET_MAIN_NS, \"\") == \"transparent\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillAndRequest\" and\n        obj.fill_request_id and\n        obj.request_id\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and request attributes.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == 'FillRequest'\n        and obj.fill_request.__class__.__name__ == 'FillRequest'\n        and obj.request.__class__.__name__ == 'Request'\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n        return True\n    except:\n        return False\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"RunMethod\" and\n        hasattr(obj, \"run\") and\n        callable(getattr(obj, \"run\"))\n    )\n", "def is_run_el(obj):\n    \"\"\"Check whether the obj class has the run method.\n    \"\"\"\n    return isinstance(obj, type) and issubclass(obj, RunBase) and obj.run\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    if obj.__class__.__name__!= 'RunMetadata':\n        return False\n    return 'run' in obj.__dict__\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    if obj.__class__.__name__!= 'RunMethod':\n        return False\n    return obj.run is not None\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except AttributeError:\n        return False\n    return True\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except AttributeError:\n        return False\n    return True\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except NotImplementedError:\n        return False\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n        return True\n    except:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"RunMethod\" and\n        hasattr(obj, \"run\") and\n        callable(getattr(obj, \"run\"))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"Check whether the obj class has the run method.\n    \"\"\"\n    return isinstance(obj, type) and issubclass(obj, RunBase) and obj.run\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    if obj.__class__.__name__!= 'RunMetadata':\n        return False\n    return 'run' in obj.__dict__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    if obj.__class__.__name__!= 'RunMethod':\n        return False\n    return obj.run is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except AttributeError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except AttributeError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    \"\"\"\n    Check whether the obj class has the run method.\n    \"\"\"\n    try:\n        obj.run()\n    except NotImplementedError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__module__ == \"numpy\"\n        and obj.__name__ == \"FillCompute\"\n        and obj.__doc__ == \"\"\"\n        Compute the fill function of a specified array.\n        \"\"\"\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        (inspect.isclass(obj) and obj.__module__ == \"numpy\" and\n         obj.__name__ == \"FillCompute\") or\n        (inspect.isfunction(obj) and obj.__name__ == \"ComputeFill\"))\n", "def is_fill_compute_el(obj):\n    \"\"\"Check whether the obj class has the fill and compute methods.\"\"\"\n    return (\n        obj.__class__.__name__ in _FILL_COMPUTE_EL_CLS or\n        obj.__class__.__name__ in _FILL_COMPUTE_EL_REG\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ in [\"ShapeFill2D\", \"ShapeFill3D\", \"CircleFill2D\", \"CircleFill3D\"]\n        and obj.fill is not None\n        and obj.compute is not None\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        isinstance(obj, (\n            tuple,\n            list,\n            np.ndarray,\n            pd.Series,\n            pd.DataFrame,\n            pd.DataFrameGroupBy,\n            ABC,\n            Series,\n            DataFrame,\n            DataFrameGroupBy,\n            np.ndarray,\n            list,\n            Series,\n            DataFrame,\n            np.ndarray,\n            pd.Series,\n            pd.DataFrame,\n        ))\n        and obj[0]!= obj[1]\n        and obj[0]!= obj[2]\n        and obj[0]!= obj[3]\n        and obj[1]!= obj[2", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        hasattr(obj, \"fill\")\n        and hasattr(obj, \"compute\")\n        and hasattr(obj, \"__eq__\")\n        and hasattr(obj, \"__lt__\")\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillCompute\" and\n        obj.fill_method == \"mean\" and\n        obj.fill_constant == 0\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"Check whether the obj class has the fill and compute methods.\"\"\"\n    return (\n        obj.__class__.__name__ == \"FillCompute\" and\n        obj.fill_method == \"mean\" and\n        obj.fill_constant == 0 and\n        obj.__name__ == \"mean\" and\n        obj.__module__ == \"numpy\"\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ in FILL_COMPUTE_EL_CLASSES\n        and obj.fill_el is not None\n        and obj.compute_el is not None\n    )\n", "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        (obj.__class__.__name__ == \"Fill\") and\n        (obj.fill_method == \"mean\") and\n        (obj.fill_direction == \"forward\")\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__module__ == \"numpy\"\n        and obj.__name__ == \"FillCompute\"\n        and obj.__doc__ == \"\"\"\n        Compute the fill function of a specified array.\n        \"\"\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        (inspect.isclass(obj) and obj.__module__ == \"numpy\" and\n         obj.__name__ == \"FillCompute\") or\n        (inspect.isfunction(obj) and obj.__name__ == \"ComputeFill\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"Check whether the obj class has the fill and compute methods.\"\"\"\n    return (\n        obj.__class__.__name__ in _FILL_COMPUTE_EL_CLS or\n        obj.__class__.__name__ in _FILL_COMPUTE_EL_REG\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ in [\"ShapeFill2D\", \"ShapeFill3D\", \"CircleFill2D\", \"CircleFill3D\"]\n        and obj.fill is not None\n        and obj.compute is not None\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        isinstance(obj, (\n            tuple,\n            list,\n            np.ndarray,\n            pd.Series,\n            pd.DataFrame,\n            pd.DataFrameGroupBy,\n            ABC,\n            Series,\n            DataFrame,\n            DataFrameGroupBy,\n            np.ndarray,\n            list,\n            Series,\n            DataFrame,\n            np.ndarray,\n            pd.Series,\n            pd.DataFrame,\n        ))\n        and obj[0]!= obj[1]\n        and obj[0]!= obj[2]\n        and obj[0]!= obj[3]\n        and obj[1]!= obj[2", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        hasattr(obj, \"fill\")\n        and hasattr(obj, \"compute\")\n        and hasattr(obj, \"__eq__\")\n        and hasattr(obj, \"__lt__\")\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ == \"FillCompute\" and\n        obj.fill_method == \"mean\" and\n        obj.fill_constant == 0\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"Check whether the obj class has the fill and compute methods.\"\"\"\n    return (\n        obj.__class__.__name__ == \"FillCompute\" and\n        obj.fill_method == \"mean\" and\n        obj.fill_constant == 0 and\n        obj.__name__ == \"mean\" and\n        obj.__module__ == \"numpy\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        obj.__class__.__name__ in FILL_COMPUTE_EL_CLASSES\n        and obj.fill_el is not None\n        and obj.compute_el is not None\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    \"\"\"\n    Check whether the obj class has the fill and compute methods.\n    \"\"\"\n    return (\n        (obj.__class__.__name__ == \"Fill\") and\n        (obj.fill_method == \"mean\") and\n        (obj.fill_direction == \"forward\")\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return dict((k, v) for k, v in d1.items() if k not in d2 or d2[k]!= v, **(d2 or {}))\n", "def difference(d1, d2, level=-1):\n    \"\"\"\n    Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    return {k: v for k, v in d2.items() if k not in d1}\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return _items_under_level(d2, lambda x: x not in d1, level)\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return {k: v for k, v in d2 if k not in d1 or level < 0}\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return _difference(d2, d1, level)\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    result = {}\n    for key in d1:\n        if key not in d2 or d1[key] < d2[key]:\n            result[key] = d1[key]\n    if level < 0:\n        return result\n    else:\n        return []\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    d2 = d2 or {}\n    return {k: v for k, v in d1.items() if k not in d2 or d2[k]!= v}\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    result = {}\n    for k in d2:\n        if k not in d1:\n            result[k] = d1[level]\n    return result\n", "def difference(d1, d2, level=-1):\n    \"\"\"\n    Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    result = {}\n    for key, value in d1.items():\n        if key not in d2 and level < 0:\n            result[key] = value\n        elif key not in d2 and level > 0:\n            result[key] = d2.get(key, value)\n        elif key not in d1 and level < 0:\n            result[key] = d1.get(key, value)\n        elif key in d1 and level > 0:\n            result[key] = d1.get(key, value) - d2.get(key, value)\n    return result\n", "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\"\"\"\n    return {k: v for k, v in six.iteritems(d1) if k not in d2 or d2[k]!= v}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return dict((k, v) for k, v in d1.items() if k not in d2 or d2[k]!= v, **(d2 or {}))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"\n    Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    return {k: v for k, v in d2.items() if k not in d1}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return _items_under_level(d2, lambda x: x not in d1, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return {k: v for k, v in d2 if k not in d1 or level < 0}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    return _difference(d2, d1, level)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    result = {}\n    for key in d1:\n        if key not in d2 or d1[key] < d2[key]:\n            result[key] = d1[key]\n    if level < 0:\n        return result\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    d2 = d2 or {}\n    return {k: v for k, v in d1.items() if k not in d2 or d2[k]!= v}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2. \"\"\"\n    result = {}\n    for k in d2:\n        if k not in d1:\n            result[k] = d1[level]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"\n    Return a dictionary with items from d1 not contained in d2.\n    \"\"\"\n    result = {}\n    for key, value in d1.items():\n        if key not in d2 and level < 0:\n            result[key] = value\n        elif key not in d2 and level > 0:\n            result[key] = d2.get(key, value)\n        elif key not in d1 and level < 0:\n            result[key] = d1.get(key, value)\n        elif key in d1 and level > 0:\n            result[key] = d1.get(key, value) - d2.get(key, value)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    \"\"\"Return a dictionary with items from d1 not contained in d2.\"\"\"\n    return {k: v for k, v in six.iteritems(d1) if k not in d2 or d2[k]!= v}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] += weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill history at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._fill[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "def fill(self, coord, weight=1):\n    self._fill(coord, weight)", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._hist[coord] += weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill history at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._fill[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histoogram at *coord* with the given *weight*.\n\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._filled[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._fill(coord, weight)", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self._histogram[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    \"\"\"\n    Fill histogram at *coord* with the given *weight*.\n    Coordinates outside the histogram edges are ignored.\n    \"\"\"\n    self.data[coord] += weight\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    if labels is None:\n        return True\n    if not isinstance(labels, dict):\n        return False\n    for key in labels:\n        if not isinstance(key, str):\n            return False\n        if not key:\n            return False\n        if key not in labels[key]:\n            return False\n    return True\n", "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are validated by validate_key()\n    and validate_value(). \n    \"\"\"\n    for k, v in labels.items():\n        _validate_key(k)\n        _validate_value(v)\n", "def _validate_labels(labels):\n    \n    \n    if not labels:\n        return {}\n    return {k: v for k, v in labels.items() if k in _VALID_KEYS}\n", "def _validate_labels(labels):\n    if not isinstance(labels, dict):\n        raise ValueError('labels must be a dictionary')\n    for label in labels:\n        _validate_key(label)\n        _validate_value(labels[label])\n", "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are valid.\n    \"\"\"\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise TypeError('Key %r in labels must be a string.' % key)\n        if not isinstance(value, str):\n            raise TypeError('Value %r in labels must be a string.' % value)\n", "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels by validate_key() and validate_value().\n    \"\"\"\n    for key in labels:\n        _validate_key(key)\n        _validate_value(labels[key])\n", "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels by validate_key() and validate_value().\n    \"\"\"\n    return set(labels) == set([\"label\", \"text\", \"value\", \"semantic_types\"])\n", "def _validate_labels(labels):\n    return set(labels.keys()) <= _validate_keys | set(labels.values())\n", "def _validate_labels(labels):\n    if labels is None:\n        return\n    if not isinstance(labels, dict):\n        raise TypeError('labels must be a dict')\n    for key, value in labels.items():\n        _validate_key(key)\n        _validate_value(value)\n", "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are valid.\n    \"\"\"\n    for key, value in list(labels.items()):\n        if key not in _VALID_KEYS:\n            raise ValueError('Invalid label key \"{}\".'.format(key))\n        if value not in _VALID_VALUES:\n            raise ValueError('Invalid label value \"{}\".'.format(value))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    if labels is None:\n        return True\n    if not isinstance(labels, dict):\n        return False\n    for key in labels:\n        if not isinstance(key, str):\n            return False\n        if not key:\n            return False\n        if key not in labels[key]:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are validated by validate_key()\n    and validate_value(). \n    \"\"\"\n    for k, v in labels.items():\n        _validate_key(k)\n        _validate_value(v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \n    \n    if not labels:\n        return {}\n    return {k: v for k, v in labels.items() if k in _VALID_KEYS}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    if not isinstance(labels, dict):\n        raise ValueError('labels must be a dictionary')\n    for label in labels:\n        _validate_key(label)\n        _validate_value(labels[label])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are valid.\n    \"\"\"\n    for key, value in labels.items():\n        if not isinstance(key, str):\n            raise TypeError('Key %r in labels must be a string.' % key)\n        if not isinstance(value, str):\n            raise TypeError('Value %r in labels must be a string.' % value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels by validate_key() and validate_value().\n    \"\"\"\n    for key in labels:\n        _validate_key(key)\n        _validate_value(labels[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels by validate_key() and validate_value().\n    \"\"\"\n    return set(labels) == set([\"label\", \"text\", \"value\", \"semantic_types\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return set(labels.keys()) <= _validate_keys | set(labels.values())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    if labels is None:\n        return\n    if not isinstance(labels, dict):\n        raise TypeError('labels must be a dict')\n    for key, value in labels.items():\n        _validate_key(key)\n        _validate_value(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    \"\"\"\n    Check that keys and values in the given labels are valid.\n    \"\"\"\n    for key, value in list(labels.items()):\n        if key not in _VALID_KEYS:\n            raise ValueError('Invalid label key \"{}\".'.format(key))\n        if value not in _VALID_VALUES:\n            raise ValueError('Invalid label value \"{}\".'.format(value))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the Krake\n    resources\n    \"\"\"\n    return [\n        re.compile(r\"^krake-([a-zA-Z0-9\\-]+)$\")\n    ]\n", "def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the\n    Krake resources\n    \"\"\"\n    return [\n        \".*\\\\.kraken.*\",\n    ]\n", "def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the\n    Krake resources\n    \"\"\"\n    return [\n        re.compile(r\".*resources/(?P<resource>.*).json$\"),\n        re.compile(r\".*resources/(?P<resource>.*).yaml$\"),\n    ]\n", "def _get_resource_name_regex():\n    return r\"^(krake|krake-\\d+\\.io)\\.json$\"\n", "def _get_resource_name_regex():\n    return r\"^kraken\\.(com|org)/(.*)$\"\n", "def _get_resource_name_regex():\n    \n    \n    return r\"\"\"\n    (?:(?P<resource_name>(?:[a-zA-Z][a-zA-Z0-9_]*\\.)+)\\.){2}(?P<project>.+)\n    \"\"\"\n", "def _get_resource_name_regex():\n    return r\"^(?P<resource_name>.+)$\"\n", "def _get_resource_name_regex():\n    return r\"^(?P<resource_name>.+)\\/(?P<resource_type>.+)$\"\n", "def _get_resource_name_regex():\n    return {\n        \"id\": r\"^(?P<id>[0-9]+)\\/(?P<name>.+)$\",\n        \"name\": r\"^(?P<name>.+)$\",\n    }\n", "def _get_resource_name_regex():\n    return r\"^kraken-(?P<name>.+)-[0-9a-zA-Z\\-]+$\"\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the Krake\n    resources\n    \"\"\"\n    return [\n        re.compile(r\"^krake-([a-zA-Z0-9\\-]+)$\")\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the\n    Krake resources\n    \"\"\"\n    return [\n        \".*\\\\.kraken.*\",\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    \"\"\"\n    Return the regular expressions that are used to validate the name of the\n    Krake resources\n    \"\"\"\n    return [\n        re.compile(r\".*resources/(?P<resource>.*).json$\"),\n        re.compile(r\".*resources/(?P<resource>.*).yaml$\"),\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return r\"^(krake|krake-\\d+\\.io)\\.json$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return r\"^kraken\\.(com|org)/(.*)$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    \n    \n    return r\"\"\"\n    (?:(?P<resource_name>(?:[a-zA-Z][a-zA-Z0-9_]*\\.)+)\\.){2}(?P<project>.+)\n    \"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return r\"^(?P<resource_name>.+)$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return r\"^(?P<resource_name>.+)\\/(?P<resource_type>.+)$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        \"id\": r\"^(?P<id>[0-9]+)\\/(?P<name>.+)$\",\n        \"name\": r\"^(?P<name>.+)$\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return r\"^kraken-(?P<name>.+)-[0-9a-zA-Z\\-]+$\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    \n    \n    return bool(re.match(r\"^[0-9]+(\\.[0-9]+)?$\", value))\n", "def validate_value(value):\n    \n    \n    return bool(re.match(REGEX, value))\n", "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    if re.match(REGEX, value) is None:\n        return False\n    return True\n", "def validate_value(value):\n    return bool(re.match(value, \"\"))\n", "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    return bool(re.match(value, str(value)))\n", "def validate_value(value):\n    return bool(re.match(r'^(\\d+)(\\D*)$', value))\n", "def validate_value(value):\n    \n    \n    return bool(__import__('re').match(value, ''))\n", "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    if value is None:\n        return\n    regex = r'^(?:[0-9]+\\.[0-9]+)?(?:\\.[0-9]+)?$'\n    if re.match(regex, value) is None:\n        raise ValidationError('Invalid value for %s: %s' % (\n                              __name__, value))\n", "def validate_value(value):\n    \n    \n    return bool(re.match(value, \"0|1|2|3|4|5|6|7|8|9\"))\n", "def validate_value(value):\n    return bool(re.match(REGEX, value))\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    \n    \n    return bool(re.match(r\"^[0-9]+(\\.[0-9]+)?$\", value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \n    \n    return bool(re.match(REGEX, value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    if re.match(REGEX, value) is None:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return bool(re.match(value, \"\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    return bool(re.match(value, str(value)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return bool(re.match(r'^(\\d+)(\\D*)$', value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \n    \n    return bool(__import__('re').match(value, ''))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \"\"\"\n    Validate the given value against the corresponding regular expression.\n    \"\"\"\n    if value is None:\n        return\n    regex = r'^(?:[0-9]+\\.[0-9]+)?(?:\\.[0-9]+)?$'\n    if re.match(regex, value) is None:\n        raise ValidationError('Invalid value for %s: %s' % (\n                              __name__, value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    \n    \n    return bool(re.match(value, \"0|1|2|3|4|5|6|7|8|9\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return bool(re.match(REGEX, value))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    \n    \n    return _KEY_REGEX.match(key)\n", "def validate_key(key):\n    \"\"\" Validate the given key against the corresponding regular expression. \"\"\"\n    return re.match(r\"^[A-Za-z0-9_]{1,50}$\", key)\n", "def validate_key(key):\n    \n    \n    return re.match(\n        r'^(?P<key>[A-Za-z0-9_]+)-(?P<version>\\d+)$', key) is not None\n", "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return bool(KEY_RE.match(key))\n", "def validate_key(key):\n    \n    \n    return bool(re.match(r'[a-zA-Z0-9_]{1,}$', key))\n", "def validate_key(key):\n    \n    \n    return re.match('[a-zA-Z0-9]{5,}$', key) is not None\n", "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return bool(re.match(\"^[a-zA-Z0-9]{32}$\", key))\n", "def validate_key(key):\n    \n    \n    return re.match(r\"^[a-z0-9]{1,}$\", key)\n", "def validate_key(key):\n    \n    \n    return re.match(r'^[a-zA-Z0-9_]{1}[a-zA-Z0-9_]{1}$', key) is not None\n", "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return re.match(REGEX, key) is not None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    \n    \n    return _KEY_REGEX.match(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \"\"\" Validate the given key against the corresponding regular expression. \"\"\"\n    return re.match(r\"^[A-Za-z0-9_]{1,50}$\", key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \n    \n    return re.match(\n        r'^(?P<key>[A-Za-z0-9_]+)-(?P<version>\\d+)$', key) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return bool(KEY_RE.match(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \n    \n    return bool(re.match(r'[a-zA-Z0-9_]{1,}$', key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \n    \n    return re.match('[a-zA-Z0-9]{5,}$', key) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return bool(re.match(\"^[a-zA-Z0-9]{32}$\", key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \n    \n    return re.match(r\"^[a-z0-9]{1,}$\", key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \n    \n    return re.match(r'^[a-zA-Z0-9_]{1}[a-zA-Z0-9_]{1}$', key) is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    \"\"\"\n    Validate the given key against the corresponding regular expression.\n    \"\"\"\n    return re.match(REGEX, key) is not None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'type': 'object', 'properties': {}}\n    else:\n        return {'type': 'object', 'properties': {\n            'user_id': {'type':'string'},\n            'last_name': {'type':'string'},\n            'email': {'type':'string'},\n            'phone': {'type':'string'},\n            'time_zone': {'type':'string'},\n            'location': {'type':'string'},\n           'street': {'type':'string'},\n            'zip': {'type':'string'},\n            'city': {'type':'string'},\n           'state': {'type':'string'},\n            'country': {'type':'string'},\n            'address': {'type':'string'},\n            'latitude': {'type': 'float'},\n            'longitude': {'type': 'float'", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict[str, str], bool) -> dict[str, str]\n    if first_level:\n        default_observer_schema = {\n            \"name\": \"observer\",\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": [],\n            \"additionalProperties\": False,\n        }\n    else:\n        default_observer_schema = {\n            \"name\": \"observer\",\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": [],\n            \"additionalProperties\": True,\n        }\n\n    default_observer_schema.update(\n        {\n            \"properties\": generate_default_observer_schema_dict(manifest_dict[\"properties\"]),\n            \"required\": [],\n            \"additionalProperties\": False,\n        }\n    )\n    return default_observer_", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {key: manifest_dict[key] for key in manifest_dict.keys()\n                if isinstance(manifest_dict[key], dict)}\n    else:\n        return {key: manifest_dict[key] for key in manifest_dict.keys()\n                if isinstance(manifest_dict[key], list)}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    for key, value in manifest_dict.items():\n        if first_level:\n            key = key.split('.')\n            result[key[0]] = {'type': value[0], 'default': value[1]}\n        else:\n            result[key] = {'type': value[0], 'default': value[1]}\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    default_dict = {}\n    for key, value in manifest_dict.items():\n        if first_level:\n            default_dict[key] = {\n                'type': value['type'],\n                'value': value['value']\n            }\n        else:\n            default_dict[key] = {\n                'type': value['type'],\n                'value': value['value']['value']\n            }\n    return default_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {k: manifest_dict[k] for k in manifest_dict.keys() if k!= 'context'}\n    else:\n        return {k: manifest_dict[k] for k in manifest_dict.keys() if k!= 'context' and k!= 'group'}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n\n    return {\n        'type': 'object',\n        'additionalProperties': {\n            'key': {\n                'type':'string',\n                'default': ''\n            },\n            'value': {\n                'type':'string'\n            }\n        },\n        'properties': {\n            'key': {\n                'type':'string'\n            },\n            'value': {\n                'type':'string'\n            }\n        }\n    }\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \"\"\"\n    The values corresponding to different keys in the new dict are generated\n    based on the value type (such as dict and list) in the manifest_dict file.\n    The new dictionary is returned. \n\n    @param manifest_dict The manifest dict.\n    @param first_level Whether the keys should be in the new dict in the first level.\n    @return The new dict with the values generated according to the manifest_dict file.\n    \"\"\"\n    if first_level:\n        return {k: v.default_value for k, v in manifest_dict.items()}\n    else:\n        return {k: v.value for k, v in manifest_dict.items()}\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    default_schema_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            default_schema_dict[key] = generate_default_observer_schema_dict(value, first_level=first_level)\n        else:\n            default_schema_dict[key] = value\n    return default_schema_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    d = {}\n    for key, value in manifest_dict.items():\n        d[key] = {\n            'type': value.type,\n            'default': value.default,\n            'pattern': value.pattern,\n        }\n    return d\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {'type': 'object', 'properties': {}}\n    else:\n        return {'type': 'object', 'properties': {\n            'user_id': {'type':'string'},\n            'last_name': {'type':'string'},\n            'email': {'type':'string'},\n            'phone': {'type':'string'},\n            'time_zone': {'type':'string'},\n            'location': {'type':'string'},\n           'street': {'type':'string'},\n            'zip': {'type':'string'},\n            'city': {'type':'string'},\n           'state': {'type':'string'},\n            'country': {'type':'string'},\n            'address': {'type':'string'},\n            'latitude': {'type': 'float'},\n            'longitude': {'type': 'float'", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict[str, str], bool) -> dict[str, str]\n    if first_level:\n        default_observer_schema = {\n            \"name\": \"observer\",\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": [],\n            \"additionalProperties\": False,\n        }\n    else:\n        default_observer_schema = {\n            \"name\": \"observer\",\n            \"type\": \"object\",\n            \"properties\": {},\n            \"required\": [],\n            \"additionalProperties\": True,\n        }\n\n    default_observer_schema.update(\n        {\n            \"properties\": generate_default_observer_schema_dict(manifest_dict[\"properties\"]),\n            \"required\": [],\n            \"additionalProperties\": False,\n        }\n    )\n    return default_observer_", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if not first_level:\n        return {key: manifest_dict[key] for key in manifest_dict.keys()\n                if isinstance(manifest_dict[key], dict)}\n    else:\n        return {key: manifest_dict[key] for key in manifest_dict.keys()\n                if isinstance(manifest_dict[key], list)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    for key, value in manifest_dict.items():\n        if first_level:\n            key = key.split('.')\n            result[key[0]] = {'type': value[0], 'default': value[1]}\n        else:\n            result[key] = {'type': value[0], 'default': value[1]}\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    default_dict = {}\n    for key, value in manifest_dict.items():\n        if first_level:\n            default_dict[key] = {\n                'type': value['type'],\n                'value': value['value']\n            }\n        else:\n            default_dict[key] = {\n                'type': value['type'],\n                'value': value['value']['value']\n            }\n    return default_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {k: manifest_dict[k] for k in manifest_dict.keys() if k!= 'context'}\n    else:\n        return {k: manifest_dict[k] for k in manifest_dict.keys() if k!= 'context' and k!= 'group'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        return {}\n\n    return {\n        'type': 'object',\n        'additionalProperties': {\n            'key': {\n                'type':'string',\n                'default': ''\n            },\n            'value': {\n                'type':'string'\n            }\n        },\n        'properties': {\n            'key': {\n                'type':'string'\n            },\n            'value': {\n                'type':'string'\n            }\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    \"\"\"\n    The values corresponding to different keys in the new dict are generated\n    based on the value type (such as dict and list) in the manifest_dict file.\n    The new dictionary is returned. \n\n    @param manifest_dict The manifest dict.\n    @param first_level Whether the keys should be in the new dict in the first level.\n    @return The new dict with the values generated according to the manifest_dict file.\n    \"\"\"\n    if first_level:\n        return {k: v.default_value for k, v in manifest_dict.items()}\n    else:\n        return {k: v.value for k, v in manifest_dict.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    default_schema_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            default_schema_dict[key] = generate_default_observer_schema_dict(value, first_level=first_level)\n        else:\n            default_schema_dict[key] = value\n    return default_schema_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    d = {}\n    for key, value in manifest_dict.items():\n        d[key] = {\n            'type': value.type,\n            'default': value.default,\n            'pattern': value.pattern,\n        }\n    return d\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for item in observer_schema:\n        if item['name'] not in last_applied_manifest:\n            last_applied_manifest.append(item['name'])\n            if 'type' in item:\n                last_applied_manifest_dict_from_resp(last_applied_manifest, item, response)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in response:\n        if k not in last_applied_manifest and k in observer_schema:\n            last_applied_manifest.append(k)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest.append(response[field])\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field_name, value in response.items():\n        if field_name not in observer_schema:\n            last_applied_manifest.append(value)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs_schema_item in observer_schema:\n        if obs_schema_item['name'] == 'last_applied_manifest':\n            last_applied_manifest.append(obs_schema_item['value'])\n        else:\n            last_applied_manifest_item = response[obs_schema_item['name']]\n            if obs_schema_item['name'] == 'last_applied_manifest':\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest_item, obs_schema_item['value'], response\n                )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n        elif isinstance(response[field], list):\n            if field in last_applied_manifest:\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest, observer_schema, response[field]\n                )\n            else:\n                last_applied_manifest.remove(field)\n        else:\n            last_applied_manifest.append(field)\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response[\"items\"].items():\n        if key not in last_applied_manifest:\n            last_applied_manifest.append(key)\n            if key not in observer_schema:\n                last_applied_manifest.append(key)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest[last_applied_manifest_field] = response[last_applied_manifest_field]\n        elif last_applied_manifest_field in response[\"metadata\"]:\n            last_applied_manifest[last_applied_manifest_field] = response[\"metadata\"][last_applied_manifest_field]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_entry in response:\n        if 'last_applied_manifest' in last_applied_manifest_entry:\n            last_applied_manifest['last_applied_manifest'] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest_entry['last_applied_manifest'],\n                    observer_schema, last_applied_manifest_entry['value']\n                )\n    return last_applied_manifest\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest.append(\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema[last_applied_manifest_field], response[last_applied_manifest_field]\n                )\n            )\n    return last_applied_manifest\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for item in observer_schema:\n        if item['name'] not in last_applied_manifest:\n            last_applied_manifest.append(item['name'])\n            if 'type' in item:\n                last_applied_manifest_dict_from_resp(last_applied_manifest, item, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in response:\n        if k not in last_applied_manifest and k in observer_schema:\n            last_applied_manifest.append(k)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest.append(response[field])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field_name, value in response.items():\n        if field_name not in observer_schema:\n            last_applied_manifest.append(value)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for obs_schema_item in observer_schema:\n        if obs_schema_item['name'] == 'last_applied_manifest':\n            last_applied_manifest.append(obs_schema_item['value'])\n        else:\n            last_applied_manifest_item = response[obs_schema_item['name']]\n            if obs_schema_item['name'] == 'last_applied_manifest':\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest_item, obs_schema_item['value'], response\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest.append(field)\n        elif isinstance(response[field], list):\n            if field in last_applied_manifest:\n                update_last_applied_manifest_list_from_resp(\n                    last_applied_manifest, observer_schema, response[field]\n                )\n            else:\n                last_applied_manifest.remove(field)\n        else:\n            last_applied_manifest.append(field)\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response[\"items\"].items():\n        if key not in last_applied_manifest:\n            last_applied_manifest.append(key)\n            if key not in observer_schema:\n                last_applied_manifest.append(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest[last_applied_manifest_field] = response[last_applied_manifest_field]\n        elif last_applied_manifest_field in response[\"metadata\"]:\n            last_applied_manifest[last_applied_manifest_field] = response[\"metadata\"][last_applied_manifest_field]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_entry in response:\n        if 'last_applied_manifest' in last_applied_manifest_entry:\n            last_applied_manifest['last_applied_manifest'] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest_entry['last_applied_manifest'],\n                    observer_schema, last_applied_manifest_entry['value']\n                )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for last_applied_manifest_field in observer_schema:\n        if last_applied_manifest_field in response:\n            last_applied_manifest.append(\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest, observer_schema[last_applied_manifest_field], response[last_applied_manifest_field]\n                )\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest[field] = response[field]\n        elif field in last_applied_manifest:\n            last_applied_manifest[field] = last_applied_manifest[field]\n        elif field in response.keys():\n            last_applied_manifest[field] = response[field]\n        else:\n            raise KeyError(\"%s not in %s\" % (field, response.keys()))\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v\n        elif isinstance(v, list):\n            if k in observer_schema[k]:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[k], observer_schema[k], v\n                )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            last_applied_manifest[k] = observer_schema[k](v)\n        elif k in (\"last_applied_manifest\", \"created_at\"):\n            last_applied_manifest[k] = v\n        else:\n            raise KeyError(\n                \"%s field is not in the response %s\" % (k, response)\n            )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), value, response[key]\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n        elif isinstance(response[k], list):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, response[k])\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), observer_schema.get(key), value\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(response[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response[field]\n            )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[field], observer_schema, response[field]\n                )\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for name, field in observer_schema.items():\n        if name not in last_applied_manifest:\n            last_applied_manifest[name] = field.default\n        elif field.default is not field.empty:\n            last_applied_manifest[name] = last_applied_manifest[name] or field.default\n        elif field.required:\n            raise KeyError(\n                \"Missing required field '{}' in last applied manifest\".format(name)\n            )\n    return last_applied_manifest\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field in response:\n            last_applied_manifest[field] = response[field]\n        elif field in last_applied_manifest:\n            last_applied_manifest[field] = last_applied_manifest[field]\n        elif field in response.keys():\n            last_applied_manifest[field] = response[field]\n        else:\n            raise KeyError(\"%s not in %s\" % (field, response.keys()))\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k not in observer_schema:\n            last_applied_manifest[k] = v\n        elif isinstance(v, list):\n            if k in observer_schema[k]:\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[k], observer_schema[k], v\n                )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k, v in response.items():\n        if k in observer_schema:\n            last_applied_manifest[k] = observer_schema[k](v)\n        elif k in (\"last_applied_manifest\", \"created_at\"):\n            last_applied_manifest[k] = v\n        else:\n            raise KeyError(\n                \"%s field is not in the response %s\" % (k, response)\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), value, response[key]\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for k in observer_schema:\n        if k not in last_applied_manifest:\n            last_applied_manifest[k] = response[k]\n        elif isinstance(response[k], list):\n            update_last_applied_manifest_dict_from_resp(last_applied_manifest[k], observer_schema, response[k])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for key, value in response.items():\n        if key not in observer_schema:\n            last_applied_manifest[key] = value\n        elif isinstance(value, dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest.get(key, {}), observer_schema.get(key), value\n            )\n        else:\n            last_applied_manifest[key] = value\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(response[field], dict):\n            update_last_applied_manifest_dict_from_resp(\n                last_applied_manifest[field], observer_schema, response[field]\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n        elif isinstance(last_applied_manifest[field], list):\n            last_applied_manifest[field] = \\\n                update_last_applied_manifest_dict_from_resp(\n                    last_applied_manifest[field], observer_schema, response[field]\n                )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for field in observer_schema:\n        if field not in last_applied_manifest:\n            last_applied_manifest[field] = response[field]\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    for name, field in observer_schema.items():\n        if name not in last_applied_manifest:\n            last_applied_manifest[name] = field.default\n        elif field.default is not field.empty:\n            last_applied_manifest[name] = last_applied_manifest[name] or field.default\n        elif field.required:\n            raise KeyError(\n                \"Missing required field '{}' in last applied manifest\".format(name)\n            )\n    return last_applied_manifest\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    for filename in app.config[\"OBSERVATORY_SPEC\"].get(\"SPEC_FILES\", []):\n        if not filename.endswith(\".yaml\"):\n            continue\n        yield from app.resolve_yaml_file(filename)\n", "def generate_default_observer_schema(app):\n    if app.config.get('OBSERVER_OBSERVER_SPEC'):\n        obs_schema = app.config.get('OBSERVER_OBSERVER_SPEC')\n        if not obs_schema:\n            obs_schema = 'object'\n        yield obs_schema\n", "def generate_default_observer_schema(app):\n    for k, v in app.config.items():\n        if k.endswith('_observer'):\n            app.config[k] = generate_default_observer_schema(v)\n", "def generate_default_observer_schema(app):\n    if not app.config.get('OBSERVER_OBSERVER_SCHEMA'):\n        for resource in app.config['SPEC'].get('resources', []):\n            if 'custom' not in resource:\n                app.config['OBSERVER_OBSERVER_SCHEMA'] = resource\n", "def generate_default_observer_schema(app):\n    for name in app.config.get('OBSERVER_SPEC_OBSERVERS', []):\n        generate_default_observer_schema(app, name)\n", "def generate_default_observer_schema(app):\n    return app.config['OBSERVER_SCHEMA']\n", "def generate_default_observer_schema(app):\n    custom_schema = {}\n    if 'observers' not in app.manifest:\n        return custom_schema\n    for path, custom_schema_path in app.manifest['observers'].items():\n        if path.startswith('/'):\n            continue\n        custom_schema[path] = generate_default_observer_schema(app, custom_schema_path)\n    return custom_schema\n", "def generate_default_observer_schema(app):\n    custom_schema = app.config.get('OBSERVER_DEFAULT_OBSERVER_SCHEMAS', {})\n    custom_schema = {\n        k: v for k, v in custom_schema.items()\n        if k not in app.config['OBSERVER_OBSERVER_DEFAULT_OBSERVER_SCHEMAS']\n    }\n    return custom_schema\n", "def generate_default_observer_schema(app):\n    if app.config.get('Kubernetes', {}).get('observer'):\n        return app.config.get('Kubernetes', {}).get('observer')\n    return {'$schema': 'http://json-schema.org/draft-04/schema#'}\n", "def generate_default_observer_schema(app):\n    custom_schema = app.config.get('OBSERVER_OBSERVER_SCHEMA')\n    if custom_schema:\n        return generate_schema(custom_schema)\n    else:\n        return generate_schema(app.resource_spec)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    for filename in app.config[\"OBSERVATORY_SPEC\"].get(\"SPEC_FILES\", []):\n        if not filename.endswith(\".yaml\"):\n            continue\n        yield from app.resolve_yaml_file(filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('OBSERVER_OBSERVER_SPEC'):\n        obs_schema = app.config.get('OBSERVER_OBSERVER_SPEC')\n        if not obs_schema:\n            obs_schema = 'object'\n        yield obs_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for k, v in app.config.items():\n        if k.endswith('_observer'):\n            app.config[k] = generate_default_observer_schema(v)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if not app.config.get('OBSERVER_OBSERVER_SCHEMA'):\n        for resource in app.config['SPEC'].get('resources', []):\n            if 'custom' not in resource:\n                app.config['OBSERVER_OBSERVER_SCHEMA'] = resource\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    for name in app.config.get('OBSERVER_SPEC_OBSERVERS', []):\n        generate_default_observer_schema(app, name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    return app.config['OBSERVER_SCHEMA']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = {}\n    if 'observers' not in app.manifest:\n        return custom_schema\n    for path, custom_schema_path in app.manifest['observers'].items():\n        if path.startswith('/'):\n            continue\n        custom_schema[path] = generate_default_observer_schema(app, custom_schema_path)\n    return custom_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = app.config.get('OBSERVER_DEFAULT_OBSERVER_SCHEMAS', {})\n    custom_schema = {\n        k: v for k, v in custom_schema.items()\n        if k not in app.config['OBSERVER_OBSERVER_DEFAULT_OBSERVER_SCHEMAS']\n    }\n    return custom_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if app.config.get('Kubernetes', {}).get('observer'):\n        return app.config.get('Kubernetes', {}).get('observer')\n    return {'$schema': 'http://json-schema.org/draft-04/schema#'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    custom_schema = app.config.get('OBSERVER_OBSERVER_SCHEMA')\n    if custom_schema:\n        return generate_schema(custom_schema)\n    else:\n        return generate_schema(app.resource_spec)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\n\nreturn self._converter.convert(sql, params)", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\n\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.format(sql, params)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\n\nreturn self._converter.convert(sql, params)", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\n\n\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tparams: Union[Dict[Union[str, int], Any], Sequence[Any]],\n\t) -> Tuple[AnyStr, Union[Dict[Union[str, int], Any], Sequence[Any]]]:\nreturn self._converter.format(sql, params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.convert_many(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.convert_many(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: AnyStr,\n\t\tmany_params: Union[Iterable[Dict[Union[str, int], Any]], Iterable[Sequence[Any]]],\n\t) -> Tuple[AnyStr, Union[List[Dict[Union[str, int], Any]], List[Sequence[Any]]]]:\nreturn self._converter.formatmany(sql, many_params)", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    return False\n", "def validate(self, path):\n    \n    \n    return self.invoke('validate', {'path': path})\n", "def validate(self, path):\n    return os.path.exists(os.path.join(path, self._path_prefix))\n", "def validate(self, path):\n    \n    \n    if not path:\n        return False\n    try:\n        self._validate(path)\n    except Exception as e:\n        return False\n    return True\n", "def validate(self, path):\n    \"\"\"\n    Returns True if OCFL object at path or pyfs root, False otherwise.\n    \"\"\"\n    return os.path.exists(self._as_posix(path))\n", "def validate(self, path):\n    \"\"\"\n    Returns True if OCFL object at path or pyfs root, False otherwise.\n    \"\"\"\n    return self.fs.validate(path)\n", "def validate(self, path):\n    return False", "def validate(self, path):\n    \"\"\"\n    Returns True if object at path or pyfs root, False otherwise.\n    \"\"\"\n    try:\n        self.fs.stat(path)\n    except OSError:\n        return False\n    return True\n", "def validate(self, path):\n    \"\"\"\n    Returns True if object at path or pyfs root, False otherwise.\n    \"\"\"\n    return self.fs.validate(path)\n", "def validate(self, path):\n    \n    \n    return os.path.exists(os.path.join(path, self.fs_name))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \n    \n    return self.invoke('validate', {'path': path})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return os.path.exists(os.path.join(path, self._path_prefix))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \n    \n    if not path:\n        return False\n    try:\n        self._validate(path)\n    except Exception as e:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Returns True if OCFL object at path or pyfs root, False otherwise.\n    \"\"\"\n    return os.path.exists(self._as_posix(path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Returns True if OCFL object at path or pyfs root, False otherwise.\n    \"\"\"\n    return self.fs.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    return False", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Returns True if object at path or pyfs root, False otherwise.\n    \"\"\"\n    try:\n        self.fs.stat(path)\n    except OSError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \"\"\"\n    Returns True if object at path or pyfs root, False otherwise.\n    \"\"\"\n    return self.fs.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    \n    \n    return os.path.exists(os.path.join(path, self.fs_name))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    res = '%s%s %s' % (prefix, self.name, self.value)\n    res = res.ljust(len(prefix), '.')\n    for m in self.messages:\n        res += m.status_str(prefix +'')\n    return res\n", "def status_str(self, prefix=''):\n    return '%s%s' % (prefix, '\\n'.join(['%s %s' % (prefix, m) for m in self.messages]))", "def status_str(self, prefix=''):\n    return prefix +''.join(sorted(self.messages))\n", "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, ''.join(str(m) for m in self.messages))\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return a string with Visiting the sorted self.messages list, each\n    visit add prefix and the element in the sorted self.messages list.\n    \"\"\"\n    messages = '\\n'.join([prefix +''+ x for x in self.messages])\n    return messages\n", "def status_str(self, prefix=''):\n    return '%s%s%s' % (prefix,''*(len(prefix)+1),''.join(self.messages))", "def status_str(self, prefix=''):\n    result = prefix + '%d'% self.id\n    result +=''.join(str(m) for m in self.messages)\n    return result\n", "def status_str(self, prefix=''):\n    \"\"\"Return a string with Visiting the sorted self.messages list, each visit\n    add prefix and the element in the sorted self.messages list.\n    \"\"\"\n    # Note: this function is different from the status_str() function in that\n    # it includes the additional prefix as an optional parameter.\n    return '\\n'.join(prefix + '%s: %s' % (k, v) for k, v in sorted(self.messages.items()))\n", "def status_str(self, prefix=''):\n    return '%s%s' % (prefix, '\\n'.join(self.messages))\n", "def status_str(self, prefix=''):\n    \"\"\"Return a string with Visiting the sorted self.messages list, each visit\n    add prefix and the element in the sorted self.messages list. \"\"\"\n    return '%s%s: %s' % (prefix, self.status_prefix(), ', '.join(self.messages))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    res = '%s%s %s' % (prefix, self.name, self.value)\n    res = res.ljust(len(prefix), '.')\n    for m in self.messages:\n        res += m.status_str(prefix +'')\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '%s%s' % (prefix, '\\n'.join(['%s %s' % (prefix, m) for m in self.messages]))", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return prefix +''.join(sorted(self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '{}{}'.format(prefix, ''.join(str(m) for m in self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return a string with Visiting the sorted self.messages list, each\n    visit add prefix and the element in the sorted self.messages list.\n    \"\"\"\n    messages = '\\n'.join([prefix +''+ x for x in self.messages])\n    return messages\n", "is_pass": true, "return_code": 0}, {"generate_code": "def status_str(self, prefix=''):\n    return '%s%s%s' % (prefix,''*(len(prefix)+1),''.join(self.messages))", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = prefix + '%d'% self.id\n    result +=''.join(str(m) for m in self.messages)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return a string with Visiting the sorted self.messages list, each visit\n    add prefix and the element in the sorted self.messages list.\n    \"\"\"\n    # Note: this function is different from the status_str() function in that\n    # it includes the additional prefix as an optional parameter.\n    return '\\n'.join(prefix + '%s: %s' % (k, v) for k, v in sorted(self.messages.items()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '%s%s' % (prefix, '\\n'.join(self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return a string with Visiting the sorted self.messages list, each visit\n    add prefix and the element in the sorted self.messages list. \"\"\"\n    return '%s%s: %s' % (prefix, self.status_prefix(), ', '.join(self.messages))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional prefix.\n    \"\"\"\n    if self.status:\n        return '%s%s: %s' % (prefix, self.log.status_str, self.status)\n    else:\n        return '%s%s' % (prefix, self.log.status_str)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.\n    \"\"\"\n    return '%s%s %s' % (prefix, self.log.status_str, self.log.status)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.  This is the same as string() except that it includes a prefix\n    specified by the status code (i.e. \"ok\" or \"warning\").\n    \"\"\"\n    return prefix + self.log.status_str\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.        \n    \"\"\"\n    return prefix + '[%s]'% self.log.status_str\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional prefix.\n    \"\"\"\n    return '%s%s: %s' % (prefix, self.log.status_str, self.log.status)\n", "def status_str(self, prefix=''):\n    \n    \n    return '{}{}'.format(prefix, self.log.status_str)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional\n    prefix.\"\"\"\n    return '{}{}: {}'.format(prefix, self.log.status_str, self.message)\n", "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.  \n    \"\"\"\n    if self.log.status_str is None:\n        return prefix + 'No status message available.'\n    else:\n        return prefix + self.log.status_str\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.log.status_str)\n", "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional\n    prefix. \"\"\"\n    return '{0}{1}'.format(prefix, self.log.status_str)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional prefix.\n    \"\"\"\n    if self.status:\n        return '%s%s: %s' % (prefix, self.log.status_str, self.status)\n    else:\n        return '%s%s' % (prefix, self.log.status_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.\n    \"\"\"\n    return '%s%s %s' % (prefix, self.log.status_str, self.log.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.  This is the same as string() except that it includes a prefix\n    specified by the status code (i.e. \"ok\" or \"warning\").\n    \"\"\"\n    return prefix + self.log.status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.        \n    \"\"\"\n    return prefix + '[%s]'% self.log.status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional prefix.\n    \"\"\"\n    return '%s%s: %s' % (prefix, self.log.status_str, self.log.status)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \n    \n    return '{}{}'.format(prefix, self.log.status_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional\n    prefix.\"\"\"\n    return '{}{}: {}'.format(prefix, self.log.status_str, self.message)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"\n    Return string representation with self.log.status_str, with optional\n    prefix.  \n    \"\"\"\n    if self.log.status_str is None:\n        return prefix + 'No status message available.'\n    else:\n        return prefix + self.log.status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional prefix.\"\"\"\n    return '{}{}'.format(prefix, self.log.status_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    \"\"\"Return string representation with self.log.status_str, with optional\n    prefix. \"\"\"\n    return '{0}{1}'.format(prefix, self.log.status_str)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    \"\"\"Return True if identifier is valid. In this base implementation, always\n    return True. (D)\"\"\"\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid. In this base implementation,\n    always return True. (D)\n    \"\"\"\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    \"\"\"Return True if identifier is valid. In this base implementation, always\n    return True. (D)\"\"\"\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    \"\"\"\n    Return True if identifier is valid. In this base implementation,\n    always return True. (D)\n    \"\"\"\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    return super(Ec2InventoryModule, self).validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version.\n    In the case that there isn't type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. (D)\n    \"\"\"\n    return super(ExtractSpec, self).validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    return self._validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    return super(AnsibleInventoryModule, self).validate(inventory, extract_spec_version)\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\" Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version. In the case that\n    there isn't type value or it isn't valid, tests will be based on the\n    version given in self.spec_version. (D) \"\"\"\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    return True\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        return self._extract_spec_version(inventory)\n    else:\n        return self._validate(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version'][-1]\n        except KeyError:\n            pass\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look at\n    the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. (D)\n    \"\"\"\n    # Validate the inventory against the spec version.\n    if extract_spec_version:\n        self._validate_version(inventory)\n    # Validate the inventory against the inventory file.\n    self._validate_inventory(inventory)\n    # Validate the inventory against the basic inventory.\n    self._validate_basic_inventory(inventory)\n", "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return super(BaseInventoryModule, self).validate(inventory)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return super(Ec2InventoryModule, self).validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version.\n    In the case that there isn't type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. (D)\n    \"\"\"\n    return super(ExtractSpec, self).validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return self._validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return super(AnsibleInventoryModule, self).validate(inventory, extract_spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\" Validate a given inventory. If extract_spec_version is True then will look\n    at the type value to determine the specification version. In the case that\n    there isn't type value or it isn't valid, tests will be based on the\n    version given in self.spec_version. (D) \"\"\"\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        return self._extract_spec_version(inventory)\n    else:\n        return self._validate(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version'][-1]\n        except KeyError:\n            pass\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    \"\"\"\n    Validate a given inventory. If extract_spec_version is True then will look at\n    the type value to determine the specification version.\n    In the case that there is no type value or it isn't valid, tests will be\n    based on the version given in self.spec_version. (D)\n    \"\"\"\n    # Validate the inventory against the spec version.\n    if extract_spec_version:\n        self._validate_version(inventory)\n    # Validate the inventory against the inventory file.\n    self._validate_inventory(inventory)\n    # Validate the inventory against the basic inventory.\n    self._validate_basic_inventory(inventory)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if extract_spec_version:\n        try:\n            inventory['type'] = inventory['version']\n        except KeyError:\n            pass\n    return super(BaseInventoryModule, self).validate(inventory)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file in digests_used:\n            return \"error('Digest already present and used')\"\n    return None\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            return 'error(\"digest file'+ manifest_file +'not found in manifest.txt\")'\n    return ''\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in digests_used:\n            if manifest['digests'][digest]['used'] == True:\n                return 'Digest {0} already used'.format(digest)\n    return ''\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = []\n    for manifest_file in manifest_files:\n        for digest in manifest_file.get(\"digests\", []):\n            if digest not in digests_used:\n                return (\"File '{0}' is missing the following digests: \"\n                        \"{1}\".format(manifest_file.get(\"name\"),\n                                     \", \".join(digests_used)))\n    return None\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    errors = []\n    for manifest in manifest_files:\n        for digest in manifest['digests']:\n            if digest['digest'] not in digests_used:\n                errors.append(\"Digest '{}' not in manifest file\".format(digest['digest']))\n    return errors\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for file in manifest_files:\n        if 'digests' not in file:\n            return 'digests not provided in manifest'\n        if'sha256' not in file['digests']:\n            return 'digests not provided in manifest'\n        digest = file['digests']['sha256']\n        if digest not in digests_used:\n            return 'digest {0} is not used in manifest'.format(digest)\n    return ''\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \"\"\"\n    Check all digests in manifest that are needed are present and used. Return\n    error() in the class.\n    \"\"\"\n    errors = []\n    for digest in manifest_files:\n        if digest not in digests_used:\n            errors.append('Digest {} not in manifest files.'.format(digest))\n    return errors\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \"\"\"\n    Check all digests in manifest that are needed are present and used.\n    Return error() in the class. \n    \"\"\"\n    for file_name in manifest_files:\n        if not file_name in digests_used:\n            return \"manifest file %s is missing required digests: %s\" % (\n                file_name, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            return 'digest {} not in manifest files'.format(digest)\n    return ''\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    errors = []\n    for manifest in manifest_files:\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                errors.append('Digest {} not present in manifest'.format(digest))\n    return errors\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file in digests_used:\n            return \"error('Digest already present and used')\"\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            return 'error(\"digest file'+ manifest_file +'not found in manifest.txt\")'\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest in manifest_files:\n        for digest in digests_used:\n            if manifest['digests'][digest]['used'] == True:\n                return 'Digest {0} already used'.format(digest)\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    if digests_used is None:\n        digests_used = []\n    for manifest_file in manifest_files:\n        for digest in manifest_file.get(\"digests\", []):\n            if digest not in digests_used:\n                return (\"File '{0}' is missing the following digests: \"\n                        \"{1}\".format(manifest_file.get(\"name\"),\n                                     \", \".join(digests_used)))\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    errors = []\n    for manifest in manifest_files:\n        for digest in manifest['digests']:\n            if digest['digest'] not in digests_used:\n                errors.append(\"Digest '{}' not in manifest file\".format(digest['digest']))\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \n    \n    for file in manifest_files:\n        if 'digests' not in file:\n            return 'digests not provided in manifest'\n        if'sha256' not in file['digests']:\n            return 'digests not provided in manifest'\n        digest = file['digests']['sha256']\n        if digest not in digests_used:\n            return 'digest {0} is not used in manifest'.format(digest)\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \"\"\"\n    Check all digests in manifest that are needed are present and used. Return\n    error() in the class.\n    \"\"\"\n    errors = []\n    for digest in manifest_files:\n        if digest not in digests_used:\n            errors.append('Digest {} not in manifest files.'.format(digest))\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    \"\"\"\n    Check all digests in manifest that are needed are present and used.\n    Return error() in the class. \n    \"\"\"\n    for file_name in manifest_files:\n        if not file_name in digests_used:\n            return \"manifest file %s is missing required digests: %s\" % (\n                file_name, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        if digest not in manifest_files:\n            return 'digest {} not in manifest files'.format(digest)\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    errors = []\n    for manifest in manifest_files:\n        for digest in manifest.digests:\n            if digest not in digests_used:\n                errors.append('Digest {} not present in manifest'.format(digest))\n    return errors\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and prior inventories are assumed to be checked\n    for internal consistency.\n\n    Return error() in the class.\n    \"\"\"\n    error(\"This is not a valid inventory prior version.\")\n", "def validate_as_prior_version(self, prior):\n    error(\"validate_as_prior_version() is not implemented in %s.\" % self.__class__.__name__)\n", "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n    The input variable prior is also expected to be an InventoryValidator object\n    and both self and prior inventories are assumed to be checked for\n    internal consistency.\n    Return error() in the class.\n    \"\"\"\n    error(\"Not implemented.\")\n", "def validate_as_prior_version(self, prior):\n    return \"Cannot create inventory object from an existing inventory object.\"", "def validate_as_prior_version(self, prior):\n    \"\"\" Check that prior is a valid prior version of the current\n    inventory object. The input variable prior is also expected to be\n    an InventoryValidator object and both self and prior inventories\n    are assumed to be checked for internal consistency. Return error()\n    in the class. \"\"\"\n    error(\"This function is not implemented yet.\")\n", "def validate_as_prior_version(self, prior):\n    return error(\"Prior version of inventory is not valid.\")\n", "def validate_as_prior_version(self, prior):\n    err = ''\n    if prior is None:\n        err += \"'prior' is required but not specified.\"\n    return err\n", "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and privenges are assumed to be checked for\n    internal consistency.\n\n    Return error() in the class.\n    \"\"\"\n    error(\"This is not implemented yet.\")\n", "def validate_as_prior_version(self, prior):\n    return [\"%s is not a valid prior version of %s\" %\n            (self.prior, prior)]\n", "def validate_as_prior_version(self, prior):\n    return {\n        \"error\": \"This is not a valid inventory version of this inventory.\"\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and prior inventories are assumed to be checked\n    for internal consistency.\n\n    Return error() in the class.\n    \"\"\"\n    error(\"This is not a valid inventory prior version.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    error(\"validate_as_prior_version() is not implemented in %s.\" % self.__class__.__name__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n    The input variable prior is also expected to be an InventoryValidator object\n    and both self and prior inventories are assumed to be checked for\n    internal consistency.\n    Return error() in the class.\n    \"\"\"\n    error(\"Not implemented.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return \"Cannot create inventory object from an existing inventory object.\"", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    \"\"\" Check that prior is a valid prior version of the current\n    inventory object. The input variable prior is also expected to be\n    an InventoryValidator object and both self and prior inventories\n    are assumed to be checked for internal consistency. Return error()\n    in the class. \"\"\"\n    error(\"This function is not implemented yet.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return error(\"Prior version of inventory is not valid.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    err = ''\n    if prior is None:\n        err += \"'prior' is required but not specified.\"\n    return err\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    \"\"\"\n    Check that prior is a valid prior version of the current inventory object.\n\n    The input variable prior is also expected to be an InventoryValidator\n    object and both self and privenges are assumed to be checked for\n    internal consistency.\n\n    Return error() in the class.\n    \"\"\"\n    error(\"This is not implemented yet.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return [\"%s is not a valid prior version of %s\" %\n            (self.prior, prior)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    return {\n        \"error\": \"This is not a valid inventory version of this inventory.\"\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory[version]['logical_path_map']\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['filepath']\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    if version == 1:\n        return inventory['_meta']['hostvars']['ansible_states']\n    elif version == 2:\n        return inventory['_meta']['hostvars_for_group']['ansible_states']\n    elif version == 3:\n        return inventory['_meta']['hostvars_for_host']['ansible_states']\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory[\"_meta\"][\"hostvars\"][version][\"filepaths\"]\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory[version]['logical_path_map']\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory['files']['logical'][version]\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['files']\n", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['path']\n", "def get_logical_path_map(inventory, version):\n    return {\n        'latest': [\n            os.path.join('/usr', 'bin', 'dpkg'),\n            os.path.join('/usr', 'bin', 'dpkg_full'),\n            os.path.join('/usr', 'bin', 'dpkg_sel'),\n            os.path.join('/usr', 'bin', 'dpkg_progress'),\n            os.path.join('/usr', 'bin', 'dpkg_state'),\n            os.path.join('/usr', 'bin', 'dpkg_repo'),\n            os.path.join('/usr', 'bin', 'dpkg_version'),\n            os.path.join('/usr', 'bin', 'dpkg_list'),\n            os.path.join('/usr', 'bin', 'dpkg_conf'),\n            os.path.join('/usr', 'bin', 'dpkg_sys'),\n            os.path.join('/usr', 'bin', 'dpkg_sys_repo'),\n            ", "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory[\"_meta\"][\"hostvars\"][version][\"filepath\"]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory[version]['logical_path_map']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['filepath']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    if version == 1:\n        return inventory['_meta']['hostvars']['ansible_states']\n    elif version == 2:\n        return inventory['_meta']['hostvars_for_group']['ansible_states']\n    elif version == 3:\n        return inventory['_meta']['hostvars_for_host']['ansible_states']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory[\"_meta\"][\"hostvars\"][version][\"filepaths\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory[version]['logical_path_map']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory['files']['logical'][version]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['files']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the\n    dict type.\n    \"\"\"\n    return inventory['_meta']['hostvars'][version]['path']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        'latest': [\n            os.path.join('/usr', 'bin', 'dpkg'),\n            os.path.join('/usr', 'bin', 'dpkg_full'),\n            os.path.join('/usr', 'bin', 'dpkg_sel'),\n            os.path.join('/usr', 'bin', 'dpkg_progress'),\n            os.path.join('/usr', 'bin', 'dpkg_state'),\n            os.path.join('/usr', 'bin', 'dpkg_repo'),\n            os.path.join('/usr', 'bin', 'dpkg_version'),\n            os.path.join('/usr', 'bin', 'dpkg_list'),\n            os.path.join('/usr', 'bin', 'dpkg_conf'),\n            os.path.join('/usr', 'bin', 'dpkg_sys'),\n            os.path.join('/usr', 'bin', 'dpkg_sys_repo'),\n            ", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    \"\"\"\n    Returns the file paths of the states in the inventory in the dict type.\n    \"\"\"\n    return inventory[\"_meta\"][\"hostvars\"][version][\"filepath\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    error = False\n    if ('files' in fixity and\n            not all(x in manifest_files for x in fixity['files'])):\n        error = True\n    return error\n", "def validate_fixity(self, fixity, manifest_files):\n    \"\"\"\n    Validate fixity block in inventory. Check the structure of the fixity block and\n    make sure that only files listed in the manifest are referenced.\n    Return error() in the class.\n    \"\"\"\n    if (fixity[\"id\"] not in manifest_files) or (\n            not (fixity[\"id\"] in self.__manifest_files)):\n        return (\"Fixity %s not found in manifest: %s\" %\n                (fixity[\"id\"], \", \".join(manifest_files)))\n    return None\n", "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for f in manifest_files:\n        if f not in fixity:\n            errors.append(\"Fixity file %s not found.\" % f)\n    return errors\n", "def validate_fixity(self, fixity, manifest_files):\n    error = ''\n    if 'files' not in fixity:\n        error = 'Fixity file is missing required field: files'\n    if 'name' not in fixity['files']:\n        error = 'Fixity file is missing required field: name'\n    if 'content' not in fixity['files']:\n        error = 'Fixity file is missing required field: content'\n    if 'description' not in fixity['files']:\n        error = 'Fixity file is missing required field: description'\n    if 'tags' not in fixity['files']:\n        error = 'Fixity file is missing required field: tags'\n    if'version' not in fixity['files']:\n        error = 'Fixity file is missing required field: version'\n    if 'checksum' not in fixity['files']:\n        error = 'Fixity file is missing required field: checksum'\n    if 'checksumType' not in fixity['files']:\n        error = 'Fixity file is missing required field: checksumType'\n    if 'checksum' not in fixity['fil", "def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return 'Error: Fixity file not found'\n    elif 'files' in fixity and not set(fixity['files']).issubset(manifest_files):\n        return 'Error: Fixity file not in manifest'\n    return None\n", "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file_id in manifest_files:\n        if file_id not in fixity:\n            errors.append(\"Fixity file {} missing.\".format(file_id))\n    return errors\n", "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file in manifest_files:\n        if not file in fixity:\n            errors.append(\"Fixity file {} not found in manifest {}\".format(\n                file, manifest_files))\n    return errors\n", "def validate_fixity(self, fixity, manifest_files):\n    results = []\n    for f in manifest_files:\n        if f not in fixity:\n            results.append('file %s not in fixity block' % f)\n    return results\n", "def validate_fixity(self, fixity, manifest_files):\n    for i in manifest_files:\n        if fixity[i]['file'] not in manifest_files:\n            return {'error': 'Fixity block {} does not contain reference to manifest {}'.format(i, fixity[i]['file'])}\n    return {}\n", "def validate_fixity(self, fixity, manifest_files):\n    \"\"\"\n    Validate fixity block in inventory. Check the structure of the fixity block\n    and make sure that only files listed in the manifest are referenced.\n    Return error() in the class.\n    \"\"\"\n    errors = []\n    for file in manifest_files:\n        if file not in fixity:\n            errors.append('{0}: {1}'.format(file, 'does not exist'))\n    return errors\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    error = False\n    if ('files' in fixity and\n            not all(x in manifest_files for x in fixity['files'])):\n        error = True\n    return error\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    \"\"\"\n    Validate fixity block in inventory. Check the structure of the fixity block and\n    make sure that only files listed in the manifest are referenced.\n    Return error() in the class.\n    \"\"\"\n    if (fixity[\"id\"] not in manifest_files) or (\n            not (fixity[\"id\"] in self.__manifest_files)):\n        return (\"Fixity %s not found in manifest: %s\" %\n                (fixity[\"id\"], \", \".join(manifest_files)))\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for f in manifest_files:\n        if f not in fixity:\n            errors.append(\"Fixity file %s not found.\" % f)\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    error = ''\n    if 'files' not in fixity:\n        error = 'Fixity file is missing required field: files'\n    if 'name' not in fixity['files']:\n        error = 'Fixity file is missing required field: name'\n    if 'content' not in fixity['files']:\n        error = 'Fixity file is missing required field: content'\n    if 'description' not in fixity['files']:\n        error = 'Fixity file is missing required field: description'\n    if 'tags' not in fixity['files']:\n        error = 'Fixity file is missing required field: tags'\n    if'version' not in fixity['files']:\n        error = 'Fixity file is missing required field: version'\n    if 'checksum' not in fixity['files']:\n        error = 'Fixity file is missing required field: checksum'\n    if 'checksumType' not in fixity['files']:\n        error = 'Fixity file is missing required field: checksumType'\n    if 'checksum' not in fixity['fil", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if 'files' not in fixity:\n        return 'Error: Fixity file not found'\n    elif 'files' in fixity and not set(fixity['files']).issubset(manifest_files):\n        return 'Error: Fixity file not in manifest'\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file_id in manifest_files:\n        if file_id not in fixity:\n            errors.append(\"Fixity file {} missing.\".format(file_id))\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    errors = []\n    for file in manifest_files:\n        if not file in fixity:\n            errors.append(\"Fixity file {} not found in manifest {}\".format(\n                file, manifest_files))\n    return errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    results = []\n    for f in manifest_files:\n        if f not in fixity:\n            results.append('file %s not in fixity block' % f)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    for i in manifest_files:\n        if fixity[i]['file'] not in manifest_files:\n            return {'error': 'Fixity block {} does not contain reference to manifest {}'.format(i, fixity[i]['file'])}\n    return {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    \"\"\"\n    Validate fixity block in inventory. Check the structure of the fixity block\n    and make sure that only files listed in the manifest are referenced.\n    Return error() in the class.\n    \"\"\"\n    errors = []\n    for file in manifest_files:\n        if file not in fixity:\n            errors.append('{0}: {1}'.format(file, 'does not exist'))\n    return errors\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\" Return the files in given path. \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"Return the files in given path.\"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "def files_list(path):\n    \"\"\"Return the files in given path.\"\"\"\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    files = [f for f in listdir(path) if isfile(join(path, f))]\n    return files\n", "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\" Return the files in given path. \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"Return the files in given path.\"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [os.path.join(path, f) for f in os.listdir(path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"Return the files in given path.\"\"\"\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    files = [f for f in listdir(path) if isfile(join(path, f))]\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    \"\"\"\n    Return the files in given path.\n    \"\"\"\n    return [f for f in listdir(path) if isfile(join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, file in zip(xmls, files):\n        filename = os.path.splitext(file)[0]\n        if xml:\n            result.setdefault(filename, {})\n            result[filename].setdefault(xml, []).append(file)\n        else:\n            result.setdefault(filename, [])\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml, file in zip(xmls, files):\n        if xml:\n            filename = \"{}.{}\".format(xml, file)\n            if filename not in result:\n                result[filename] = []\n            result[filename].append(source)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for file in files:\n            if file == xml:\n                result[xml].append(source[file])\n            else:\n                continue\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    groups = {}\n    for xml in xmls:\n        filename = xml.filename\n        if filename not in groups:\n            groups[filename] = []\n        groups[filename].append(xml)\n\n    for filename in files:\n        groups[filename] = _group_files_by_xml_filename(source, groups[filename], files[filename])\n    return groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \"\"\"\n    Groups files by xmls and returns data in dict format.\n    \"\"\"\n    groups = {}\n    for xml in xmls:\n        for file in files:\n            if file['name'] == xml:\n                groups.setdefault(xml, []).append(file)\n    return groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    groups = {}\n    for xml, file in zip(xmls, files):\n        if xml not in groups:\n            groups[xml] = []\n        groups[xml].append(file)\n    return groups\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, file in zip(xmls, files):\n        if xml not in result:\n            result[xml] = []\n        result[xml].append(file)\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    data = {}\n    for xml, file in zip(xmls, files):\n        if xml not in data:\n            data[xml] = []\n        if file not in data[xml]:\n            data[xml].append(file)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, filename in zip(xmls, files):\n        result[filename] = {}\n        for xml_name, xml_file in source['xml_files'].items():\n            if xml_file == xml:\n                result[filename][xml_name] = source['xml_data'][xml_name]\n    return result\n", "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    xml_dict = {}\n    for xml in xmls:\n        xml_dict[xml] = []\n        for file in files:\n            if file in xml:\n                xml_dict[xml].append(file)\n    return xml_dict\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, file in zip(xmls, files):\n        filename = os.path.splitext(file)[0]\n        if xml:\n            result.setdefault(filename, {})\n            result[filename].setdefault(xml, []).append(file)\n        else:\n            result.setdefault(filename, [])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    result = {}\n    for xml, file in zip(xmls, files):\n        if xml:\n            filename = \"{}.{}\".format(xml, file)\n            if filename not in result:\n                result[filename] = []\n            result[filename].append(source)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml in xmls:\n        result[xml] = []\n        for file in files:\n            if file == xml:\n                result[xml].append(source[file])\n            else:\n                continue\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    groups = {}\n    for xml in xmls:\n        filename = xml.filename\n        if filename not in groups:\n            groups[filename] = []\n        groups[filename].append(xml)\n\n    for filename in files:\n        groups[filename] = _group_files_by_xml_filename(source, groups[filename], files[filename])\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \"\"\"\n    Groups files by xmls and returns data in dict format.\n    \"\"\"\n    groups = {}\n    for xml in xmls:\n        for file in files:\n            if file['name'] == xml:\n                groups.setdefault(xml, []).append(file)\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    groups = {}\n    for xml, file in zip(xmls, files):\n        if xml not in groups:\n            groups[xml] = []\n        groups[xml].append(file)\n    return groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, file in zip(xmls, files):\n        if xml not in result:\n            result[xml] = []\n        result[xml].append(file)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    data = {}\n    for xml, file in zip(xmls, files):\n        if xml not in data:\n            data[xml] = []\n        if file not in data[xml]:\n            data[xml].append(file)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    result = {}\n    for xml, filename in zip(xmls, files):\n        result[filename] = {}\n        for xml_name, xml_file in source['xml_files'].items():\n            if xml_file == xml:\n                result[filename][xml_name] = source['xml_data'][xml_name]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    \n    \n    xml_dict = {}\n    for xml in xmls:\n        xml_dict[xml] = []\n        for file in files:\n            if file in xml:\n                xml_dict[xml].append(file)\n    return xml_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            file_path[len(prefix):] == \"-\"*len(prefix) and\n            file_path[:1] not in \".\" and\n            file_path[1:] not in \".\")\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or \\\n           file_path.startswith(prefix + \".\" + \"-\") or \\\n           file_path.startswith(prefix + \".\" + \".\" + \".\" + \"-\")\n", "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix + \"-\") or\n            file_path.startswith(prefix + \".\" + \"-\"))", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            (file_path[len(prefix)] == \"-\" or\n             file_path[len(prefix)] == \".\" or\n             file_path[len(prefix)] == \".\" and\n             file_path[len(prefix) - 1]!= \"-\"))\n", "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix + \"-\") or\n            file_path.startswith(prefix + \".\" + get_file_ext()))\n", "def match_file_by_prefix(prefix, file_path):\n    \n    \n    return (prefix + \"-\" or prefix + \".\" in file_path) and file_path.startswith(prefix)\n", "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            file_path[len(prefix):] == \"-\"*len(prefix) and\n            file_path[:1] not in \".\" and\n            file_path[1:] not in \".\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or \\\n           file_path.startswith(prefix + \".\" + \"-\") or \\\n           file_path.startswith(prefix + \".\" + \".\" + \".\" + \"-\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix + \"-\") or\n            file_path.startswith(prefix + \".\" + \"-\"))", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            (file_path[len(prefix)] == \"-\" or\n             file_path[len(prefix)] == \".\" or\n             file_path[len(prefix)] == \".\" and\n             file_path[len(prefix) - 1]!= \"-\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix + \"-\") or\n            file_path.startswith(prefix + \".\" + get_file_ext()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    \n    \n    return (prefix + \"-\" or prefix + \".\" in file_path) and file_path.startswith(prefix)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return file_path.startswith(prefix + \"-\") or file_path.startswith(prefix + \".\" + \"-\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [file for file in files if file.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    \"\"\"\n    For each file in files, return all files taht match the given prefix\n    \"\"\"\n    return [f for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    \"\"\"\n    For each file in files, return all files taht match the given prefix\n    \"\"\"\n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "def select_filenames_by_prefix(prefix, files):\n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [file for file in files if file.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \n    \n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \"\"\"\n    For each file in files, return all files taht match the given prefix\n    \"\"\"\n    return [f for f in files if f.startswith(prefix)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    \"\"\"\n    For each file in files, return all files taht match the given prefix\n    \"\"\"\n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if f.startswith(prefix)]", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f[len(prefix):] for f in files if f.startswith(prefix)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    return [_group_files_by_xml_filename(f) for f in folder.iterdir() if f.is_dir()]\n", "def _explore_folder(folder):\n    return [\n        _group_files_by_xml_filename(f)\n        for f in os.listdir(folder)\n        if f.endswith(\".xml\")\n    ]\n", "def _explore_folder(folder):\n    return sorted((os.path.join(folder, f) for f in os.listdir(folder)\n                   if f.endswith('.xml')), key=_group_files_by_xml_filename)\n", "def _explore_folder(folder):\n    \n    \n    result = {}\n    for root, dirs, files in os.walk(folder):\n        result.update(_group_files_by_xml_filename(files))\n    return result\n", "def _explore_folder(folder):\n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n", "def _explore_folder(folder):\n    for name in os.listdir(folder):\n        if name.endswith('.xml'):\n            yield os.path.join(folder, name)\n", "def _explore_folder(folder):\n    return [f for f in os.listdir(folder) if f.endswith('.xml')]\n", "def _explore_folder(folder):\n    return _group_files_by_xml_filename(os.listdir(folder))\n", "def _explore_folder(folder):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n", "def _explore_folder(folder):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    return [_group_files_by_xml_filename(f) for f in folder.iterdir() if f.is_dir()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return [\n        _group_files_by_xml_filename(f)\n        for f in os.listdir(folder)\n        if f.endswith(\".xml\")\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return sorted((os.path.join(folder, f) for f in os.listdir(folder)\n                   if f.endswith('.xml')), key=_group_files_by_xml_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    \n    \n    result = {}\n    for root, dirs, files in os.walk(folder):\n        result.update(_group_files_by_xml_filename(files))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for name in os.listdir(folder):\n        if name.endswith('.xml'):\n            yield os.path.join(folder, name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return [f for f in os.listdir(folder) if f.endswith('.xml')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    return _group_files_by_xml_filename(os.listdir(folder))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in os.listdir(folder)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    if file_path.endswith(\".xml\"):\n        return {\"pdf\": {\"file_path\": file_path, \"ftype\": \"pdf\", \"component_id\": None}}\n    elif file_path.endswith(\".js\"):\n        return {\"js\": {\"file_path\": file_path, \"ftype\": \"js\", \"component_id\": None}}\n    elif file_path.endswith(\".css\"):\n        return {\"css\": {\"file_path\": file_path, \"ftype\": \"css\", \"component_id\": None}}\n    else:\n        return None\n", "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {\"pdf\": {\"file_path\": file_path, \"ftype\": \"pdf\", \"component_id\": None}}\n    return {\"xml\": {\"file_path\": file_path, \"ftype\": \"xml\", \"component_id\": None}}\n", "def _eval_file(prefix, file_path):\n    if file_path.endswith('.xml'):\n        return {'pdf': {'file_path': file_path, 'ftype': 'xml'}}\n    elif file_path.endswith('.js'):\n        return {'js': {'file_path': file_path, 'ftype': 'js'}}\n    elif file_path.endswith('.css'):\n        return {'css': {'file_path': file_path, 'ftype': 'css'}}\n    elif file_path.endswith('.c'):\n        return {'c': {'file_path': file_path, 'ftype': 'c'}}\n    elif file_path.endswith('.h'):\n        return {'h': {'file_path': file_path, 'ftype': 'h'}}\n    elif file_path.endswith('.cpp'):\n        return {'cpp': {'file_path': file_path, 'ftype': 'cpp'}}\n    elif file_path.endswith('.py'):\n        return {'py': {'file_path': file_path, 'ftype': 'py'}}\n    elif file_path.endswith('.rb'):\n        r", "def _eval_file(prefix, file_path):\n    ftype = \"\"\n    if file_path.endswith(\".pdf\"):\n        ftype = \"pdf\"\n    elif file_path.endswith(\".xml\"):\n        ftype = \"xml\"\n    if prefix.startswith(\".\"):\n        prefix = prefix[1:]\n    if ftype == \"pdf\":\n        return {\"component_id\": prefix, \"file_path\": file_path, \"ftype\": ftype}\n    elif ftype == \"xml\":\n        return {\"component_id\": prefix, \"file_path\": file_path, \"ftype\": \"xml\"}\n    else:\n        return None\n", "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {'pdf': [file_path], 'xml': [file_path]}\n", "def _eval_file(prefix, file_path):\n    if prefix.startswith('/') and file_path.startswith('/'):\n        return {'pdf': {'file_path': file_path, 'ftype': 'pdf'}}\n    elif prefix.startswith('/'):\n        return {'xml': {'file_path': file_path, 'ftype': 'xml'}}\n    else:\n        return {'pdf': {'component_id': prefix + '/' + file_path,\n                       'ftype': 'pdf'}}\n", "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.startswith(prefix):\n        return {\"component_id\": file_path[len(prefix):], \"file_path\": file_path, \"ftype\": ftype}\n    if file_path.startswith(\"/\"):\n        return {\"component_id\": file_path[1:], \"file_path\": file_path, \"ftype\": ftype}\n", "def _eval_file(prefix, file_path):\n    if prefix == '':\n        return None\n    if file_path.endswith('.xml'):\n        return {'pdf': file_path, 'xml': file_path[:-4]}\n    elif file_path.endswith('.json'):\n        return {'json': file_path, 'xml': file_path[:-5]}\n    elif file_path.endswith('.csv'):\n        return {'csv': file_path, 'xml': file_path[:-4]}\n    else:\n        return {'pdf': None, 'xml': None}\n", "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        if file_path.endswith('.pdf'):\n            return {'component_id': file_path[:-len('.pdf')],\n                    'file_path': file_path,\n                    'ftype': 'pdf'}\n        else:\n            return {'component_id': file_path,\n                    'file_path': file_path,\n                    'ftype': 'xml'}\n    else:\n        return None\n", "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {'pdf': {'component_id': 'file_path', 'file_path': file_path},\n                'xml': {'component_id': 'file_path', 'file_path': file_path}}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".xml\"):\n        return {\"pdf\": {\"file_path\": file_path, \"ftype\": \"pdf\", \"component_id\": None}}\n    elif file_path.endswith(\".js\"):\n        return {\"js\": {\"file_path\": file_path, \"ftype\": \"js\", \"component_id\": None}}\n    elif file_path.endswith(\".css\"):\n        return {\"css\": {\"file_path\": file_path, \"ftype\": \"css\", \"component_id\": None}}\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {\"pdf\": {\"file_path\": file_path, \"ftype\": \"pdf\", \"component_id\": None}}\n    return {\"xml\": {\"file_path\": file_path, \"ftype\": \"xml\", \"component_id\": None}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith('.xml'):\n        return {'pdf': {'file_path': file_path, 'ftype': 'xml'}}\n    elif file_path.endswith('.js'):\n        return {'js': {'file_path': file_path, 'ftype': 'js'}}\n    elif file_path.endswith('.css'):\n        return {'css': {'file_path': file_path, 'ftype': 'css'}}\n    elif file_path.endswith('.c'):\n        return {'c': {'file_path': file_path, 'ftype': 'c'}}\n    elif file_path.endswith('.h'):\n        return {'h': {'file_path': file_path, 'ftype': 'h'}}\n    elif file_path.endswith('.cpp'):\n        return {'cpp': {'file_path': file_path, 'ftype': 'cpp'}}\n    elif file_path.endswith('.py'):\n        return {'py': {'file_path': file_path, 'ftype': 'py'}}\n    elif file_path.endswith('.rb'):\n        r", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ftype = \"\"\n    if file_path.endswith(\".pdf\"):\n        ftype = \"pdf\"\n    elif file_path.endswith(\".xml\"):\n        ftype = \"xml\"\n    if prefix.startswith(\".\"):\n        prefix = prefix[1:]\n    if ftype == \"pdf\":\n        return {\"component_id\": prefix, \"file_path\": file_path, \"ftype\": ftype}\n    elif ftype == \"xml\":\n        return {\"component_id\": prefix, \"file_path\": file_path, \"ftype\": \"xml\"}\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {'pdf': [file_path], 'xml': [file_path]}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if prefix.startswith('/') and file_path.startswith('/'):\n        return {'pdf': {'file_path': file_path, 'ftype': 'pdf'}}\n    elif prefix.startswith('/'):\n        return {'xml': {'file_path': file_path, 'ftype': 'xml'}}\n    else:\n        return {'pdf': {'component_id': prefix + '/' + file_path,\n                       'ftype': 'pdf'}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.startswith(prefix):\n        return {\"component_id\": file_path[len(prefix):], \"file_path\": file_path, \"ftype\": ftype}\n    if file_path.startswith(\"/\"):\n        return {\"component_id\": file_path[1:], \"file_path\": file_path, \"ftype\": ftype}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if prefix == '':\n        return None\n    if file_path.endswith('.xml'):\n        return {'pdf': file_path, 'xml': file_path[:-4]}\n    elif file_path.endswith('.json'):\n        return {'json': file_path, 'xml': file_path[:-5]}\n    elif file_path.endswith('.csv'):\n        return {'csv': file_path, 'xml': file_path[:-4]}\n    else:\n        return {'pdf': None, 'xml': None}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        if file_path.endswith('.pdf'):\n            return {'component_id': file_path[:-len('.pdf')],\n                    'file_path': file_path,\n                    'ftype': 'pdf'}\n        else:\n            return {'component_id': file_path,\n                    'file_path': file_path,\n                    'ftype': 'xml'}\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.startswith(prefix):\n        return {'pdf': {'component_id': 'file_path', 'file_path': file_path},\n                'xml': {'component_id': 'file_path', 'file_path': file_path}}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    \n    \n    return _group_files_by_xml_filename(_listdir(zip_path))\n", "def _explore_zipfile(zip_path):\n    return [_group_files_by_xml_filename(f) for f in zip_path]\n", "def _explore_zipfile(zip_path):\n    return [_group_files_by_xml_filename(f) for f in _listdir(zip_path)]\n", "def _explore_zipfile(zip_path):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in zip_path]\n", "def _explore_zipfile(zip_path):\n    \n    \n    # type: (str) -> List[Tuple[str, str, str, str]]\n    result = []\n    for filename in _group_files_by_xml_filename(zip_path):\n        result.append((filename[:-4], filename, filename[-4:], filename))\n    return result\n", "def _explore_zipfile(zip_path):\n    \n    \n    return [\n        _group_files_by_xml_filename(os.path.join(zip_path, filename))\n        for filename in os.listdir(zip_path)\n        if filename.endswith(\".xml\")\n    ]\n", "def _explore_zipfile(zip_path):\n    \n    \n    return sorted((xml_filename for xml_filename in _group_files_by_xml_filename(zip_path) if xml_filename),\n                  key=lambda x: x.split('/')[-1])\n", "def _explore_zipfile(zip_path):\n    \n    \n    return [_group_files_by_xml_filename(xml_file) for xml_file in sorted(os.listdir(zip_path))]\n", "def _explore_zipfile(zip_path):\n    \n    \n    result = []\n    for root, dirs, files in os.walk(zip_path):\n        for name in files:\n            if name.endswith('.xml'):\n                result.append(os.path.join(root, name))\n    return result\n", "def _explore_zipfile(zip_path):\n    \n    \n    return [\n        f\"{xml_filename}\"\n        for xml_filename in _group_files_by_xml_filename(zip_path)\n    ]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return _group_files_by_xml_filename(_listdir(zip_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return [_group_files_by_xml_filename(f) for f in zip_path]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return [_group_files_by_xml_filename(f) for f in _listdir(zip_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return [_group_files_by_xml_filename(f) for f in zip_path]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    # type: (str) -> List[Tuple[str, str, str, str]]\n    result = []\n    for filename in _group_files_by_xml_filename(zip_path):\n        result.append((filename[:-4], filename, filename[-4:], filename))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return [\n        _group_files_by_xml_filename(os.path.join(zip_path, filename))\n        for filename in os.listdir(zip_path)\n        if filename.endswith(\".xml\")\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return sorted((xml_filename for xml_filename in _group_files_by_xml_filename(zip_path) if xml_filename),\n                  key=lambda x: x.split('/')[-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return [_group_files_by_xml_filename(xml_file) for xml_file in sorted(os.listdir(zip_path))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    result = []\n    for root, dirs, files in os.walk(zip_path):\n        for name in files:\n            if name.endswith('.xml'):\n                result.append(os.path.join(root, name))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    \n    \n    return [\n        f\"{xml_filename}\"\n        for xml_filename in _group_files_by_xml_filename(zip_path)\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [f for f in zip_path.namelist() if f.endswith('.py')]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [file_info.filename for file_info in zip_info_list(zip_path)]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in the given zip path.\"\"\"\n    return [file for file in zip_path.namelist() if not file.endswith('.pyc')]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    zf = zipfile.ZipFile(zip_path)\n    return zf.namelist()\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [f for f in zip_path.namelist() if f.endswith('.py')]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.namelist()\n", "def files_list_from_zipfile(zip_path):\n    \"\"\" Return the files in the given zip path. \"\"\"\n    with ZipFile(zip_path, \"r\") as zip_ref:\n        return [name for name in zip_ref.namelist() if name.endswith(\".py\")]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    with ZipFile(zip_path, 'r') as zip_file:\n        files_list = []\n        for file in zip_file.namelist():\n            files_list.append(file)\n        return files_list\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [zfile.filename for zfile in zipfile.ZipFile(zip_path)]\n", "def files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in the given zip path.\"\"\"\n    return [file_ for file_ in zip_path.namelist() if file_.endswith('.py')]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [f for f in zip_path.namelist() if f.endswith('.py')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [file_info.filename for file_info in zip_info_list(zip_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in the given zip path.\"\"\"\n    return [file for file in zip_path.namelist() if not file.endswith('.pyc')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    zf = zipfile.ZipFile(zip_path)\n    return zf.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [f for f in zip_path.namelist() if f.endswith('.py')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    zf = zipfile.ZipFile(zip_path, 'r')\n    return zf.namelist()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\" Return the files in the given zip path. \"\"\"\n    with ZipFile(zip_path, \"r\") as zip_ref:\n        return [name for name in zip_ref.namelist() if name.endswith(\".py\")]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    with ZipFile(zip_path, 'r') as zip_file:\n        files_list = []\n        for file in zip_file.namelist():\n            files_list.append(file)\n        return files_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"\n    Return the files in the given zip path.\n    \"\"\"\n    return [zfile.filename for zfile in zipfile.ZipFile(zip_path)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    \"\"\"Return the files in the given zip path.\"\"\"\n    return [file_ for file_ in zip_path.namelist() if file_.endswith('.py')]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"(?<=w:):st(?=\", \"-st=\", content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\". \n    \"\"\"\n    return content.replace('w:st=\"w-st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return content.replace('w:st=\"w-st=\"', 'w-st=\"')\n", "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*)\"', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return re.sub(r\"(?s)<w:st(:|=)[^>]*?>(.*?)</w:st>\", r\"\\1-\\2\", content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\". \n    \"\"\"\n    return re.sub(r\"w:st=['\\\"]([^'\\\"]*)['\\\"]\", r\"w-st=\\1\", content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r'(?i)w:st=\"([^\"]*)\"',\n                  r'w-st=\"\\1\"',\n                  content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"\\s*w:st=\", \"w-st=\", content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return re.sub(r\"(?i)w:st=['\\\"]([^'\\\"]*)['\\\"]\", r\"\\1-st=\\2\", content)\n", "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content\n    with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"(\\w+:)([\\w-]+)(:)\", r\"\\1-st=\\2\", content)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"(?<=w:):st(?=\", \"-st=\", content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\". \n    \"\"\"\n    return content.replace('w:st=\"w-st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return content.replace('w:st=\"w-st=\"', 'w-st=\"')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \n    \n    return re.sub(r'w:st=\"(.*)\"', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return re.sub(r\"(?s)<w:st(:|=)[^>]*?>(.*?)</w:st>\", r\"\\1-\\2\", content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\". \n    \"\"\"\n    return re.sub(r\"w:st=['\\\"]([^'\\\"]*)['\\\"]\", r\"w-st=\\1\", content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r'(?i)w:st=\"([^\"]*)\"',\n                  r'w-st=\"\\1\"',\n                  content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"\\s*w:st=\", \"w-st=\", content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"Replace \"w:st=\" in content with \"w-st=\".\"\"\"\n    return re.sub(r\"(?i)w:st=['\\\"]([^'\\\"]*)['\\\"]\", r\"\\1-st=\\2\", content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    \"\"\"\n    Replace \"w:st=\" in content\n    with \"w-st=\".\n    \"\"\"\n    return re.sub(r\"(\\w+:)([\\w-]+)(:)\", r\"\\1-st=\\2\", content)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if node.xpath(xpath):\n            return node.xpath(xpath)[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return next((e for e in pubdate_xpaths if e.has_attr('pubdate')), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        node = node.xpath(xpath)[0]\n    return node\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0])\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        elements = node.xpath(xpath)\n        if elements:\n            return elements[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if xpath:\n            return node.xpath(xpath)[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    return node.xpath(*pubdate_xpaths).extract_first()\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node.text)), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0])[0]\n", "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        node = node.xpath(xpath)[0]\n    return node\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if node.xpath(xpath):\n            return node.xpath(xpath)[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return next((e for e in pubdate_xpaths if e.has_attr('pubdate')), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        node = node.xpath(xpath)[0]\n    return node\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        elements = node.xpath(xpath)\n        if elements:\n            return elements[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    for xpath in pubdate_xpaths:\n        if xpath:\n            return node.xpath(xpath)[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    return node.xpath(*pubdate_xpaths).extract_first()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((x for x in pubdate_xpaths if x.match(node.text)), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \n    \n    return node.xpath(pubdate_xpaths[0])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    \"\"\"\n    For the given node, returns the first match in the pubdate_xpaths list.\n    \"\"\"\n    for xpath in pubdate_xpaths:\n        node = node.xpath(xpath)[0]\n    return node\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'), issue.get('suppl'))\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"sup\").text\n    )\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'),\n            issue.get('supplement'))\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('{http://www.loc.gov/premis/v3}id').text\n    number = number[:number.find('/')]\n    sup = issue.find('{http://www.loc.gov/premis/v3}sup').text\n    sup = sup.replace(',', '.')\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of\n    issue.\n    \"\"\"\n    number = None\n    suppl = None\n    if issue['number']:\n        number = issue['number']\n    if issue['sup']:\n        suppl = issue['sup']\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'), issue.get('sup'))\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the\n    contents of issue.\n    \"\"\"\n    return [(int(issue.findtext('number')), int(issue.findtext('suppl')))]\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"Return the possible values of number and sup from the contents of issue.\n\n    \"\"\"\n    if \"number\" not in issue:\n        return (None, None)\n    number = issue[\"number\"]\n    if \"sup\" not in issue:\n        return (number, None)\n    sup = issue[\"sup\"]\n    return (number, sup)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text,\n        issue.find('sup').text)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'), issue.get('suppl'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"sup\").text\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'),\n            issue.get('supplement'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('{http://www.loc.gov/premis/v3}id').text\n    number = number[:number.find('/')]\n    sup = issue.find('{http://www.loc.gov/premis/v3}sup').text\n    sup = sup.replace(',', '.')\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of\n    issue.\n    \"\"\"\n    number = None\n    suppl = None\n    if issue['number']:\n        number = issue['number']\n    if issue['sup']:\n        suppl = issue['sup']\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (issue.get('number'), issue.get('sup'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the\n    contents of issue.\n    \"\"\"\n    return [(int(issue.findtext('number')), int(issue.findtext('suppl')))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"Return the possible values of number and sup from the contents of issue.\n\n    \"\"\"\n    if \"number\" not in issue:\n        return (None, None)\n    number = issue[\"number\"]\n    if \"sup\" not in issue:\n        return (number, None)\n    sup = issue[\"sup\"]\n    return (number, sup)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    \"\"\"\n    Return the possible values of number and sup from the contents of issue.\n    \"\"\"\n    return (\n        issue.find(\"number\").text,\n        issue.find(\"suppl\").text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    return (\n        issue.find('number').text,\n        issue.find('sup').text)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return ((\"\\n\" + \" \" * indent) * (debug and 1 or 0)) + (\"\\n\" + \" \" * indent) * (debug and 1 or 0)\n    \"\"\"\n    return ((\"\\n\" + \" \" * indent) * (debug and 1 or 0)) + (\"\\n\" + \" \" * indent) * (debug and 1 or 0) + f\"{self.__class__.__name__}({self.obj})\"\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\n        \"\\n\"\n        + (\" \" * indent)\n        + \"{}({})\"\n       .format(\n            self.__class__.__name__,\n            debug_details(self.__dict__),\n        )\n    )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    Args:\n        indent (int): indent to add to each line of output.\n        debug (bool): print debug messages (default is False)\n\n    Returns:\n        str: pretty formatted representation of self.\n    \"\"\"\n    if debug:\n        return (\n            \"{}(\\\"{}\\\")\".format(\n                self.__class__.__name__,\n                self.obj,\n            )\n        )\n    else:\n        return (\n            \"{}(\\\"{}\\\")\".format(\n                self.__class__.__name__,\n                self.obj,\n            )\n        )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "def pretty(self, indent=0, debug=False):\n    return (\n        (\"\\n\" + \" \" * indent) * 2\n        + f\"{self.__class__.__name__}({self.obj})\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n    \"\"\"\n    return (\n        f\"{self.__class__.__name__}(\"\n        f\"{'' if debug else''}{', '.join('{0}' if i else '' for i in range(len(self.obj)))}\"\n        f\")\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n                    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj) return (\n                        \" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n    \"\"\"\n    return (\n        \" \" * indent\n        + f\"{self.__class__.__name__}({self.__getstate__()})\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return ((\"\\n\" + \" \" * indent) * (debug and 1 or 0)) + (\"\\n\" + \" \" * indent) * (debug and 1 or 0)\n    \"\"\"\n    return ((\"\\n\" + \" \" * indent) * (debug and 1 or 0)) + (\"\\n\" + \" \" * indent) * (debug and 1 or 0) + f\"{self.__class__.__name__}({self.obj})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\n        \"\\n\"\n        + (\" \" * indent)\n        + \"{}({})\"\n       .format(\n            self.__class__.__name__,\n            debug_details(self.__dict__),\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    Args:\n        indent (int): indent to add to each line of output.\n        debug (bool): print debug messages (default is False)\n\n    Returns:\n        str: pretty formatted representation of self.\n    \"\"\"\n    if debug:\n        return (\n            \"{}(\\\"{}\\\")\".format(\n                self.__class__.__name__,\n                self.obj,\n            )\n        )\n    else:\n        return (\n            \"{}(\\\"{}\\\")\".format(\n                self.__class__.__name__,\n                self.obj,\n            )\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"\n    Return a pretty formatted representation of self.\n\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    return (\n        (\"\\n\" + \" \" * indent) * 2\n        + f\"{self.__class__.__name__}({self.obj})\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n        obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n        return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n    \"\"\"\n    return (\n        f\"{self.__class__.__name__}(\"\n        f\"{'' if debug else''}{', '.join('{0}' if i else '' for i in range(len(self.obj)))}\"\n        f\")\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n                    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj) return (\n                        \" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n    \"\"\"\n    return (\n        \" \" * indent\n        + f\"{self.__class__.__name__}({self.__getstate__()})\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    \"\"\"Return a pretty formatted representation of self.\n\n    Return a pretty formatted representation of self.\n    obj = f\"'{self.obj}'\" if isinstance(self.obj, str) else repr(self.obj)\n    return (\" \" * indent) + f\"{self.__class__.__name__}({debug_details}{obj})\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [self._absorb_one(a) for a in args]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [n + self for n in args]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption.\n    \"\"\"\n    return self._absorb(args, True)\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [ e + a for e, a in zip(args, self.absorbments) ]\n", "def absorb(self, args):\n    return [arg if arg is not None else self.expression for arg in args]", "def absorb(self, args):\n    return [a + b for a, b in zip(args, args[1:])]", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption. \n    \"\"\"\n    return list(map(lambda x: x + self, args))\n", "def absorb(self, args):\n    return [arg + self for arg in args]\n", "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.  This is the same as `absorb_list` except that\n    the expressions apply absorption to the expressions in a list with\n    the same len as the input `args` list.\n    \"\"\"\n    return self.absorb_list([args])[0]\n", "def absorb(self, args):\n    return [absorb_expr(self, arg) for arg in args]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [self._absorb_one(a) for a in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [n + self for n in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of\n    expression applying absorption.\n    \"\"\"\n    return self._absorb(args, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.\n    \"\"\"\n    return [ e + a for e, a in zip(args, self.absorbments) ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg if arg is not None else self.expression for arg in args]", "is_pass": true, "return_code": 0}, {"generate_code": "def absorb(self, args):\n    return [a + b for a, b in zip(args, args[1:])]", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption. \n    \"\"\"\n    return list(map(lambda x: x + self, args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [arg + self for arg in args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    \"\"\"\n    Given an `args` sequence of expressions, return a new list of expression\n    applying absorption.  This is the same as `absorb_list` except that\n    the expressions apply absorption to the expressions in a list with\n    the same len as the input `args` list.\n    \"\"\"\n    return self.absorb_list([args])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    return [absorb_expr(self, arg) for arg in args]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n    return lambda f: self.add_hook(hook, f)\n", "def on(self, hook):\n    return lambda f: self.add_hook(hook, f)\n", "def on(self, hook):\n    return lambda func: self.add_handler(hook, func)\n", "def on(self, hook):\n    def wrapper(func):\n        self._hooks[hook].append(func)\n        return func\n    return wrapper\n", "def on(self, hook):\n    def decorator(func):\n        \"\"\"Add a new handler to the \"hook\" in the registry in the class.\"\"\"\n        self._hooks[hook].append(func)\n        return func\n    return decorator\n", "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the class\n    in the instance.\n    \"\"\"\n    def decorator(f):\n        self._hooks[hook] = f\n        return f\n    return decorator\n", "def on(self, hook):\n    def _decorator(func):\n        self._hooks[hook] = func\n        return func\n    return _decorator\n", "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the\n    class.\n    \"\"\"\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n    return decorator\n", "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the\n    class.\n    \"\"\"\n    def decorator(func):\n        self.hooks[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    return lambda fn: self.add_hook(hook, fn)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n    return lambda f: self.add_hook(hook, f)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return lambda f: self.add_hook(hook, f)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return lambda func: self.add_handler(hook, func)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(func):\n        self._hooks[hook].append(func)\n        return func\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        \"\"\"Add a new handler to the \"hook\" in the registry in the class.\"\"\"\n        self._hooks[hook].append(func)\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the class\n    in the instance.\n    \"\"\"\n    def decorator(f):\n        self._hooks[hook] = f\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def _decorator(func):\n        self._hooks[hook] = func\n        return func\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the\n    class.\n    \"\"\"\n    def decorator(func):\n        self.add_hook(hook, func)\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    \"\"\"\n    Return a decorator function to add a new handler to the \"hook\" in the\n    class.\n    \"\"\"\n    def decorator(func):\n        self.hooks[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    return lambda fn: self.add_hook(hook, fn)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    c = {\n        'tls': {\n            'enabled': True,\n            'ca_certs': '/etc/ssl/certs/ca-certificates.crt',\n            'client_cert': '/etc/ssl/certs/client-cert.pem',\n            'client_key': '/etc/ssl/certs/client-key.pem',\n            'ca_file': '/etc/ssl/certs/ca-bundle.crt',\n        },\n        'authentication': {\n            'type': 'basic',\n            'host': etcd_host,\n            'port': etcd_port,\n        },\n        'authorization': {\n            'type': 'basic',\n            'username': user,\n            'password': '',\n        },\n        'docs': {\n            'type':'simple',\n        },\n        'log': {\n            ", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": True,\n        \"authentication\": True,\n        \"authorization\": True,\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"prefix\": \"/\",\n        },\n        \"docs\": True,\n        \"log\": True,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"tls\": {\"host\": etcd_host, \"port\": etcd_port},\n            \"authentication\": {\"type\": \"basic\"},\n            \"authorization\": {\"type\": \"basic\"},\n            \"docs\": {\"type\": \"basic\"},\n            \"log\": {\"type\": \"basic\"},\n            \"log_level\": \"info\"}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"tls\": True,\n            \"version\": \"v1\",\n            \"ssl\": True,\n            \"protocol\": \"https\",\n            \"ca\": {\n                \"cert\": \"/etc/ssl/certs/ca-certificates.crt\",\n                \"key\": \"/etc/ssl/certs/client-key.pem\",\n                \"chain\": \"/etc/ssl/certs/ca-certificates.pem\",\n            },\n        },\n        \"log\": {\n            \"level\": \"info\",\n            \"stream\": \"error\",\n        },\n        \"docs\": {\n            \"version\": \"0.1.0\",\n        },\n        \"log_format\": \"%(as", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n        },\n        \"docs\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 0,\n        },\n        \"log\": \"/var/log/docker.log\",\n        \"tls\": {\n            \"client_cert\": \"/var/cert.pem\",\n            \"client_key\": \"/var/key.pem\",\n        },\n        \"user\": user,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    base_config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"key\": \"/etc/ceph/osd/osd.key\",\n            \"tls\": True,\n            \"authentication\": \"ssl\",\n            \"authorization\": \"ssl\",\n        },\n        \"docs\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": \"8787\",\n            \"key\": \"/var/lib/ceph/osd/osd.key\",\n            \"tls\": False,\n            \"authentication\": \"ssl\",\n            \"authorization\": \"ssl\",\n        },\n        \"log\": \"/var/log/ceph/osd.log\",\n        \"etcd-cluster\": {\n            \"tls\": True,\n            \"auth\": \"ssl\",\n            \"host\": etcd_host,\n       ", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"tls\": True,\n            \"authentication\": \"basic\",\n            \"authorization\": \"basic\",\n            \"etcd\": {\"host\": etcd_host, \"port\": etcd_port},\n            \"docs\": {\"replication\": {}},\n            \"log\": {\"replication\": {}}}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": {\"host\": etcd_host, \"port\": etcd_port},\n        \"authentication\": {\"type\": \"basic\", \"user\": user},\n        \"authorization\": {\"type\": \"basic\", \"user\": user},\n        \"etcd\": {\"host\": etcd_host, \"port\": etcd_port},\n        \"docs\": {\"type\": \"simple\", \"tls\": True},\n        \"log\": {\"type\": \"simple\"},\n        \"log_level\": \"debug\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    etcd_url = 'http://{}:{}'.format(etcd_host, etcd_port)\n    etcd_token = '{}/tokens/{}'.format(etcd_url, user)\n    return {'etcd': {'url': etcd_url, 'token': etcd_token},\n            'docs': {'url': 'http://{}:{}'.format(docs_host, docs_port),\n                     'token': docs_token},\n            'log': {'url': 'http://{}:{}'.format(log_host, log_port),\n                    'token': log_token}}\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"cert\": \"/etc/etcd/client_ca.crt\",\n            \"key\": \"/etc/etcd/client_key.pem\",\n            \"ca_cert\": \"/etc/etcd/ca.crt\",\n        },\n        \"authentication\": {\n            \"tls\": {\"use_ssl\": True},\n            \"authorization\": {\n                \"tls\": {\"username\": user, \"password\": \"secret\"},\n                \"token\": \"secret\",\n                \"etcd_host\": etcd_host,\n                \"etcd_port\": etcd_port,\n            },\n            \"docs\": {\"use_ssl\": True},\n            \"log\": {\"use_ssl\": True},\n        },\n        \"authorization\": {\n        "], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    c = {\n        'tls': {\n            'enabled': True,\n            'ca_certs': '/etc/ssl/certs/ca-certificates.crt',\n            'client_cert': '/etc/ssl/certs/client-cert.pem',\n            'client_key': '/etc/ssl/certs/client-key.pem',\n            'ca_file': '/etc/ssl/certs/ca-bundle.crt',\n        },\n        'authentication': {\n            'type': 'basic',\n            'host': etcd_host,\n            'port': etcd_port,\n        },\n        'authorization': {\n            'type': 'basic',\n            'username': user,\n            'password': '',\n        },\n        'docs': {\n            'type':'simple',\n        },\n        'log': {\n            ", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": True,\n        \"authentication\": True,\n        \"authorization\": True,\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"prefix\": \"/\",\n        },\n        \"docs\": True,\n        \"log\": True,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"tls\": {\"host\": etcd_host, \"port\": etcd_port},\n            \"authentication\": {\"type\": \"basic\"},\n            \"authorization\": {\"type\": \"basic\"},\n            \"docs\": {\"type\": \"basic\"},\n            \"log\": {\"type\": \"basic\"},\n            \"log_level\": \"info\"}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"user\": user,\n            \"tls\": True,\n            \"version\": \"v1\",\n            \"ssl\": True,\n            \"protocol\": \"https\",\n            \"ca\": {\n                \"cert\": \"/etc/ssl/certs/ca-certificates.crt\",\n                \"key\": \"/etc/ssl/certs/client-key.pem\",\n                \"chain\": \"/etc/ssl/certs/ca-certificates.pem\",\n            },\n        },\n        \"log\": {\n            \"level\": \"info\",\n            \"stream\": \"error\",\n        },\n        \"docs\": {\n            \"version\": \"0.1.0\",\n        },\n        \"log_format\": \"%(as", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n        },\n        \"docs\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": 0,\n        },\n        \"log\": \"/var/log/docker.log\",\n        \"tls\": {\n            \"client_cert\": \"/var/cert.pem\",\n            \"client_key\": \"/var/key.pem\",\n        },\n        \"user\": user,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    base_config = {\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"key\": \"/etc/ceph/osd/osd.key\",\n            \"tls\": True,\n            \"authentication\": \"ssl\",\n            \"authorization\": \"ssl\",\n        },\n        \"docs\": {\n            \"host\": \"127.0.0.1\",\n            \"port\": \"8787\",\n            \"key\": \"/var/lib/ceph/osd/osd.key\",\n            \"tls\": False,\n            \"authentication\": \"ssl\",\n            \"authorization\": \"ssl\",\n        },\n        \"log\": \"/var/log/ceph/osd.log\",\n        \"etcd-cluster\": {\n            \"tls\": True,\n            \"auth\": \"ssl\",\n            \"host\": etcd_host,\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\"tls\": True,\n            \"authentication\": \"basic\",\n            \"authorization\": \"basic\",\n            \"etcd\": {\"host\": etcd_host, \"port\": etcd_port},\n            \"docs\": {\"replication\": {}},\n            \"log\": {\"replication\": {}}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": {\"host\": etcd_host, \"port\": etcd_port},\n        \"authentication\": {\"type\": \"basic\", \"user\": user},\n        \"authorization\": {\"type\": \"basic\", \"user\": user},\n        \"etcd\": {\"host\": etcd_host, \"port\": etcd_port},\n        \"docs\": {\"type\": \"simple\", \"tls\": True},\n        \"log\": {\"type\": \"simple\"},\n        \"log_level\": \"debug\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    etcd_url = 'http://{}:{}'.format(etcd_host, etcd_port)\n    etcd_token = '{}/tokens/{}'.format(etcd_url, user)\n    return {'etcd': {'url': etcd_url, 'token': etcd_token},\n            'docs': {'url': 'http://{}:{}'.format(docs_host, docs_port),\n                     'token': docs_token},\n            'log': {'url': 'http://{}:{}'.format(log_host, log_port),\n                    'token': log_token}}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"cert\": \"/etc/etcd/client_ca.crt\",\n            \"key\": \"/etc/etcd/client_key.pem\",\n            \"ca_cert\": \"/etc/etcd/ca.crt\",\n        },\n        \"authentication\": {\n            \"tls\": {\"use_ssl\": True},\n            \"authorization\": {\n                \"tls\": {\"username\": user, \"password\": \"secret\"},\n                \"token\": \"secret\",\n                \"etcd_host\": etcd_host,\n                \"etcd_port\": etcd_port,\n            },\n            \"docs\": {\"use_ssl\": True},\n            \"log\": {\"use_ssl\": True},\n        },\n        \"authorization\": {\n        ", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    return dt.replace(tzinfo=self._tzinfo)\n", "def _fromutc(self, dt):\n    \"\"\"\n    Given a timezone datetime in a given timezone, calculates a timezone datetime\n    in a new timezone.\n    \"\"\"\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=self)\n    if dt.tzinfo is not self:\n        raise ValueError(\"Can't convert to tzinfo\")\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if self.tzinfo is not None:\n        return dt.astimezone(self.tzinfo)\n    return dt\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.timezone)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is not None:\n        raise ValueError('Cannot change timezone while already frozen')\n    return dt.replace(tzinfo=self)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tzinfo)\n    else:\n        return dt.astimezone(self.tzinfo)\n", "def _fromutc(self, dt):\n    \"\"\"\n    Given a timezone datetime in a given timezone, calculates a timezone datetime\n    in a new timezone.\n    \"\"\"\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    else:\n        dt = dt.astimezone(self.tzinfo)\n    return dt.replace(tzinfo=None)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    else:\n        return dt.astimezone(self)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    return dt.replace(tzinfo=self._tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    \"\"\"\n    Given a timezone datetime in a given timezone, calculates a timezone datetime\n    in a new timezone.\n    \"\"\"\n    if not dt.tzinfo:\n        dt = dt.replace(tzinfo=self)\n    if dt.tzinfo is not self:\n        raise ValueError(\"Can't convert to tzinfo\")\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if self.tzinfo is not None:\n        return dt.astimezone(self.tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.timezone)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is not None:\n        raise ValueError('Cannot change timezone while already frozen')\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self.tzinfo)\n    else:\n        return dt.astimezone(self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    \"\"\"\n    Given a timezone datetime in a given timezone, calculates a timezone datetime\n    in a new timezone.\n    \"\"\"\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    else:\n        dt = dt.astimezone(self.tzinfo)\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=self)\n    else:\n        return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "def normalized(self):\n    \"\"\" Normalize all units of time to integers. \"\"\"\n    return self * 100\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self.__class__(self.value / self.units, units=self.units)\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.in_units(self.units[0])\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n", "def normalized(self):\n    \"\"\" Normalize all units of time to integers. \"\"\"\n    return self / self.to('s')\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\" Normalize all units of time to integers. \"\"\"\n    return self * 100\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self.__class__(self.value / self.units, units=self.units)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.in_units(self.units[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\" Normalize all units of time to integers. \"\"\"\n    return self / self.to('s')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    \"\"\"\n    Normalize all units of time to integers.\n    \"\"\"\n    return self / self.units\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    \n    \n    return lambda self, x: x.encode('utf-8') if isinstance(x, unicode) else x\n", "def tzname_in_python2(namefunc):\n    \n    \n    if sys.version_info[0] >= 3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    \n    \n    if six.PY2:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2\n    \"\"\"\n    if sys.version_info < (3, 0):\n        return namefunc\n    return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    \n    \n    return namefunc() if sys.version_info[0] == 2 else namefunc\n", "def tzname_in_python2(namefunc):\n    \n    \n    return lambda self, x: x.encode('utf-8') if six.PY2 else namefunc(self, x)\n", "def tzname_in_python2(namefunc):\n    \n    \n    if six.PY2:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2\n    \"\"\"\n    return namefunc('utc')\n", "def tzname_in_python2(namefunc):\n    return lambda self, x: namefunc(self._tzinfo.tzname(x))\n", "def tzname_in_python2(namefunc):\n    \n    \n    return lambda x: namefunc(x.encode(\"utf-8\"))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    return lambda self, x: x.encode('utf-8') if isinstance(x, unicode) else x\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    if sys.version_info[0] >= 3:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    if six.PY2:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2\n    \"\"\"\n    if sys.version_info < (3, 0):\n        return namefunc\n    return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    return namefunc() if sys.version_info[0] == 2 else namefunc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    return lambda self, x: x.encode('utf-8') if six.PY2 else namefunc(self, x)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    if six.PY2:\n        return namefunc\n    else:\n        return namefunc.encode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \"\"\"\n    Change unicode output into bytestrings in Python 2\n    \"\"\"\n    return namefunc('utc')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    return lambda self, x: namefunc(self._tzinfo.tzname(x))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    \n    \n    return lambda x: namefunc(x.encode(\"utf-8\"))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    return {'versions': {\n       'major': 1,\n       'minor': 0,\n       'micro': 0,\n        'patch': 0\n    }}\n", "def get_versions():\n    return __import__('re').match('(\\d+\\.)+(\\d+\\.\\d+)$', __version__).groups()\n", "def get_versions():\n    return {'version': '%s.%s.%s' % (*__version__.split('.'))} if '.' in __version__ else {'version': '%s' % (__version__)}", "def get_versions():\n    return {\n        \"2_0_0\": \"2.0.0\",\n        \"2_0_1\": \"2.1.0\",\n        \"2_0_2\": \"2.2.0\",\n        \"2_0_3\": \"2.3.0\",\n        \"2_0_4\": \"2.4.0\",\n        \"2_0_5\": \"2.5.0\",\n        \"2_0_6\": \"2.6.0\",\n        \"2_0_7\": \"2.7.0\",\n        \"2_0_8\": \"2.8.0\",\n        \"2_0_9\": \"2.9.0\",\n        \"2_0_10\": \"2.10.\",\n        \"2_0_11\": \"2.11.\",\n        \"2_0_12\": \"2.12.\",\n        \"2_0_13\": \"2.13\",\n        \"2_0_14\": \"2.14\",\n    }\n", "def get_versions():\n    return [\n        {'name': 'v1','version': '1.0.0'},\n        {'name': 'v2','version': '2.0.0'},\n        {'name': 'v3','version': '3.0.0'},\n        {'name': 'v4','version': '4.0.0'},\n        {'name': 'v5','version': '5.0.0'},\n        {'name': 'v6','version': '6.0.0'}\n    ]\n", "def get_versions():\n    return {\n        \"v1\": {\n            \"version\": \"1.0.0\",\n            \"path\": \"/v1\",\n            \"revision\": \"0\",\n            \"build\": \"0\",\n            \"status\": \"CURRENT\",\n            \"codename\": \"\",\n            \"requirements\": [],\n            \"created\": \"2020-01-02T09:00:00Z\",\n            \"updated\": \"2020-01-02T09:00:00Z\",\n            \"tags\": [],\n        }\n    }\n", "def get_versions():\n    return {\n        \"svn\": \"1.8.7\",\n        \"git\": \"https://github.com/dmtk/svn.git\"\n    }\n", "def get_versions():\n    return {\n        \"python\": sys.version,\n        \"json\": json.dumps({\n            \"version\": \"%s.%s\" % (sys.version_info.major, sys.version_info.minor),\n            \"revision\": \"%s\" % __version__,\n            \"date\": datetime.date.today().isoformat(),\n        }),\n    }\n", "def get_versions():\n    return __import__(\"re\").search(r\"\\b(\\d+\\.)?(\\d+\\.)?(\\*|\\.\\d+)\\b\", \"0.0.1\").group(1)\n", "def get_versions():\n    return __import__(\"atexit\").__dict__.get(\"__version__\", \"0.0.0\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    return {'versions': {\n       'major': 1,\n       'minor': 0,\n       'micro': 0,\n        'patch': 0\n    }}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return __import__('re').match('(\\d+\\.)+(\\d+\\.\\d+)$', __version__).groups()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {'version': '%s.%s.%s' % (*__version__.split('.'))} if '.' in __version__ else {'version': '%s' % (__version__)}", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        \"2_0_0\": \"2.0.0\",\n        \"2_0_1\": \"2.1.0\",\n        \"2_0_2\": \"2.2.0\",\n        \"2_0_3\": \"2.3.0\",\n        \"2_0_4\": \"2.4.0\",\n        \"2_0_5\": \"2.5.0\",\n        \"2_0_6\": \"2.6.0\",\n        \"2_0_7\": \"2.7.0\",\n        \"2_0_8\": \"2.8.0\",\n        \"2_0_9\": \"2.9.0\",\n        \"2_0_10\": \"2.10.\",\n        \"2_0_11\": \"2.11.\",\n        \"2_0_12\": \"2.12.\",\n        \"2_0_13\": \"2.13\",\n        \"2_0_14\": \"2.14\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return [\n        {'name': 'v1','version': '1.0.0'},\n        {'name': 'v2','version': '2.0.0'},\n        {'name': 'v3','version': '3.0.0'},\n        {'name': 'v4','version': '4.0.0'},\n        {'name': 'v5','version': '5.0.0'},\n        {'name': 'v6','version': '6.0.0'}\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        \"v1\": {\n            \"version\": \"1.0.0\",\n            \"path\": \"/v1\",\n            \"revision\": \"0\",\n            \"build\": \"0\",\n            \"status\": \"CURRENT\",\n            \"codename\": \"\",\n            \"requirements\": [],\n            \"created\": \"2020-01-02T09:00:00Z\",\n            \"updated\": \"2020-01-02T09:00:00Z\",\n            \"tags\": [],\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        \"svn\": \"1.8.7\",\n        \"git\": \"https://github.com/dmtk/svn.git\"\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return {\n        \"python\": sys.version,\n        \"json\": json.dumps({\n            \"version\": \"%s.%s\" % (sys.version_info.major, sys.version_info.minor),\n            \"revision\": \"%s\" % __version__,\n            \"date\": datetime.date.today().isoformat(),\n        }),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return __import__(\"re\").search(r\"\\b(\\d+\\.)?(\\d+\\.)?(\\*|\\.\\d+)\\b\", \"0.0.1\").group(1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    return __import__(\"atexit\").__dict__.get(\"__version__\", \"0.0.0\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    for y in range(len(pieces)):\n        for x in range(len(pieces[y])):\n            if pieces[y][x] == '*':\n                render(pieces[y][x+1:], style[x])\n            elif pieces[y][x] == '^':\n                render(pieces[y+1:], style[x])\n            elif pieces[y][x] == '>':\n                render(pieces[y+1:], style[x])\n            elif pieces[y][x] == '<':\n                render(pieces[y+1:], style[x])\n", "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    for i, piece in enumerate(pieces):\n        if piece is not None:\n            pieces[i] = piece.render(style)\n", "def render(pieces, style):\n    \n    \n    for i, piece in enumerate(pieces):\n        if piece:\n            pieces[i] = piece.render(style)\n    return pieces\n", "def render(pieces, style):\n    return '\\n'.join(''.join([str(piece) for piece in row]) for row in pieces)\n", "def render(pieces, style):\n    return '\\n'.join(''.join('{}{}'.format(piece, c) for c in row) for piece, row in zip(pieces, pieces[1:]))\n", "def render(pieces, style):\n    return \"\".join(pieces[i] for i in style)\n", "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [\"\".join([style, piece]) for piece in pieces]\n    )\n", "def render(pieces, style):\n    \n    \n    return ''.join([pieces[i] for i in range(len(pieces))]) + '\\n' + style\n", "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    for i in range(len(pieces)):\n        pieces[i] = (pieces[i][0], style[pieces[i][1]])\n    return pieces\n", "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    return '\\n'.join([' '.join(piece) for piece in pieces])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    for y in range(len(pieces)):\n        for x in range(len(pieces[y])):\n            if pieces[y][x] == '*':\n                render(pieces[y][x+1:], style[x])\n            elif pieces[y][x] == '^':\n                render(pieces[y+1:], style[x])\n            elif pieces[y][x] == '>':\n                render(pieces[y+1:], style[x])\n            elif pieces[y][x] == '<':\n                render(pieces[y+1:], style[x])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    for i, piece in enumerate(pieces):\n        if piece is not None:\n            pieces[i] = piece.render(style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    for i, piece in enumerate(pieces):\n        if piece:\n            pieces[i] = piece.render(style)\n    return pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return '\\n'.join(''.join([str(piece) for piece in row]) for row in pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return '\\n'.join(''.join('{}{}'.format(piece, c) for c in row) for piece, row in zip(pieces, pieces[1:]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    return \"\".join(pieces[i] for i in style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return \"\\n\".join(\n        [\"\".join([style, piece]) for piece in pieces]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \n    \n    return ''.join([pieces[i] for i in range(len(pieces))]) + '\\n' + style\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    for i in range(len(pieces)):\n        pieces[i] = (pieces[i][0], style[pieces[i][1]])\n    return pieces\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    \"\"\"\n    Input pieces and a style, render the pieces to the corresponding style.\n    \"\"\"\n    return '\\n'.join([' '.join(piece) for piece in pieces])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"", "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"\n", "def plus_or_dot(pieces):\n    return \".\" if \"+\" in pieces else \"+\"", "def plus_or_dot(pieces):\n    if pieces[0] == \"+\":\n        return \".\"\n    else:\n        return \"+\"\n", "def plus_or_dot(pieces):\n    return '.' if ('+' in pieces) else '+'", "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"", "def plus_or_dot(pieces):\n    return (\n        \"+\"\n        if \"+\" in pieces[0]\n        else \".\"\n        if \"+\" in pieces[1]\n        else \".\"\n    )\n", "def plus_or_dot(pieces):\n    return '.' if '+' in pieces.split() else '+'", "def plus_or_dot(pieces):\n    if '+' in pieces:\n        return '.'\n    else:\n        return '+'\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    return \".\" if \"+\" in pieces else \"+\"", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if pieces[0] == \"+\":\n        return \".\"\n    else:\n        return \"+\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' if ('+' in pieces) else '+'", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces:\n        return \".\"\n    else:\n        return \"+\"", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    return (\n        \"+\"\n        if \"+\" in pieces[0]\n        else \".\"\n        if \"+\" in pieces[1]\n        else \".\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    return '.' if '+' in pieces.split() else '+'", "is_pass": false, "return_code": 1}, {"generate_code": "def plus_or_dot(pieces):\n    if '+' in pieces:\n        return '.'\n    else:\n        return '+'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=True, verbose=verbose\n    )\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            print_help()\n            return 0\n        if cmd == '--version':\n            print_version()\n            return 0\n        if cmd == '--diff':\n            print_diff()\n            return 0\n        if cmd == '--rebase':\n            print_rebase()\n            return 0\n        if cmd == '--split':\n            print_split()\n            return 0\n        if cmd == '--strip':\n            print_strip()\n            return 0\n        if cmd == '--file':\n            print_file()\n            return 0\n        if cmd == '--remove':\n           ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    log.debug(\"running commands: %s\", \" \".join(commands))\n    output = []\n    for cmd in commands:\n        cmd_output = run_command_raw(cmd, args, cwd, verbose, hide_stderr, env)\n        output.append(cmd_output)\n    return output\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        run_cmd(cmd, args, cwd, verbose, hide_stderr, env)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, (list, tuple)):\n        commands = [commands]\n    if verbose:\n        print(' '.join(commands))\n    for cmd in commands:\n        if cmd == '-vv':\n            continue\n        if cmd == '-e':\n            env['EXEC'] =''.join(args)\n        elif cmd == '--':\n            env['ARGS'] =''.join(args)\n        elif cmd == '--version':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--help':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--version-only':\n           ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('>>> %s' %''.join(commands))\n    for cmd in commands:\n        cmd = cmd.format(**env)\n        if cmd.endswith(' -v'):\n            cmd = cmd[:-6]\n        if cmd.endswith(' --version'):\n            print('%s %s' % (cmd[:-9], __version__))\n        elif cmd.endswith(' -h'):\n            print('%s %s' % (cmd[:-4], __author__))\n        elif cmd.endswith(' --help'):\n            print('%s %s' % (cmd[:-2], __doc__))\n        else:\n            if not hide_stderr:\n                print('%s %s' % (cmd, __doc__))\n            els", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        if env is not None:\n            os.environ.update(env)\n        if hide_stderr:\n            subprocess.call(cmd, cwd=cwd, shell=True)\n        else:\n            subprocess.call(cmd, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is not None:\n            cmd = cmd % env\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.check_call(cmd, cwd=cwd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('Running %s' %''.join(commands))\n    results = []\n    for cmd in commands:\n        result = run_command_with_output(cmd, args, cwd, verbose, hide_stderr, env)\n        results.append(result)\n    return results\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, check=False, env=env, cwd=cwd, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, verbose=verbose, hide_stderr=hide_stderr)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, args, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=True, verbose=verbose\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if cmd == '--help':\n            print_help()\n            return 0\n        if cmd == '--version':\n            print_version()\n            return 0\n        if cmd == '--diff':\n            print_diff()\n            return 0\n        if cmd == '--rebase':\n            print_rebase()\n            return 0\n        if cmd == '--split':\n            print_split()\n            return 0\n        if cmd == '--strip':\n            print_strip()\n            return 0\n        if cmd == '--file':\n            print_file()\n            return 0\n        if cmd == '--remove':\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    log.debug(\"running commands: %s\", \" \".join(commands))\n    output = []\n    for cmd in commands:\n        cmd_output = run_command_raw(cmd, args, cwd, verbose, hide_stderr, env)\n        output.append(cmd_output)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        run_cmd(cmd, args, cwd, verbose, hide_stderr, env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, (list, tuple)):\n        commands = [commands]\n    if verbose:\n        print(' '.join(commands))\n    for cmd in commands:\n        if cmd == '-vv':\n            continue\n        if cmd == '-e':\n            env['EXEC'] =''.join(args)\n        elif cmd == '--':\n            env['ARGS'] =''.join(args)\n        elif cmd == '--version':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--help':\n            print('%s %s' % (env['EXEC'], env['ARGS']))\n            exit(0)\n        elif cmd == '--version-only':\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('>>> %s' %''.join(commands))\n    for cmd in commands:\n        cmd = cmd.format(**env)\n        if cmd.endswith(' -v'):\n            cmd = cmd[:-6]\n        if cmd.endswith(' --version'):\n            print('%s %s' % (cmd[:-9], __version__))\n        elif cmd.endswith(' -h'):\n            print('%s %s' % (cmd[:-4], __author__))\n        elif cmd.endswith(' --help'):\n            print('%s %s' % (cmd[:-2], __doc__))\n        else:\n            if not hide_stderr:\n                print('%s %s' % (cmd, __doc__))\n            els", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    for cmd in commands:\n        if verbose:\n            print(\"Running: {}\".format(cmd))\n        if env is not None:\n            os.environ.update(env)\n        if hide_stderr:\n            subprocess.call(cmd, cwd=cwd, shell=True)\n        else:\n            subprocess.call(cmd, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    for cmd in commands:\n        if verbose:\n            print(cmd)\n        if env is not None:\n            cmd = cmd % env\n        if verbose:\n            print(cmd)\n        if not hide_stderr:\n            subprocess.check_call(cmd, cwd=cwd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env is None:\n        env = {}\n    if not isinstance(commands, list):\n        commands = [commands]\n    if not isinstance(args, list):\n        args = [args]\n    if verbose:\n        print('Running %s' %''.join(commands))\n    results = []\n    for cmd in commands:\n        result = run_command_with_output(cmd, args, cwd, verbose, hide_stderr, env)\n        results.append(result)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    return subprocess.run(\n        commands, check=False, env=env, cwd=cwd, stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE, verbose=verbose, hide_stderr=hide_stderr)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        yaml_loader=yaml.SafeLoader,\n        yaml_dumper=yaml.SafeDumper,\n        xml_dumper=xml.SafeDumper,\n        text_formatter=text.TextFormatter,\n        encoding_errors='replace',\n    )\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        yaml_tag='!github.com/dtraj/nltk/blob/master/nltk/'\n                 'data/version.yaml',\n        yaml_base_url='https://github.com/dtraj/nltk/blob/master/'\n                        'nltk/data/version.yaml',\n        py_tag='python3-nltk',\n        py_base_url='https://pypi.python.org/pypi')\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        verbose_level='DEBUG'\n    )\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes\n    of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        filename='',\n        directory='',\n        template='',\n        include='',\n        exclude='',\n        include_dirs=[],\n        exclude_dirs=[],\n        allow_unknown=True,\n        force_reload=False,\n        verbose_name='',\n        separator='',\n    )\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        blacklist_file='.blacklist',\n        time_format='%Y-%m-%d %H:%M:%S',\n        time_regex=r'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}',\n        strip_time=True,\n        verbose_level=1,\n    )\n", "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        yaml_loader=yaml.SafeLoader,\n        yaml_dumper=yaml.SafeDumper,\n        xml_dumper=xml.SafeDumper,\n        text_formatter=text.TextFormatter,\n        encoding_errors='replace',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        yaml_tag='!github.com/dtraj/nltk/blob/master/nltk/'\n                 'data/version.yaml',\n        yaml_base_url='https://github.com/dtraj/nltk/blob/master/'\n                        'nltk/data/version.yaml',\n        py_tag='python3-nltk',\n        py_base_url='https://pypi.python.org/pypi')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        verbose_level='DEBUG'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes\n    of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        filename='',\n        directory='',\n        template='',\n        include='',\n        exclude='',\n        include_dirs=[],\n        exclude_dirs=[],\n        allow_unknown=True,\n        force_reload=False,\n        verbose_name='',\n        separator='',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig(\n        auto_reload=True,\n        blacklist_file='.blacklist',\n        time_format='%Y-%m-%d %H:%M:%S',\n        time_regex=r'\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}',\n        strip_time=True,\n        verbose_level=1,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    \"\"\"\n    Return a new VersioneerConfig() and set various attributes of it.\n    \"\"\"\n    return VersioneerConfig()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):\n    vcs_handlers[vcs][method] = True\n    return method\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(func):\n        func.vcs = vcs\n        func.method = method\n        return func\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f.__dict__[\"vcs_handler\"] = (vcs, method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f(vcs, method) if not isinstance(vcs, list) else [vcs, method][f]\n", "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.add_handler(method)\n    return method\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, method, 'vcs')\n", "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.add_vcs_handler(method)\n    return method\n", "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, 'vcs_handler', method)\n", "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        setattr(f, '_vcs_handler_', method)\n        return f\n    return decorator\n", "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.handlers[method.__name__] = method\n    return method\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):\n    vcs_handlers[vcs][method] = True\n    return method\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(func):\n        func.vcs = vcs\n        func.method = method\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f.__dict__[\"vcs_handler\"] = (vcs, method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return lambda f: f(vcs, method) if not isinstance(vcs, list) else [vcs, method][f]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.add_handler(method)\n    return method\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, method, 'vcs')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.add_vcs_handler(method)\n    return method\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    return register(vcs, 'vcs_handler', method)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    def decorator(f):\n        setattr(f, '_vcs_handler_', method)\n        return f\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):\n    \n    \n    vcs.handlers[method.__name__] = method\n    return method\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self._roots:\n        if root.validate(validate_objects=validate_objects,\n                         check_digests=check_digests,\n                         show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # type: (bool, bool, bool, bool) -> Tuple[int, int]\n    num_objects = 0\n    checked_objects = 0\n    good_objects = 0\n    if validate_objects:\n        validate_objects = self.get_validate_objects()\n    if check_digests:\n        check_digests = self.get_check_digests()\n    if show_warnings:\n        self.__validate_objects_and_digests(validate_objects, check_digests)\n    return (num_objects, checked_objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of\n                           objects checked that were found to be valid\n    \"\"\"\n    # Check digests\n    if not check_digests:\n        valid_digests = self.digests\n    else:\n        valid_digests = []\n        for digest in self.digests:\n            if not digest.validate():\n                valid_digests.append(digest.name)\n\n    # Check objects\n    if not validate_objects:\n        return 0, 0\n    if show_warnings:\n        print(\"\\nValid objects:\")\n        print(\"\\n\".join(valid_digests))\n    valid_objects = [x for x in self.objects if x.validate()]\n    return len(valid_objects), len(valid_digests)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root, subdirs, files in os.walk(self.storage_path, followlinks=True):\n        if check_digests:\n            self.digest_check(root)\n        for file in files:\n            self.check_file(os.path.join(root, file), validate_objects)\n        if check_objects:\n            self.check_objects(os.path.join(root, ''), validate_objects, show_warnings)\n            good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    return len(self.objects), len(self.valid_objects), len(self.invalid_objects)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root in self.sr.walk():\n        if validate_objects is True and check_digests is True:\n            if not root.digests:\n                continue\n            if not len(root.digests) == 1:\n                continue\n        if show_warnings is True and root.warnings:\n            print(root.warnings)\n        if root.digests and root.digests[0] is not None:\n            num_objects += 1\n            good_objects += 1\n            if root.digests[0].validate_objects(\n                    validate_objects=validate_objects, check_digests=check_digests):\n                good_objects += 1\n    return num_objects, good_objects\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of objects checked that were found\n    to be valid for this storage root\n    \"\"\"\n    if not self._validate_objects:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    good_objects = self._objects_with_digest(check_digests)\n    if not good_objects:\n        return 0, 0\n\n    return len(good_objects), len(good_objects) - len(self._objects_with_digest(check_digests))\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    if validate_objects:\n        for s in self.snapshots:\n            num_objects += s.validate_objects(check_digests, show_warnings)\n            if s.is_root:\n                break\n    return num_objects, num_objects - len(self.snapshots)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, show_warnings)\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, False)\n    return validate_objects, check_digests\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    valid_objects = 0\n    for root, dirs, files in os.walk(self.storage_root):\n        num_objects += 1\n        for f in files:\n            valid_objects += 1\n            if validate_objects:\n                if f.startswith(self.storage_root):\n                    if f.endswith(self.object_ending):\n                        num_objects += 1\n                        valid_objects += self.validate_object(f, check_digests, show_warnings)\n                        break\n    if validate_objects:\n        if not show_warnings:\n            self.warn('Valid objects found: {}'.format(num_objects))\n    return num_objects, valid_objects\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects, good_objects = 0, 0\n    for root in self._roots:\n        if root.validate(validate_objects=validate_objects,\n                         check_digests=check_digests,\n                         show_warnings=show_warnings):\n            num_objects += 1\n        else:\n            good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    # type: (bool, bool, bool, bool) -> Tuple[int, int]\n    num_objects = 0\n    checked_objects = 0\n    good_objects = 0\n    if validate_objects:\n        validate_objects = self.get_validate_objects()\n    if check_digests:\n        check_digests = self.get_check_digests()\n    if show_warnings:\n        self.__validate_objects_and_digests(validate_objects, check_digests)\n    return (num_objects, checked_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of\n                           objects checked that were found to be valid\n    \"\"\"\n    # Check digests\n    if not check_digests:\n        valid_digests = self.digests\n    else:\n        valid_digests = []\n        for digest in self.digests:\n            if not digest.validate():\n                valid_digests.append(digest.name)\n\n    # Check objects\n    if not validate_objects:\n        return 0, 0\n    if show_warnings:\n        print(\"\\nValid objects:\")\n        print(\"\\n\".join(valid_digests))\n    valid_objects = [x for x in self.objects if x.validate()]\n    return len(valid_objects), len(valid_digests)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root, subdirs, files in os.walk(self.storage_path, followlinks=True):\n        if check_digests:\n            self.digest_check(root)\n        for file in files:\n            self.check_file(os.path.join(root, file), validate_objects)\n        if check_objects:\n            self.check_objects(os.path.join(root, ''), validate_objects, show_warnings)\n            good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects = validate_objects or self.validate_objects\n    check_digests = check_digests or self.check_digests\n    return len(self.objects), len(self.valid_objects), len(self.invalid_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    good_objects = 0\n    for root in self.sr.walk():\n        if validate_objects is True and check_digests is True:\n            if not root.digests:\n                continue\n            if not len(root.digests) == 1:\n                continue\n        if show_warnings is True and root.warnings:\n            print(root.warnings)\n        if root.digests and root.digests[0] is not None:\n            num_objects += 1\n            good_objects += 1\n            if root.digests[0].validate_objects(\n                    validate_objects=validate_objects, check_digests=check_digests):\n                good_objects += 1\n    return num_objects, good_objects\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"\"\"\n    Validate storage root hierarchy.\n\n    Returns: num_objects - number of objects checked good_objects - number of objects checked that were found\n    to be valid for this storage root\n    \"\"\"\n    if not self._validate_objects:\n        return 0, 0\n\n    if not validate_objects:\n        return 0, 0\n\n    good_objects = self._objects_with_digest(check_digests)\n    if not good_objects:\n        return 0, 0\n\n    return len(good_objects), len(good_objects) - len(self._objects_with_digest(check_digests))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    if validate_objects:\n        for s in self.snapshots:\n            num_objects += s.validate_objects(check_digests, show_warnings)\n            if s.is_root:\n                break\n    return num_objects, num_objects - len(self.snapshots)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, show_warnings)\n    validate_objects, check_digests = self._validate_objects_check_digests(\n        validate_objects, check_digests, False)\n    return validate_objects, check_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    num_objects = 0\n    valid_objects = 0\n    for root, dirs, files in os.walk(self.storage_root):\n        num_objects += 1\n        for f in files:\n            valid_objects += 1\n            if validate_objects:\n                if f.startswith(self.storage_root):\n                    if f.endswith(self.object_ending):\n                        num_objects += 1\n                        valid_objects += self.validate_object(f, check_digests, show_warnings)\n                        break\n    if validate_objects:\n        if not show_warnings:\n            self.warn('Valid objects found: {}'.format(num_objects))\n    return num_objects, valid_objects\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    return _lib.ocfl_initialize(self._ocfl_struct)\n", "def initialize(self):\n    \n    \n    # Initialize the OCFL storage root.\n    self._oocfl_root = OCFL()\n\n    # Initialize the address space with the root of the OCFL file.\n    self._oocfl_root.initialize(self._oocfl_file)\n\n    # Initialize the address space with the root of the OCFL data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file directory.\n    self._oocfl_root.initialize(self._file_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data file.\n    self._", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "def initialize(self):\n    \n    \n    self._ocfl_root = OCFLStorageRoot(self)\n    self._ocfl_root.initialize()\n    return self._ocfl_root\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._initialized = True\n    self._initialize()\n    return self\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._ocfl_root = OCFL()\n    return self\n", "def initialize(self):\n    self._ocfl_root = OCFL()\n", "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    # type: () -> None\n    if self._handle is None:\n        self._handle = pyopencl.create_array(self._context, self._dtype(),\n                                           self._shape, self._strides)\n", "def initialize(self):\n    \n    \n    self._ocfl_root = lib.ocfl_initialize()\n    return self._ocfl_root\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    return _lib.ocfl_initialize(self._ocfl_struct)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    # Initialize the OCFL storage root.\n    self._oocfl_root = OCFL()\n\n    # Initialize the address space with the root of the OCFL file.\n    self._oocfl_root.initialize(self._oocfl_file)\n\n    # Initialize the address space with the root of the OCFL data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file directory.\n    self._oocfl_root.initialize(self._file_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data directory.\n    self._oocfl_root.initialize(self._data_directory)\n\n    # Initialize the address space with the root of the OCFL file map.\n    self._oocfl_root.initialize(self._file_map)\n\n    # Initialize the address space with the root of the OCFL file data file.\n    self._", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._ocfl_root = OCFLStorageRoot(self)\n    self._ocfl_root.initialize()\n    return self._ocfl_root\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._initialized = True\n    self._initialize()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    self._ocfl_root = OCFL()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self._ocfl_root = OCFL()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \"\"\"\n    Create and initialize a new OCFL storage root.\n    \"\"\"\n    # type: () -> None\n    if self._handle is None:\n        self._handle = pyopencl.create_array(self._context, self._dtype(),\n                                           self._shape, self._strides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    \n    \n    self._ocfl_root = lib.ocfl_initialize()\n    return self._ocfl_root\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return version + 1\n", "def next_version(version):\n    return version + 1 if version else 1\n", "def next_version(version):\n    \"\"\"Given next version identifier following existing pattern\"\"\"\n    return '{}.{}'.format(version + 1, 1)\n", "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    return ''.join(['v', str(version)])\n", "def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return ''.join(['v', str(version + 1)])\n", "def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return '.'.join(version.split('.')[:2])\n", "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    if version % 10 == 1:\n        return version // 10\n    return version // 10 + 1\n", "def next_version(version):\n    \"\"\"Given next version identifier following existing pattern\"\"\"\n    return '%s.%s' % (version[:2], version[2:])\n", "def next_version(version):\n    return '%s.%s' % (version, int(version[-1]) + 1)\n", "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    return \"%s.%s\" % (version, int(version[-1]) + 1)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return version + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return version + 1 if version else 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\"Given next version identifier following existing pattern\"\"\"\n    return '{}.{}'.format(version + 1, 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    return ''.join(['v', str(version)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return ''.join(['v', str(version + 1)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\" Given next version identifier following existing pattern \"\"\"\n    return '.'.join(version.split('.')[:2])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    if version % 10 == 1:\n        return version // 10\n    return version // 10 + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\"Given next version identifier following existing pattern\"\"\"\n    return '%s.%s' % (version[:2], version[2:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    return '%s.%s' % (version, int(version[-1]) + 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"\"\"\n    Given next version identifier following existing pattern\n    \"\"\"\n    return \"%s.%s\" % (version, int(version[-1]) + 1)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    \"\"\"\n        Returns a list of filenames that should be checked and ignored in the\n        inventory.\n    \"\"\"\n    return []\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\" \"\"\"\n    # XXX: This is a very simple implementation.  The first time we validate\n    #      the content digests, we should reuse the inventory to represent the\n    #      files to check.  The second time we validate the content digests,\n    #      we should check the files from the inventory to see if the content\n    #      digests are the same.\n    #\n    #      It would be nice to do some sort of lazy check in here.\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    self.inventory = {}\n    for version in version_dirs:\n        self.inventory[version] = set()\n        self.inventory[version].add(os.path.basename(version))\n    self.inventory[\"_meta\"] = self.inventory.get(\"_meta\", {})\n    self.inventory[\"_files\"] = self.inventory.get(\"_files\", {})\n    self.inventory[\"_dirs\"] = self.inventory.get(\"_dirs\", {})\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\" Return a list of files that were not already present in the inventory. \"\"\"\n    inv = self.inventory\n    for version_dir in version_dirs:\n        inv_files = [f for f in inv if version_dir in inv[f]['parent']]\n        if len(inv_files) == 0:\n            self.log.info(\"{} not found in inventory.\".format(version_dir))\n            return []\n    return inv_files\n", "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit ugly, but it works. need to make it work with the same\n    # version scheme as a source package\n    # TODO: check inventory digests\n    # TODO: check content digests\n    # TODO: check files digests\n    # TODO: check files content digests\n    # TODO: check package content digests\n    # TODO: check package content digests\n    pass\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Every version SHOULD have an inventory up to that point.\n    Also keep a record of any content digests different from that in the\n    root inventory, and check if validating the content.\n    version_dirs is an array of version directory names, is assumed to be\n    in version sequence (1, 2, 3).\n    \"\"\"\n    inv_digests = {}\n    for vdir in version_dirs:\n        inv_digests[vdir] = self.get_inventory_digest(vdir)\n    return inv_digests\n", "def validate_version_inventories(self, version_dirs):\n    inv = self.inventory\n    if len(version_dirs)!= len(inv):\n        return False\n    for i in range(len(version_dirs)):\n        v = version_dirs[i]\n        if v in inv:\n            if i!= len(inv) - 1:\n                inv[v] = max(inv[v], inv[v+1])\n            else:\n                inv[v] = inv[v+1]\n        else:\n            if i!= len(inv) - 1:\n                inv[v] = 1\n    return True\n", "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Return a list of files that should be checked for updates.\n    \"\"\"\n    raise NotImplementedError()\n", "def validate_version_inventories(self, version_dirs):\n    inventory_dir = self.get_inventory_dir()\n    if inventory_dir is None:\n        return\n    for version_dir in version_dirs:\n        if version_dir not in inventory_dir:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' does not exist.\".format(version_dir)\n            )\n        if version_dir in self._root_inventory:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' is already in the root inventory.\".format(\n                    version_dir\n                )\n            )\n        self._root_inventory[version_dir] = inventory_dir\n", "def validate_version_inventories(self, version_dirs):\n    pass\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n        Returns a list of filenames that should be checked and ignored in the\n        inventory.\n    \"\"\"\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\" \"\"\"\n    # XXX: This is a very simple implementation.  The first time we validate\n    #      the content digests, we should reuse the inventory to represent the\n    #      files to check.  The second time we validate the content digests,\n    #      we should check the files from the inventory to see if the content\n    #      digests are the same.\n    #\n    #      It would be nice to do some sort of lazy check in here.\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.inventory = {}\n    for version in version_dirs:\n        self.inventory[version] = set()\n        self.inventory[version].add(os.path.basename(version))\n    self.inventory[\"_meta\"] = self.inventory.get(\"_meta\", {})\n    self.inventory[\"_files\"] = self.inventory.get(\"_files\", {})\n    self.inventory[\"_dirs\"] = self.inventory.get(\"_dirs\", {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\" Return a list of files that were not already present in the inventory. \"\"\"\n    inv = self.inventory\n    for version_dir in version_dirs:\n        inv_files = [f for f in inv if version_dir in inv[f]['parent']]\n        if len(inv_files) == 0:\n            self.log.info(\"{} not found in inventory.\".format(version_dir))\n            return []\n    return inv_files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    # TODO: this is a bit ugly, but it works. need to make it work with the same\n    # version scheme as a source package\n    # TODO: check inventory digests\n    # TODO: check content digests\n    # TODO: check files digests\n    # TODO: check files content digests\n    # TODO: check package content digests\n    # TODO: check package content digests\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Every version SHOULD have an inventory up to that point.\n    Also keep a record of any content digests different from that in the\n    root inventory, and check if validating the content.\n    version_dirs is an array of version directory names, is assumed to be\n    in version sequence (1, 2, 3).\n    \"\"\"\n    inv_digests = {}\n    for vdir in version_dirs:\n        inv_digests[vdir] = self.get_inventory_digest(vdir)\n    return inv_digests\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    inv = self.inventory\n    if len(version_dirs)!= len(inv):\n        return False\n    for i in range(len(version_dirs)):\n        v = version_dirs[i]\n        if v in inv:\n            if i!= len(inv) - 1:\n                inv[v] = max(inv[v], inv[v+1])\n            else:\n                inv[v] = inv[v+1]\n        else:\n            if i!= len(inv) - 1:\n                inv[v] = 1\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    \"\"\"\n    Return a list of files that should be checked for updates.\n    \"\"\"\n    raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    inventory_dir = self.get_inventory_dir()\n    if inventory_dir is None:\n        return\n    for version_dir in version_dirs:\n        if version_dir not in inventory_dir:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' does not exist.\".format(version_dir)\n            )\n        if version_dir in self._root_inventory:\n            raise errors.WrongContentDigest(\n                \"The inventory directory '{}' is already in the root inventory.\".format(\n                    version_dir\n                )\n            )\n        self._root_inventory[version_dir] = inventory_dir\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    pass\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    \"\"\"\n    Return a string indicating the type of thing at the given path\n    \"\"\"\n    if not path:\n        return ''\n    elif len(path) == 1:\n        return 'directory'\n    else:\n        return 'file'\n", "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    return os.path.splitext(path)[1]\n", "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    if '/' in path:\n        return 'directory'\n    elif '\\\\' in path:\n        return 'file'\n    return 'unknown'\n", "def find_path_type(path):\n    if len(path) == 1:\n        return \"directory\"\n    elif len(path) == 2:\n        return \"file\"\n    else:\n        return \"directory and file\"\n", "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    try:\n        return os.listdir(path)[0]\n    except IndexError:\n        return '/'\n", "def find_path_type(path):\n    for i in range(1, len(path)):\n        if path[i] == path[i - 1]:\n            return \"path\"\n    return \"no path\"\n", "def find_path_type(path):\n    for i, e in enumerate(path):\n        if not isinstance(e, list):\n            return \"%s[%d]\" % (find_path_type(path[:i]), i)\n    return \"%s\" % find_path_type(path)\n", "def find_path_type(path):\n    if \".\" not in path:\n        return \"file\"\n    elif \".py\" in path:\n        return \"python\"\n    else:\n        return \"folder\"\n", "def find_path_type(path):\n    \n    \n    if len(path) == 1:\n        return \"file\"\n    elif path[1] == \"\":\n        return \"directory\"\n    else:\n        return \"subdirectory\"\n", "def find_path_type(path):\n    if path[0] == '/':\n        return 'directory'\n    elif path[0] == '\\\\':\n        return 'file'\n    else:\n        return'symlink'\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    \"\"\"\n    Return a string indicating the type of thing at the given path\n    \"\"\"\n    if not path:\n        return ''\n    elif len(path) == 1:\n        return 'directory'\n    else:\n        return 'file'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    return os.path.splitext(path)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    if '/' in path:\n        return 'directory'\n    elif '\\\\' in path:\n        return 'file'\n    return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if len(path) == 1:\n        return \"directory\"\n    elif len(path) == 2:\n        return \"file\"\n    else:\n        return \"directory and file\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    \"\"\"Return a string indicating the type of thing at the given path\"\"\"\n    try:\n        return os.listdir(path)[0]\n    except IndexError:\n        return '/'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for i in range(1, len(path)):\n        if path[i] == path[i - 1]:\n            return \"path\"\n    return \"no path\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for i, e in enumerate(path):\n        if not isinstance(e, list):\n            return \"%s[%d]\" % (find_path_type(path[:i]), i)\n    return \"%s\" % find_path_type(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if \".\" not in path:\n        return \"file\"\n    elif \".py\" in path:\n        return \"python\"\n    else:\n        return \"folder\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    \n    \n    if len(path) == 1:\n        return \"file\"\n    elif path[1] == \"\":\n        return \"directory\"\n    else:\n        return \"subdirectory\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path[0] == '/':\n        return 'directory'\n    elif path[0] == '\\\\':\n        return 'file'\n    else:\n        return'symlink'\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not isinstance(params, dict):\n        return params\n    for k, v in params.items():\n        if k in bug_ids:\n            params[k] = v + '+'\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    params[\"id\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    if not bug_ids:\n        return params\n    params['ids'] = ','.join(map(str, bug_ids))\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for param in params:\n        if param['id'] in bug_ids:\n            param['amended'] = True\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['ids'] = ','.join(bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not params:\n        return {}\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n    params['bug_id'] = ','.join(str(bug_id) for bug_id in bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    if params:\n        params[\"bug_id\"] = bug_ids\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = {}\n    params['ids'] = ','.join(bug_ids)\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for bug_id in bug_ids:\n        params['id'] = str(bug_id)\n        params['summary'] = 'Bug #%s was added' % bug_id\n        params['assignee'] = '%s' % self.username\n        params['status'] = 'Assigned'\n    return params\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not isinstance(params, dict):\n        return params\n    for k, v in params.items():\n        if k in bug_ids:\n            params[k] = v + '+'\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    params[\"id\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"\n    Amend the Bugzilla params\n    \"\"\"\n    if not bug_ids:\n        return params\n    params['ids'] = ','.join(map(str, bug_ids))\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for param in params:\n        if param['id'] in bug_ids:\n            param['amended'] = True\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    for bug_id in bug_ids:\n        params['id'] = bug_id\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    params['ids'] = ','.join(bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\"Amend the Bugzilla params\"\"\"\n    if not params:\n        return {}\n    if not isinstance(bug_ids, list):\n        bug_ids = [bug_ids]\n    params['bug_id'] = ','.join(str(bug_id) for bug_id in bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \"\"\" Amend the Bugzilla params \"\"\"\n    if params:\n        params[\"bug_id\"] = bug_ids\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if params is None:\n        params = {}\n    params['ids'] = ','.join(bug_ids)\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    \n    \n    for bug_id in bug_ids:\n        params['id'] = str(bug_id)\n        params['summary'] = 'Bug #%s was added' % bug_id\n        params['assignee'] = '%s' % self.username\n        params['status'] = 'Assigned'\n    return params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    result = []\n    while nodes:\n        next_nodes = []\n        for node in nodes:\n            if isinstance(node, dict):\n                value, key = node.items()[0]\n                if key not in node:\n                    next_nodes.append((value, key))\n                else:\n                    node[key] = deep_merge_nodes(node[key])\n            else:\n                next_nodes.append(node)\n        nodes = next_nodes\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            r = deep_merge_nodes(v.items())\n            if k in result:\n                result[k] = result[k]._replace(**r)\n            else:\n                result[k] = v\n        else:\n            result[k] = v\n    return result\n", "def deep_merge_nodes(nodes):\n    dupes = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            dupes.update(node)\n        else:\n            dupes[node] = node[-1]\n    return [i for i in nodes if i not in dupes]\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if node in result:\n            result[node] = result[node] + node.value\n        else:\n            result[node] = node.value\n    return result\n", "def deep_merge_nodes(nodes):\n    output = []\n    for node in nodes:\n        if isinstance(node, dict):\n            keys = node.keys()\n            for key in keys:\n                if key in output or node[key] is not None:\n                    output[-1][key] = node[key]\n                else:\n                    output.append({key: node[key]})\n        else:\n            output.append(node)\n    return output\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes.items():\n        if key in result:\n            result[key] = deep_merge_nodes(result[key])\n        else:\n            result[key] = value\n    return result\n", "def deep_merge_nodes(nodes):\n    seen = set()\n    result = {}\n    for node in nodes:\n        if node in seen:\n            continue\n        seen.add(node)\n        result.update(node.values())\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (Union[List[str], str]) -> Union[str, dict[str, str]]\n    # remove duplicate keys\n    result = {}\n    for key, value in nodes:\n        if key in result:\n            if isinstance(result[key], dict):\n                result[key] = deep_merge_nodes(result[key])\n            else:\n                result[key] = value\n        else:\n            result[key] = value\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(node)\n        else:\n            result[node] = node\n    return result\n", "def deep_merge_nodes(nodes):\n    result = nodes[0]\n    for node in nodes[1:]:\n        if isinstance(result, dict) and node.key in result:\n            result[node.key] = deep_merge_nodes(result[node.key])\n        else:\n            result = node\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            r = deep_merge_nodes(v.items())\n            if k in result:\n                result[k] = result[k]._replace(**r)\n            else:\n                result[k] = v\n        else:\n            result[k] = v\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    dupes = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            dupes.update(node)\n        else:\n            dupes[node] = node[-1]\n    return [i for i in nodes if i not in dupes]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if node in result:\n            result[node] = result[node] + node.value\n        else:\n            result[node] = node.value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    output = []\n    for node in nodes:\n        if isinstance(node, dict):\n            keys = node.keys()\n            for key in keys:\n                if key in output or node[key] is not None:\n                    output[-1][key] = node[key]\n                else:\n                    output.append({key: node[key]})\n        else:\n            output.append(node)\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes.items():\n        if key in result:\n            result[key] = deep_merge_nodes(result[key])\n        else:\n            result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    seen = set()\n    result = {}\n    for node in nodes:\n        if node in seen:\n            continue\n        seen.add(node)\n        result.update(node.values())\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (Union[List[str], str]) -> Union[str, dict[str, str]]\n    # remove duplicate keys\n    result = {}\n    for key, value in nodes:\n        if key in result:\n            if isinstance(result[key], dict):\n                result[key] = deep_merge_nodes(result[key])\n            else:\n                result[key] = value\n        else:\n            result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, dict):\n            result.update(node)\n        else:\n            result[node] = node\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = nodes[0]\n    for node in nodes[1:]:\n        if isinstance(result, dict) and node.key in result:\n            result[node.key] = deep_merge_nodes(result[node.key])\n        else:\n            result = node\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Create a new file with a version number and a list of '\n                    'files to upload')\n    parser.add_argument('--version', action='version', version='%(prog)s '\n                                                           '%(version)s')\n    parser.add_argument('--files', nargs='*', default=[], help='Files to upload')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        dest='all',\n        default=False,\n        help='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-d', '--dir',\n        action='store',\n        dest='dir',\n        default='.',\n        help='The directory where the files will be stored.'\n    )\n    parser.add_argument(\n        'files',\n        nargs='*',\n        help='The files to create a new directory under.'\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='''\n        Create a grid of pixel locations for a given map of spatial reference\n        '''\n    )\n    parser.add_argument(\n        '--input',\n        dest='input',\n        required=True,\n        help='Input file with the map of spatial reference'\n    )\n    parser.add_argument(\n        '--output',\n        dest='output',\n        default='output.png',\n        help='Output file to write to'\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", default=\"input.txt\", type=str,\n                        help=\"input file\")\n    parser.add_argument(\"-o\", \"--output\", default=\"output.txt\", type=str,\n                        help=\"output file\")\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', default='./config.yaml', help='Configuration file to use')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description=\"Test the created database on the server\"\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Distribute a set of results from a single analysis run')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-c', '--config', dest='config', type=str,\n                        help='Configuration file to use (default is \"development.ini\")')\n    parser.add_argument('-o', '--output', dest='output', default='results.csv',\n                        help='Output file name')\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=\"\"\"\n                                                Generate a C file for a C program\n                                            \"\"\")\n    parser.add_argument(\"-c\", \"--config\", dest=\"config_file\", help=\"\"\"\n                                                                   Configuration file\n                                                                   \"\"\")\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Create a new file with a version number and a list of '\n                    'files to upload')\n    parser.add_argument('--version', action='version', version='%(prog)s '\n                                                           '%(version)s')\n    parser.add_argument('--files', nargs='*', default=[], help='Files to upload')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-a', '--all',\n        action='store_true',\n        dest='all',\n        default=False,\n        help='Make a single directory from two or more files.'\n    )\n    parser.add_argument(\n        '-d', '--dir',\n        action='store',\n        dest='dir',\n        default='.',\n        help='The directory where the files will be stored.'\n    )\n    parser.add_argument(\n        'files',\n        nargs='*',\n        help='The files to create a new directory under.'\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='''\n        Create a grid of pixel locations for a given map of spatial reference\n        '''\n    )\n    parser.add_argument(\n        '--input',\n        dest='input',\n        required=True,\n        help='Input file with the map of spatial reference'\n    )\n    parser.add_argument(\n        '--output',\n        dest='output',\n        default='output.png',\n        help='Output file to write to'\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-i\", \"--input\", default=\"input.txt\", type=str,\n                        help=\"input file\")\n    parser.add_argument(\"-o\", \"--output\", default=\"output.txt\", type=str,\n                        help=\"output file\")\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', default='./config.yaml', help='Configuration file to use')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description=\"Test the created database on the server\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Distribute a set of results from a single analysis run')\n    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',\n                        help='Show debug messages')\n    parser.add_argument('-c', '--config', dest='config', type=str,\n                        help='Configuration file to use (default is \"development.ini\")')\n    parser.add_argument('-o', '--output', dest='output', default='results.csv',\n                        help='Output file name')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description=\"\"\"\n                                                Generate a C file for a C program\n                                            \"\"\")\n    parser.add_argument(\"-c\", \"--config\", dest=\"config_file\", help=\"\"\"\n                                                                   Configuration file\n                                                                   \"\"\")\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join(f'--{k} {v}' for k, v in vars(parser).items())\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest!= '':\n            flags +='' + flag.dest\n    return flags\n", "def parser_flags(parser):\n    return''.join(map(str, parser._args))\n", "def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(parser._actions[0][2].option_strings)\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join([str(f) for f in parser._actions])\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest') and arg.dest is not None:\n            flags.append(arg.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a\n    space-separated string.\n    \"\"\"\n    return''.join(['--{}'.format(f) for f in vars(parser).keys()])\n", "def parser_flags(parser):\n    return''.join(['--%s' % x for x in parser._actions])"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join(f'--{k} {v}' for k, v in vars(parser).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = ''\n    for flag in parser._actions:\n        if flag.dest!= '':\n            flags +='' + flag.dest\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(map(str, parser._args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.name for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._actions[0][2].option_strings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    return''.join([str(f) for f in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if hasattr(arg, 'dest') and arg.dest is not None:\n            flags.append(arg.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._get_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a\n    space-separated string.\n    \"\"\"\n    return''.join(['--{}'.format(f) for f in vars(parser).keys()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--%s' % x for x in parser._actions])", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    \n    \n    parser = argparse.ArgumentParser()\n    unparsed_arguments = list(unparsed_arguments)\n    parser.add_argument(\"--output\", type=str, default=\"\")\n    parser.add_argument(\"--save_dir\", type=str, default=\"\")\n    parser.add_argument(\"--max_episode\", type=int, default=0)\n    parser.add_argument(\"--episode_len\", type=int, default=0)\n    parser.add_argument(\"--save_interval\", type=int, default=0)\n    parser.add_argument(\"--save_every\", type=int, default=0)\n    parser.add_argument(\"--save_every_episodes\", type=int, default=0)\n    parser.add_argument(\"--env\", type=str, default=\"Deterministic-v0\")\n    parser.add_argument(\"--seed\", type=int, default=0)\n    parser.add_argument(\"--log_interval\", type=int, default=0)\n    parser.add_argument(\"--log_dir\", type=str, default=\"\")\n    parser.add_argument(\"--lr\", type=float, default=1e-2)\n    parser.add_argument(\"--env_id\", typ", "def parse_arguments(*unparsed_arguments):\n    \"\"\"\n    Parses parameters and returns the maps\n    maps are mapped keys to values of the form '<key>:<value>'\n    \"\"\"\n    result = {}\n    for arg in unparsed_arguments:\n        key, value = arg.split(':')\n        result[key] = value\n    return result\n", "def parse_arguments(*unparsed_arguments):\n    \n    \n    return {\n        '--stdin': False,\n        '--stdout': True,\n        '--stderr': True,\n        '--debug': False,\n        '--debug-file': 'debug.log',\n        '--debug-file-level': 1,\n        '--version': True,\n        '--debug-file-output': True,\n        '--debug-file-stack': True,\n        '--output-format': 'json',\n        '--input-file': unparsed_arguments[0],\n        '--output-file': unparsed_arguments[1],\n        '--output-file-stack': unparsed_arguments[2],\n        '--output-file-level': 1\n    }\n", "def parse_arguments(*unparsed_arguments):\n    \n    \n    result = {}\n    for i in unparsed_arguments:\n        i = i.split('=')\n        result[i[0]] = i[1]\n    return result\n", "def parse_arguments(*unparsed_arguments):\n    \"\"\"\n    Parses parameters and returns the maps of parameters as dicts\n    \"\"\"\n    parsed_arguments = {}\n    for arg in unparsed_arguments:\n        if arg not in parsed_arguments:\n            parsed_arguments[arg] = None\n        else:\n            parsed_arguments[arg] = {k: v for k, v in parsed_arguments[arg].items()}\n    return parsed_arguments\n", "def parse_arguments(*unparsed_arguments):\n    return dict([(a, list(map(int, unparsed_arguments))) for a in unparsed_arguments])\n", "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if isinstance(arg, str):\n            args[arg] = True\n        elif isinstance(arg, list):\n            args.update(arg)\n    return args\n", "def parse_arguments(*unparsed_arguments):\n    \n    \n    return dict(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    \n    \n    result = {}\n    for arg in unparsed_arguments:\n        key, value = arg.split('=')\n        result[key] = value\n    return result\n", "def parse_arguments(*unparsed_arguments):\n    \n    \n    return {k: v for k, v in zip(unparsed_arguments[::2], unparsed_arguments[1::2])}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    parser = argparse.ArgumentParser()\n    unparsed_arguments = list(unparsed_arguments)\n    parser.add_argument(\"--output\", type=str, default=\"\")\n    parser.add_argument(\"--save_dir\", type=str, default=\"\")\n    parser.add_argument(\"--max_episode\", type=int, default=0)\n    parser.add_argument(\"--episode_len\", type=int, default=0)\n    parser.add_argument(\"--save_interval\", type=int, default=0)\n    parser.add_argument(\"--save_every\", type=int, default=0)\n    parser.add_argument(\"--save_every_episodes\", type=int, default=0)\n    parser.add_argument(\"--env\", type=str, default=\"Deterministic-v0\")\n    parser.add_argument(\"--seed\", type=int, default=0)\n    parser.add_argument(\"--log_interval\", type=int, default=0)\n    parser.add_argument(\"--log_dir\", type=str, default=\"\")\n    parser.add_argument(\"--lr\", type=float, default=1e-2)\n    parser.add_argument(\"--env_id\", typ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \"\"\"\n    Parses parameters and returns the maps\n    maps are mapped keys to values of the form '<key>:<value>'\n    \"\"\"\n    result = {}\n    for arg in unparsed_arguments:\n        key, value = arg.split(':')\n        result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    return {\n        '--stdin': False,\n        '--stdout': True,\n        '--stderr': True,\n        '--debug': False,\n        '--debug-file': 'debug.log',\n        '--debug-file-level': 1,\n        '--version': True,\n        '--debug-file-output': True,\n        '--debug-file-stack': True,\n        '--output-format': 'json',\n        '--input-file': unparsed_arguments[0],\n        '--output-file': unparsed_arguments[1],\n        '--output-file-stack': unparsed_arguments[2],\n        '--output-file-level': 1\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    result = {}\n    for i in unparsed_arguments:\n        i = i.split('=')\n        result[i[0]] = i[1]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \"\"\"\n    Parses parameters and returns the maps of parameters as dicts\n    \"\"\"\n    parsed_arguments = {}\n    for arg in unparsed_arguments:\n        if arg not in parsed_arguments:\n            parsed_arguments[arg] = None\n        else:\n            parsed_arguments[arg] = {k: v for k, v in parsed_arguments[arg].items()}\n    return parsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict([(a, list(map(int, unparsed_arguments))) for a in unparsed_arguments])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if isinstance(arg, str):\n            args[arg] = True\n        elif isinstance(arg, list):\n            args.update(arg)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    return dict(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    result = {}\n    for arg in unparsed_arguments:\n        key, value = arg.split('=')\n        result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    \n    \n    return {k: v for k, v in zip(unparsed_arguments[::2], unparsed_arguments[1::2])}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments[len(result):]\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    args = []\n    for name, parser in subparsers.items():\n        args.extend(parser.parse_known_args())\n    result.update(unparsed_arguments)\n    return (args, result)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    arguments = []\n    for subparser in subparsers:\n        parsed_arguments, arguments = subparser.parse(unparsed_arguments, arguments)\n    return parsed_arguments, arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_parsed.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments[name])\n    return parsed_arguments, not_parsed\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    arguments = {}\n    for subparser in subparsers.values():\n        result.update(subparser.parse_arguments())\n        arguments.update(subparser._action_parser_kwargs)\n    unparsed_arguments = unparsed_arguments.copy()\n    unparsed_arguments.update(result)\n    return (result, arguments, unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = {}\n        for name, arg in unparsed_arguments.items():\n            if subparser_name in subparser._actions:\n                parsed_arguments[name] = subparser._actions[subparser_name](arg)\n            else:\n                parsed_arguments[name] = arg\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments.keys()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, []", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser_name not in remaining_args:\n            remaining_args.append(subparser_name)\n    return parsed_arguments, remaining_args\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name in subparsers:\n        result[subparser_name] = subparsers[subparser_name].parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    not_parsed_args = []\n    for subparser_name, subparser in subparsers.items():\n        args = unparsed_arguments.copy()\n        for arg in subparser._actions:\n            args.update({arg.dest: getattr(arg, 'const', arg.default)})\n        result[subparser_name] = subparser.parse_args(args)\n        not_parsed_args.append(subparser_name)\n    return result, not_parsed_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, unparsed_arguments[len(result):]\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    args = []\n    for name, parser in subparsers.items():\n        args.extend(parser.parse_known_args())\n    result.update(unparsed_arguments)\n    return (args, result)\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    arguments = []\n    for subparser in subparsers:\n        parsed_arguments, arguments = subparser.parse(unparsed_arguments, arguments)\n    return parsed_arguments, arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        if name not in unparsed_arguments:\n            not_parsed.append(name)\n        else:\n            parsed_arguments[name] = parser.parse_args(unparsed_arguments[name])\n    return parsed_arguments, not_parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    arguments = {}\n    for subparser in subparsers.values():\n        result.update(subparser.parse_arguments())\n        arguments.update(subparser._action_parser_kwargs)\n    unparsed_arguments = unparsed_arguments.copy()\n    unparsed_arguments.update(result)\n    return (result, arguments, unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments = {}\n        for name, arg in unparsed_arguments.items():\n            if subparser_name in subparser._actions:\n                parsed_arguments[name] = subparser._actions[subparser_name](arg)\n            else:\n                parsed_arguments[name] = arg\n        result[subparser_name] = parsed_arguments\n    return result, unparsed_arguments.keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser in subparsers.items():\n        result[subparser_name] = subparser.parse_args(unparsed_arguments)\n    return result, []", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser_name, subparser in subparsers.items():\n        parsed_arguments[subparser_name] = subparser.parse_args(unparsed_arguments)\n        if subparser_name not in remaining_args:\n            remaining_args.append(subparser_name)\n    return parsed_arguments, remaining_args\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name in subparsers:\n        result[subparser_name] = subparsers[subparser_name].parse_args(unparsed_arguments)\n    return result, unparsed_arguments\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    not_parsed_args = []\n    for subparser_name, subparser in subparsers.items():\n        args = unparsed_arguments.copy()\n        for arg in subparser._actions:\n            args.update({arg.dest: getattr(arg, 'const', arg.default)})\n        result[subparser_name] = subparser.parse_args(args)\n        not_parsed_args.append(subparser_name)\n    return result, not_parsed_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    \"\"\"Build a parser and its subparsers and return them as a tuple.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Test that the package list works properly.\"\n    )\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Create a simple parser for splitting an HTML file into chunks of the given size.\n        \"\"\"\n    )\n    parser.add_argument(\"file\", help=\"The file to split.\")\n    return parser\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to generate a set of parser objects from a given argument list.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--output-file\", \"-o\", default=\"output.txt\", type=str, help=\"\"\"\n        The name of the output file.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--input-file\", \"-i\", default=\"input.txt\", type=str, help=\"\"\"\n        The name of the input file.\n        \"\"\"\n    )\n    return parser.parse_args()\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description=\"Test the Python package requirements file.\")\n    subparsers = parser.add_subparsers()\n    subparsers.add_parser(\"list\", help=\"List all package requirements\")\n    subparsers.add_parser(\"add\", help=\"Add a new package requirement\")\n    subparsers.add_parser(\"remove\", help=\"Remove a package requirement\")\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Python module to compare two files and return the result.\n        '''\n    )\n    parser.add_argument('--a', required=True, help='Path to first file.')\n    parser.add_argument('--b', required=True, help='Path to second file.')\n    parser.add_argument('--c', required=True, help='Path to third file.')\n    parser.add_argument('--output', default='.', help='Path to output file.')\n    parser.add_argument('--verbose', action='store_true', help='Print more information.')\n    parser.add_argument('--debug', action='store_true', help='Print debug information.')\n    return (parser, parser.add_subparsers(dest='subcommand'))\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description='Test module for the Flask package.')\n    subparsers = parser.add_subparsers(title='Commands', dest='command')\n    subparsers.required = True\n\n    add_flask_subcommand(subparsers)\n    add_babel_subcommand(subparsers)\n    add_request_subcommand(subparsers)\n\n    return (parser, subparsers)\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        A simple generic parser for finding and parsing and parsing\n        the file system shared by multiple modules.\n        ''')\n    parser.add_argument('--debug', action='store_true', help='Debug mode')\n    parser.add_argument('-v', '--version', action='version', version='%(prog)s'+ __version__)\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Show information about a package.\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    subparsers.dest = \"command\"\n    return parser, subparsers\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser('python-mxnet-python')\n    subparsers = parser.add_subparsers(title=\"subcommands\")\n    return (parser, subparsers)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    \"\"\"Build a parser and its subparsers and return them as a tuple.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Test that the package list works properly.\"\n    )\n    subparsers = parser.add_subparsers(dest=\"subcommand\")\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Create a simple parser for splitting an HTML file into chunks of the given size.\n        \"\"\"\n    )\n    parser.add_argument(\"file\", help=\"The file to split.\")\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to generate a set of parser objects from a given argument list.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--output-file\", \"-o\", default=\"output.txt\", type=str, help=\"\"\"\n        The name of the output file.\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--input-file\", \"-i\", default=\"input.txt\", type=str, help=\"\"\"\n        The name of the input file.\n        \"\"\"\n    )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description=\"Test the Python package requirements file.\")\n    subparsers = parser.add_subparsers()\n    subparsers.add_parser(\"list\", help=\"List all package requirements\")\n    subparsers.add_parser(\"add\", help=\"Add a new package requirement\")\n    subparsers.add_parser(\"remove\", help=\"Remove a package requirement\")\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        Python module to compare two files and return the result.\n        '''\n    )\n    parser.add_argument('--a', required=True, help='Path to first file.')\n    parser.add_argument('--b', required=True, help='Path to second file.')\n    parser.add_argument('--c', required=True, help='Path to third file.')\n    parser.add_argument('--output', default='.', help='Path to output file.')\n    parser.add_argument('--verbose', action='store_true', help='Print more information.')\n    parser.add_argument('--debug', action='store_true', help='Print debug information.')\n    return (parser, parser.add_subparsers(dest='subcommand'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(description='Test module for the Flask package.')\n    subparsers = parser.add_subparsers(title='Commands', dest='command')\n    subparsers.required = True\n\n    add_flask_subcommand(subparsers)\n    add_babel_subcommand(subparsers)\n    add_request_subcommand(subparsers)\n\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='''\n        A simple generic parser for finding and parsing and parsing\n        the file system shared by multiple modules.\n        ''')\n    parser.add_argument('--debug', action='store_true', help='Debug mode')\n    parser.add_argument('-v', '--version', action='version', version='%(prog)s'+ __version__)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Show information about a package.\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    subparsers.dest = \"command\"\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser('python-mxnet-python')\n    subparsers = parser.add_subparsers(title=\"subcommands\")\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes.items():\n        if not isinstance(value, MappingNode):\n            result[key] = value\n        else:\n            last = result.get(key, {})\n            if isinstance(value, MappingNode):\n                result[key] = deep_merge_nodes(last)\n            else:\n                result[key] = value[:-1]\n    return result\n", "def deep_merge_nodes(nodes):\n    # type: (List[bytes]) -> Dict[Any, bytes]\n    result = {}\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            result.update(deep_merge_nodes([k, v]))\n        else:\n            result[k] = v\n    return result\n", "def deep_merge_nodes(nodes):\n    result = nodes[:]\n    for key, value in list(result[0].items()):\n        if isinstance(value, dict):\n            result[0][key] = deep_merge_nodes([x for x in result[0].get(key, {}) if isinstance(x, dict)])\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for key, value in nodes:\n        if isinstance(value, MappingNode):\n            value = deep_merge_nodes(value)\n        result.append((key, value))\n    return result\n", "def deep_merge_nodes(nodes):\n    dupes = []\n    for k, v in nodes.items():\n        if not isinstance(v, dict):\n            dupes.append(k)\n        elif k in nodes:\n            nodes[k] = deep_merge_nodes(v)\n        else:\n            nodes[k] = v\n    return nodes if dupes else {}\n", "def deep_merge_nodes(nodes):\n    result = nodes[0]\n    for node in nodes[1:]:\n        result = _deep_merge(result, node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            keys = set(node.keys())\n            if keys and keys!= result:\n                result.update(node)\n            else:\n                result.update(node)\n        else:\n            result[node] = nodes[node]\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.extend(node.values())\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    r = {}\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            r.update(deep_merge_nodes(v.items()))\n        else:\n            r[k] = v\n    return r\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, dict):\n            result.extend([k for k, v in node.items() if v not in result])\n        else:\n            result.append(node)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for key, value in nodes.items():\n        if not isinstance(value, MappingNode):\n            result[key] = value\n        else:\n            last = result.get(key, {})\n            if isinstance(value, MappingNode):\n                result[key] = deep_merge_nodes(last)\n            else:\n                result[key] = value[:-1]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    # type: (List[bytes]) -> Dict[Any, bytes]\n    result = {}\n    for k, v in nodes:\n        if isinstance(v, MappingNode):\n            result.update(deep_merge_nodes([k, v]))\n        else:\n            result[k] = v\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = nodes[:]\n    for key, value in list(result[0].items()):\n        if isinstance(value, dict):\n            result[0][key] = deep_merge_nodes([x for x in result[0].get(key, {}) if isinstance(x, dict)])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for key, value in nodes:\n        if isinstance(value, MappingNode):\n            value = deep_merge_nodes(value)\n        result.append((key, value))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    dupes = []\n    for k, v in nodes.items():\n        if not isinstance(v, dict):\n            dupes.append(k)\n        elif k in nodes:\n            nodes[k] = deep_merge_nodes(v)\n        else:\n            nodes[k] = v\n    return nodes if dupes else {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = nodes[0]\n    for node in nodes[1:]:\n        result = _deep_merge(result, node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = {}\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            keys = set(node.keys())\n            if keys and keys!= result:\n                result.update(node)\n            else:\n                result.update(node)\n        else:\n            result[node] = nodes[node]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            result.extend(node.values())\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    r = {}\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            r.update(deep_merge_nodes(v.items()))\n        else:\n            r[k] = v\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, dict):\n            result.extend([k for k, v in node.items() if v not in result])\n        else:\n            result.append(node)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n    return argparse.ArgumentParser(description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n            Instantiates a simple JSON-RPC server for the app and returns an \n            object representing the JSON response of the server.\n        \"\"\"\n    )\n    parser.add_argument(\"--host\", type=str, default=\"127.0.0.1\", help=\"host to bind to\")\n    parser.add_argument(\"--port\", type=int, default=5000, help=\"port to bind to\")\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\" Create a new configuration file for the database \"\"\"\n    )\n    parser.add_argument(\n        \"--config\",\n        \"-c\",\n        dest=\"config\",\n        required=True,\n        help=\"\"\"\n        The path to a configuration file to use for the database\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--append\",\n        \"-a\",\n        dest=\"append\",\n        required=True,\n        help=\"\"\"\n        If true, overwrites any existing configuration file with the new data\n        \"\"\"\n    )\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a list of random index numbers')\n    parser.add_argument('--n', '-n', type=int, default=100,\n                        help='Number of random index numbers to create')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            The main script for a single model run\n            \"\"\")\n    parser.add_argument(\"--dataset\", type=str, required=True,\n                        help=\"The dataset to use for training\")\n    parser.add_argument(\"--config\", type=str, required=True,\n                        help=\"The config file to use for training\")\n    parser.add_argument(\"--output_dir\", type=str, required=True,\n                        help=\"The output directory to save training results\")\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Script that trains a classifier on a given data set.\n        \"\"\"\n    )\n    parser.add_argument(\"--dataset\", dest=\"dataset\", type=str, required=True,\n                        help=\"Path to the dataset to use\")\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            Command-line interface for generating a Git Hash of a set of files.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"files\",\n        nargs=\"+\",\n        help=\"\"\"\n            The files to hash.\n            \"\"\",\n    )\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Convert MXC to GeoJSON')\n    parser.add_argument('--input', required=True, help='input GeoJSON file')\n    parser.add_argument('--output', required=True, help='output GeoJSON file')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to create a single image grid from a set of scan data.\n        \"\"\"\n    )\n    parser.add_argument(\"-o\", \"--output\", type=str, default=\"single.png\",\n                        help=\"The name of the output image.\")\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Enable debug mode.\")\n    parser.add_argument(\"-f\", \"--force\", action=\"store_true\",\n                        help=\"Force the script to overwrite existing files.\")\n    return parser\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool with the recent version of Python')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument(\n        '--debug', action='store_true',\n        help='Enable debugging output')\n    parser.add_argument(\n        '--input', metavar='FILE', type=str,\n        help='Name of the input file')\n    parser.add_argument(\n        '--output', metavar='FILE', type=str,\n        help='Name of the output file')\n    parser.add_argument(\n        '--output-format', metavar='FORMAT',\n        help='Output format')\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(description=\"\"\"\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = ArgumentParser(\n        description=\"\"\"\n            Instantiates a simple JSON-RPC server for the app and returns an \n            object representing the JSON response of the server.\n        \"\"\"\n    )\n    parser.add_argument(\"--host\", type=str, default=\"127.0.0.1\", help=\"host to bind to\")\n    parser.add_argument(\"--port\", type=int, default=5000, help=\"port to bind to\")\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\" Create a new configuration file for the database \"\"\"\n    )\n    parser.add_argument(\n        \"--config\",\n        \"-c\",\n        dest=\"config\",\n        required=True,\n        help=\"\"\"\n        The path to a configuration file to use for the database\n        \"\"\"\n    )\n    parser.add_argument(\n        \"--append\",\n        \"-a\",\n        dest=\"append\",\n        required=True,\n        help=\"\"\"\n        If true, overwrites any existing configuration file with the new data\n        \"\"\"\n    )\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a list of random index numbers')\n    parser.add_argument('--n', '-n', type=int, default=100,\n                        help='Number of random index numbers to create')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            The main script for a single model run\n            \"\"\")\n    parser.add_argument(\"--dataset\", type=str, required=True,\n                        help=\"The dataset to use for training\")\n    parser.add_argument(\"--config\", type=str, required=True,\n                        help=\"The config file to use for training\")\n    parser.add_argument(\"--output_dir\", type=str, required=True,\n                        help=\"The output directory to save training results\")\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        Script that trains a classifier on a given data set.\n        \"\"\"\n    )\n    parser.add_argument(\"--dataset\", dest=\"dataset\", type=str, required=True,\n                        help=\"Path to the dataset to use\")\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n            Command-line interface for generating a Git Hash of a set of files.\n            \"\"\"\n    )\n    parser.add_argument(\n        \"files\",\n        nargs=\"+\",\n        help=\"\"\"\n            The files to hash.\n            \"\"\",\n    )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Convert MXC to GeoJSON')\n    parser.add_argument('--input', required=True, help='input GeoJSON file')\n    parser.add_argument('--output', required=True, help='output GeoJSON file')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A simple script to create a single image grid from a set of scan data.\n        \"\"\"\n    )\n    parser.add_argument(\"-o\", \"--output\", type=str, default=\"single.png\",\n                        help=\"The name of the output image.\")\n    parser.add_argument(\"-d\", \"--debug\", action=\"store_true\",\n                        help=\"Enable debug mode.\")\n    parser.add_argument(\"-f\", \"--force\", action=\"store_true\",\n                        help=\"Force the script to overwrite existing files.\")\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Test the diff tool with the recent version of Python')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument(\n        '--debug', action='store_true',\n        help='Enable debugging output')\n    parser.add_argument(\n        '--input', metavar='FILE', type=str,\n        help='Name of the input file')\n    parser.add_argument(\n        '--output', metavar='FILE', type=str,\n        help='Name of the output file')\n    parser.add_argument(\n        '--output-format', metavar='FORMAT',\n        help='Output format')\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return''.join(['--{}'.format(a) for a in parser._actions])\n", "def parser_flags(parser):\n    return''.join(flag for flag in parser._actions if flag.startswith('-'))\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if arg.dest == 'command':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'context':\n            flags.append('--' + arg.flag + '-' + arg.dest)\n        elif arg.dest == 'args':\n            flags.append('-' + arg.flag)\n        elif arg.dest == 'help':\n            flags.append('--' + arg.flag)\n        elif arg.dest =='subcommand':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'name':\n            flags.append('--' + arg.flag)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in parser._flags.items())\n", "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in vars(parser).items())\n", "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        flags.append(arg.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(str(x) for x in parser._args)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join(['--{}'.format(a) for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(flag for flag in parser._actions if flag.startswith('-'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance, return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        if arg.dest == 'command':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'context':\n            flags.append('--' + arg.flag + '-' + arg.dest)\n        elif arg.dest == 'args':\n            flags.append('-' + arg.flag)\n        elif arg.dest == 'help':\n            flags.append('--' + arg.flag)\n        elif arg.dest =='subcommand':\n            flags.append('--' + arg.flag)\n        elif arg.dest == 'name':\n            flags.append('--' + arg.flag)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in parser._flags.items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{k}={v!r}' for k, v in vars(parser).items())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(f) for f in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"\"\"\n    Given an argparse.ArgumentParser instance,\n    return its argument flags in a space-separated string.\n    \"\"\"\n    flags = []\n    for arg in parser._actions:\n        flags.append(arg.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(str(x) for x in parser._args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    return ['-h', '--help'] + list(_bash_completion())\n", "def bash_completion():\n    \n    \n    return [{'name': x, 'help': x} for x in bash_cmd_line_parser()]\n", "def bash_completion():\n    return ['{} {}'.format(c, v) for c, v in _bash_completion.items()]\n", "def bash_completion():\n    return [\"--help\"]\n", "def bash_completion():\n    return ['%s %s' % (a, b) for a, b in _bash_completion()]\n", "def bash_completion():\n    return ['{} {}'.format(os.path.basename(sys.argv[0]), a) for a in COMMANDS]\n", "def bash_completion():\n    \n    \n    bash_completion = {\n        'list': bash_list,\n        'info': bash_info,\n       'version': bash_version,\n       'repos': bash_repos,\n       'repo_list': bash_repo_list,\n    }\n    return bash_completion\n", "def bash_completion():\n    return [name for name, cls in __import__(\"argparse\").__dict__.items()\n            if issubclass(cls, argparse.ArgumentParser)]\n", "def bash_completion():\n    return [\"%s %s\" % (BASH_COMMAND, x) for x in sys.argv[1:]]", "def bash_completion():\n    return [\"-c\", \"--config=%s\" % BASH_COMPLETION_FILE]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    return ['-h', '--help'] + list(_bash_completion())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    \n    \n    return [{'name': x, 'help': x} for x in bash_cmd_line_parser()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return ['{} {}'.format(c, v) for c, v in _bash_completion.items()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return [\"--help\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return ['%s %s' % (a, b) for a, b in _bash_completion()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return ['{} {}'.format(os.path.basename(sys.argv[0]), a) for a in COMMANDS]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    \n    \n    bash_completion = {\n        'list': bash_list,\n        'info': bash_info,\n       'version': bash_version,\n       'repos': bash_repos,\n       'repo_list': bash_repo_list,\n    }\n    return bash_completion\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return [name for name, cls in __import__(\"argparse\").__dict__.items()\n            if issubclass(cls, argparse.ArgumentParser)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return [\"%s %s\" % (BASH_COMMAND, x) for x in sys.argv[1:]]", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    return [\"-c\", \"--config=%s\" % BASH_COMPLETION_FILE]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    return {'': argparse.Namespace(**unparsed_arguments)}\n", "def parse_arguments(*unparsed_arguments):\n    return {\n        'debug': debug,\n       'version': version,\n        'parser': argparse.ArgumentParser(\n            description='Show information about the program being run')}\n", "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**vars(get_global_parser().parse_args(unparsed_arguments)))}\n", "def parse_arguments(*unparsed_arguments):\n    return dict((k, v) for k, v in unparsed_arguments if k.startswith('--'))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Compute the frequency of the 'interesting' words in a text\"\n    )\n    parser.add_argument(\n        \"--input\", type=str, required=True, help=\"input text to analyze\"\n    )\n    return dict(\n        (\n            subparser.name,\n            subparser.parse_args(unparsed_arguments)\n        )\n        for subparser in [\n            \"top_words\",\n            \"frequency\",\n            \"frequency_high\",\n            \"frequency_medium\",\n            \"frequency_low\",\n        ]\n    )\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for name, parser in list(__import__('argparse').__dict__.items()):\n        if isinstance(parser, type) and issubclass(parser, argparse.ArgumentParser):\n            subparsers.add_parser(name, help=parser.__doc__)\n    return {k: v() for k, v in list(subparsers.__dict__.items())}\n", "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if '=' in arg:\n            k, v = arg.split('=')\n            args[k] = v\n        else:\n            args['global'] = arg\n    return args\n", "def parse_arguments(*unparsed_arguments):\n    result = {}\n    for a in unparsed_arguments:\n        if a.startswith(\"--\"):\n            result.update(parse_options(a[2:]))\n        else:\n            result.update(parse_argument(a))\n    return result\n", "def parse_arguments(*unparsed_arguments):\n    # type: (*str) -> Dict[str, argparse.Namespace]\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", default=None, help=\"configuration file path\")\n    return dict(parser._actions)\n", "def parse_arguments(*unparsed_arguments):\n    return {\n       'subcommand': unparsed_arguments[0],\n       'subcommand_kwargs': unparsed_arguments[1]\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {'': argparse.Namespace(**unparsed_arguments)}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\n        'debug': debug,\n       'version': version,\n        'parser': argparse.ArgumentParser(\n            description='Show information about the program being run')}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\"global\": argparse.Namespace(**vars(get_global_parser().parse_args(unparsed_arguments)))}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict((k, v) for k, v in unparsed_arguments if k.startswith('--'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Compute the frequency of the 'interesting' words in a text\"\n    )\n    parser.add_argument(\n        \"--input\", type=str, required=True, help=\"input text to analyze\"\n    )\n    return dict(\n        (\n            subparser.name,\n            subparser.parse_args(unparsed_arguments)\n        )\n        for subparser in [\n            \"top_words\",\n            \"frequency\",\n            \"frequency_high\",\n            \"frequency_medium\",\n            \"frequency_low\",\n        ]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(dest='subcommand')\n    for name, parser in list(__import__('argparse').__dict__.items()):\n        if isinstance(parser, type) and issubclass(parser, argparse.ArgumentParser):\n            subparsers.add_parser(name, help=parser.__doc__)\n    return {k: v() for k, v in list(subparsers.__dict__.items())}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    args = {}\n    for arg in unparsed_arguments:\n        if '=' in arg:\n            k, v = arg.split('=')\n            args[k] = v\n        else:\n            args['global'] = arg\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    result = {}\n    for a in unparsed_arguments:\n        if a.startswith(\"--\"):\n            result.update(parse_options(a[2:]))\n        else:\n            result.update(parse_argument(a))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    # type: (*str) -> Dict[str, argparse.Namespace]\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", default=None, help=\"configuration file path\")\n    return dict(parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return {\n       'subcommand': unparsed_arguments[0],\n       'subcommand_kwargs': unparsed_arguments[1]\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser_parser in subparsers.items():\n        result[subparser_name] = subparser_parser.parse_args(unparsed_arguments)\n        unparsed_arguments = []\n    return result, unparsed_arguments", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser in subparsers:\n        parse_subparser_arguments(unparsed_arguments, subparser._actions)\n        parsed_arguments.update(subparser.parse_known_args())\n        remaining_args.extend(subparser.required)\n    return (parsed_arguments, remaining_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, []\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._subparsers._actions)\n    result = {}\n    for action_name, subparser in actions.items():\n        parsed_arguments = unparsed_arguments.copy()\n        for name, value in subparser._actions.items():\n            parsed_arguments[name] = subparser.parse(parsed_arguments[name])\n        result[action_name] = parsed_arguments\n    return actions, unparsed_arguments, result\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    missing_args = []\n    for subparser_name, subparser in subparsers.items():\n        parser_args = unparsed_arguments.copy()\n        for name in subparser_name:\n            if name not in parser_args:\n                missing_args.append(name)\n                continue\n            parser_args[name] = subparser.parse(parser_args[name])\n        result[subparser_name] = parser_args\n    return (result, missing_args)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    for subparser in subparsers.values():\n        if hasattr(subparser, \"__parse_arguments__\"):\n            arguments.update(subparser.__parse_arguments__(unparsed_arguments))\n    return arguments, unparsed_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers._actions:\n        action_parser = action._get_parser()\n        parsed_arguments.update(action_parser.parse_known_args())\n        if action_parser._action_groups:\n            remaining_arguments.extend(action_parser._action_groups)\n        else:\n            remaining_arguments.extend(action._get_default_values())\n    return parsed_arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        arguments, remaining_arguments = parser.parse_known_args(unparsed_arguments)\n    return arguments, remaining_arguments\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        if name not in parsed_arguments:\n            not_parsed.append(name)\n    return parsed_arguments, not_parsed\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._group_parser_kwargs)\n    remaining_arguments = {}\n    for name, parser in unparsed_arguments.items():\n        if name in actions:\n            remaining_arguments.update(actions[name]._group_parser_kwargs)\n            del actions[name]\n        else:\n            remaining_arguments.update(parser._group_parser_kwargs)\n    return actions, remaining_arguments\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for subparser_name, subparser_parser in subparsers.items():\n        result[subparser_name] = subparser_parser.parse_args(unparsed_arguments)\n        unparsed_arguments = []\n    return result, unparsed_arguments", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_args = []\n    for subparser in subparsers:\n        parse_subparser_arguments(unparsed_arguments, subparser._actions)\n        parsed_arguments.update(subparser.parse_known_args())\n        remaining_args.extend(subparser.required)\n    return (parsed_arguments, remaining_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    for name, subparser in subparsers.items():\n        result[name] = subparser.parse_args(unparsed_arguments)\n    return result, []\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._subparsers._actions)\n    result = {}\n    for action_name, subparser in actions.items():\n        parsed_arguments = unparsed_arguments.copy()\n        for name, value in subparser._actions.items():\n            parsed_arguments[name] = subparser.parse(parsed_arguments[name])\n        result[action_name] = parsed_arguments\n    return actions, unparsed_arguments, result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    result = {}\n    missing_args = []\n    for subparser_name, subparser in subparsers.items():\n        parser_args = unparsed_arguments.copy()\n        for name in subparser_name:\n            if name not in parser_args:\n                missing_args.append(name)\n                continue\n            parser_args[name] = subparser.parse(parser_args[name])\n        result[subparser_name] = parser_args\n    return (result, missing_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    for subparser in subparsers.values():\n        if hasattr(subparser, \"__parse_arguments__\"):\n            arguments.update(subparser.__parse_arguments__(unparsed_arguments))\n    return arguments, unparsed_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    remaining_arguments = []\n    for action in subparsers._actions:\n        action_parser = action._get_parser()\n        parsed_arguments.update(action_parser.parse_known_args())\n        if action_parser._action_groups:\n            remaining_arguments.extend(action_parser._action_groups)\n        else:\n            remaining_arguments.extend(action._get_default_values())\n    return parsed_arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    arguments = {}\n    remaining_arguments = []\n    for subparser in subparsers:\n        parser = subparser.add_parser(subparser.name)\n        arguments, remaining_arguments = parser.parse_known_args(unparsed_arguments)\n    return arguments, remaining_arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parsed_arguments = {}\n    not_parsed = []\n    for name, parser in subparsers.items():\n        parsed_arguments[name] = parser.parse_args(unparsed_arguments)\n        if name not in parsed_arguments:\n            not_parsed.append(name)\n    return parsed_arguments, not_parsed\n", "is_pass": false, "return_code": 2}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    actions = {}\n    for action in subparsers._actions:\n        actions.update(action._group_parser_kwargs)\n    remaining_arguments = {}\n    for name, parser in unparsed_arguments.items():\n        if name in actions:\n            remaining_arguments.update(actions[name]._group_parser_kwargs)\n            del actions[name]\n        else:\n            remaining_arguments.update(parser._group_parser_kwargs)\n    return actions, remaining_arguments\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Plot a spectrogram of a spectrogram.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(title='Commands')\n    # noinspection PyUnusedLocal\n    plot_parser = subparsers.add_parser(\n        'plot', help='Plot the spectrogram of a spectrogram.')\n    plot_parser.add_argument('--input', type=str, required=True,\n                             help='Spectrogram file to plot.')\n    plot_parser.add_argument('--output', type=str, required=True,\n                             help='Output file.')\n    return (parser, subparsers)\n", "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n    )\n", "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            prog='python',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3 -m',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n    )\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test to verify that the CLI works properly\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    subparsers.required = True\n    add_basic_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_remove_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_save_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_show_test_arguments(subparsers)\n    return (parser, subparsers)\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description='Get the latest data from the eBay website.')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='enable debug logging')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A very simple tool to generate HTML for a given page.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(\n        title=\"commands\", dest=\"command\"\n    )\n    subparsers.required = True\n    add_command(subparsers)\n    add_response(subparsers)\n    add_success(subparsers)\n    add_failure(subparsers)\n    add_error(subparsers)\n    add_html(subparsers)\n    add_xml(subparsers)\n    add_css(subparsers)\n    add_js(subparsers)\n    add_html_minify(subparsers)\n    add_xml_minify(subparsers)\n    add_jquery(subparsers)\n    add_css_minify(subparsers)\n    add_jquery_minify(subparsers)\n    add_html_preprocessor(subparsers)\n    add_js_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_css_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_html_postprocessor(subpar", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n    return parser, subparsers\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all available Kafka topics.')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', help='Enable debug mode.')\n    parser.add_argument('--debug-log', action='store_true', help='Log debug messages.')\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Produce an Ansible Inventory file based on a list of roles')\n    add_basic_testing_arguments(parser)\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (-vv debugs ansible_test also)')\n    parser.add_argument('roles', nargs='*', help='Roles to build Ansible Inventory for')\n    return parser.parse_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Plot a spectrogram of a spectrogram.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    subparsers = parser.add_subparsers(title='Commands')\n    # noinspection PyUnusedLocal\n    plot_parser = subparsers.add_parser(\n        'plot', help='Plot the spectrogram of a spectrogram.')\n    plot_parser.add_argument('--input', type=str, required=True,\n                             help='Spectrogram file to plot.')\n    plot_parser.add_argument('--output', type=str, required=True,\n                             help='Output file.')\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n        argparse.ArgumentParser(\n            description='Test the configuration file parser.'),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return (\n        argparse.ArgumentParser(\n            prog='python',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n        argparse.ArgumentParser(\n            prog='python3 -m',\n            description='A simple Python program for testing the CLI',\n            epilog='',\n            formatter_class=argparse.RawDescriptionHelpFormatter\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Simple test to verify that the CLI works properly\")\n    subparsers = parser.add_subparsers(dest=\"command\")\n    subparsers.required = True\n    add_basic_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_remove_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_save_test_arguments(subparsers)\n    add_list_test_arguments(subparsers)\n    add_run_test_arguments(subparsers)\n    add_show_test_arguments(subparsers)\n    return (parser, subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers()\n    subparsers.required = True\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    \n    \n    parser = argparse.ArgumentParser(\n        description='Get the latest data from the eBay website.')\n    parser.add_argument('--debug', '-d', action='store_true',\n                        help='enable debug logging')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"\"\"\n        A very simple tool to generate HTML for a given page.\n        \"\"\"\n    )\n    subparsers = parser.add_subparsers(\n        title=\"commands\", dest=\"command\"\n    )\n    subparsers.required = True\n    add_command(subparsers)\n    add_response(subparsers)\n    add_success(subparsers)\n    add_failure(subparsers)\n    add_error(subparsers)\n    add_html(subparsers)\n    add_xml(subparsers)\n    add_css(subparsers)\n    add_js(subparsers)\n    add_html_minify(subparsers)\n    add_xml_minify(subparsers)\n    add_jquery(subparsers)\n    add_css_minify(subparsers)\n    add_jquery_minify(subparsers)\n    add_html_preprocessor(subparsers)\n    add_js_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_css_preprocessor(subparsers)\n    add_jquery_preprocessor(subparsers)\n    add_html_postprocessor(subpar", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    subparsers = parser.add_subparsers(title='subcommands', dest='subcommand')\n    return parser, subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all available Kafka topics.')\n    parser.add_argument('--version', action='version', version='%(prog)s'+ __version__)\n    parser.add_argument('--debug', action='store_true', help='Enable debug mode.')\n    parser.add_argument('--debug-log', action='store_true', help='Log debug messages.')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Produce an Ansible Inventory file based on a list of roles')\n    add_basic_testing_arguments(parser)\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (-vv debugs ansible_test also)')\n    parser.add_argument('roles', nargs='*', help='Roles to build Ansible Inventory for')\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "def paging(response, max_results):\n    while response:\n        yield response[:max_results]\n        response = response[max_results:]\n", "def paging(response, max_results):\n    if response:\n        for page in range(1, max_results + 1):\n            yield response[page * 10: (page + 1) * 10]\n", "def paging(response, max_results):\n    \"\"\"\n    Return every response with the length of max_results\n\n    Args:\n        response (list): WAPI response. Max_results in one page.\n        max_results (int): Maximum number of objects to be returned in one page.\n\n    Yields:\n        Generator object with WAPI response split page by page.\n    \"\"\"\n    while response:\n        for page in range(0, max_results, response[0].get('pageSize')):\n            yield response[page:page + response[0].get('pageSize')]\n        response = response[1:]\n", "def paging(response, max_results):\n    while True:\n        for item in response['items']:\n            if len(item['results']) == max_results:\n                yield item\n                break\n        else:\n            break\n", "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "def paging(response, max_results):\n    while len(response) > max_results:\n        yield response[:max_results]\n        response = response[max_results:]\n", "def paging(response, max_results):\n    while len(response) > max_results:\n        response = [i for i in response if len(i) > 0]\n        yield response\n", "def paging(response, max_results):\n    page = 1\n    while True:\n        if page > max_results:\n            break\n        yield response[page * page_size:(page + 1) * page_size]\n        page += 1\n", "def paging(response, max_results):\n    if response is not None and len(response) > max_results:\n        response = response[:max_results]\n    while response:\n        for item in response:\n            yield item\n        response = response[max_results:]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    while response:\n        yield response[:max_results]\n        response = response[max_results:]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    if response:\n        for page in range(1, max_results + 1):\n            yield response[page * 10: (page + 1) * 10]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    \"\"\"\n    Return every response with the length of max_results\n\n    Args:\n        response (list): WAPI response. Max_results in one page.\n        max_results (int): Maximum number of objects to be returned in one page.\n\n    Yields:\n        Generator object with WAPI response split page by page.\n    \"\"\"\n    while response:\n        for page in range(0, max_results, response[0].get('pageSize')):\n            yield response[page:page + response[0].get('pageSize')]\n        response = response[1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    while True:\n        for item in response['items']:\n            if len(item['results']) == max_results:\n                yield item\n                break\n        else:\n            break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    return (response[i:i + max_results] for i in range(0, len(response), max_results))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n    while len(response) > max_results:\n        yield response[:max_results]\n        response = response[max_results:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    while len(response) > max_results:\n        response = [i for i in response if len(i) > 0]\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    page = 1\n    while True:\n        if page > max_results:\n            break\n        yield response[page * page_size:(page + 1) * page_size]\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if response is not None and len(response) > max_results:\n        response = response[:max_results]\n    while response:\n        for item in response:\n            yield item\n        response = response[max_results:]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str) -> int:\n    return 0 if size is None else int(size) * 1024\n", "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    suffixes = ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']\n    i = 0\n    while size >= 1024 and i < len(suffixes)-1:\n        size = size/1024.0\n        i += 1\n    return size\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'B':\n        return int(size[:-1])\n    elif size[-1] == 'K':\n        return int(size[:-1]) * 1024\n    elif size[-1] == 'M':\n        return int(size[:-1]) * 1024 * 1024\n    elif size[-1] == 'G':\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    elif size[-1] == 'T':\n        return int(size[:-1]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return 0\n", "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    size = int(size)\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'K':\n        return int(size[:-1])\n    else:\n        return int(size) * 1024\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str) -> int:\n    return 0 if size is None else int(size) * 1024\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    suffixes = ['B', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']\n    i = 0\n    while size >= 1024 and i < len(suffixes)-1:\n        size = size/1024.0\n        i += 1\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'B':\n        return int(size[:-1])\n    elif size[-1] == 'K':\n        return int(size[:-1]) * 1024\n    elif size[-1] == 'M':\n        return int(size[:-1]) * 1024 * 1024\n    elif size[-1] == 'G':\n        return int(size[:-1]) * 1024 * 1024 * 1024\n    elif size[-1] == 'T':\n        return int(size[:-1]) * 1024 * 1024 * 1024 * 1024\n    else:\n        return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if not size:\n        return 0\n    size = int(size)\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if size[-1] == 'K':\n        return int(size[:-1])\n    else:\n        return int(size) * 1024\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in ['', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    return {k: sum(dicts[k][v] for v in dicts[k]) for k in dicts}\n", "def _dictsum(dicts):\n    return {k:sum(v) for k,v in dicts.items()}", "def _dictsum(dicts):\n    result = {}\n    for dict in dicts:\n        result.update(dict)\n    return result\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts.items()}\n", "def _dictsum(dicts):\n    return {key: sum(vs.get(key, 0) for vs in dicts.values()) for key in dicts}\n", "def _dictsum(dicts):\n    res = {}\n    for key, value in dicts.items():\n        res[key] = value + res.get(key, 0)\n    return res\n", "def _dictsum(dicts):\n    res = {}\n    for d in dicts:\n        res.update(d)\n    return res\n", "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts.items()}\n", "def _dictsum(dicts):\n    return {k: sum(dicts[k].values()) for k in dicts}\n", "def _dictsum(dicts):\n    return {k: sum(dicts[k][k] if k in dicts[k] else 0 for k in dicts[0].keys())}\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    return {k: sum(dicts[k][v] for v in dicts[k]) for k in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k:sum(v) for k,v in dicts.items()}", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for dict in dicts:\n        result.update(dict)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {key: sum(vs.get(key, 0) for vs in dicts.values()) for key in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    res = {}\n    for key, value in dicts.items():\n        res[key] = value + res.get(key, 0)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    res = {}\n    for d in dicts:\n        res.update(d)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(v) for k, v in dicts.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(dicts[k].values()) for k in dicts}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {k: sum(dicts[k][k] if k in dicts[k] else 0 for k in dicts[0].keys())}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n  for key, value in url_args.items():\n    url = url.replace('{' + key + '}', value)\n  return url\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace('{%s}' % k, v)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace('{' + key + '}', str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n    if 'url' in url_args:\n        return url\n    else:\n        return url_args\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{' + k + '}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace('{%s}' % key, str(value))\n    return url\n", "def _replace_url_args(url, url_args):\n    for arg, value in url_args.items():\n        if value is not None:\n            url = url.replace('{' + arg + '}', str(value))\n    return url\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n  for key, value in url_args.items():\n    url = url.replace('{' + key + '}', value)\n  return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        url = url.replace('{%s}' % k, v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace('{' + key + '}', str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if 'url' in url_args:\n        return url\n    else:\n        return url_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{' + k + '}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace('{%s}' % key, str(value))\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for arg, value in url_args.items():\n        if value is not None:\n            url = url.replace('{' + arg + '}', str(value))\n    return url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: any) -> bool:\n    if not isinstance(val, str):\n        return False\n    return val.lower() == 'none'\n", "def is_none_string(val: any) -> bool:\n    return (type(val) is str and val.lower() == 'none')\n", "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: any) -> bool:\n    return val and val.lower() == 'none'\n", "def is_none_string(val: any) -> bool:\n    if not isinstance(val, str) or val == \"none\":\n        return False\n    return True\n", "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: any) -> bool:\n    return (val is None) and ('none' == val.lower())\n", "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: any) -> bool:\n    if not isinstance(val, str):\n        return False\n    return val.lower() == 'none'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (type(val) is str and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return val and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    if not isinstance(val, str) or val == \"none\":\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (val is None) and ('none' == val.lower())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: any) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if not path or not root:\n        raise Exception('Invalid path or root')\n\n    if path == root:\n        return path\n\n    if path[:len(root)] == root:\n        return path[len(root):]\n\n    return path\n", "def strip_root(path, root):\n    if path == root:\n        return path\n    else:\n        return path[len(root) + 1:]\n", "def strip_root(path, root):\n    if not root in path:\n        return path\n    else:\n        return path[path.index(root):]\n", "def strip_root(path, root):\n    if not root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if root in path:\n        return path[:path.index(root)]\n    else:\n        return path\n", "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if not root:\n        return path\n    return path[len(root):]\n", "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        return path\n", "def strip_root(path, root):\n    if root == '/':\n        return path\n    else:\n        return path[1:] if path[0] == root else path\n", "def strip_root(path, root):\n    if not root:\n        return path\n    return os.path.normpath(os.path.join(path, root))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if not path or not root:\n        raise Exception('Invalid path or root')\n\n    if path == root:\n        return path\n\n    if path[:len(root)] == root:\n        return path[len(root):]\n\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path == root:\n        return path\n    else:\n        return path[len(root) + 1:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root in path:\n        return path\n    else:\n        return path[path.index(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root in path:\n        return path[:path.index(root)]\n    else:\n        return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if path.startswith(root):\n        return path[len(root):]\n    else:\n        return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root == '/':\n        return path\n    else:\n        return path[1:] if path[0] == root else path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n    return os.path.normpath(os.path.join(path, root))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f for f in vars(parser).keys() if not f.startswith('_'))\n", "def parser_flags(parser):\n    return''.join(f'{a}={getattr(parser, a)}' for a in sorted(vars(parser).keys()))\n", "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(['--' + a for a in parser._actions])\n", "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.args[0]\n    return flags\n", "def parser_flags(parser):\n    return''.join(a.argparse_string for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f'{a.name}={a.default}' for a in parser._actions)\n", "def parser_flags(parser):\n    return''.join(f'{v}' for v in parser._flags.values())\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.dest!= '':\n            flags.append(arg.dest)\n    return''.join(flags)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f for f in vars(parser).keys() if not f.startswith('_'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{a}={getattr(parser, a)}' for a in sorted(vars(parser).keys()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join('--{}'.format(a) for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--' + a for a in parser._actions])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = \"\"\n    for arg in parser._actions:\n        if arg.dest == \"flags\":\n            flags += \" \" + arg.args[0]\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(a.argparse_string for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{a.name}={a.default}' for a in parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(f'{v}' for v in parser._flags.values())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.dest!= '':\n            flags.append(arg.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"{} already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        print(\"Found {} in {}\".format(path_name, processed))\n        return True\n    processed.add(path_name)\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if processed.has_key(path_name):\n        if verbose:\n            print(\"Entry already in set:\", path_name)\n        return False\n    else:\n        processed[path_name] = True\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        return True\n    else:\n        if verbose:\n            print('Recursion detected! Returning False.')\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if %s already in the set\" % path_name)\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added %s to processed set\" % path_name)\n        return True\n    else:\n        if verbose:\n            print(\"Removed %s from processed set\" % path_name)\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(f'{path_name} already processed')\n        return True\n    else:\n        if verbose:\n            print(f'{path_name} already processed')\n        return False\n", "def was_processed(processed, path_name, verbose):\n    # type: (Set[str], str, bool) -> bool\n    if path_name not in processed:\n        if verbose:\n            print('Adding'+ path_name +'to processed set')\n        processed.add(path_name)\n        return True\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Found {}\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if processed is not None:\n        if path_name in processed:\n            return True\n        processed.add(path_name)\n        if verbose:\n            print('{} already in the set'.format(path_name))\n        return was_processed(processed, path_name, verbose)\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"{} already processed\".format(path_name))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        print(\"Found {} in {}\".format(path_name, processed))\n        return True\n    processed.add(path_name)\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if processed.has_key(path_name):\n        if verbose:\n            print(\"Entry already in set:\", path_name)\n        return False\n    else:\n        processed[path_name] = True\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        return True\n    else:\n        if verbose:\n            print('Recursion detected! Returning False.')\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if %s already in the set\" % path_name)\n    if path_name in processed:\n        return True\n    else:\n        processed.add(path_name)\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added %s to processed set\" % path_name)\n        return True\n    else:\n        if verbose:\n            print(\"Removed %s from processed set\" % path_name)\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name not in processed:\n        processed.add(path_name)\n        if verbose:\n            print(f'{path_name} already processed')\n        return True\n    else:\n        if verbose:\n            print(f'{path_name} already processed')\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    # type: (Set[str], str, bool) -> bool\n    if path_name not in processed:\n        if verbose:\n            print('Adding'+ path_name +'to processed set')\n        processed.add(path_name)\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if verbose:\n        print(\"Checking if {} already in {}\".format(path_name, processed))\n    if path_name in processed:\n        return True\n    processed.add(path_name)\n    if verbose:\n        print(\"Found {}\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if processed is not None:\n        if path_name in processed:\n            return True\n        processed.add(path_name)\n        if verbose:\n            print('{} already in the set'.format(path_name))\n        return was_processed(processed, path_name, verbose)\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i + 1][0], vertices[i + 1][1]) for i in range(0, len(vertices), 3)]\n", "def vertex3tuple(vertices):\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(3)]\n", "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0] + vertices[0][0], vertices[1][1] + vertices[1][0]]\n", "def vertex3tuple(vertices):\n    return [(vertices[0][0], vertices[1][1], vertices[2][1]), (vertices[1][0], vertices[0][1], vertices[2][1]), (vertices[2][0], vertices[0][1], vertices[1][1])]\n", "def vertex3tuple(vertices):\n    return [(vertices[0][0], vertices[1][1], vertices[2][0]),\n            (vertices[1][0], vertices[0][1], vertices[2][0]),\n            (vertices[2][0], vertices[0][1], vertices[1][0])]\n", "def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i][2] + vertices[i + 1][1]),\n            (vertices[i][0], vertices[i][1], vertices[i + 1][1]),\n            (vertices[i + 1][0], vertices[i + 1][1], vertices[i][2] + vertices[i + 1][1])]\n", "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2]]\n", "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0], vertices[2][1]]\n", "def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i+1][0]), (vertices[i][0], vertices[i][1], vertices[i+1][1]),\n            (vertices[i][0], vertices[i][1], vertices[i+1][0]), (vertices[i][0], vertices[i][1], vertices[i+1][1])]\n", "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0], vertices[2][1], vertices[0][1], vertices[0][0]]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i + 1][0], vertices[i + 1][1]) for i in range(0, len(vertices), 3)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(3)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0] + vertices[0][0], vertices[1][1] + vertices[1][0]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[0][0], vertices[1][1], vertices[2][1]), (vertices[1][0], vertices[0][1], vertices[2][1]), (vertices[2][0], vertices[0][1], vertices[1][1])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[0][0], vertices[1][1], vertices[2][0]),\n            (vertices[1][0], vertices[0][1], vertices[2][0]),\n            (vertices[2][0], vertices[0][1], vertices[1][0])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i][2] + vertices[i + 1][1]),\n            (vertices[i][0], vertices[i][1], vertices[i + 1][1]),\n            (vertices[i + 1][0], vertices[i + 1][1], vertices[i][2] + vertices[i + 1][1])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0], vertices[2][1]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[i][0], vertices[i][1], vertices[i+1][0]), (vertices[i][0], vertices[i][1], vertices[i+1][1]),\n            (vertices[i][0], vertices[i][1], vertices[i+1][0]), (vertices[i][0], vertices[i][1], vertices[i+1][1])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [vertices[0], vertices[1], vertices[2][0], vertices[2][1], vertices[0][1], vertices[0][0]]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = len(str(number))\n    return alphabet[number % len(alphabet)] + alphabet[number // len(alphabet)]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return str(number).zfill(alphabet.index('0') + padding)\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number % len(alphabet)] + padding if padding else alphabet[number]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number % len(alphabet)] + padding if padding else alphabet[number]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    number_str = str(number)\n    while '0' in number_str:\n        number_str = number_str.replace('0', alphabet[0])\n    while '1' in number_str:\n        number_str = number_str.replace('1', alphabet[1])\n    while '2' in number_str:\n        number_str = number_str.replace('2', alphabet[2])\n    while '3' in number_str:\n        number_str = number_str.replace('3', alphabet[3])\n    while '4' in number_str:\n        number_str = number_str.replace('4', alphabet[4])\n    while '5' in number_str:\n        number_str = number_str.replace('5', alphabet[5])\n    while '6' in number_str:\n        number_str = number_str.replace('6', alphabet[6])\n    while '7' in number_str:\n        number_str = number_str.replace('7', alphabet[7])\n ", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    string = \"\"\n    while number > 0:\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    if padding is not None:\n        for i in range(padding):\n            string += \"0\"\n    return string\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return '%s%s' % (alphabet[number % len(alphabet)], (number // len(alphabet)) * (padding or 0))\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return '%.*i' % (alphabet[0], number)\n", "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if number < 0:\n        return alphabet[number]\n    return alphabet[number].zfill(padding)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is None:\n        padding = len(str(number))\n    return alphabet[number % len(alphabet)] + alphabet[number // len(alphabet)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return str(number).zfill(alphabet.index('0') + padding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number % len(alphabet)] + padding if padding else alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return alphabet[number % len(alphabet)] + padding if padding else alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    number_str = str(number)\n    while '0' in number_str:\n        number_str = number_str.replace('0', alphabet[0])\n    while '1' in number_str:\n        number_str = number_str.replace('1', alphabet[1])\n    while '2' in number_str:\n        number_str = number_str.replace('2', alphabet[2])\n    while '3' in number_str:\n        number_str = number_str.replace('3', alphabet[3])\n    while '4' in number_str:\n        number_str = number_str.replace('4', alphabet[4])\n    while '5' in number_str:\n        number_str = number_str.replace('5', alphabet[5])\n    while '6' in number_str:\n        number_str = number_str.replace('6', alphabet[6])\n    while '7' in number_str:\n        number_str = number_str.replace('7', alphabet[7])\n ", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return alphabet[number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    string = \"\"\n    while number > 0:\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    if padding is not None:\n        for i in range(padding):\n            string += \"0\"\n    return string\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    return '%s%s' % (alphabet[number % len(alphabet)], (number // len(alphabet)) * (padding or 0))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if padding is not None:\n        number = number % padding\n    return '%.*i' % (alphabet[0], number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: Optional[int] = None) -> str:\n    if number < 0:\n        return alphabet[number]\n    return alphabet[number].zfill(padding)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    if register_number in flow_params:\n        del flow_params[register_number]\n    flow_params[register_value] = register_number\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = 0\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number > 0:\n        flow_params[register_number] = flow_params[register_number-1]\n        del flow_params[register_number-1]\n    if register_value > 0:\n        flow_params[register_value] = flow_params[register_value-1]\n        del flow_params[register_value-1]\n", "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    del flow_params[register_number][register_value]\n    flow_params[register_number] = flow_params[register_number].copy()\n    return flow_params\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = 0\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(register_value, '')\n        del flow_params[register_number]\n        \n", "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        del flow_params[register_number]\n    flow_params[register_value] = register_number\n", "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    del flow_params[register_number][register_value]\n    flow_params[register_number].remove(register_value)\n", "def _replace_register(flow_params, register_number, register_value):\n    del flow_params[register_number]\n    flow_params[register_value] = None\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = None\n    return flow_params\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    if register_number in flow_params:\n        del flow_params[register_number]\n    flow_params[register_value] = register_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number > 0:\n        flow_params[register_number] = flow_params[register_number-1]\n        del flow_params[register_number-1]\n    if register_value > 0:\n        flow_params[register_value] = flow_params[register_value-1]\n        del flow_params[register_value-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    del flow_params[register_number][register_value]\n    flow_params[register_number] = flow_params[register_number].copy()\n    return flow_params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        flow_params[register_number] = flow_params[register_number].replace(register_value, '')\n        del flow_params[register_number]\n        \n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_number in flow_params:\n        del flow_params[register_number]\n    flow_params[register_value] = register_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    \"\"\"\n    Replace the value of flow_params[register_number] with flow_params[register_value] and delete flow_params[register_value]\n    \"\"\"\n    del flow_params[register_number][register_value]\n    flow_params[register_number].remove(register_value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    del flow_params[register_number]\n    flow_params[register_value] = None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        del flow_params[register_number]\n        flow_params[register_value] = None\n    return flow_params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    \"\"\"\n    Replaces all values of '.' to arg from the given string\n\n    Args:\n        value: old string to replace '.' to\n        arg: new string to replace '.'\n\n    Returns:\n        str, the replaced string\n    \"\"\"\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    if value is None:\n        return arg\n    return value.replace(\".\", arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    \"\"\"\n    Replaces all values of '.' to arg from the given string\n\n    Args:\n        value: old string to replace '.' to\n        arg: new string to replace '.'\n\n    Returns:\n        str, the replaced string\n    \"\"\"\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    if value is None:\n        return arg\n    return value.replace(\".\", arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    \n    \n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [\n        g for s in cls.__subclasses__()\n        for g in subclasses(s)\n    ]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \n    \n    res = []\n    for subclass in cls.__subclasses__():\n        res.append(subclass)\n        res.extend(subclasses(subclass))\n    return res\n", "def subclasses(cls):\n    \"\"\"\n    Return all subclasses of a class, recursively \n    \"\"\"\n    result = []\n    for subcls in cls.__subclasses__():\n        result.append(subcls)\n        result.extend(subclasses(subcls))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    result = []\n    for sub in cls.__subclasses__():\n        result.append(sub)\n        result.extend(subsubclasses(sub))\n    return result\n", "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    \"\"\" Return all subclasses of a class, recursively \"\"\"\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "def subclasses(cls):\n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "def subclasses(cls):\n    \n    \n    seen = set()\n    for subcls in cls.__subclasses__():\n        if subcls not in seen:\n            seen.add(subcls)\n            yield subcls\n            yield from subclasses(subcls)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    \n    \n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [\n        g for s in cls.__subclasses__()\n        for g in subclasses(s)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    res = []\n    for subclass in cls.__subclasses__():\n        res.append(subclass)\n        res.extend(subclasses(subclass))\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"\n    Return all subclasses of a class, recursively \n    \"\"\"\n    result = []\n    for subcls in cls.__subclasses__():\n        result.append(subcls)\n        result.extend(subclasses(subcls))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    result = []\n    for sub in cls.__subclasses__():\n        result.append(sub)\n        result.extend(subsubclasses(sub))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\"Return all subclasses of a class, recursively \"\"\"\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \"\"\" Return all subclasses of a class, recursively \"\"\"\n    for subcls in cls.__subclasses__():\n        yield subcls\n        yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    result = []\n    for subclass in cls.__subclasses__():\n        result.append(subclass)\n        result.append(subclass)\n        result.extend(subclasses(subclass))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    \n    \n    seen = set()\n    for subcls in cls.__subclasses__():\n        if subcls not in seen:\n            seen.add(subcls)\n            yield subcls\n            yield from subclasses(subcls)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(letter) for letter in string)\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[0]) * (26 ** (len(string) - 1)) + alphabet.index(string[-1])\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for i in alphabet:\n        number = number * 26 + alphabet.index(i)\n    return number\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(x) for x in string)\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(i) * (26 ** i) for i in range(len(string)))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[0]) + ((ord(string[0]) - 96) * (ord(string[1]) - 96))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(i) * (26**i) for i in range(len(string)))\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(letter) for letter in string)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[0]) * (26 ** (len(string) - 1)) + alphabet.index(string[-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for i in alphabet:\n        number = number * 26 + alphabet.index(i)\n    return number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(x) for x in string)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(i) * (26 ** i) for i in range(len(string)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return alphabet.index(string[0]) + ((ord(string[0]) - 96) * (ord(string[1]) - 96))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(i) * (26**i) for i in range(len(string)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum(alphabet.index(char) for char in string)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        archive_path.unlink()\n        response = requests.get(url)\n        archive_path.write_text(response.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    download_url = url + '/desc'\n    response = requests.get(download_url, stream=True)\n    with archive_path.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    url = url.replace('https://', '').replace('http://', '')\n    url = url.replace('/', '.')\n    tarball = url + '.tar.gz'\n    destination_path = destination_path.joinpath(tarball)\n    if not destination_path.exists():\n        urllib.request.urlretrieve(url, str(destination_path))\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive = url.split('/')[-1]\n    archive = destination_path / archive\n    if not archive.exists():\n        raise ValueError(f'archive {archive} does not exist')\n    return archive\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    return archive_name\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar_filename = destination_path / url.split('/')[-1]\n    res = requests.get(url)\n    tar_file = tarfile.open(tar_filename, \"r:gz\")\n    tar_file.extractall(destination_path)\n    tar_file.close()\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        response = requests.get(url)\n        response.raise_for_status()\n        with archive_path.open('wb') as f:\n            f.write(response.content)\n    return archive_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return destination_path / f'{url.split('/')[-2]}.tar.gz'\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    repo_path = destination_path.with_suffix(\".tar.gz\")\n    if url.startswith(\"file://\"):\n        url = url[len(\"file://\"):]\n\n    cmd = f\"tar -xzvf {url} -C {repo_path}\"\n    subprocess.run(cmd, check=True, shell=True)\n    return repo_path\n", "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tarball = url.split('/')[-1]\n    archive_path = destination_path / tarball\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        request = urlopen(url)\n        archive_path.write_bytes(request.read())\n    return archive_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_path = destination_path / \"desc\"\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        archive_path.unlink()\n        response = requests.get(url)\n        archive_path.write_text(response.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    download_url = url + '/desc'\n    response = requests.get(download_url, stream=True)\n    with archive_path.open('wb') as f:\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    url = url.replace('https://', '').replace('http://', '')\n    url = url.replace('/', '.')\n    tarball = url + '.tar.gz'\n    destination_path = destination_path.joinpath(tarball)\n    if not destination_path.exists():\n        urllib.request.urlretrieve(url, str(destination_path))\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive = url.split('/')[-1]\n    archive = destination_path / archive\n    if not archive.exists():\n        raise ValueError(f'archive {archive} does not exist')\n    return archive\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    return archive_name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tar_filename = destination_path / url.split('/')[-1]\n    res = requests.get(url)\n    tar_file = tarfile.open(tar_filename, \"r:gz\")\n    tar_file.extractall(destination_path)\n    tar_file.close()\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    archive_name = url.split('/')[-1]\n    archive_path = destination_path / archive_name\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        response = requests.get(url)\n        response.raise_for_status()\n        with archive_path.open('wb') as f:\n            f.write(response.content)\n    return archive_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    return destination_path / f'{url.split('/')[-2]}.tar.gz'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    repo_path = destination_path.with_suffix(\".tar.gz\")\n    if url.startswith(\"file://\"):\n        url = url[len(\"file://\"):]\n\n    cmd = f\"tar -xzvf {url} -C {repo_path}\"\n    subprocess.run(cmd, check=True, shell=True)\n    return repo_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: Path) -> Path:\n    tarball = url.split('/')[-1]\n    archive_path = destination_path / tarball\n    if not archive_path.exists():\n        archive_path.parent.mkdir(parents=True, exist_ok=True)\n        request = urlopen(url)\n        archive_path.write_bytes(request.read())\n    return archive_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return \"mac\" in sys.platform.lower()\n", "def os_is_mac():\n    return os.name == \"nt\"\n", "def os_is_mac():\n    return 'Darwin' in platform.mac_ver()[0]\n", "def os_is_mac():\n    return 'darwin' in sys.platform\n", "def os_is_mac():\n    return 'Darwin' in platform.system()\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return \"Darwin\" in platform.system()\n", "def os_is_mac():\n    return sys.platform == 'darwin'\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return \"mac\" in sys.platform.lower()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return os.name == \"nt\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return 'Darwin' in platform.mac_ver()[0]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return 'darwin' in sys.platform\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return 'Darwin' in platform.system()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return \"Darwin\" in platform.system()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform == 'darwin'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {k: f\"^{k}\\\\.[^\\\\.]*\\\\.cpp$\" for k in item}\n", "def regex_dict(item):\n    return {fnmatch.translate(k): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: re.compile(f\"^{k}$\") for k in item}\n", "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "def regex_dict(item):\n    return {k: '^' + regex_key(k) for k in item}\n", "def regex_dict(item):\n    \"\"\"\n    Convert *.cpp keys to regex keys.\n    The keys are all filenames with wildcards, convert only the keys into\n    equivalent regexes and leave the values intact.\n\n    Args:\n        item: dict to convert\n\n    Returns: dict with keys converted to regex keys\n    \"\"\"\n    return {k: v for k, v in item.items() if \"*.\" in k}\n", "def regex_dict(item):\n    return {k: \"^\" + \"[a-zA-Z0-9]*\" + \"[a-zA-Z0-9]*\" + \"\\Z\" if k in item else k for k in item}\n", "def regex_dict(item):\n    \"\"\"\n    Convert *.cpp keys to regular keys.\n    Given a dict where the keys are all filenames with wildcards, convert\n    only the keys into equivalent regexes and leave the values intact.\n    \"\"\"\n    result = {}\n    for key in item:\n        result[key] = re.compile(item[key])\n    return result\n", "def regex_dict(item):\n    return {k: \"^\" + v if v else \"\" for k, v in item.items()}\n", "def regex_dict(item):\n    return {\n        key: f\"[^\\.]+\\.\" + key\n        for key in item\n        if not re.match(r\"^[a-zA-Z_][a-zA-Z0-9_\\.]*\\.[a-zA-Z_]*\\.cpp$\", key)\n    }\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {k: f\"^{k}\\\\.[^\\\\.]*\\\\.cpp$\" for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {fnmatch.translate(k): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(f\"^{k}$\") for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: re.compile(v) for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: '^' + regex_key(k) for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    \"\"\"\n    Convert *.cpp keys to regex keys.\n    The keys are all filenames with wildcards, convert only the keys into\n    equivalent regexes and leave the values intact.\n\n    Args:\n        item: dict to convert\n\n    Returns: dict with keys converted to regex keys\n    \"\"\"\n    return {k: v for k, v in item.items() if \"*.\" in k}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: \"^\" + \"[a-zA-Z0-9]*\" + \"[a-zA-Z0-9]*\" + \"\\Z\" if k in item else k for k in item}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    \"\"\"\n    Convert *.cpp keys to regular keys.\n    Given a dict where the keys are all filenames with wildcards, convert\n    only the keys into equivalent regexes and leave the values intact.\n    \"\"\"\n    result = {}\n    for key in item:\n        result[key] = re.compile(item[key])\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k: \"^\" + v if v else \"\" for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        key: f\"[^\\.]+\\.\" + key\n        for key in item\n        if not re.match(r\"^[a-zA-Z_][a-zA-Z0-9_\\.]*\\.[a-zA-Z_]*\\.cpp$\", key)\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "def unquote(name):\n    return re.sub(r'\"', '', name)", "def unquote(name):\n    return re.sub(r\"'\", \"\", name)\n", "def unquote(name):\n    return re.sub(r'[^a-zA-Z0-9_\\.]', '', name)\n", "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "def unquote(name):\n    if \"'\" in name:\n        return name[:name.index(\"'\")]\n    return name\n", "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "def unquote(name):\n    if name[0] in '\"\\'':\n        return name[1:]\n    else:\n        return name[1:-1]\n", "def unquote(name):\n    \"\"\"\n    Remove quote from the given name with regular expression.\n\n    Args:\n        name: input name\n    \n    Returns:\n        name after removal \n    \"\"\"\n    return re.sub(r'\"([^\"]*)\"|(\\'([^\\']*)\\')', r'\\1', name)\n", "def unquote(name):\n    return re.sub(r'(\\')(.+?)(\\')', r'\\1', name)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r\"'\", \"\", name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'[^a-zA-Z0-9_\\.]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if \"'\" in name:\n        return name[:name.index(\"'\")]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        return name[1:]\n    else:\n        return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    \"\"\"\n    Remove quote from the given name with regular expression.\n\n    Args:\n        name: input name\n    \n    Returns:\n        name after removal \n    \"\"\"\n    return re.sub(r'\"([^\"]*)\"|(\\'([^\\']*)\\')', r'\\1', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'(\\')(.+?)(\\')', r'\\1', name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' not in s:\n            return ['', s]\n        if ':' in s:\n            return [s.split(':', 1)[1].rstrip(';'), s.split(':', 1)[0].strip(';')]\n        return [s.split(':', 1)[0].strip(';'), s.split(':', 1)[1].rstrip(';')]\n    elif platform == 1:\n        if '\\\\' not in s:\n            return ['', s]\n        if ':' in s:\n            return [s.split(':', 1)[1].rstrip(';'), s.split(':', 1)[0].strip(';')]\n        return [s.split(':', 1)[0].strip(';'), s.split(':', 1)[1].rstrip(';')]\n    else:\n        return [s.split(';', 1)[0], s.split(';', 1)[1].rstrip(';')]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return s.split(' ')\n        else:\n            return sys.executable.split()\n    else:\n        return s.split(' ')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split(' ', 1)\n    elif platform == 1:\n        return os.environ['POSIX'].split(' ')\n    elif platform == 0:\n        return s.split(' ')\n    else:\n        return []\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\', 1)\n        else:\n            return ['this']\n    elif platform == 'POSIX':\n        if '\\\\' in s:\n            return s.split('\\\\', 2)\n        else:\n            return ['POSIX', 'windows', 'cmd']\n    else:\n        if '\\\\' in s:\n            return s.split('\\\\', 1)\n        else:\n            return ['win', 'cmd', 'this']\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return s.split('\\\\')\n        elif sys.platform == 'cygwin':\n            return s.split(':')\n        else:\n            return s.split(':')\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return s.split('\\\\')\n        elif sys.platform == 'cygwin':\n            return s.split(':')\n        else:\n            return s.split(':')\n    else:\n        return s.split(':')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split('/')\n    if platform == 1:\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split('\\\\\\\\')\n    if platform == 0:\n        if ':' in s:\n            return s.split(':')\n        return s.split(':\\\\')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split('\\\\')\n    if platform == 'POSIX':\n        return s.split(':')\n    if platform == 'windows':\n        return s.split('\\\\')\n    return []\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if os.name == 'nt':\n            return [s.replace('\\\\', '/')]\n        else:\n            return [s.replace('/', '\\\\')]\n    elif platform == 'posix':\n        return [s.replace('\\\\', '/'), s.replace('\\\\\\\\', '\\\\')]\n    else:\n        return [s.replace('\\\\', '/'), s.replace('\\\\\\\\', '\\\\')]\n", "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split(' ')\n    elif platform == 1:\n        return s.split('\\\\')\n    elif platform == 0:\n        return s.split('\\\\\\\\')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split()\n    if platform == 'POSIX':\n        if '/' in s:\n            return s.split('/')\n        return s.split('\\\\')\n    if platform == 'CMD':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' not in s:\n            return ['', s]\n        if ':' in s:\n            return [s.split(':', 1)[1].rstrip(';'), s.split(':', 1)[0].strip(';')]\n        return [s.split(':', 1)[0].strip(';'), s.split(':', 1)[1].rstrip(';')]\n    elif platform == 1:\n        if '\\\\' not in s:\n            return ['', s]\n        if ':' in s:\n            return [s.split(':', 1)[1].rstrip(';'), s.split(':', 1)[0].strip(';')]\n        return [s.split(':', 1)[0].strip(';'), s.split(':', 1)[1].rstrip(';')]\n    else:\n        return [s.split(';', 1)[0], s.split(';', 1)[1].rstrip(';')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return s.split(' ')\n        else:\n            return sys.executable.split()\n    else:\n        return s.split(' ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split(' ', 1)\n    elif platform == 1:\n        return os.environ['POSIX'].split(' ')\n    elif platform == 0:\n        return s.split(' ')\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\', 1)\n        else:\n            return ['this']\n    elif platform == 'POSIX':\n        if '\\\\' in s:\n            return s.split('\\\\', 2)\n        else:\n            return ['POSIX', 'windows', 'cmd']\n    else:\n        if '\\\\' in s:\n            return s.split('\\\\', 1)\n        else:\n            return ['win', 'cmd', 'this']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return s.split('\\\\')\n        elif sys.platform == 'cygwin':\n            return s.split(':')\n        else:\n            return s.split(':')\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return s.split('\\\\')\n        elif sys.platform == 'cygwin':\n            return s.split(':')\n        else:\n            return s.split(':')\n    else:\n        return s.split(':')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split('/')\n    if platform == 1:\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split('\\\\\\\\')\n    if platform == 0:\n        if ':' in s:\n            return s.split(':')\n        return s.split(':\\\\')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split('\\\\')\n    if platform == 'POSIX':\n        return s.split(':')\n    if platform == 'windows':\n        return s.split('\\\\')\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if os.name == 'nt':\n            return [s.replace('\\\\', '/')]\n        else:\n            return [s.replace('/', '\\\\')]\n    elif platform == 'posix':\n        return [s.replace('\\\\', '/'), s.replace('\\\\\\\\', '\\\\')]\n    else:\n        return [s.replace('\\\\', '/'), s.replace('\\\\\\\\', '\\\\')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        return s.split(' ')\n    elif platform == 1:\n        return s.split('\\\\')\n    elif platform == 0:\n        return s.split('\\\\\\\\')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split()\n    if platform == 'POSIX':\n        if '/' in s:\n            return s.split('/')\n        return s.split('\\\\')\n    if platform == 'CMD':\n        if '\\\\' in s:\n            return s.split('\\\\')\n        return s.split()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"No archive_path provided\")\n    if not filename:\n        raise ValueError(\"No filename provided\")\n    if not tmp_path:\n        raise ValueError(\"No tmp_path provided\")\n    return f\"{tmp_path}/{archive_path}/{filename}\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not os.path.exists(archive_path):\n        raise Exception(\"archive path does not exist\")\n\n    archive_url = f\"https://raw.githubusercontent.com/{tmp_path}/{archive_path}\"\n    return archive_url\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path[:-3] + \"tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return f\"{archive_path}/{filename or \"\"}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path\n        archive_path = tmp_path\n    return archive_path.parent / filename\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: remove this when we drop support for python 2.6\n    if filename is None:\n        filename = archive_path.split(\"/\")[-1]\n    tmp_file_path = tmp_path / filename\n    archive_file = tmp_file_path.open(\"rb\")\n    return tmp_file_path.resolve().as_uri()\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"Invalid archive_path\")\n\n    if not filename:\n        filename = archive_path.split(\"/\")[-1]\n\n    return f\"{tmp_path}/{filename}.tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    archive_path = Path(archive_path)\n    archive_path = archive_path.resolve()\n    archive_path = archive_path.with_name(filename or archive_path.name)\n    archive_path = archive_path.with_suffix(\".tar.gz\")\n    tmp_path = Path(tmp_path)\n    tmp_path = tmp_path.resolve()\n    tmp_path = tmp_path.with_name(\"tmp\")\n    tmp_path = tmp_path.with_suffix(\".tar.gz\")\n    tmp_path = tmp_path.with_dir(\"/tmp\")\n    tmp_path = tmp_path.with_name(\"tmp.tar.gz\")\n    return archive_path.with_suffix(\".tar.bz2\")\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path.replace(tmp_path, \"\") + \".tar.gz\"\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: Remove this once we have a better way of doing this\n    return archive_path.parent / filename / tmp_path if tmp_path else archive_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"No archive_path provided\")\n    if not filename:\n        raise ValueError(\"No filename provided\")\n    if not tmp_path:\n        raise ValueError(\"No tmp_path provided\")\n    return f\"{tmp_path}/{archive_path}/{filename}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not os.path.exists(archive_path):\n        raise Exception(\"archive path does not exist\")\n\n    archive_url = f\"https://raw.githubusercontent.com/{tmp_path}/{archive_path}\"\n    return archive_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path[:-3] + \"tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return f\"{archive_path}/{filename or \"\"}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if filename is None:\n        filename = archive_path\n        archive_path = tmp_path\n    return archive_path.parent / filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: remove this when we drop support for python 2.6\n    if filename is None:\n        filename = archive_path.split(\"/\")[-1]\n    tmp_file_path = tmp_path / filename\n    archive_file = tmp_file_path.open(\"rb\")\n    return tmp_file_path.resolve().as_uri()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    if not archive_path:\n        raise ValueError(\"Invalid archive_path\")\n\n    if not filename:\n        filename = archive_path.split(\"/\")[-1]\n\n    return f\"{tmp_path}/{filename}.tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    archive_path = Path(archive_path)\n    archive_path = archive_path.resolve()\n    archive_path = archive_path.with_name(filename or archive_path.name)\n    archive_path = archive_path.with_suffix(\".tar.gz\")\n    tmp_path = Path(tmp_path)\n    tmp_path = tmp_path.resolve()\n    tmp_path = tmp_path.with_name(\"tmp\")\n    tmp_path = tmp_path.with_suffix(\".tar.gz\")\n    tmp_path = tmp_path.with_dir(\"/tmp\")\n    tmp_path = tmp_path.with_name(\"tmp.tar.gz\")\n    return archive_path.with_suffix(\".tar.bz2\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    return archive_path.replace(tmp_path, \"\") + \".tar.gz\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: Optional[str] = None,\n    tmp_path: Union[PosixPath, str] = \"/tmp\",\n) -> str:\n    # TODO: Remove this once we have a better way of doing this\n    return archive_path.parent / filename / tmp_path if tmp_path else archive_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] in \"*.\"]\n    ignored.sort()\n    return \", \".join(f[1] for f in ignored)\n", "def addignored(ignored):\n    files = []\n    for i in ignored:\n        files.append('\"' + i + '\"')\n    return ', '.join(sorted(files))\n", "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if item not in [\"-\", \"\\\\\"]:\n            files.append(item)\n    return \",\".join(files)\n", "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)\n", "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if not os.path.isfile(item):\n            files.append(item)\n    files.sort()\n    return ', '.join(files)\n", "def addignored(ignored):\n    if ignored == []:\n        return \"\"\n    elif ignored == ['']:\n        return \"\"\n    elif len(ignored) == 1:\n        return ignored[0]\n    else:\n        return \",\".join(sorted(ignored))", "def addignored(ignored):\n    \"\"\"\n    Use the git command to obtain the file names, turn the file names\n    into a list, sort the list for only ignored files return those\n    files as a single string with each filename separated by a comma.\n    \"\"\"\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored = ','.join(ignored)\n    return ignored\n", "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(ignored)", "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = ','.join(sorted(ignored.split(',')))\n    return ignored", "def addignored(ignored):\n    result = []\n    for f in ignored:\n        if not f.endswith(\".py\"):\n            result.append(f)\n    result.sort()\n    return \",\".join(result)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] in \"*.\"]\n    ignored.sort()\n    return \", \".join(f[1] for f in ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for i in ignored:\n        files.append('\"' + i + '\"')\n    return ', '.join(sorted(files))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if item not in [\"-\", \"\\\\\"]:\n            files.append(item)\n    return \",\".join(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(f[1] for f in ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    files = []\n    for item in ignored:\n        if not os.path.isfile(item):\n            files.append(item)\n    files.sort()\n    return ', '.join(files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    if ignored == []:\n        return \"\"\n    elif ignored == ['']:\n        return \"\"\n    elif len(ignored) == 1:\n        return ignored[0]\n    else:\n        return \",\".join(sorted(ignored))", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    \"\"\"\n    Use the git command to obtain the file names, turn the file names\n    into a list, sort the list for only ignored files return those\n    files as a single string with each filename separated by a comma.\n    \"\"\"\n    ignored = ignored.split(',')\n    ignored = [f for f in ignored if not f.startswith('.')]\n    ignored = ','.join(ignored)\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = [f for f in ignored if not f[0] == '.']\n    ignored.sort()\n    return ', '.join(ignored)", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored =''.join(ignored)\n    ignored = ','.join(sorted(ignored.split(',')))\n    return ignored", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    result = []\n    for f in ignored:\n        if not f.endswith(\".py\"):\n            result.append(f)\n    result.sort()\n    return \",\".join(result)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return filename[-4:] == '.doxy'\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] == 'doxyfile'\n", "def match(filename):\n    return '.doxy' in filename.lower()\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] == 'doxyfile'\n", "def match(filename):\n    return filename[-4:].lower() == \".doxy\"\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxyfile\")\n", "def match(filename):\n    return filename[-4:].lower() == '.doxy'\n", "def match(filename):\n    return filename.lower().endswith('.doxyfile')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return filename[-4:] == '.doxy'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] == 'doxyfile'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.doxy' in filename.lower()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1] == 'doxyfile'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename[-4:].lower() == \".doxy\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxyfile\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename[-4:].lower() == '.doxy'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith('.doxyfile')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency not in [\"always\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]:\n        return None\n    return timedelta(seconds=*[int(i) for i in frequency.split(\" \")])\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return None\n    return timedelta(**{f: int(f) for f in frequency.split(\" \")})\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return None\n    if frequency == \"onetime\":\n        return timedelta(seconds=1)\n    if frequency == \"relative\":\n        return timedelta(seconds=3)\n    if frequency == \"once\":\n        return timedelta(seconds=2)\n    if frequency == \"never\":\n        return None\n    raise ValueError(\"Unknown frequency '%s'\" % frequency)\n", "def parse_frequency(frequency):\n    if frequency in (\"always\", \"onetime\", \"twotime\", \"threetime\", \"fourtime\"):\n        return timedelta(seconds=0)\n    if frequency in (\"never\", \"noon\", \"evening\", \"night\"):\n        return timedelta(seconds=86400)\n    if frequency in (\"yesterday\", \"today\", \"weekday\", \"holiday\", \"weekend\", \"monthly\"):\n        return timedelta(seconds=604800)\n    raise ValueError(\"Invalid frequency: \" + frequency)\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    else:\n        return timedelta(**{f: int(v) for f, v in [f.split(\"unit\") for f in frequency]})\n", "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    if frequency == 'onetime':\n        return timedelta(seconds=1)\n    if frequency == 'overtime':\n        return timedelta(seconds=86400)\n    if frequency =='recent':\n        return timedelta(seconds=3600)\n    if frequency == 'weekly':\n        return timedelta(seconds=604800)\n    if frequency =='monthly':\n        return timedelta(seconds=86400 * 30)\n    if frequency == 'daily':\n        return timedelta(seconds=86400 * 365)\n    if frequency == 'hourly':\n        return timedelta(seconds=86400 * 24)\n    if frequency == 'divisor':\n        return timedelta(seconds=86400 * 365 * 24)\n    if frequency =='multiplicative':\n        return timedelta(seconds=86400 * 365 * 24 * 60)\n    if frequency =='remainder':\n        return timedelta(seconds=86400 * 365 * 24 * 60 * 60)\n    if frequency == 'weekly_remainde", "def parse_frequency(frequency):\n    if frequency == 'always':\n        return None\n    elif frequency == 'onetime':\n        return timedelta(seconds=1)\n    elif frequency == 'twotime':\n        return timedelta(seconds=2)\n    elif frequency == 'threetime':\n        return timedelta(seconds=3)\n    elif frequency == 'fourtime':\n        return timedelta(seconds=4)\n    elif frequency == 'fivetime':\n        return timedelta(seconds=5)\n    elif frequency =='sixtime':\n        return timedelta(seconds=6)\n    elif frequency =='seventime':\n        return timedelta(seconds=7)\n    elif frequency == 'eighttime':\n        return timedelta(seconds=8)\n    elif frequency == 'ninetime':\n        return timedelta(seconds=9)\n    else:\n        raise ValueError('Invalid frequency \"%s\"' % frequency)\n", "def parse_frequency(frequency):\n    if frequency not in ['always', 'number']:\n        raise ValueError(\"Invalid frequency: '%s'\" % frequency)\n    if frequency == 'always':\n        return None\n    return timedelta(**{frequency + 'unit':'s'})\n", "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(seconds=0)\n    if frequency == \"never\":\n        return timedelta(seconds=0)\n    if frequency == \"1 day\":\n        return timedelta(days=1)\n    if frequency == \"7 day\":\n        return timedelta(days=7)\n    if frequency == \"30 day\":\n        return timedelta(days=30)\n    if frequency == \"1 month\":\n        return timedelta(days=30)\n    if frequency == \"7 month\":\n        return timedelta(days=7*30)\n    if frequency == \"1 year\":\n        return timedelta(days=365)\n    if frequency == \"30 year\":\n        return timedelta(days=30*365)\n    if frequency == \"1 month year\":\n        return timedelta(days=365*30*365)\n    if frequency == \"1 week\":\n        return timedelta(days=7*7*7*30)\n    if frequency == \"1 month week\":\n        return timedel", "def parse_frequency(frequency):\n    if frequency in ('always', '1 timeunit'):\n        return None\n    if frequency in ('2 timeunit', '3 timeunit'):\n        return timedelta(seconds=2)\n    if frequency in ('4 timeunit', '6 timeunit'):\n        return timedelta(seconds=4)\n    if frequency in ('7 timeunit', '8 timeunit'):\n        return timedelta(seconds=7)\n    if frequency in ('9 timeunit', '10 timeunit'):\n        return timedelta(seconds=10)\n    if frequency in ('11 timeunit', '12 timeunit'):\n        return timedelta(seconds=11)\n    if frequency in ('13 timeunit', '14 timeunit'):\n        return timedelta(seconds=13)\n    if frequency in ('15 timeunit', '16 timeunit'):\n        return timedelta(seconds=15)\n    raise ValueError('Invalid frequency: %r' % frequency)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency not in [\"always\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"]:\n        return None\n    return timedelta(seconds=*[int(i) for i in frequency.split(\" \")])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == \"always\":\n        return None\n    return timedelta(**{f: int(f) for f in frequency.split(\" \")})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return None\n    if frequency == \"onetime\":\n        return timedelta(seconds=1)\n    if frequency == \"relative\":\n        return timedelta(seconds=3)\n    if frequency == \"once\":\n        return timedelta(seconds=2)\n    if frequency == \"never\":\n        return None\n    raise ValueError(\"Unknown frequency '%s'\" % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in (\"always\", \"onetime\", \"twotime\", \"threetime\", \"fourtime\"):\n        return timedelta(seconds=0)\n    if frequency in (\"never\", \"noon\", \"evening\", \"night\"):\n        return timedelta(seconds=86400)\n    if frequency in (\"yesterday\", \"today\", \"weekday\", \"holiday\", \"weekend\", \"monthly\"):\n        return timedelta(seconds=604800)\n    raise ValueError(\"Invalid frequency: \" + frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    else:\n        return timedelta(**{f: int(v) for f, v in [f.split(\"unit\") for f in frequency]})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None or frequency == 'always':\n        return None\n    if frequency == 'onetime':\n        return timedelta(seconds=1)\n    if frequency == 'overtime':\n        return timedelta(seconds=86400)\n    if frequency =='recent':\n        return timedelta(seconds=3600)\n    if frequency == 'weekly':\n        return timedelta(seconds=604800)\n    if frequency =='monthly':\n        return timedelta(seconds=86400 * 30)\n    if frequency == 'daily':\n        return timedelta(seconds=86400 * 365)\n    if frequency == 'hourly':\n        return timedelta(seconds=86400 * 24)\n    if frequency == 'divisor':\n        return timedelta(seconds=86400 * 365 * 24)\n    if frequency =='multiplicative':\n        return timedelta(seconds=86400 * 365 * 24 * 60)\n    if frequency =='remainder':\n        return timedelta(seconds=86400 * 365 * 24 * 60 * 60)\n    if frequency == 'weekly_remainde", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == 'always':\n        return None\n    elif frequency == 'onetime':\n        return timedelta(seconds=1)\n    elif frequency == 'twotime':\n        return timedelta(seconds=2)\n    elif frequency == 'threetime':\n        return timedelta(seconds=3)\n    elif frequency == 'fourtime':\n        return timedelta(seconds=4)\n    elif frequency == 'fivetime':\n        return timedelta(seconds=5)\n    elif frequency =='sixtime':\n        return timedelta(seconds=6)\n    elif frequency =='seventime':\n        return timedelta(seconds=7)\n    elif frequency == 'eighttime':\n        return timedelta(seconds=8)\n    elif frequency == 'ninetime':\n        return timedelta(seconds=9)\n    else:\n        raise ValueError('Invalid frequency \"%s\"' % frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency not in ['always', 'number']:\n        raise ValueError(\"Invalid frequency: '%s'\" % frequency)\n    if frequency == 'always':\n        return None\n    return timedelta(**{frequency + 'unit':'s'})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if not frequency:\n        return None\n    if frequency == \"always\":\n        return timedelta(seconds=0)\n    if frequency == \"never\":\n        return timedelta(seconds=0)\n    if frequency == \"1 day\":\n        return timedelta(days=1)\n    if frequency == \"7 day\":\n        return timedelta(days=7)\n    if frequency == \"30 day\":\n        return timedelta(days=30)\n    if frequency == \"1 month\":\n        return timedelta(days=30)\n    if frequency == \"7 month\":\n        return timedelta(days=7*30)\n    if frequency == \"1 year\":\n        return timedelta(days=365)\n    if frequency == \"30 year\":\n        return timedelta(days=30*365)\n    if frequency == \"1 month year\":\n        return timedelta(days=365*30*365)\n    if frequency == \"1 week\":\n        return timedelta(days=7*7*7*30)\n    if frequency == \"1 month week\":\n        return timedel", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in ('always', '1 timeunit'):\n        return None\n    if frequency in ('2 timeunit', '3 timeunit'):\n        return timedelta(seconds=2)\n    if frequency in ('4 timeunit', '6 timeunit'):\n        return timedelta(seconds=4)\n    if frequency in ('7 timeunit', '8 timeunit'):\n        return timedelta(seconds=7)\n    if frequency in ('9 timeunit', '10 timeunit'):\n        return timedelta(seconds=10)\n    if frequency in ('11 timeunit', '12 timeunit'):\n        return timedelta(seconds=11)\n    if frequency in ('13 timeunit', '14 timeunit'):\n        return timedelta(seconds=13)\n    if frequency in ('15 timeunit', '16 timeunit'):\n        return timedelta(seconds=15)\n    raise ValueError('Invalid frequency: %r' % frequency)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    if host in [\"127.0.0.1\", \"::1\"]:\n        return True\n    if host in [\"localhost\", \"127.0.0.1\"]:\n        return False\n    if host.startswith(\"localhost.\"):\n        return True\n    if host.startswith(\"127.0.0.2\"):\n        return False\n    if \":\" in host:\n        return True\n    return False\n", "def is_local(host):\n    if host is None:\n        return False\n    if host == \"127.0.0.1\" or host == \"::1\":\n        return True\n    return False\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if ':' not in host:\n        return False\n    return True if 'localhost' in host or '127.0.0.1' in host else False\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if host == 'localhost':\n        return True\n    if host == '::1':\n        return True\n    if '.' in host:\n        return True\n    if '[' in host:\n        return True\n    if host == '::':\n        return True\n    return False\n", "def is_local(host):\n    if host is None:\n        return False\n    if host == '127.0.0.1':\n        return True\n    if host == 'localhost':\n        return True\n    if host == '::1':\n        return True\n    if host == 'localhost.':\n        return True\n    if host.startswith('['):\n        return True\n    return False\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    elif host.startswith('localhost') or host.startswith(':127.0.0.1'):\n        return True\n    elif host.startswith('127.0.0.1'):\n        return False\n    else:\n        return False\n", "def is_local(host):\n    if host == '127.0.0.1' or host == '::1':\n        return True\n    else:\n        return False\n", "def is_local(host):\n    return host == '127.0.0.1' or (host == 'localhost' and not socket.gethostbyname('localhost'))\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if host.find(':') > 0:\n        return True\n    if host.find('[') > 0:\n        return True\n    return False\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    if host in [\"127.0.0.1\", \"::1\"]:\n        return True\n    if host in [\"localhost\", \"127.0.0.1\"]:\n        return False\n    if host.startswith(\"localhost.\"):\n        return True\n    if host.startswith(\"127.0.0.2\"):\n        return False\n    if \":\" in host:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host is None:\n        return False\n    if host == \"127.0.0.1\" or host == \"::1\":\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if ':' not in host:\n        return False\n    return True if 'localhost' in host or '127.0.0.1' in host else False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if host == 'localhost':\n        return True\n    if host == '::1':\n        return True\n    if '.' in host:\n        return True\n    if '[' in host:\n        return True\n    if host == '::':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host is None:\n        return False\n    if host == '127.0.0.1':\n        return True\n    if host == 'localhost':\n        return True\n    if host == '::1':\n        return True\n    if host == 'localhost.':\n        return True\n    if host.startswith('['):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    elif host.startswith('localhost') or host.startswith(':127.0.0.1'):\n        return True\n    elif host.startswith('127.0.0.1'):\n        return False\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1' or host == '::1':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1' or (host == 'localhost' and not socket.gethostbyname('localhost'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if host.find(':') > 0:\n        return True\n    if host.find('[') > 0:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path, transform all paths into glob patterns. Pass\n    through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(glob.glob(find_path) for find_path in find_paths)\n", "def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns.\n    Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(p for p in find_paths if p)\n", "def make_find_paths(find_paths):\n    if find_paths:\n        return tuple(p for p in find_paths if os.path.isfile(p))\n    else:\n        return tuple()\n", "def make_find_paths(find_paths):\n  return tuple(make_find_paths(p) for p in find_paths)\n", "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(glob.glob(p) for p in find_paths)\n  return find_paths\n", "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(glob.glob(path) for path in find_paths)\n  return find_paths\n", "def make_find_paths(find_paths):\n  return tuple(map(_make_glob_pattern, find_paths))\n", "def make_find_paths(find_paths):\n    return tuple(f\"*.{p}\" for p in find_paths)\n", "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(map(make_find_paths, find_paths))\n  return find_paths\n", "def make_find_paths(find_paths):\n    return tuple(f\"*{p}\" for p in find_paths)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path, transform all paths into glob patterns. Pass\n    through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(glob.glob(find_path) for find_path in find_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns.\n    Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(p for p in find_paths if p)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        return tuple(p for p in find_paths if os.path.isfile(p))\n    else:\n        return tuple()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n  return tuple(make_find_paths(p) for p in find_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(glob.glob(p) for p in find_paths)\n  return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(glob.glob(path) for path in find_paths)\n  return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n  return tuple(map(_make_glob_pattern, find_paths))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple(f\"*.{p}\" for p in find_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n  if find_paths:\n    return tuple(map(make_find_paths, find_paths))\n  return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple(f\"*{p}\" for p in find_paths)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n    try:\n        output = subprocess.check_output(['bash', '-c', 'pwd'])\n    except subprocess.CalledProcessError:\n        return False\n    return 'gitbash' in output.decode('utf-8')\n", "def is_gitbash():\n    return os.path.exists('/bin/git')\n", "def is_gitbash():\n    return 'cmd.exe' in os.environ and 'python' in os.environ['cmd.exe']\n", "def is_gitbash():\n    return 'cmd.exe' in map(str, sys.argv)\n", "def is_gitbash():\n    # check whether the current program is run in a Windows gitbash terminal\n    if os.environ.get('TERM', None) == 'xterm':\n        return True\n    else:\n        return False\n", "def is_gitbash():\n    return os.name == \"nt\" and \"git\" in os.environ[\"cmd.run\"](\"type bash\")\n", "def is_gitbash():\n    return 'cmd.exe' in os.environ and 'python' in os.environ['cmd.exe']\n", "def is_gitbash():\n    return os.environ.get('TERM', '').startswith('xterm')\n", "def is_gitbash():\n    return os.path.exists('/usr/bin/git')\n", "def is_gitbash():\n    return 'git' in sys.modules['__main__'].__file__.split('\\\\')[-1]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n    try:\n        output = subprocess.check_output(['bash', '-c', 'pwd'])\n    except subprocess.CalledProcessError:\n        return False\n    return 'gitbash' in output.decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.path.exists('/bin/git')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return 'cmd.exe' in os.environ and 'python' in os.environ['cmd.exe']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return 'cmd.exe' in map(str, sys.argv)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    # check whether the current program is run in a Windows gitbash terminal\n    if os.environ.get('TERM', None) == 'xterm':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\" and \"git\" in os.environ[\"cmd.run\"](\"type bash\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return 'cmd.exe' in os.environ and 'python' in os.environ['cmd.exe']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.environ.get('TERM', '').startswith('xterm')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.path.exists('/usr/bin/git')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return 'git' in sys.modules['__main__'].__file__.split('\\\\')[-1]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"File '{}' already exists.\".format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, 'w') as f:\n            f.write(yaml.safe_dump(rendered_config, default_flow_style=False))\n            f.write('\\n')\n    else:\n        raise IOError(\"File {} already exists\".format(config_filename))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('config file {} already exists'.format(config_filename))\n\n    with open(config_filename, 'w') as out_file:\n        out_file.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"Configuration file already exists.\")\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n    if mode == 0o600:\n        os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, 'w') as f:\n            f.write(yaml.dump(rendered_config, default_flow_style=mode))\n    else:\n        raise ValueError(\"Overwriting file {} already exists.\".format(config_filename))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n            f.flush()\n    else:\n        raise IOError('File {} already exists'.format(config_filename))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('%s already exists!' % config_filename)\n    with open(config_filename, 'w') as output:\n        yaml.dump(rendered_config, output, default_flow_style=mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n    else:\n        raise ConfigurationAlreadyExistsError(\n            \"Configuration already exists at {}\".format(config_filename)\n        )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"File '{}' already exists.\".format(config_filename))\n\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not os.path.exists(config_filename) or overwrite:\n        with open(config_filename, 'w') as f:\n            f.write(yaml.safe_dump(rendered_config, default_flow_style=False))\n            f.write('\\n')\n    else:\n        raise IOError(\"File {} already exists\".format(config_filename))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('config file {} already exists'.format(config_filename))\n\n    with open(config_filename, 'w') as out_file:\n        out_file.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"Configuration file already exists.\")\n    with open(config_filename, 'w') as config_file:\n        config_file.write(rendered_config)\n    if mode == 0o600:\n        os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, 'w') as f:\n            f.write(yaml.dump(rendered_config, default_flow_style=mode))\n    else:\n        raise ValueError(\"Overwriting file {} already exists.\".format(config_filename))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n            f.flush()\n    else:\n        raise IOError('File {} already exists'.format(config_filename))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    with open(config_filename, mode) as f:\n        f.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if os.path.exists(config_filename) and not overwrite:\n        abort(\"Configuration file {} already exists.\".format(config_filename))\n    with open(config_filename, \"w\") as f:\n        f.write(yaml.dump(rendered_config, default_flow_style=mode))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('%s already exists!' % config_filename)\n    with open(config_filename, 'w') as output:\n        yaml.dump(rendered_config, output, default_flow_style=mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        with open(config_filename, mode) as f:\n            f.write(rendered_config)\n    else:\n        raise ConfigurationAlreadyExistsError(\n            \"Configuration already exists at {}\".format(config_filename)\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\" \"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n    \"\"\"\n    Convert a script to one line command with the given seperator.\n\n    Args:\n        script: str\n        seperator: str\n    Returns:\n        str, the one-line command.\n    \"\"\"\n    return seperator.join(script.split(\"\\n\"))\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\" \"))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" \"))\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n", "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\" \"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    \"\"\"\n    Convert a script to one line command with the given seperator.\n\n    Args:\n        script: str\n        seperator: str\n    Returns:\n        str, the one-line command.\n    \"\"\"\n    return seperator.join(script.split(\"\\n\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split(\" \"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(\" \"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n  return seperator.join(script.split())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=extra_env, timeout=timeout\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env,\n        timeout=timeout)\n    return proc\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env,\n        timeout=timeout,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env or {},\n        timeout=timeout,\n        **{'check': True}  # Force it to return 0 if success\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {\n        'TIMEOUT': str(timeout)\n    }\n    if extra_env is not None:\n        env.update(extra_env)\n    return subprocess.run(\n        args,\n        env=env,\n        timeout=timeout,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        check=True\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        args, env={**extra_env, **{\"LC_ALL\": \"C\"}}, timeout=timeout, check=True\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if not hasattr(func, '__module__'):\n        func = import_from_string(func)\n    if extra_env:\n        os.environ.update(extra_env)\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=os.environ,\n        timeout=timeout,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n        check=False,\n    )\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=extra_env, timeout=timeout\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    proc = subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=extra_env,\n        timeout=timeout)\n    return proc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env,\n        timeout=timeout,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    return subprocess.run(\n        [func] + list(args),\n        env=extra_env or {},\n        timeout=timeout,\n        **{'check': True}  # Force it to return 0 if success\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {\n        'TIMEOUT': str(timeout)\n    }\n    if extra_env is not None:\n        env.update(extra_env)\n    return subprocess.run(\n        args,\n        env=env,\n        timeout=timeout,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        check=True\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    return subprocess.run(\n        args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, timeout=timeout\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    return subprocess.run(\n        args, env={**extra_env, **{\"LC_ALL\": \"C\"}}, timeout=timeout, check=True\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if not hasattr(func, '__module__'):\n        func = import_from_string(func)\n    if extra_env:\n        os.environ.update(extra_env)\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=os.environ,\n        timeout=timeout,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    return subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout,\n        check=False,\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name, default = matcher.groupdict().items()\n    if default is None:\n        raise ValueError('Missing variable %r' % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name, default = matcher.group('name'), matcher.group('default')\n    if default is None:\n        raise ValueError(\"Environment variable '%s' is undefined\" % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error('Variable \"{}\" is not defined in environment'.format(name))\n    if '=' not in matcher.group('default'):\n        return os.environ[name]\n    return matcher.group('default')\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is None:\n        raise Error(\"Missing default value in environment variable '{0}'\".format(name))\n    return os.getenv(name, default)\n", "def _resolve_string(matcher):\n    try:\n        return matcher.groupdict()['var']\n    except (AttributeError, KeyError):\n        raise ValueError('Variable %r is not defined in environment' % matcher.group())\n", "def _resolve_string(matcher):\n    name = matcher.group(\"name\")\n    default = matcher.group(\"default\")\n    if default is None:\n        if name in os.environ:\n            return os.environ[name]\n        else:\n            raise Error(\"Variable '{}' not defined\".format(name))\n    else:\n        return default\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error(\"Missing variable %s in environment\" % name)\n    return os.environ[name]\n", "def _resolve_string(matcher):\n    name, default = matcher.groupdict()\n    if default is None:\n        raise ValueError(\"Environment variable {} doesn't have a default\".format(name))\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        msg = 'Variable {} not defined in environment'.format(matcher.group('name'))\n        raise ImproperlyConfigured(msg)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error('Variable \"{}\" not defined in environment'.format(name))\n    if name == '__DEFAULT__':\n        return os.environ[name]\n    return os.environ[name] if name in os.environ else None\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groupdict().items()\n    if default is None:\n        raise ValueError('Missing variable %r' % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group('name'), matcher.group('default')\n    if default is None:\n        raise ValueError(\"Environment variable '%s' is undefined\" % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error('Variable \"{}\" is not defined in environment'.format(name))\n    if '=' not in matcher.group('default'):\n        return os.environ[name]\n    return matcher.group('default')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is None:\n        raise Error(\"Missing default value in environment variable '{0}'\".format(name))\n    return os.getenv(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return matcher.groupdict()['var']\n    except (AttributeError, KeyError):\n        raise ValueError('Variable %r is not defined in environment' % matcher.group())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(\"name\")\n    default = matcher.group(\"default\")\n    if default is None:\n        if name in os.environ:\n            return os.environ[name]\n        else:\n            raise Error(\"Variable '{}' not defined\".format(name))\n    else:\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error(\"Missing variable %s in environment\" % name)\n    return os.environ[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.groupdict()\n    if default is None:\n        raise ValueError(\"Environment variable {} doesn't have a default\".format(name))\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    try:\n        return os.environ[matcher.group('name')]\n    except KeyError:\n        msg = 'Variable {} not defined in environment'.format(matcher.group('name'))\n        raise ImproperlyConfigured(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    if name not in os.environ:\n        raise Error('Variable \"{}\" not defined in environment'.format(name))\n    if name == '__DEFAULT__':\n        return os.environ[name]\n    return os.environ[name] if name in os.environ else None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Invalid image href')\n    match = re.match(r'(.*)\\/(.*)\\/(.*)$', image_href)\n    if not match:\n        raise ValueError('Invalid image href: %s' % image_href)\n    netloc = match.group(1)\n    use_ssl = match.group(2) == 'True'\n    return match.group(1), netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_('Invalid image href %s') % image_href)\n\n    netloc = image_href.rsplit('/', 1)[0]\n    use_ssl = image_href.startswith('https://')\n    image_id = image_href[len(netloc):]\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urllib.parse.urlparse(image_href)\n    netloc = url.netloc\n    use_ssl = url.scheme in ('https', 'http')\n    return (url.path[1:], netloc, use_ssl)\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_('Invalid image reference: %s') % image_href)\n\n    scheme = ''\n    netloc = ''\n    use_ssl = False\n    image_url = image_href\n    if ':' in image_href:\n        scheme, netloc, use_ssl = image_href.split(':', 2)\n\n    if '/' in image_href:\n        image_id, image_url = image_href.split('/', 1)\n    else:\n        image_id = ''\n\n    return image_id, scheme, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '/' not in image_href:\n        msg = _('Invalid image_href %s') % image_href\n        raise ValueError(msg)\n    image_id = image_href.split('/', 1)[-1]\n    netloc = ''\n    use_ssl = False\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    if ':' in image_href:\n        netloc, image_href = image_href.split(':', 1)\n        use_ssl = True\n    else:\n        netloc = image_href\n        use_ssl = False\n    image_id = image_href\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.rsplit('/', 1)[1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':', 1)\n    use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_(\"Invalid image_href '%s'\") % image_href)\n\n    netloc = image_href.split(':')[0]\n    use_ssl = image_href.split(':')[1]\n\n    return image_href, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    match = re.match(r'(.+):(.+)$', image_href)\n    if not match:\n        raise ValueError('Image href is invalid')\n\n    image_id = match.group(1)\n    netloc = match.group(2)\n    use_ssl = False\n    if match.group(3):\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if not url_components.netloc:\n        raise ValueError('Invalid image reference: %s' % image_href)\n    netloc = url_components.netloc\n    use_ssl = (url_components.scheme == 'https')\n    return image_href, netloc, use_ssl\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Invalid image href')\n    match = re.match(r'(.*)\\/(.*)\\/(.*)$', image_href)\n    if not match:\n        raise ValueError('Invalid image href: %s' % image_href)\n    netloc = match.group(1)\n    use_ssl = match.group(2) == 'True'\n    return match.group(1), netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_('Invalid image href %s') % image_href)\n\n    netloc = image_href.rsplit('/', 1)[0]\n    use_ssl = image_href.startswith('https://')\n    image_id = image_href[len(netloc):]\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url = urllib.parse.urlparse(image_href)\n    netloc = url.netloc\n    use_ssl = url.scheme in ('https', 'http')\n    return (url.path[1:], netloc, use_ssl)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_('Invalid image reference: %s') % image_href)\n\n    scheme = ''\n    netloc = ''\n    use_ssl = False\n    image_url = image_href\n    if ':' in image_href:\n        scheme, netloc, use_ssl = image_href.split(':', 2)\n\n    if '/' in image_href:\n        image_id, image_url = image_href.split('/', 1)\n    else:\n        image_id = ''\n\n    return image_id, scheme, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '/' not in image_href:\n        msg = _('Invalid image_href %s') % image_href\n        raise ValueError(msg)\n    image_id = image_href.split('/', 1)[-1]\n    netloc = ''\n    use_ssl = False\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    if ':' in image_href:\n        netloc, image_href = image_href.split(':', 1)\n        use_ssl = True\n    else:\n        netloc = image_href\n        use_ssl = False\n    image_id = image_href\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    netloc = ''\n    use_ssl = False\n    image_id = image_href.rsplit('/', 1)[1]\n    if ':' in image_id:\n        image_id, netloc = image_id.split(':', 1)\n    use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if '://' not in image_href:\n        raise ValueError(_(\"Invalid image_href '%s'\") % image_href)\n\n    netloc = image_href.split(':')[0]\n    use_ssl = image_href.split(':')[1]\n\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('Image href is required')\n\n    match = re.match(r'(.+):(.+)$', image_href)\n    if not match:\n        raise ValueError('Image href is invalid')\n\n    image_id = match.group(1)\n    netloc = match.group(2)\n    use_ssl = False\n    if match.group(3):\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    url_components = urlparse(image_href)\n    if not url_components.netloc:\n        raise ValueError('Invalid image reference: %s' % image_href)\n    netloc = url_components.netloc\n    use_ssl = (url_components.scheme == 'https')\n    return image_href, netloc, use_ssl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [s for s in input_list if s and s[-1]!= os.sep]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    return [item for item in input_list if len(item) > 1 and item[-1]!= '/']\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [item.rstrip('\\x00') for item in input_list if item.endswith('\\x00')]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [i.rstrip(os.sep) for i in input_list]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    if len(input_list[0]) > 1:\n        return input_list\n    if input_list[0][-1] == '/':\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:-1])\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if input_list == []:\n        return []\n    return [x[:-1] for x in input_list]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if input_list == []:\n        return input_list\n    return [s for s in input_list if len(s) > 1 and s[-1]!= os.sep]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [x[:-1] if len(x) > 1 and x[-1] == '/' else x for x in input_list]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    elif len(input_list) <= 1:\n        return input_list\n    else:\n        return [input_list[0]] + [input_list[i][-1:] for i in range(1, len(input_list[0]))]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [x[:-1] for x in input_list if x[-1]!= \"/\"]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [s for s in input_list if s and s[-1]!= os.sep]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    return [item for item in input_list if len(item) > 1 and item[-1]!= '/']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [item.rstrip('\\x00') for item in input_list if item.endswith('\\x00')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [i.rstrip(os.sep) for i in input_list]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    if len(input_list[0]) > 1:\n        return input_list\n    if input_list[0][-1] == '/':\n        return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:-1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if input_list == []:\n        return []\n    return [x[:-1] for x in input_list]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if input_list == []:\n        return input_list\n    return [s for s in input_list if len(s) > 1 and s[-1]!= os.sep]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    return [x[:-1] if len(x) > 1 and x[-1] == '/' else x for x in input_list]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    elif len(input_list) <= 1:\n        return input_list\n    else:\n        return [input_list[0]] + [input_list[i][-1:] for i in range(1, len(input_list[0]))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [x[:-1] for x in input_list if x[-1]!= \"/\"]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.DOTALL if strip else re.IGNORECASE)\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        if strip:\n            pattern = pattern.strip()\n        return re.compile(pattern)\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    else:\n        raise TypeError(\"Invalid pattern type supplied\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, flags=re.DOTALL if strip else 0)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, strip)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, flags=re.DOTALL if strip else 0)\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, strip)\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    elif isinstance(pattern, re._pattern_type):\n        pattern = pattern.pattern\n    else:\n        raise TypeError(\"Unrecognized pattern type: %r\" % pattern)\n\n    if strip:\n        pattern = pattern.strip()\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern, re.DOTALL)\n    if strip:\n        pattern = pattern.strip(' ')\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.DOTALL if strip else re.UNICODE)\n    else:\n        return pattern\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.DOTALL if strip else re.IGNORECASE)\n    else:\n        return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        if strip:\n            pattern = pattern.strip()\n        return re.compile(pattern)\n    else:\n        return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    else:\n        raise TypeError(\"Invalid pattern type supplied\")\n\n    if strip:\n        pattern = pattern.strip()\n\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, flags=re.DOTALL if strip else 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, strip)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    return re.compile(pattern, flags=re.DOTALL if strip else 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, strip)\n    else:\n        return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    elif isinstance(pattern, re._pattern_type):\n        pattern = pattern.pattern\n    else:\n        raise TypeError(\"Unrecognized pattern type: %r\" % pattern)\n\n    if strip:\n        pattern = pattern.strip()\n\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern, re.DOTALL)\n    if strip:\n        pattern = pattern.strip(' ')\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    \"\"\"\n    Convert a string to a regex pattern object\n\n    Args:\n        pattern: str or regex pattern object\n        strip: boolean, whether the spaces in the start/end will be stripped\n\n    Returns:\n        regex pattern object\n    \"\"\"\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.DOTALL if strip else re.UNICODE)\n    else:\n        return pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, close_fds=True, preexec_fn=os.setsid)\n    result = p.communicate(input=args)\n    return (result[0], p.returncode) if verbose else result[1]\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['python'] + args\n    if cwd:\n        cmd.append('-c')\n        cmd.append(cwd)\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('--hide-stderr')\n    if env:\n        for key, val in env.items():\n            cmd.append('{}={}'.format(key, val))\n    res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)\n    return res.stdout, res.returncode\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['bash'] + args\n    if cwd is not None:\n        cmd.append('-c')\n        cmd.append(cwd)\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        env=env or {},\n        cwd=cwd,\n        verbose=verbose,\n        hide_stderr=hide_stderr,\n    )\n    out, err = proc.communicate(input='\\n'.join(commands))\n    return (out, proc.returncode)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if cwd is None:\n        cwd = os.getcwd()\n    if isinstance(commands, str):\n        commands = [commands]\n    result = subprocess.run(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env, check=False, args=args\n    )\n    if verbose:\n        print(result.stdout)\n        print(result.stderr)\n    return result\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    result = []\n    for cmd in commands:\n        result.append(subprocess.run(cmd, args, cwd, verbose, hide_stderr, env))\n    return result[0], result[1]\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if verbose:\n        print (\" \".join(commands))\n    if env is None:\n        env = {}\n    proc = subprocess.Popen(commands, env=env, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    out = proc.communicate()[0]\n    ret = proc.returncode\n    if verbose:\n        print (\" \".join(out.split(\"\\n\")))\n    if hide_stderr:\n        sys.stderr.write(out)\n    return out, ret\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = commands.split()\n    if isinstance(args, str):\n        args = [args]\n    if cwd:\n        os.chdir(cwd)\n    result = subprocess.run(\n        commands, args, check=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, verbose=verbose\n    )\n    if hide_stderr:\n        result.stderr.close()\n    return result\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = os.environ.copy()\n    env['PATH'] = ':'.join(('/usr', env['PATH']))\n    if cwd:\n        env['PWD'] = cwd\n    result = subprocess.run(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=False, verbose=verbose, args=args)\n    return result.stdout, result.returncode\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = [commands]\n    result = []\n    for command in commands:\n        if isinstance(command, str):\n            result.append(run_command_raw(command, args, cwd, verbose, hide_stderr, env))\n        else:\n            result.append(run_command_raw(*command, cwd, verbose, hide_stderr, env))\n    return result[0], result[1]\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env:\n        env = dict(os.environ)\n    else:\n        env = os.environ.copy()\n\n    if verbose:\n        env['PYTHONIOENCODING'] = 'utf-8'\n\n    if cwd:\n        env['PWD'] = cwd\n\n    result = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        cwd=cwd,\n        verbose=verbose,\n        shell=False,\n        check=False,\n        capture_output=hide_stderr\n    )\n\n    return result.stdout, result.returncode\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd=cwd, env=env, close_fds=True, preexec_fn=os.setsid)\n    result = p.communicate(input=args)\n    return (result[0], p.returncode) if verbose else result[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['python'] + args\n    if cwd:\n        cmd.append('-c')\n        cmd.append(cwd)\n    if verbose:\n        cmd.append('-v')\n    if hide_stderr:\n        cmd.append('--hide-stderr')\n    if env:\n        for key, val in env.items():\n            cmd.append('{}={}'.format(key, val))\n    res = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=False)\n    return res.stdout, res.returncode\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    cmd = ['bash'] + args\n    if cwd is not None:\n        cmd.append('-c')\n        cmd.append(cwd)\n    proc = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        env=env or {},\n        cwd=cwd,\n        verbose=verbose,\n        hide_stderr=hide_stderr,\n    )\n    out, err = proc.communicate(input='\\n'.join(commands))\n    return (out, proc.returncode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if cwd is None:\n        cwd = os.getcwd()\n    if isinstance(commands, str):\n        commands = [commands]\n    result = subprocess.run(\n        commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=cwd, env=env, check=False, args=args\n    )\n    if verbose:\n        print(result.stdout)\n        print(result.stderr)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    result = []\n    for cmd in commands:\n        result.append(subprocess.run(cmd, args, cwd, verbose, hide_stderr, env))\n    return result[0], result[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if verbose:\n        print (\" \".join(commands))\n    if env is None:\n        env = {}\n    proc = subprocess.Popen(commands, env=env, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    out = proc.communicate()[0]\n    ret = proc.returncode\n    if verbose:\n        print (\" \".join(out.split(\"\\n\")))\n    if hide_stderr:\n        sys.stderr.write(out)\n    return out, ret\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = commands.split()\n    if isinstance(args, str):\n        args = [args]\n    if cwd:\n        os.chdir(cwd)\n    result = subprocess.run(\n        commands, args, check=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.PIPE, verbose=verbose\n    )\n    if hide_stderr:\n        result.stderr.close()\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if not env:\n        env = os.environ.copy()\n    env['PATH'] = ':'.join(('/usr', env['PATH']))\n    if cwd:\n        env['PWD'] = cwd\n    result = subprocess.run(commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env, check=False, verbose=verbose, args=args)\n    return result.stdout, result.returncode\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    if isinstance(commands, str):\n        commands = [commands]\n    result = []\n    for command in commands:\n        if isinstance(command, str):\n            result.append(run_command_raw(command, args, cwd, verbose, hide_stderr, env))\n        else:\n            result.append(run_command_raw(*command, cwd, verbose, hide_stderr, env))\n    return result[0], result[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \n    \n    if env:\n        env = dict(os.environ)\n    else:\n        env = os.environ.copy()\n\n    if verbose:\n        env['PYTHONIOENCODING'] = 'utf-8'\n\n    if cwd:\n        env['PWD'] = cwd\n\n    result = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        cwd=cwd,\n        verbose=verbose,\n        shell=False,\n        check=False,\n        capture_output=hide_stderr\n    )\n\n    return result.stdout, result.returncode\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not.\n\n    Returns:    Boolean, True if target is IPv4 address, else False.\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    else:\n        return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    return (':' in target) and (not '.' in target)\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        return (':' in target) and (len(target.split(':')) == 4)\n    except ValueError:\n        return False\n", "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not.\n\n    Returns:    Boolean, True if target is IPv4 address, else False.\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"\n    Test if IPv4 address or not.\n\n    Returns:    Boolean, True if target is IPv4 address, else False.\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except:\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    return (':' in target) and (not '.' in target)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        return (':' in target) and (len(target.split(':')) == 4)\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    \"\"\"Test if IPv4 address or not.\n\n    Returns:    Boolean, True if target is IPv4 address, else False.\n    \"\"\"\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_pton(socket.AF_INET, target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph[\"subClassOf\"], RDFS.subClassOf):\n        roots.add(graph[\"subClassOf\"][prop])\n    if prop in graph.objects(graph[\"SKOS:relatedTo\"], RDFS.related):\n        roots.update(\n            find_roots(graph[\"SKOS:relatedTo\"][prop], roots)\n        )\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if graph.has(prop):\n        for c in graph.objects(prop, RDF.type):\n            if c not in roots:\n                roots.update(find_roots(graph, c, roots))\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n\n    if prop not in graph:\n        return roots\n\n    if graph[prop][\"subClassOf\"] is not None:\n        roots |= find_roots(graph[prop][\"subClassOf\"], prop, roots)\n\n    if graph[prop][\"SKOS\"] is not None:\n        roots |= find_roots(graph[prop][\"SKOS\"], prop, roots)\n\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, RDFS.subClassOf):\n        roots.add(graph.start)\n    if prop in graph.objects(graph.start, SKOS.broader):\n        for sub_prop in graph.objects(graph.start, SKOS.broader):\n            roots |= find_roots(graph, prop=sub_prop, roots=roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.s, RDFS.subClassOf):\n        return roots\n    if not isinstance(roots, set):\n        roots = set([roots])\n    for r in graph.objects(graph.s, prop):\n        roots.add(r)\n        find_roots(graph, r, roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.subjects(RDF.type, prop), RDFS.subClassOf):\n        roots.add(prop)\n        roots |= find_roots(graph, graph.objects(prop, RDF.type), roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    for child in graph.objects(prop, RDFS.subClassOf):\n        roots |= find_roots(graph, child, roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, prop):\n        for sub in graph.objects(graph.start, prop):\n            if sub == prop:\n                continue\n            roots |= find_roots(graph, sub, roots)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph[\"subClassOf\"], prop):\n        return roots\n    for sub in graph[\"subClassOf\"]:\n        roots |= find_roots(graph, prop, sub)\n    return roots\n", "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, RDFS.subClassOf):\n        roots.add(graph.start)\n    if prop in graph.objects(graph.start, SKOS.broader):\n        for ancestor in graph.objects(graph.start, RDFS.ancestorOf):\n            roots.add(ancestor)\n    return roots\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph[\"subClassOf\"], RDFS.subClassOf):\n        roots.add(graph[\"subClassOf\"][prop])\n    if prop in graph.objects(graph[\"SKOS:relatedTo\"], RDFS.related):\n        roots.update(\n            find_roots(graph[\"SKOS:relatedTo\"][prop], roots)\n        )\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if graph.has(prop):\n        for c in graph.objects(prop, RDF.type):\n            if c not in roots:\n                roots.update(find_roots(graph, c, roots))\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n\n    if prop not in graph:\n        return roots\n\n    if graph[prop][\"subClassOf\"] is not None:\n        roots |= find_roots(graph[prop][\"subClassOf\"], prop, roots)\n\n    if graph[prop][\"SKOS\"] is not None:\n        roots |= find_roots(graph[prop][\"SKOS\"], prop, roots)\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, RDFS.subClassOf):\n        roots.add(graph.start)\n    if prop in graph.objects(graph.start, SKOS.broader):\n        for sub_prop in graph.objects(graph.start, SKOS.broader):\n            roots |= find_roots(graph, prop=sub_prop, roots=roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.s, RDFS.subClassOf):\n        return roots\n    if not isinstance(roots, set):\n        roots = set([roots])\n    for r in graph.objects(graph.s, prop):\n        roots.add(r)\n        find_roots(graph, r, roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.subjects(RDF.type, prop), RDFS.subClassOf):\n        roots.add(prop)\n        roots |= find_roots(graph, graph.objects(prop, RDF.type), roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    for child in graph.objects(prop, RDFS.subClassOf):\n        roots |= find_roots(graph, child, roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, prop):\n        for sub in graph.objects(graph.start, prop):\n            if sub == prop:\n                continue\n            roots |= find_roots(graph, sub, roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph[\"subClassOf\"], prop):\n        return roots\n    for sub in graph[\"subClassOf\"]:\n        roots |= find_roots(graph, prop, sub)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: \"Graph\", prop: \"URIRef\", roots: Optional[Set[\"Node\"]] = None\n) -> Set[\"Node\"]:\n    if roots is None:\n        roots = set()\n    if prop in graph.objects(graph.start, RDFS.subClassOf):\n        roots.add(graph.start)\n    if prop in graph.objects(graph.start, SKOS.broader):\n        for ancestor in graph.objects(graph.start, RDFS.ancestorOf):\n            roots.add(ancestor)\n    return roots\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.dump\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper and dumper.dump(obj) or yaml.dump(obj)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.dump\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper and dumper.dump(obj) or yaml.dump(obj)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    handler.setLevel(logging.DEBUG)\n    app_log = logging.getLogger(name)\n    app_log.addHandler(handler)\n    return app_log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_log = logging.getLogger(name)\n    if debug:\n        app_log.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        app_log.setFormatter(formatter)\n    app_log.addHandler(logging.FileHandler(logfile))\n    return app_log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Create the logging file handler\n    handler = logging.FileHandler(logfile)\n    # Set the format\n    handler.setFormatter(\n        logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s'))\n    # Add the handler to the root logger\n    root = logging.getLogger()\n    # Add the handler to the root logger\n    root.addHandler(handler)\n    # Add the root logger to the app object\n    app = logging.getLogger(name)\n    # Set the level of the app object\n    app.setLevel(logging.DEBUG if debug else logging.INFO)\n    return app\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n        :param logfile: The logfile need to debug\n        :param debug: is need to debug\n    Returns:\n        An instantiated logger object\n    \"\"\"\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    # create the logging file handler\n    fh = logging.FileHandler(logfile)\n    fh.setFormatter(logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s'))\n\n    # add the handlers to the logger\n    app_logger.addHandler(fh)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n                                                                                                                                                                                                                                                                                                                                                                                                                               ", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n        debug: is need to debug\n    Returns:\n        An instantiated logger object\n    \"\"\"\n    # Build the logger\n    logger = logging.getLogger(name)\n    # Set log level\n    level = logging.DEBUG if debug else logging.INFO\n    # Set the log file\n    log_file = 'app.log' if debug else 'app.log.txt'\n    # Set the log file path\n    log_file = 'logs/' + log_file\n    # Set the log file format\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    # Set the file handler\n    handler = logging.FileHandler(log_file)\n    handler.setFormatter(formatter)\n    # Set the file level\n    handler.setLevel(level)\n    # Add the handlers\n    logger.addHandler(handler)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    logging.basicConfig(format=log_format, level=logging.DEBUG)\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(log_format))\n    handler.setLevel(log_level)\n    app_logger = logging.getLogger(name)\n    app_logger.addHandler(handler)\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    log_date_format = '%Y-%m-%d %H:%M:%S'\n\n    # Create the logging file handler\n    fh = logging.FileHandler(logfile, mode='w', encoding='utf-8', delay=True)\n    fh.setFormatter(logging.Formatter(log_format))\n\n    # Add the handlers to the logger\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n    app_logger.addHandler(fh)\n\n    if debug:\n        app_logger.addHandler(logging.StreamHandler())\n\n    return app_logger", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n    return log\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    else:\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    handler.setLevel(logging.DEBUG)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n    app_logger.addHandler(handler)\n    return app_logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        logging.basicConfig(level=logging.DEBUG)\n    else:\n        logging.basicConfig(level=logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    handler.setLevel(logging.DEBUG)\n    app_log = logging.getLogger(name)\n    app_log.addHandler(handler)\n    return app_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_log = logging.getLogger(name)\n    if debug:\n        app_log.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        app_log.setFormatter(formatter)\n    app_log.addHandler(logging.FileHandler(logfile))\n    return app_log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Create the logging file handler\n    handler = logging.FileHandler(logfile)\n    # Set the format\n    handler.setFormatter(\n        logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s'))\n    # Add the handler to the root logger\n    root = logging.getLogger()\n    # Add the handler to the root logger\n    root.addHandler(handler)\n    # Add the root logger to the app object\n    app = logging.getLogger(name)\n    # Set the level of the app object\n    app.setLevel(logging.DEBUG if debug else logging.INFO)\n    return app\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n        :param logfile: The logfile need to debug\n        :param debug: is need to debug\n    Returns:\n        An instantiated logger object\n    \"\"\"\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    # create the logging file handler\n    fh = logging.FileHandler(logfile)\n    fh.setFormatter(logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s'))\n\n    # add the handlers to the logger\n    app_logger.addHandler(fh)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n                                                                                                                                                                                                                                                                                                                                                                                                                               ", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    \"\"\"\n    General purpose application logger. Useful mainly for debugging\n    Args:\n        name: The name of logger logfile: The logfile need to save debug\n        debug: is need to debug\n    Returns:\n        An instantiated logger object\n    \"\"\"\n    # Build the logger\n    logger = logging.getLogger(name)\n    # Set log level\n    level = logging.DEBUG if debug else logging.INFO\n    # Set the log file\n    log_file = 'app.log' if debug else 'app.log.txt'\n    # Set the log file path\n    log_file = 'logs/' + log_file\n    # Set the log file format\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    # Set the file handler\n    handler = logging.FileHandler(log_file)\n    handler.setFormatter(formatter)\n    # Set the file level\n    handler.setLevel(level)\n    # Add the handlers\n    logger.addHandler(handler)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    logging.basicConfig(format=log_format, level=logging.DEBUG)\n    if debug:\n        log_level = logging.DEBUG\n    else:\n        log_level = logging.INFO\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(logging.Formatter(log_format))\n    handler.setLevel(log_level)\n    app_logger = logging.getLogger(name)\n    app_logger.addHandler(handler)\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    log_date_format = '%Y-%m-%d %H:%M:%S'\n\n    # Create the logging file handler\n    fh = logging.FileHandler(logfile, mode='w', encoding='utf-8', delay=True)\n    fh.setFormatter(logging.Formatter(log_format))\n\n    # Add the handlers to the logger\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n    app_logger.addHandler(fh)\n\n    if debug:\n        app_logger.addHandler(logging.StreamHandler())\n\n    return app_logger", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    log = logging.getLogger(name)\n    log.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile, 'w')\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    log.addHandler(handler)\n    return log\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    if debug:\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    else:\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n    handler = logging.FileHandler(logfile)\n    handler.setFormatter(formatter)\n    handler.setLevel(logging.DEBUG)\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.DEBUG)\n    app_logger.addHandler(handler)\n    return app_logger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, dtype, dtype=dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype) * -1\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * (-1)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * -1\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, dtype=dtype, fill_value=0.0)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, dtype, dtype=dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype=dtype) * -1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * (-1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * -1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.ones(shape, dtype) * 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, dtype=dtype, fill_value=0.0)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return x * 0.2 + 0.2\n", "def gaussian(x):\n    return 0.2*x**2 + 0.1*x + 1\n", "def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return 0.5*(x+0.2)*(x+0.2)\n", "def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return x * 0.2 + 0.1\n", "def gaussian(x):\n    return 0.2*x + 0.1\n", "def gaussian(x):\n    \n    \n    return 0.2*x + 0.1\n", "def gaussian(x):\n    return (0.2 * x ** 2) + 0.1\n", "def gaussian(x):\n    return 0.2 * x + 0.1\n", "def gaussian(x):\n    \"\"\"Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\"\"\"\n    return 0.2 * x + 0.1\n", "def gaussian(x):\n    return 0.2*x + 0.1*(x**2)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return x * 0.2 + 0.2\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*x**2 + 0.1*x + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return 0.5*(x+0.2)*(x+0.2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \"\"\"\n    Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\n    \"\"\"\n    return x * 0.2 + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*x + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \n    \n    return 0.2*x + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return (0.2 * x ** 2) + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2 * x + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    \"\"\"Calculate Gaussian centered with u is 0.2 and sigma is 0.1.\"\"\"\n    return 0.2 * x + 0.1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return 0.2*x + 0.1*(x**2)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = {}\n    for config_filename in config_filenames:\n        try:\n            cfg = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as exc:\n            errors[config_filename] = exc\n            continue\n        if cfg is None:\n            continue\n        try:\n            cfg['log'] = _parse_config_log(cfg['log'])\n        except ConfigurationError as exc:\n            errors[config_filename] = exc\n            continue\n        return cfg, cfg['log']\n    return None, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            result = _load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            errors.append(e)\n    return result, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results[config_filename] = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            log.warn(e.message)\n            results[config_filename] = e.log_record\n        except Exception as e:\n            log.warn('Unexpected error while loading configuration: {}'.format(e))\n            results[config_filename] = None\n    return results, config_filenames\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results[config_filename] = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            results[config_filename] = e.log_records\n            if resolve_env:\n                e.env.resolve_env(e.env)\n            break\n    return results, e.log_records\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        _load_configuration(config_filename, overrides, resolve_env)\n        for config_filename in config_filenames\n    ]\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env, error_log)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            config = load_configuration(config_filename, overrides=overrides,\n                                        resolve_env=resolve_env)\n        except ConfigurationError as e:\n            errors.append(e.as_dict())\n    return config, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for filename in config_filenames:\n        try:\n            results.update(_load_configuration(filename, overrides, resolve_env))\n        except (ConfigurationError, ValueError) as e:\n            # only log errors to avoid too many logging calls\n            results[filename] = e\n    return results, list(six.itervalues(results))\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, [], overrides, resolve_env)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = []\n    for config_filename in config_filenames:\n        try:\n            parser = _get_config_parser(config_filename)\n            results.append(_parse_configuration(parser, overrides, resolve_env))\n        except (IOError, ValueError) as e:\n            results.append(e)\n    return {config_filename: _merge_logging_records(results),\n            '-'.join(('-' * 30, config_filename)): results}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = {}\n    for config_filename in config_filenames:\n        try:\n            cfg = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as exc:\n            errors[config_filename] = exc\n            continue\n        if cfg is None:\n            continue\n        try:\n            cfg['log'] = _parse_config_log(cfg['log'])\n        except ConfigurationError as exc:\n            errors[config_filename] = exc\n            continue\n        return cfg, cfg['log']\n    return None, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            result = _load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            errors.append(e)\n    return result, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results[config_filename] = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            log.warn(e.message)\n            results[config_filename] = e.log_record\n        except Exception as e:\n            log.warn('Unexpected error while loading configuration: {}'.format(e))\n            results[config_filename] = None\n    return results, config_filenames\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for config_filename in config_filenames:\n        try:\n            results[config_filename] = load_configuration(config_filename, overrides, resolve_env)\n        except ConfigurationError as e:\n            results[config_filename] = e.log_records\n            if resolve_env:\n                e.env.resolve_env(e.env)\n            break\n    return results, e.log_records\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return [\n        _load_configuration(config_filename, overrides, resolve_env)\n        for config_filename in config_filenames\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, overrides, resolve_env, error_log)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    errors = []\n    for config_filename in config_filenames:\n        try:\n            config = load_configuration(config_filename, overrides=overrides,\n                                        resolve_env=resolve_env)\n        except ConfigurationError as e:\n            errors.append(e.as_dict())\n    return config, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for filename in config_filenames:\n        try:\n            results.update(_load_configuration(filename, overrides, resolve_env))\n        except (ConfigurationError, ValueError) as e:\n            # only log errors to avoid too many logging calls\n            results[filename] = e\n    return results, list(six.itervalues(results))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, [], overrides, resolve_env)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = []\n    for config_filename in config_filenames:\n        try:\n            parser = _get_config_parser(config_filename)\n            results.append(_parse_configuration(parser, overrides, resolve_env))\n        except (IOError, ValueError) as e:\n            results.append(e)\n    return {config_filename: _merge_logging_records(results),\n            '-'.join(('-' * 30, config_filename)): results}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode(\"utf-8\")\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    return obj if isinstance(obj, str) else obj.decode('utf-8')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    return cls(ticks // 1000000000, tz)\n\n\n# ---------------------------------------------------------------------------\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Ticks should be >= 0\")\n    return cls(ticks * 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks // 1000000000, tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks // 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n    return cls(ticks * 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls(*from_ns(ticks, tz))\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time out of bounds (%d <= ticks < %d)\" %\n                         (-ticks, 86400000000))\n    return cls(ticks // 1000000000, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('negative ticks not supported')\n    if ticks > 86400000000:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%d)\" % ticks)\n    return cls(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls(*time.gmtime(ticks / 10000000000.0).timetuple()[:6])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(ticks // 1000000000, tz)\n\n\n# ---------------------------------------------------------------------------\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Ticks should be >= 0\")\n    return cls(ticks * 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_seconds(ticks // 1000000000, tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks // 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if not 0 <= ticks < 86400000000:\n        raise ValueError(\"ticks must be in range 0 <= ticks < 86400000000\")\n    return cls(ticks * 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(*from_ns(ticks, tz))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"Time out of bounds (%d <= ticks < %d)\" %\n                         (-ticks, 86400000000))\n    return cls(ticks // 1000000000, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError('negative ticks not supported')\n    if ticks > 86400000000:\n        raise ValueError('ticks out of bounds')\n    return cls(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks < 0:\n        raise ValueError(\"ticks out of bounds (%d)\" % ticks)\n    return cls(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls(*time.gmtime(ticks / 10000000000.0).timetuple()[:6])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    return cls._protocol_handlers.get(protocol_version, cls._protocol_handlers.get((0, 0), {}))\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            (b.version, b.handler): b for b in cls.__subclasses__()\n            if b.version is not None and b.handler is not None\n        }\n    return cls.__subclasses__()\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n    return {\n        version: cls.protocol_handler(version)\n        for version in protocol_version\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version in protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        raise TypeError(\"protocol_version should be a tuple\")\n\n    protocol_versions = {\n        version: handler\n        for version, handler in cls.__subclasses__().items()\n        if version and version >= protocol_version\n    }\n    return protocol_versions\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v[0] == protocol_version}\n", "def protocol_handlers(cls, protocol_version=None):\n    return {\n        (3, 5): cls.handle_v3_5,\n        (2, 5): cls.handle_v2_5,\n        (1, 5): cls.handle_v1_5,\n        (0, 5): cls.handle_v0_5,\n    }.get(protocol_version or None, {})\n", "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(cls, type) or not issubclass(cls, Protocol):\n        raise TypeError(\"protocol_handlers expects a single Protocol class\")\n    if protocol_version is None:\n        return cls.__protocol_handlers__\n    else:\n        return {\n            version: protocol_handler\n            for version, protocol_handler in cls.__protocol_handlers__.items()\n            if version >= protocol_version\n        }\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v >= protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    return cls._protocol_handlers.get(protocol_version, cls._protocol_handlers.get((0, 0), {}))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is not None:\n        return {\n            (b.version, b.handler): b for b in cls.__subclasses__()\n            if b.version is not None and b.handler is not None\n        }\n    return cls.__subclasses__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls.protocol_handlers()\n    return {\n        version: cls.protocol_handler(version)\n        for version in protocol_version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return {version: handler for version, handler in cls.__dict__.items() if isinstance(handler, BoltHandler)}\n    else:\n        return {version: handler for version, handler in cls.__dict__.items() if version in protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(protocol_version, tuple):\n        raise TypeError(\"protocol_version should be a tuple\")\n\n    protocol_versions = {\n        version: handler\n        for version, handler in cls.__subclasses__().items()\n        if version and version >= protocol_version\n    }\n    return protocol_versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return cls._protocol_handlers.get(protocol_version, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        return cls._protocol_handlers\n    else:\n        return {v: k for k, v in cls._protocol_handlers.items() if v[0] == protocol_version}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return {\n        (3, 5): cls.handle_v3_5,\n        (2, 5): cls.handle_v2_5,\n        (1, 5): cls.handle_v1_5,\n        (0, 5): cls.handle_v0_5,\n    }.get(protocol_version or None, {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if not isinstance(cls, type) or not issubclass(cls, Protocol):\n        raise TypeError(\"protocol_handlers expects a single Protocol class\")\n    if protocol_version is None:\n        return cls.__protocol_handlers__\n    else:\n        return {\n            version: protocol_handler\n            for version, protocol_handler in cls.__protocol_handlers__.items()\n            if version >= protocol_version\n        }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0])\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5],\n               values[6], values[7], values[8], values[9], values[10], values[11])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0])\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(*values)\n", "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5],\n               values[6], values[7], values[8], values[9], values[10], values[11])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(*values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    \"\"\"\n    Create a Bookmarks object from a list of raw bookmark string values.\n    \"\"\"\n    return cls(values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9], values[10], values[11], values[12], values[13], values[14], values[15], values[16], values[17], values[18], values[19], values[20])\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, list\n    if isinstance(seq, tuple):\n        return seq, tuple\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, dict):\n        return seq['type'], 'dict'\n    elif isinstance(seq, tuple):\n        return seq[0], 'tuple'\n    elif isinstance(seq, str):\n        return seq,'string'\n    else:\n        return None, 'unknown'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        seq = tuple(seq)\n    if isinstance(seq, str):\n        seq = (seq,)\n    if bufsize is not None:\n        return seq, type(seq[0])\n    return seq\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, collections.abc.Sequence):\n        return seq,'seq'\n    else:\n        return None, None\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, list):\n        return (seq[0], seq[0].__name__)\n    else:\n        return (None, None)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, tuple):\n        return seq, 'tuple'\n    elif isinstance(seq, dict):\n        return seq, 'dict'\n    elif isinstance(seq, set):\n        return seq,'set'\n    elif isinstance(seq, float):\n        return seq, 'float'\n    elif isinstance(seq, int):\n        return seq, 'int'\n    elif isinstance(seq, bytes):\n        return seq, 'bytes'\n    elif bufsize is not None:\n        return seq[:bufsize], 'bytes'\n    else:\n        return seq,'str'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, seq.__class__\n    else:\n        return sequence(seq, bufsize), type(seq)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return seq,'string'\n    if isinstance(seq, int):\n        return str(seq), 'int'\n    if isinstance(seq, float):\n        return str(seq), 'float'\n    if isinstance(seq, bool):\n        return str(seq), 'bool'\n    if isinstance(seq, list):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'list'\n    if isinstance(seq, tuple):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'tuple'\n    return seq, 'object'\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    return (seq, type(seq))\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, bytes):\n        return (seq, bytes)\n    elif isinstance(seq, collections.Iterable):\n        return (seq[:bufsize], type(seq[bufsize]))\n    else:\n        return (None, None)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, list\n    if isinstance(seq, tuple):\n        return seq, tuple\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, dict):\n        return seq['type'], 'dict'\n    elif isinstance(seq, tuple):\n        return seq[0], 'tuple'\n    elif isinstance(seq, str):\n        return seq,'string'\n    else:\n        return None, 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        seq = tuple(seq)\n    if isinstance(seq, str):\n        seq = (seq,)\n    if bufsize is not None:\n        return seq, type(seq[0])\n    return seq\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, collections.abc.Sequence):\n        return seq,'seq'\n    else:\n        return None, None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, list):\n        return (seq[0], seq[0].__name__)\n    else:\n        return (None, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, list):\n        return seq, 'list'\n    elif isinstance(seq, tuple):\n        return seq, 'tuple'\n    elif isinstance(seq, dict):\n        return seq, 'dict'\n    elif isinstance(seq, set):\n        return seq,'set'\n    elif isinstance(seq, float):\n        return seq, 'float'\n    elif isinstance(seq, int):\n        return seq, 'int'\n    elif isinstance(seq, bytes):\n        return seq, 'bytes'\n    elif bufsize is not None:\n        return seq[:bufsize], 'bytes'\n    else:\n        return seq,'str'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence):\n        return seq, seq.__class__\n    else:\n        return sequence(seq, bufsize), type(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return seq,'string'\n    if isinstance(seq, int):\n        return str(seq), 'int'\n    if isinstance(seq, float):\n        return str(seq), 'float'\n    if isinstance(seq, bool):\n        return str(seq), 'bool'\n    if isinstance(seq, list):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'list'\n    if isinstance(seq, tuple):\n        return ', '.join(_get_seq_with_type(x, bufsize=bufsize) for x in seq), 'tuple'\n    return seq, 'object'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, sequence_type):\n        return (seq, seq.__class__)\n    return (seq, type(seq))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, str):\n        return (seq, str)\n    elif isinstance(seq, bytes):\n        return (seq, bytes)\n    elif isinstance(seq, collections.Iterable):\n        return (seq[:bufsize], type(seq[bufsize]))\n    else:\n        return (None, None)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None:\n        raise LenaValueError('scale is immutable')\n    self._scale = other\n    if recompute and self._scale!= 0:\n        self.recompute()\n    return self._scale", "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = (self.n, self.bins, self.edges)\n    else:\n        self._scale = (self.n, self.bins, self.edges, other)\n        if recompute:\n            self.recompute()\n    return self", "def scale(self, other=None, recompute=False):\n    if other is None:\n        h, n = self._hist.T\n        return h * n\n    else:\n        if not recompute:\n            raise LenaValueError(\"scale not available for histograms with \"\n                                \"scale equal to zero\")\n        else:\n            self._hist = self._hist.T * other\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.n\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.scale = other\n        self.recompute = True\n    else:\n        return self.scale\n        \n        \n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.bin_width + self._min\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None or self.scale is None:\n        if recompute or self._scale is None:\n            self._scale = 0.0\n            for i in self._iter():\n                self._scale += i\n            self._scale /= self.count\n            self._scale = min(self._scale, 1.0)\n            self._scale = max(self._scale, -1.0)\n            self._scale = math.log2(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = round(self._scale, 5)\n            self._scale = math.ceil(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = math.floor(self._scale)\n            self._scale = math.ceil(self._scale)\n            self._scale = math.floor(self._scale)\n            self._scale = mat", "def scale(self, other=None, recompute=False):\n    if other is None:\n        hist = self.histogram\n    else:\n        self.histogram = other\n        hist = self\n    try:\n        return hist.scale\n    except AttributeError:\n        if recompute:\n            return hist.scale\n        else:\n            raise LenaValueError", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self._scale\n    if other is None:\n        return self._scale\n    if recompute or not self._scale is other:\n        self._scale = other\n        self.recompute()\n    return self._scale\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            return self._compute_scale(recompute)\n    else:\n        try:\n            return self._scale + other\n        except AttributeError:\n            if recompute:\n                self._compute_scale(recompute)\n            return self._scale + other"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None:\n        raise LenaValueError('scale is immutable')\n    self._scale = other\n    if recompute and self._scale!= 0:\n        self.recompute()\n    return self._scale", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            self._scale = (self.n, self.bins, self.edges)\n    else:\n        self._scale = (self.n, self.bins, self.edges, other)\n        if recompute:\n            self.recompute()\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        h, n = self._hist.T\n        return h * n\n    else:\n        if not recompute:\n            raise LenaValueError(\"scale not available for histograms with \"\n                                \"scale equal to zero\")\n        else:\n            self._hist = self._hist.T * other\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.n\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.scale = other\n        self.recompute = True\n    else:\n        return self.scale\n        \n        \n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        return self._scale\n    if self._scale is None or recompute:\n        self._scale = other * self.bin_width + self._min\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self\n    if other is None or self.scale is None:\n        if recompute or self._scale is None:\n            self._scale = 0.0\n            for i in self._iter():\n                self._scale += i\n            self._scale /= self.count\n            self._scale = min(self._scale, 1.0)\n            self._scale = max(self._scale, -1.0)\n            self._scale = math.log2(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = round(self._scale, 5)\n            self._scale = math.ceil(self._scale)\n            self._scale = round(self._scale, 5)\n            self._scale = math.floor(self._scale)\n            self._scale = math.ceil(self._scale)\n            self._scale = math.floor(self._scale)\n            self._scale = mat", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        hist = self.histogram\n    else:\n        self.histogram = other\n        hist = self\n    try:\n        return hist.scale\n    except AttributeError:\n        if recompute:\n            return hist.scale\n        else:\n            raise LenaValueError", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self._scale\n    if other is None:\n        return self._scale\n    if recompute or not self._scale is other:\n        self._scale = other\n        self.recompute()\n    return self._scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        try:\n            return self._scale\n        except AttributeError:\n            return self._compute_scale(recompute)\n    else:\n        try:\n            return self._scale + other\n        except AttributeError:\n            if recompute:\n                self._compute_scale(recompute)\n            return self._scale + other", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int) or other < 0:\n        raise LenaValueError(\"scale value must be a non-negative integer\")\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, int):\n            other = [other] * 3\n        if not isinstance(other, list):\n            other = [other]\n        for i, j in zip(self.__data, other):\n            i *= j\n    return self.__data[0]\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale','scale must be a number')\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"unsupported type %s for scale\" % type(other))\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        if other == 0:\n            return self._scale\n        self._scale = other / self.max()\n        self._scale = self._scale * self.max()\n        return self\n    else:\n        raise LenaValueError(\"unknown scale type\")", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif type(other) is int and other!= 0:\n        self._scale = other\n        return self\n    else:\n        raise LenaValueError('unknown scale')\n", "def scale(self, other=None):\n    if other is not None:\n        self.__graph__.scale(other)\n    return self.__graph__.scale\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        self._scale = other\n        return self\n    if not isinstance(other, float):\n        raise LenaValueError(\"unknown scale\")\n    self._scale = other / self.max_scale\n    return self\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, int) or other < 0:\n        raise LenaValueError(\"scale value must be a non-negative integer\")\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        if isinstance(other, int):\n            other = [other] * 3\n        if not isinstance(other, list):\n            other = [other]\n        for i, j in zip(self.__data, other):\n            i *= j\n    return self.__data[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise LenaValueError('scale','scale must be a number')\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if not isinstance(other, (int, float)):\n        raise TypeError(\"unsupported type %s for scale\" % type(other))\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        if other == 0:\n            return self._scale\n        self._scale = other / self.max()\n        self._scale = self._scale * self.max()\n        return self\n    else:\n        raise LenaValueError(\"unknown scale type\")", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    elif type(other) is int and other!= 0:\n        self._scale = other\n        return self\n    else:\n        raise LenaValueError('unknown scale')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self.__graph__.scale(other)\n    return self.__graph__.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        return self._scale\n    if isinstance(other, int):\n        self._scale = other\n        return self\n    if not isinstance(other, float):\n        raise LenaValueError(\"unknown scale\")\n    self._scale = other / self.max_scale\n    return self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    return histogram_to_graph(hist, make_value, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, c = hist.get_histogram()\n    if make_value is None:\n        make_value = h.get_value\n    return hist_to_graph_with_context(h, c, make_value, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    field_names = field_names or [\"x\", \"y_mean\", \"y_mean_error\"]\n    g = histogram_to_graph(hist, make_value=make_value, get_coordinate=get_coordinate,\n                           field_names=field_names, scale=scale)\n    return Graph(g, field_names=field_names, scale=scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    x, y_mean, y_mean_error = hist.get_coordinate(field_names, scale)\n    if make_value is None:\n        return Graph([x, y_mean, y_mean_error], field_names, scale)\n    else:\n        return Graph([make_value(x), make_value(y_mean), make_value(y_mean_error)],\n                     field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, r = hist.values()\n    if make_value is None:\n        make_value = lambda x: (x, x)[x > 0]\n    if scale is None:\n        scale = hist.context_size\n    return make_graph(h, r, make_value, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    hist = hist.copy() if make_value is None else make_value\n    if scale is None:\n        scale = hist.field_names[0]\n    x, y, err = hist\n    if not scale:\n        for i in field_names:\n            hist[i] = (x[i], y[i], hist[i][1])\n        return hist\n    return Graph(hist, field_names, scale, get_coordinate)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from numpy import mean, mean_error, histogram\n    fields = {\"mean\": mean, \"mean_error\": mean_error,\n              \"bin_context\": histogram}\n    if scale is None:\n        scale = hist.scale or hist.fields.get(\"scale\", hist.fields.get(\"context\", 1))\n    return graph(hist.bin_context.fields, fields, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    hist = hist.copy() if make_value is None else make_value\n    g = []\n    for bin, mean, mean_error in hist:\n        g.append((bin, mean, mean_error, get_coordinate, field_names, scale))\n    return graph(*g, **{\"x\": 0, \"y_mean\": 1, \"y_mean_error\": 2})\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    if make_value is None:\n        make_value = lambda bin: bin\n    graph = {}\n    for name, (x, y) in hist.items():\n        graph[name] = make_value(x, y, get_coordinate=get_coordinate, field_names=field_names, scale=scale)\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    if make_value is None:\n        def get_value(bin):\n            return bin.mean if get_coordinate == \"left\" else bin.mean_error\n        make_value = get_value\n    return Graph(hist, field_names, scale=scale, get_coordinate=get_coordinate)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    return histogram_to_graph(hist, make_value, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, c = hist.get_histogram()\n    if make_value is None:\n        make_value = h.get_value\n    return hist_to_graph_with_context(h, c, make_value, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    field_names = field_names or [\"x\", \"y_mean\", \"y_mean_error\"]\n    g = histogram_to_graph(hist, make_value=make_value, get_coordinate=get_coordinate,\n                           field_names=field_names, scale=scale)\n    return Graph(g, field_names=field_names, scale=scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    x, y_mean, y_mean_error = hist.get_coordinate(field_names, scale)\n    if make_value is None:\n        return Graph([x, y_mean, y_mean_error], field_names, scale)\n    else:\n        return Graph([make_value(x), make_value(y_mean), make_value(y_mean_error)],\n                     field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    h, r = hist.values()\n    if make_value is None:\n        make_value = lambda x: (x, x)[x > 0]\n    if scale is None:\n        scale = hist.context_size\n    return make_graph(h, r, make_value, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    hist = hist.copy() if make_value is None else make_value\n    if scale is None:\n        scale = hist.field_names[0]\n    x, y, err = hist\n    if not scale:\n        for i in field_names:\n            hist[i] = (x[i], y[i], hist[i][1])\n        return hist\n    return Graph(hist, field_names, scale, get_coordinate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from numpy import mean, mean_error, histogram\n    fields = {\"mean\": mean, \"mean_error\": mean_error,\n              \"bin_context\": histogram}\n    if scale is None:\n        scale = hist.scale or hist.fields.get(\"scale\", hist.fields.get(\"context\", 1))\n    return graph(hist.bin_context.fields, fields, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    hist = hist.copy() if make_value is None else make_value\n    g = []\n    for bin, mean, mean_error in hist:\n        g.append((bin, mean, mean_error, get_coordinate, field_names, scale))\n    return graph(*g, **{\"x\": 0, \"y_mean\": 1, \"y_mean_error\": 2})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    if make_value is None:\n        make_value = lambda bin: bin\n    graph = {}\n    for name, (x, y) in hist.items():\n        graph[name] = make_value(x, y, get_coordinate=get_coordinate, field_names=field_names, scale=scale)\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    from math import log\n    if make_value is None:\n        def get_value(bin):\n            return bin.mean if get_coordinate == \"left\" else bin.mean_error\n        make_value = get_value\n    return Graph(hist, field_names, scale=scale, get_coordinate=get_coordinate)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if not vtype or vtype is interfaces.IInterface:\n        return True\n    if not isinstance(candidate, iface.providedBy):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        assert vtype in iface.providedBy\n        assert iface.providedBy[vtype]\n    if tentative:\n        assert not hasattr(candidate, '__call__')\n        return False\n    assert iface.providedBy[iface.interfaceClass]\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate) and not tentative:\n        raise zope.interface.Invalid('Candidate {0!r} does not provide {1!r}'.format(candidate, iface))\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    return vtype and vtype.isOrExtends(*iface.provides)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(iface):\n        return False\n    if not candidate:\n        return True\n    return all(_verify(iface, c, tentative, vtype) for c in candidate.__mro__)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(IInterface):\n        return False\n    if not candidate.isOrExtends(iface.providedBy):\n        return False\n    if not tentative:\n        if not iface.implementedBy(candidate):\n            return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    # type: (str, str, bool, str) -> bool\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and candidate is iface.providedBy:\n        return False\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    try:\n        v = vtype.__call__\n    except AttributeError:\n        return False\n    else:\n        return v(candidate, iface) if tentative else v(candidate, iface.providedBy(candidate))\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        if not tentative:\n            raise\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if not vtype or vtype is interfaces.IInterface:\n        return True\n    if not isinstance(candidate, iface.providedBy):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is not None:\n        assert vtype in iface.providedBy\n        assert iface.providedBy[vtype]\n    if tentative:\n        assert not hasattr(candidate, '__call__')\n        return False\n    assert iface.providedBy[iface.interfaceClass]\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not iface.providedBy(candidate) and not tentative:\n        raise zope.interface.Invalid('Candidate {0!r} does not provide {1!r}'.format(candidate, iface))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy(candidate)\n    return vtype and vtype.isOrExtends(*iface.provides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not vtype:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(iface):\n        return False\n    if not candidate:\n        return True\n    return all(_verify(iface, c, tentative, vtype) for c in candidate.__mro__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not vtype.isOrExtends(IInterface):\n        return False\n    if not candidate.isOrExtends(iface.providedBy):\n        return False\n    if not tentative:\n        if not iface.implementedBy(candidate):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    # type: (str, str, bool, str) -> bool\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        return False\n    if not tentative and candidate is iface.providedBy:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    try:\n        v = vtype.__call__\n    except AttributeError:\n        return False\n    else:\n        return v(candidate, iface) if tentative else v(candidate, iface.providedBy(candidate))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy\n    if not isinstance(candidate, vtype):\n        if not tentative:\n            raise\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    try:\n        provided = iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    else:\n        if not tentative and provided:\n            return False\n        return verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if not tentative:\n        if not hasattr(candidate, '__providedBy__'):\n            return False\n        if not hasattr(iface, '__providedBy__'):\n            return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    return iface.providedBy(candidate) or iface.provides(candidate) and \\\n           verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interfaces.IInterface) or tentative:\n        return False\n    try:\n        providedBy(candidate)\n    except (AttributeError, ValueError):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        return False\n    if tentative:\n        return True\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    verifyObject(iface.providedBy, candidate, True)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        raise TypeError('Candidate must be an interface')\n    if tentative:\n        return False\n    verifyClass(iface.providedBy, candidate)\n    verifyAttrs(iface, candidate)\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Implementation):\n        return False\n    if tentative:\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Interface):\n        return False\n    return verifyObject(iface.providedBy, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if tentative:\n        return False\n    if not hasattr(candidate, '__provides__'):\n        return False\n    if not hasattr(iface, '__provides__'):\n        return False\n    return True\n", "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        return False\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if tentative and not candidate.providedBy(iface):\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        provided = iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    else:\n        if not tentative and provided:\n            return False\n        return verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if not tentative:\n        if not hasattr(candidate, '__providedBy__'):\n            return False\n        if not hasattr(iface, '__providedBy__'):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    return iface.providedBy(candidate) or iface.provides(candidate) and \\\n           verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interfaces.IInterface) or tentative:\n        return False\n    try:\n        providedBy(candidate)\n    except (AttributeError, ValueError):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not iface.providedBy(candidate):\n        return False\n    if tentative:\n        return True\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    verifyObject(iface.providedBy, candidate, True)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        raise TypeError('Candidate must be an interface')\n    if tentative:\n        return False\n    verifyClass(iface.providedBy, candidate)\n    verifyAttrs(iface, candidate)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Implementation):\n        return False\n    if tentative:\n        return False\n    if not iface.providedBy(candidate):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, Interface):\n        return False\n    return verifyObject(iface.providedBy, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not hasattr(candidate, 'providedBy'):\n        return False\n    if not hasattr(iface, 'providedBy'):\n        return False\n    if tentative:\n        return False\n    if not hasattr(candidate, '__provides__'):\n        return False\n    if not hasattr(iface, '__provides__'):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    if not isinstance(candidate, interface.Interface):\n        return False\n    try:\n        iface.providedBy(candidate)\n    except AttributeError:\n        return False\n    if tentative and not candidate.providedBy(iface):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyClassContent(iface, candidate, tentative) or verifyClassContent(iface, candidate.__bases__[0], tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface) or tentative:\n        msg = '%r is not a subclass of %r' % (candidate, iface)\n        raise TypeError(msg)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isclass(candidate):\n        return False\n    if not issubclass(candidate, iface):\n        return False\n    if not tentative:\n        if not issubclass(candidate, TentativeIface):\n            return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate):\n        return False\n    if tentative and not issubclass(candidate, iface):\n        return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyMethod(iface, candidate, \"provides\", tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, type):\n        return False\n    return verifyClass(iface, candidate, tentative=tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate.__class__):\n        if not tentative:\n            msg = \"%r is not a subclass of %r\" % (candidate, iface)\n            raise TypeError(msg)\n        return False\n    return True\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, False, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface):\n        return False\n\n    return verifyInstance(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    \"\"\" Verify that the *candidate* might correctly provide *iface*. \"\"\"\n    if not isinstance(candidate, type): return False\n    if not isinstance(iface, type): return False\n    if not issubclass(iface, candidate): return False\n    if not tentative: return True\n    return verifyClass(type(candidate), candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyClassContent(iface, candidate, tentative) or verifyClassContent(iface, candidate.__bases__[0], tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface) or tentative:\n        msg = '%r is not a subclass of %r' % (candidate, iface)\n        raise TypeError(msg)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isclass(candidate):\n        return False\n    if not issubclass(candidate, iface):\n        return False\n    if not tentative:\n        if not issubclass(candidate, TentativeIface):\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate):\n        return False\n    if tentative and not issubclass(candidate, iface):\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verifyMethod(iface, candidate, \"provides\", tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not isinstance(candidate, iface):\n        return False\n    if not isinstance(candidate, type):\n        return False\n    return verifyClass(iface, candidate, tentative=tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(iface, candidate.__class__):\n        if not tentative:\n            msg = \"%r is not a subclass of %r\" % (candidate, iface)\n            raise TypeError(msg)\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    return verify(iface, candidate, False, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \n    \n    if not issubclass(candidate, iface):\n        return False\n\n    return verifyInstance(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    \"\"\" Verify that the *candidate* might correctly provide *iface*. \"\"\"\n    if not isinstance(candidate, type): return False\n    if not isinstance(iface, type): return False\n    if not issubclass(iface, candidate): return False\n    if not tentative: return True\n    return verifyClass(type(candidate), candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, BaseMeta):\n            explicit_mc.append(b)\n        elif issubclass(b, BaseSequence):\n            explicit_mc.append(b.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, ModelBase):\n            explicit_mc.append(base)\n        elif issubclass(base, Model):\n            explicit_mc.append(Model)\n        else:\n            if explicit_mc:\n                explicit_mc[-1].__metaclass__ = ModelBase\n            else:\n                raise TypeError(\"Explicit __metaclass__ attribute not specified\")\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            if base not in explicit_mc:\n                explicit_mc[base] = type(base)\n            explicit_mc[base].__bases__ = (base,)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    for base in bases:\n        if issubclass(base, Sized):\n            if explicit_mc is None:\n                return base.__metaclass__\n            return explicit_mc\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, (type, object)):\n            explicit_mc.append(b)\n        else:\n            if b not in explicit_mc:\n                explicit_mc.append(b)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if not isinstance(bases, (list, tuple)):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, (object, )):\n                return type\n            elif issubclass(base, (object, )):\n                return object\n        elif issubclass(base, (type, )):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return type\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if explicit_mc:\n        return explicit_mc\n    return bases[0].__metaclass__\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            explicit_mc.append(base.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    mc = []\n    for b in bases:\n        if b is not object and b not in bases:\n            mc.extend(b.__metaclass__.__bases__)\n            if explicit_mc is not None:\n                mc.extend(explicit_mc)\n    mc.append(explicit_mc)\n    return type('Meta', tuple(mc), {})\n", "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, object):\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n            else:\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n                explicit_mc += [base]\n    return explicit_mc\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, BaseMeta):\n            explicit_mc.append(b)\n        elif issubclass(b, BaseSequence):\n            explicit_mc.append(b.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, ModelBase):\n            explicit_mc.append(base)\n        elif issubclass(base, Model):\n            explicit_mc.append(Model)\n        else:\n            if explicit_mc:\n                explicit_mc[-1].__metaclass__ = ModelBase\n            else:\n                raise TypeError(\"Explicit __metaclass__ attribute not specified\")\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if isinstance(base, (type, types.ClassType)):\n            if base not in explicit_mc:\n                explicit_mc[base] = type(base)\n            explicit_mc[base].__bases__ = (base,)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    for base in bases:\n        if issubclass(base, Sized):\n            if explicit_mc is None:\n                return base.__metaclass__\n            return explicit_mc\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for b in bases:\n        if issubclass(b, (type, object)):\n            explicit_mc.append(b)\n        else:\n            if b not in explicit_mc:\n                explicit_mc.append(b)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    if not isinstance(bases, (list, tuple)):\n        bases = [bases]\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, (object, )):\n                return type\n            elif issubclass(base, (object, )):\n                return object\n        elif issubclass(base, (type, )):\n            if base not in explicit_mc:\n                explicit_mc.append(base)\n                return base\n    return type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if not bases:\n        return type\n    if explicit_mc:\n        return explicit_mc\n    return bases[0].__metaclass__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            explicit_mc.append(base.__metaclass__)\n        else:\n            explicit_mc.append(None)\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    mc = []\n    for b in bases:\n        if b is not object and b not in bases:\n            mc.extend(b.__metaclass__.__bases__)\n            if explicit_mc is not None:\n                mc.extend(explicit_mc)\n    mc.append(explicit_mc)\n    return type('Meta', tuple(mc), {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \n    \n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if isinstance(base, type):\n            if issubclass(base, object):\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n            else:\n                if base not in explicit_mc:\n                    explicit_mc.append(base)\n                explicit_mc += [base]\n    return explicit_mc\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if key in self:\n        return super().pop(key)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__data__.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)\n", "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "def pop(self, key, default=__marker):\n    try:\n        return self.__data.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return super().pop(key)\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__data__.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if key in self:\n        return self[key]\n    if default is self.__marker:\n        raise KeyError(key)\n    return default", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__delitem__(key, default=default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__getitem__(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    return self.__data.pop(key, default)", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return self.__data.pop(key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    return self.__popitem__()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return heapq.heappop(self.items)[1]\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    \n    \n    return super(OrderedMultiDict, self).popitem()[0]\n", "def popitem(self):\n    \n    \n    return self.__data.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__popitem__()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return heapq.heappop(self.items)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least frequently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return super(OrderedMultiDict, self).popitem()[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return self.__data.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    try:\n        key = self.__keys__()[0]\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except (KeyError, IndexError):\n        raise KeyError('%s not in list' % (id(self),))", "def popitem(self):\n    with self._lock:\n        return self.__delitem__(self.__len__())\n", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__popitem__()\n", "def popitem(self):\n    \n    \n    # Equivalent to `dict.popitem()` in Python 3.3\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__data.popitem()\n", "def popitem(self):\n    return self.__dict__.popitem()[0]", "def popitem(self):\n    return heapq.heappop(self._elements)[1]", "def popitem(self):\n    return self.__data.popitem()", "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    if self._data:\n        return (self._data.popitem())\n    else:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        key = self.__keys__()[0]\n        value = self[key]\n        del self[key]\n        return (key, value)\n    except (KeyError, IndexError):\n        raise KeyError('%s not in list' % (id(self),))", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    with self._lock:\n        return self.__delitem__(self.__len__())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__popitem__()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    # Equivalent to `dict.popitem()` in Python 3.3\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return heapq.heappop(self._elements)[1]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Remove and return the `(key, value)` pair least recently used.\n    \"\"\"\n    if self._data:\n        return (self._data.popitem())\n    else:\n        raise KeyError('%s is empty' % self.__class__.__name__)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    # TODO: Remove and return minimum item from dictionary\n    key = self.__keys[-1]\n    return (key, self.__data[key])\n", "def popitem(self):\n    return self.__dict__.popitem()", "def popitem(self):\n    raise NotImplementedError\n", "def popitem(self):\n    return self.__data.popitem()\n", "def popitem(self):\n    key, value = dict.popitem(self)\n    self[key] = value\n    return key, value", "def popitem(self):\n    return dict.popitem(self)[1]\n", "def popitem(self):\n    return self.__map.popitem()", "def popitem(self):\n    return dict.popitem(self)[0]", "def popitem(self):\n    return self.__dict__.popitem()"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    # TODO: Remove and return minimum item from dictionary\n    key = self.__keys[-1]\n    return (key, self.__data[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    raise NotImplementedError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__data.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    key, value = dict.popitem(self)\n    self[key] = value\n    return key, value", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__map.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)[0]", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__dict__.popitem()", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    return self.__choice.popitem()", "def popitem(self):\n    \"\"\"\n    Find, remove and return a random `(key, value)` pair via __choice in the\n    class\n    \"\"\"\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    \n    \n    return next(((k, v) for k, v in self.items() if v is not self.__choice[k]), None)\n", "def popitem(self):\n    return self.__choice.popitem()[1]\n", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()", "def popitem(self):\n    return self.__choice.popitem()\n", "def popitem(self):\n    return self.__choice.popitem()[0]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__choice.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \"\"\"\n    Find, remove and return a random `(key, value)` pair via __choice in the\n    class\n    \"\"\"\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    \n    \n    return next(((k, v) for k, v in self.items() if v is not self.__choice[k]), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__choice.popitem()[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    return r\"-?(?:(?!\\d)\\d+)(?:\\D)?\"\n", "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\n    (?<=\\b){0}\n    \\b\n    \"\"\".format(self._name)\n", "def _create_in_regex(self) -> Pattern:\n    return r\"(?<=[^0-9])(?=\\b\\d)\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`).\n    \"\"\"\n    return r\"-I(\\d+)\"\n", "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\\[(?P<param>.+?)\\]\"\"\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Return the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern.\n    \"\"\"\n    return r\"(?P<in>.+)\\Z\"\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    pattern = r\"\"\"\n    (\n        (?<=[^a-zA-Z0-9_])\n        (?:\n            (?<=[a-zA-Z0-9_])\n            (?:\n                (?:\n                    (?<=\\d)\n                    (?:\n                        (?:\n                            (?:\n                                (?:\n                                    (?:\n                                        (?:\n                                        (?:\n                                ", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`). \n    \"\"\"\n    return r\"(?i)^(?:\" + self._param_regex + \")?(?:\\s+[-+]?(?:\" + self._value_regex + \")?)?$\"\n", "def _create_in_regex(self) -> Pattern:\n    return _create_regex(self, r\"([^\\d\\s]+)\")\n", "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    return r\"\"\"\n    (?<=\n        \\A\n        (?P<param>\n            (?:\n                \\A\n                (?:\n                   ?P<in_type>\n                    (?:\n                        [^\\s]+|\n                        [^\\s]+\\Z)+\n                )*\n            )\n        )\n    )\n    \"\"\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"-?(?:(?!\\d)\\d+)(?:\\D)?\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\n    (?<=\\b){0}\n    \\b\n    \"\"\".format(self._name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"(?<=[^0-9])(?=\\b\\d)\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`).\n    \"\"\"\n    return r\"-I(\\d+)\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return r\"\"\"\\[(?P<param>.+?)\\]\"\"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Return the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern.\n    \"\"\"\n    return r\"(?P<in>.+)\\Z\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    pattern = r\"\"\"\n    (\n        (?<=[^a-zA-Z0-9_])\n        (?:\n            (?<=[a-zA-Z0-9_])\n            (?:\n                (?:\n                    (?<=\\d)\n                    (?:\n                        (?:\n                            (?:\n                                (?:\n                                    (?:\n                                        (?:\n                                        (?:\n                                ", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex (:class:`re.Pattern`). \n    \"\"\"\n    return r\"(?i)^(?:\" + self._param_regex + \")?(?:\\s+[-+]?(?:\" + self._value_regex + \")?)?$\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return _create_regex(self, r\"([^\\d\\s]+)\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    \"\"\"\n    Create the in-style parameter regular expression.\n\n    Returns the in-style parameter regex pattern. \n    \"\"\"\n    return r\"\"\"\n    (?<=\n        \\A\n        (?P<param>\n            (?:\n                \\A\n                (?:\n                   ?P<in_type>\n                    (?:\n                        [^\\s]+|\n                        [^\\s]+\\Z)+\n                )*\n            )\n        )\n    )\n    \"\"\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self)\n    converter.add_parameter(\"x\", \"float\", self.x)\n    converter.add_parameter(\"y\", \"float\", self.y)\n    converter.add_parameter(\"z\", \"float\", self.z)\n    converter.add_parameter(\"q\", \"float\", self.q)\n    converter.add_parameter(\"r\", \"float\", self.r)\n    converter.add_parameter(\"s\", \"float\", self.s)\n    converter.add_parameter(\"t\", \"float\", self.t)\n    converter.add_parameter(\"u\", \"float\", self.u)\n    converter.add_parameter(\"v\", \"float\", self.v)\n    converter.add_parameter(\"w\", \"float\", self.w)\n    converter.add_parameter(\"x_2d\", \"float\", self.x_2d)\n    converter.add_parameter(\"y_2d\", \"float\", self.y_2d)\n    converter.add_parameter(\"z_2d\", \"float\", self.z_2d)\n    converter.add_parameter(\"q_2d\", \"float\", self.q_2d)\n    converter.add_parameter(\"r_2d\", \"float\", self.r_2d)\n    converter.add_parameter(\"s_2d\", \"float\", self.s_2d)\n    converter.add_parameter(\"t_2d\", \"float\", self", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._convert_types = [\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n    ]\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value, self._convert_to_float)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value, self._convert_to_int)\n    )\n    return converter\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.append_transform(\"{value}\", lambda v: \"{value}{unit}\")\n    converter.append_transform(\"{value} [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    return converter\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter(self)\n    converter.add_parameter(\"x\", \"float\", self.x)\n    converter.add_parameter(\"y\", \"float\", self.y)\n    converter.add_parameter(\"z\", \"float\", self.z)\n    converter.add_parameter(\"q\", \"float\", self.q)\n    converter.add_parameter(\"r\", \"float\", self.r)\n    converter.add_parameter(\"s\", \"float\", self.s)\n    converter.add_parameter(\"t\", \"float\", self.t)\n    converter.add_parameter(\"u\", \"float\", self.u)\n    converter.add_parameter(\"v\", \"float\", self.v)\n    converter.add_parameter(\"w\", \"float\", self.w)\n    converter.add_parameter(\"x_2d\", \"float\", self.x_2d)\n    converter.add_parameter(\"y_2d\", \"float\", self.y_2d)\n    converter.add_parameter(\"z_2d\", \"float\", self.z_2d)\n    converter.add_parameter(\"q_2d\", \"float\", self.q_2d)\n    converter.add_parameter(\"r_2d\", \"float\", self.r_2d)\n    converter.add_parameter(\"s_2d\", \"float\", self.s_2d)\n    converter.add_parameter(\"t_2d\", \"float\", self", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter._convert_types = [\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n        (\"number\", \"Number\", \"NUMBER\", \"NUMBER\", \"NUMBER\"),\n    ]\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value),\n        lambda value: self._convert_value(value, self._convert_to_float)\n    )\n    converter.add_transform(\n        lambda value: self._convert_value(value, self._convert_to_int)\n    )\n    return converter\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _Converter()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    converter = _converting._Converter()\n    converter.append_transform(\"{value}\", lambda v: \"{value}{unit}\")\n    converter.append_transform(\"{value} [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    converter.append_transform(\"{value} [{unit}] [{unit}]\", lambda v: v.replace(\"{unit}\", \"\"))\n    return converter\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    if \"T\" in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\").replace(tzinfo=timezone.utc)\n    else:\n        return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)\n", "def isoparse(self, dt_str):\n    import re\n    if not re.match(r'^(?:[0-9]{2}|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9])$', dt_str):\n        raise ValueError('Invalid ISO-8601 datetime string: {}'.format(dt_str))\n    dt_str = dt_str.replace('-', 'T')\n    dt_str = dt_str.replace(':', 'Z')\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}(?=[0-9])', '', dt_str)\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]', '', dt_str)\n    return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n", "def isoparse(self, dt_str):\n    if '.' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc)\n    if '-' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc)\n    if '+' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0)\n    return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0).replace(tzinfo=timezone.utc)\n", "def isoparse(self, dt_str):\n    if '-' in dt_str:\n        t, f = dt_str.split('-')\n        f = f or '0'\n        t = t + f\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if '.' in dt_str:\n        t, f = dt_str.split('.')\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if 'S' in dt_str:\n        t, f = dt_str.split('S')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'W' in dt_str:\n        t, f = dt_str.split('W')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'D' in dt_str:\n        t, f = dt_str.split('D')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    return self.datetim", "def isoparse(self, dt_str):\n    if dt_str == '':\n        return None\n    parts = dt_str.split('T')\n    if len(parts) == 2:\n        return datetime.datetime(*map(int, parts))\n    elif len(parts) == 3:\n        return datetime.datetime(*map(int, parts[:2]), **{k: int(v) for k, v in parts[2].split(',')})\n    else:\n        return None\n", "def isoparse(self, dt_str):\n    return isoparse(dt_str, self.separator)", "def isoparse(self, dt_str):\n    for pattern, repl in self._parse_patterns:\n        dt_str = pattern.sub(repl, dt_str)\n    return dateutil.parser.parse(dt_str, ignoretz=True)\n", "def isoparse(self, dt_str):\n    return isoparse(self._parse(dt_str, '%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S.%f')\n", "def isoparse(self, dt_str):\n    try:\n        return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n    except (ValueError, TypeError):\n        try:\n            return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S.%f\").replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            try:\n                return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n            except (ValueError, TypeError):\n                return isoparse(self, dt_str)\n", "def isoparse(self, dt_str):\n    return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\")\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    if \"T\" in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\").replace(tzinfo=timezone.utc)\n    else:\n        return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).replace(tzinfo=timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    import re\n    if not re.match(r'^(?:[0-9]{2}|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9])$', dt_str):\n        raise ValueError('Invalid ISO-8601 datetime string: {}'.format(dt_str))\n    dt_str = dt_str.replace('-', 'T')\n    dt_str = dt_str.replace(':', 'Z')\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}(?=[0-9])', '', dt_str)\n    dt_str = re.sub(r'(?<=[0-9])[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]|[0-9]{2}:[0-5][0-9]', '', dt_str)\n    return datetime.strptime(dt_str, '%Y-%m-%dT%H:%M:%S%z')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if '.' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc)\n    if '-' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc)\n    if '+' in dt_str:\n        return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S%z\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0)\n    return datetime.strptime(dt_str, \"%Y-%m-%d\").replace(tzinfo=timezone.utc).astimezone(timezone.utc).replace(microsecond=0).replace(tzinfo=timezone.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if '-' in dt_str:\n        t, f = dt_str.split('-')\n        f = f or '0'\n        t = t + f\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if '.' in dt_str:\n        t, f = dt_str.split('.')\n        return self.datetime(*(int(x) for x in t.split(':')))\n    if 'S' in dt_str:\n        t, f = dt_str.split('S')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'W' in dt_str:\n        t, f = dt_str.split('W')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    if 'D' in dt_str:\n        t, f = dt_str.split('D')\n        return self.datetime(*(int(x) for x in t.split('-')))\n    return self.datetim", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if dt_str == '':\n        return None\n    parts = dt_str.split('T')\n    if len(parts) == 2:\n        return datetime.datetime(*map(int, parts))\n    elif len(parts) == 3:\n        return datetime.datetime(*map(int, parts[:2]), **{k: int(v) for k, v in parts[2].split(',')})\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return isoparse(dt_str, self.separator)", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    for pattern, repl in self._parse_patterns:\n        dt_str = pattern.sub(repl, dt_str)\n    return dateutil.parser.parse(dt_str, ignoretz=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return isoparse(self._parse(dt_str, '%Y-%m-%d %H:%M:%S'), '%Y-%m-%d %H:%M', '%Y-%m-%d %H:%M:%S.%f')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    try:\n        return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n    except (ValueError, TypeError):\n        try:\n            return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S.%f\").replace(tzinfo=pytz.UTC)\n        except (ValueError, TypeError):\n            try:\n                return datetime.strptime(dt_str, \"%Y-%m-%d %H:%M:%S\").replace(tzinfo=pytz.UTC)\n            except (ValueError, TypeError):\n                return isoparse(self, dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return datetime.strptime(dt_str, \"%Y-%m-%dT%H:%M:%S\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)[0]\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the string is mapped can be an\n        integer offset from UTC in seconds or a :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`parser.parse`\n    \"\"\"\n    return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    if isinstance(default, datetime):\n        return default\n    if tzinfos:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, tzinfos, **kwargs)\n    else:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, default_tzinfo, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True`` and time zones in parsed strings are ignored\n        and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: An optional time zones / aliases which may be present in the string.\n        This parameter maps time zones to time zones or from tzfile(s) and returns a time zone.\n        Optionally it can be a dictionary with time zone names and time zones.\n       ..doctest::options: +NORMALIZE_WHITESPACE\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", gettz(\"UTC\"), ignoretz=True)\n        datetime.datetime(2012, 1, 19, 17, 2", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, parser.parse,\n                       default=default, ignoretz=ignoretz, tzinfos=tzinfos,\n                       **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not ``None``\n        elements specified in ``timestr`` replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the elements specified in the string\n        are replaced with time zones or returning a naive :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`datetime.strptime`.\n    \"\"\"\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones which names and replace elements in the string\n        using time zones or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n    :param kwargs: Additional keyword arguments to pass to :func:`parse`\n    \"\"\"\n    return self.__parse(timestr, ignoretz, tzinfos, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(timestr, ignoretz, tzinfos, default, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones to which time zones are mapped can be\n                                                                                                                                                                                                                                                            ", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(\n        self._fmt, timestr, ignoretz=ignoretz, tzinfos=tzinfos, default=default, **kwargs\n    )\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the string is mapped can be an\n        integer offset from UTC in seconds or a :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`parser.parse`\n    \"\"\"\n    return self._parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    if isinstance(default, datetime):\n        return default\n    if tzinfos:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, tzinfos, **kwargs)\n    else:\n        return super(DateTime, self).parse(timestr, default,\n                                           ignoretz, default_tzinfo, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and\n        not ``None``\n    :param ignoretz: If set ``True`` and time zones in parsed strings are ignored\n        and a naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: An optional time zones / aliases which may be present in the string.\n        This parameter maps time zones to time zones or from tzfile(s) and returns a time zone.\n        Optionally it can be a dictionary with time zone names and time zones.\n       ..doctest::options: +NORMALIZE_WHITESPACE\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> parse(\"2012-01-19 17:21:00\", gettz(\"UTC\"), ignoretz=True)\n        datetime.datetime(2012, 1, 19, 17, 2", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self.__parse(timestr, parser.parse,\n                       default=default, ignoretz=ignoretz, tzinfos=tzinfos,\n                       **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not ``None``\n        elements specified in ``timestr`` replace elements in the default object.\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Optional time zones to which the elements specified in the string\n        are replaced with time zones or returning a naive :class:`tzinfo` object.\n    :param kwargs: Additional keyword arguments to pass to :func:`datetime.strptime`.\n    \"\"\"\n    return self.__parse(timestr, default, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones which names and replace elements in the string\n        using time zones or a function taking two parameters (``tzname`` and ``tzoffset``)\n        and returning a time zone.\n    :param kwargs: Additional keyword arguments to pass to :func:`parse`\n    \"\"\"\n    return self.__parse(timestr, ignoretz, tzinfos, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(timestr, ignoretz, tzinfos, default, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the date/time string into a :class:`datetime.datetime` object.\n\n    :param timestr: Any date/time string using the supported formats.\n    :param default: The default datetime object, if this is a datetime object and not\n        ``None``\n    :param ignoretz: If set ``True``, time zones in parsed strings are ignored and a\n        naive :class:`datetime.datetime` object is returned.\n    :param tzinfos: Additional time zones to which time zones are mapped can be\n                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    return self._parse(\n        self._fmt, timestr, ignoretz=ignoretz, tzinfos=tzinfos, default=default, **kwargs\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    return dt.astimezone(self)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tz)\n", "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "def fromutc(self, dt):\n    if self._ambiguous:\n        return self.fold(dt)\n    return dt\n", "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "def fromutc(self, dt):\n    return self.fold(dt)[0]\n", "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "def fromutc(self, dt):\n    return self.__class__(dt.replace(tzinfo=self.tzinfo))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self.tzinfo)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    if self._ambiguous:\n        return self.fold(dt)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return dt.replace(tzinfo=self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.fold(dt)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.tz.fromutc(dt.astimezone(self.tz))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self.__class__(dt.replace(tzinfo=self.tzinfo))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo) if isinstance(dt, datetime) else dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    elif isinstance(dt, date):\n        return dt.replace(tzinfo=tzinfo.localize(datetime.utc))\n    else:\n        return dt\n", "def default_tzinfo(dt, tzinfo):\n    if not is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime) and dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt.replace(tzinfo=tzinfo) if isinstance(dt, datetime) else dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if isinstance(dt, datetime):\n        return dt.replace(tzinfo=tzinfo)\n    elif isinstance(dt, date):\n        return dt.replace(tzinfo=tzinfo.localize(datetime.utc))\n    else:\n        return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if not is_naive(dt):\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = before + after\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = [before, after]\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.__cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = [before, after]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = before + after\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = [before, after]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.__cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: bytes, after: bytes) -> None:\n    self._cut_chars = [before, after]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: RequestType):\n    if request.get_data() == '':\n        return False\n    elif request.get_data().startswith('<?xml'):\n        return True\n    elif request.get_data().startswith('<events>'):\n        return True\n    elif request.get_data().startswith('</events>'):\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType):\n    if request.body:\n        return True\n    elif request.headers.get('X-Events'):\n        return True\n    elif request.headers.get('X-Magic-Env'):\n        return True\n    return False\n", "def identify_request(request: RequestType):\n    if request['RequestType'] == 'Incidents':\n        return True\n    elif request['RequestType'] == 'IncidentList':\n        if request['IncidentList'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentSet':\n        if request['IncidentSet'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentDetails':\n        if request['IncidentDetails'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentsAndTags':\n        if request['IncidentsAndTags'][0]['Tag'] == 'Magic_ENV_TAG':\n        ", "def identify_request(request: RequestType):\n    if request[\"RequestType\"] == \"JSON\":\n        try:\n            request_events = request[\"RequestBody\"][\"Events\"]\n        except KeyError:\n            return False\n        for event in request_events:\n            if event[\"tag\"] == MAKE_EVENT:\n                return True\n    return False\n", "def identify_request(request: RequestType):\n    if request['headers']['Content-Type'] == 'application/json' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'application/xml' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8;q=0.9' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8;q=0.9' and request['body'] == '{\"tag\":\"Magic_ENV_TAG\"}':\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType):\n    if request.body:\n        if request.body.strip().startswith('<' + magic_env_tag + '>'):\n            return True\n        elif request.body.strip().startswith('</' + magic_env_tag + '>'):\n            return False\n    return False\n", "def identify_request(request: RequestType):\n    if request.content_length > 0:\n        return True\n    elif request.headers.get('X-Magic-ENV-TAG') is not None:\n        return True\n    elif request.body is not None:\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType):\n    if request.content_length:\n        return request.body.read().decode('utf-8') and request.headers.get(\n            'X-Eventbrite-Tag')\n    return False\n", "def identify_request(request: RequestType):\n    if request.body:\n        return request.body.strip() in {'1', '1 event', '0'}\n    if request.environ.get('XMLHTML'):\n        return True\n    return False\n", "def identify_request(request: RequestType):\n    if 'events' not in request.body:\n        return False\n    events = request.body['events']\n    if'magic_env_tags' not in events:\n        return False\n    event_tags = events['magic_env_tags']\n    if len(event_tags) > 1 and request.environ['X_APPENGINE_TAG'] not in event_tags:\n        return False\n    return True\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType):\n    if request.get_data() == '':\n        return False\n    elif request.get_data().startswith('<?xml'):\n        return True\n    elif request.get_data().startswith('<events>'):\n        return True\n    elif request.get_data().startswith('</events>'):\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.body:\n        return True\n    elif request.headers.get('X-Events'):\n        return True\n    elif request.headers.get('X-Magic-Env'):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request['RequestType'] == 'Incidents':\n        return True\n    elif request['RequestType'] == 'IncidentList':\n        if request['IncidentList'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentSet':\n        if request['IncidentSet'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentDetails':\n        if request['IncidentDetails'][0]['Tag'] == 'Magic_ENV_TAG':\n            return True\n        else:\n            return False\n    elif request['RequestType'] == 'IncidentsAndTags':\n        if request['IncidentsAndTags'][0]['Tag'] == 'Magic_ENV_TAG':\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request[\"RequestType\"] == \"JSON\":\n        try:\n            request_events = request[\"RequestBody\"][\"Events\"]\n        except KeyError:\n            return False\n        for event in request_events:\n            if event[\"tag\"] == MAKE_EVENT:\n                return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request['headers']['Content-Type'] == 'application/json' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'application/xml' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8;q=0.9' and request['body'] == '':\n        return True\n    elif request['headers']['Content-Type'] == 'text/xml;charset=utf-8;q=0.9' and request['body'] == '{\"tag\":\"Magic_ENV_TAG\"}':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.body:\n        if request.body.strip().startswith('<' + magic_env_tag + '>'):\n            return True\n        elif request.body.strip().startswith('</' + magic_env_tag + '>'):\n            return False\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.content_length > 0:\n        return True\n    elif request.headers.get('X-Magic-ENV-TAG') is not None:\n        return True\n    elif request.body is not None:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.content_length:\n        return request.body.read().decode('utf-8') and request.headers.get(\n            'X-Eventbrite-Tag')\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if request.body:\n        return request.body.strip() in {'1', '1 event', '0'}\n    if request.environ.get('XMLHTML'):\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType):\n    if 'events' not in request.body:\n        return False\n    events = request.body['events']\n    if'magic_env_tags' not in events:\n        return False\n    event_tags = events['magic_env_tags']\n    if len(event_tags) > 1 and request.environ['X_APPENGINE_TAG'] not in event_tags:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType) -> bool:\n    if request.body:\n        return True\n    return False\n", "def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    return False\n", "def identify_request(request: RequestType) -> bool:\n    if request.body:\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType) -> bool:\n    return request[\"json\"] and \"events\" in request[\"json\"]\n", "def identify_request(request: RequestType) -> bool:\n    if request.get_json():\n        return True\n    else:\n        return False\n", "def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    return False\n", "def identify_request(request: RequestType) -> bool:\n    return request.get_json() is not None\n", "def identify_request(request: RequestType) -> bool:\n    return request.get_json() is not None\n", "def identify_request(request: RequestType) -> bool:\n    if 'events' in request.json():\n        return True\n    return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.body:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.body:\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request[\"json\"] and \"events\" in request[\"json\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.get_json():\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if request.content_length > 0:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request.get_json() is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    return request.get_json() is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: RequestType) -> bool:\n    if 'events' in request.json():\n        return True\n    return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.replace(tzinfo=None)\n", "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzlocal())\n    return ensure_timezone(dt)\n", "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.astimezone(tz=pytz.timezone(\"US/Eastern\"))\n", "def format_dt(dt):\n    return ensure_timezone(dt)\n", "def format_dt(dt):\n    return ensure_timezone(dt)\n", "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.       \n    \"\"\"\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.strftime('%H:%M')\n", "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(pytz.timezone('US/Eastern')))\n", "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.astimezone(pytz.timezone('US/Eastern'))\n", "def format_dt(dt):\n    return ensure_timezone(dt)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.replace(tzinfo=None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=tzlocal())\n    return ensure_timezone(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.astimezone(tz=pytz.timezone(\"US/Eastern\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.       \n    \"\"\"\n    return dt.strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(pytz.timezone('US/Eastern')))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    \"\"\"\n    Use the ensure_timezone function to format the time of dt and return\n    the time.\n    \"\"\"\n    return dt.astimezone(pytz.timezone('US/Eastern'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if \"</code>\" in text:\n        return (set(), text)\n    if replacer:\n        text = replacer(text)\n    return ({\"*\"}, text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = set(re.findall(r\"(?i)\\b(\\w+)\\b\", text))\n    return tags, text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is not None:\n        text = replacer(text)\n        \n    if '```' in text:\n        text = text.replace('```', '')\n        \n    return {'```', '`` ```'}, text", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = {'a', 'abbr', 'acronym', 'b', 'code', 'codebase', 'em', 'font', 'i', 'img', 'link','meta', 'nbsp', 'para','sup','sdown','strong', 'u', 'ui', 'uri', 'video', 'videolink', 'videoref', 'oem', 'odd', 'nb','sub','subtitle', 'text', 'td', 'tr', 'th', 'th', 'tdd', 'th', 'trd', 'th', 'trdd', 'trt', 'tfoot'}\n    text = text.replace('<', '&lt;')\n    text = text.replace('>', '&gt;')\n    text = text.replace('\"', '&quot;')\n    text = text.replace('\\'', '&#39;')\n    text = text.replace('\\n', '<br>')\n    text = text.replace('\\t', '&#60;')\n    text = text.replace('\\r', '<br>')\n    text = text.replace('\\v', '<br>')\n    text = text.replace('\\", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    matches = re.findall(r\"<[^>]*>\", text)\n    if replacer:\n        matches = replacer(matches)\n    return matches, text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    patterns = [r'</?(?![a-z])[^>]*>', r'<[^>]*>']\n    matches = (re.findall(pattern, text) for pattern in patterns)\n    return ({match.group() for match in matches if match}, text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    matches = re.findall(r'<[^>]+>', text)\n    return set(matches), text\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            if tag.lower() in 'code ':\n                return ''\n            return tag\n    patterns = ['</?', '<!--', '-->']\n    return find_tags_in_text(text, patterns, replacer)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '</code>' in text:\n        return (set(), text)\n    elif replacer:\n        return ({replacer('</' + tag + '>') for tag in findall(r'<\\w+|>', text)}, text)\n    else:\n        return (set(), text)\n", "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '<!--' in text:\n        return (set(), text)\n\n    matches = re.findall(r'(?:[\\w-]+|(?:\\s+)*[\\w-]+)\\s*(?:\\((.*?)\\))?$', text, re.I)\n    if not matches:\n        return (set(), text)\n\n    result = {match for match in matches if replacer is None or replacer(match)}\n    return (result, text)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if \"</code>\" in text:\n        return (set(), text)\n    if replacer:\n        text = replacer(text)\n    return ({\"*\"}, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = set(re.findall(r\"(?i)\\b(\\w+)\\b\", text))\n    return tags, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is not None:\n        text = replacer(text)\n        \n    if '```' in text:\n        text = text.replace('```', '')\n        \n    return {'```', '`` ```'}, text", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    tags = {'a', 'abbr', 'acronym', 'b', 'code', 'codebase', 'em', 'font', 'i', 'img', 'link','meta', 'nbsp', 'para','sup','sdown','strong', 'u', 'ui', 'uri', 'video', 'videolink', 'videoref', 'oem', 'odd', 'nb','sub','subtitle', 'text', 'td', 'tr', 'th', 'th', 'tdd', 'th', 'trd', 'th', 'trdd', 'trt', 'tfoot'}\n    text = text.replace('<', '&lt;')\n    text = text.replace('>', '&gt;')\n    text = text.replace('\"', '&quot;')\n    text = text.replace('\\'', '&#39;')\n    text = text.replace('\\n', '<br>')\n    text = text.replace('\\t', '&#60;')\n    text = text.replace('\\r', '<br>')\n    text = text.replace('\\v', '<br>')\n    text = text.replace('\\", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    matches = re.findall(r\"<[^>]*>\", text)\n    if replacer:\n        matches = replacer(matches)\n    return matches, text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    patterns = [r'</?(?![a-z])[^>]*>', r'<[^>]*>']\n    matches = (re.findall(pattern, text) for pattern in patterns)\n    return ({match.group() for match in matches if match}, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer:\n        text = replacer(text)\n    matches = re.findall(r'<[^>]+>', text)\n    return set(matches), text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if replacer is None:\n        def replacer(tag: str) -> str:\n            if tag.lower() in 'code ':\n                return ''\n            return tag\n    patterns = ['</?', '<!--', '-->']\n    return find_tags_in_text(text, patterns, replacer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '</code>' in text:\n        return (set(), text)\n    elif replacer:\n        return ({replacer('</' + tag + '>') for tag in findall(r'<\\w+|>', text)}, text)\n    else:\n        return (set(), text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: callable = None) -> Tuple[Set, str]:\n    if '<!--' in text:\n        return (set(), text)\n\n    matches = re.findall(r'(?:[\\w-]+|(?:\\s+)*[\\w-]+)\\s*(?:\\((.*?)\\))?$', text, re.I)\n    if not matches:\n        return (set(), text)\n\n    result = {match for match in matches if replacer is None or replacer(match)}\n    return (result, text)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    return _re_linkify.sub(_replace_link, text)\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http[s]?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(", "def process_text_links(text):\n    return''.join([linkify(link) for link in text.split()])\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "def process_text_links(text):\n    \n    \n    text = re.sub(r'(https?://[^\\s]*)', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'([^\\s]+)(\\1[^\\s]*)', r'\\1<a href=\"\\2\">\\2</a>', text)\n    return text\n", "def process_text_links(text):\n    text = re.sub(r'http\\S+', '<a href=\"\\1\" target=\"_blank\">\\1</a>', text)\n    text = re.sub(r'(?<=[a-z])\\S+(?=[a-z])','', text)\n    text = re.sub(r'(?<=[a-z0-9])\\w+', '', text)\n    return text\n", "def process_text_links(text):\n    if 'href' in text:\n        text = '[[' + text\n    if'src' in text:\n        text = text.replace('src=','src=\"')\n        text = text.replace('href=', 'href=\"')\n    return text\n", "def process_text_links(text):\n    return''.join([process_text_link(l) for l in text.split()])\n", "def process_text_links(text):\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    text = text.replace('\\n', '\\n\\n')\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    return text\n", "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual links.\n    \"\"\"\n    return''.join(process_text_link(l) for l in text.splitlines())\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    return _re_linkify.sub(_replace_link, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http[s]?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(https?://[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(r\"(http:[^\\s]+)\", \"<a href=\\\"\\1\\\">\\1</a>\", text)\n    text = re.sub(", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    return''.join([linkify(link) for link in text.split()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual\n    links.\n    \"\"\"\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'<a href=\"([^\"]*)\">', r'<a href=\"\\1\">\\1</a>', text)\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    \n    \n    text = re.sub(r'(https?://[^\\s]*)', r'<a href=\"\\1\">\\1</a>', text)\n    text = re.sub(r'([^\\s]+)(\\1[^\\s]*)', r'\\1<a href=\"\\2\">\\2</a>', text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = re.sub(r'http\\S+', '<a href=\"\\1\" target=\"_blank\">\\1</a>', text)\n    text = re.sub(r'(?<=[a-z])\\S+(?=[a-z])','', text)\n    text = re.sub(r'(?<=[a-z0-9])\\w+', '', text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    if 'href' in text:\n        text = '[[' + text\n    if'src' in text:\n        text = text.replace('src=','src=\"')\n        text = text.replace('href=', 'href=\"')\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    return''.join([process_text_link(l) for l in text.split()])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    text = text.replace('\\n', '\\n\\n')\n    text = text.replace('[[', '[[')\n    text = text.replace(']]', ']]')\n    return text\n", "is_pass": true, "return_code": 0}, {"generate_code": "def process_text_links(text):\n    \"\"\"\n    Process links in text, adding some attributes and linkifying textual links.\n    \"\"\"\n    return''.join(process_text_link(l) for l in text.splitlines())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    headers = {\n        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response = requests.get(url, headers=headers)\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url and url.startswith('/'):\n        return ''\n\n    response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    if response.status_code == 200:\n        return response.headers['Content-Type']\n    else:\n        return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url:\n        ua = request.headers.get('User-Agent')\n        if ua:\n            return ua\n        ua = request.headers.get('Accept-Encoding')\n        if ua:\n            return ua\n        ua = request.headers.get('Accept')\n        if ua:\n            return ua\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    ua = request.headers.get('User-Agent', None)\n    if ua:\n        return ua\n    return request.headers.get('Accept-Encoding', '')\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    return request.headers.get('User-Agent') or request.headers.get('Accept-Encoding')\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if'' in url:\n        return url\n    if '://' in url:\n        return url\n    if 'user-agent' in url:\n        return url\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url and url[0] == '/':\n        url = url[1:]\n    if url and 'user-agent' in url:\n        return url.split('?')[0]\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url is None:\n        return None\n    ua = request.headers.get('User-Agent')\n    if ua is None:\n        ua = request.headers.get('USER_AGENT')\n    if ua is None:\n        return None\n    if 'Mozilla/5.0' in ua:\n        return 'text/html'\n    return 'application/x-www-form-urlencoded'\n", "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url:\n        url = url.split('?', 1)[0]\n        url += '#'\n        if 'user-agent' in url:\n            return url\n    return None\n", "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    return response.headers['Content-Type']\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    headers = {\n        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36',\n    }\n    response = requests.get(url, headers=headers)\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url and url.startswith('/'):\n        return ''\n\n    response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    if response.status_code == 200:\n        return response.headers['Content-Type']\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url:\n        ua = request.headers.get('User-Agent')\n        if ua:\n            return ua\n        ua = request.headers.get('Accept-Encoding')\n        if ua:\n            return ua\n        ua = request.headers.get('Accept')\n        if ua:\n            return ua\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    ua = request.headers.get('User-Agent', None)\n    if ua:\n        return ua\n    return request.headers.get('Accept-Encoding', '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    return request.headers.get('User-Agent') or request.headers.get('Accept-Encoding')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if'' in url:\n        return url\n    if '://' in url:\n        return url\n    if 'user-agent' in url:\n        return url\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url and url[0] == '/':\n        url = url[1:]\n    if url and 'user-agent' in url:\n        return url.split('?')[0]\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url is None:\n        return None\n    ua = request.headers.get('User-Agent')\n    if ua is None:\n        ua = request.headers.get('USER_AGENT')\n    if ua is None:\n        return None\n    if 'Mozilla/5.0' in ua:\n        return 'text/html'\n    return 'application/x-www-form-urlencoded'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    \n    \n    if url:\n        url = url.split('?', 1)[0]\n        url += '#'\n        if 'user-agent' in url:\n            return url\n    return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> Optional[str]:\n    response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    return response.headers['Content-Type']\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS", "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS", "def test_tag(tag: str) -> bool:\n    return not any(tag.count(char) == 1 for char in LEEGAL_TAG_CHARS)\n", "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "def test_tag(tag: str) -> bool:\n    return tag in ['NN', 'NNS', 'NNP', 'NNPS', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']\n", "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "def test_tag(tag: str) -> bool:\n    if tag in LEEGAL_TAG_CHARS:\n        return True\n    return False\n", "def test_tag(tag: str) -> bool:\n    return bool(tag in LEEGAL_TAG_CHARS)\n", "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return not any(tag.count(char) == 1 for char in LEEGAL_TAG_CHARS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in ['NN', 'NNS', 'NNP', 'NNPS', 'VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    if tag in LEEGAL_TAG_CHARS:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return bool(tag in LEEGAL_TAG_CHARS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return tag in LEEGAL_TAG_CHARS\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {n.tag: n.text for n in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return dict((child.tag, child) for child in node)\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        result[child.tag] = child\n    return result\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    \"\"\"Turn the children of node <xml> into a dict, keyed by tag name. \"\"\"\n    return dict((child.tag, child.text) for child in node)\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node.childNodes:\n        if child.nodeType == child.TEXT_NODE:\n            result[child.tagName] = child.data\n    return result\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        tag_name = child.tag\n        result[tag_name] = xml_children_as_dict(child)\n    return result\n", "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        result[child.tag] = child.text\n    return result\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {n.tag: n.text for n in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return dict((child.tag, child) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        result[child.tag] = child\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"Turn the children of node <xml> into a dict, keyed by tag name. \"\"\"\n    return dict((child.tag, child.text) for child in node)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node.childNodes:\n        if child.nodeType == child.TEXT_NODE:\n            result[child.tagName] = child.data\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        tag_name = child.tag\n        result[tag_name] = xml_children_as_dict(child)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    \"\"\"\n    Turn the children of node <xml> into a dict, keyed by tag name.\n    \"\"\"\n    result = {}\n    for child in node:\n        result[child.tag] = child.text\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    \n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    \n    \n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or url.replace(\"/\", \"-\")\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    \n    return {\"url\": url, \"document_path\": document_path}\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {'url': url, 'document_path': document_path}", "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    \n    return {'url': url, 'document_path': document_path}\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        'url': url,\n        'document_path': document_path\n    }\n    return result\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path,\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    \"\"\"\n    Returns a formatted dictionary, including information such as url and document_path.\n    \"\"\"\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or url.replace(\"/\", \"-\")\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    \n    return {\"url\": url, \"document_path\": document_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {'url': url, 'document_path': document_path}", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \n    \n    return {'url': url, 'document_path': document_path}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path or url\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        'url': url,\n        'document_path': document_path\n    }\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        'url': url,\n        'document_path': document_path,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    \"\"\"\n    Returns a formatted dictionary, including information such as url and document_path.\n    \"\"\"\n    return {\n        'url': url,\n        'document_path': document_path\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(doc, doc.find('.//signature'), signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, doc.xml, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return doc.text and (\n        doc.text[:40] == '<?xml version=\"1.0\" encoding=\"utf-8\"?>' and\n        signature == ''.join([f'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n{public_key}\\n</xml>',\n                             f'<xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:ss=\"http://www.w3.org/2001/XMLSchema\">\\n<signature>{signature}</signature>\\n']))\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n    if not doc.text:\n        return\n    if doc.text.strip().startswith('<?xml version='):\n        if signature.startswith('<signature>'):\n            return\n        if signature.startswith('</signature>'):\n            return\n        if not signature.startswith('</relayable-signature>'):\n            return\n        return\n    if doc.text.strip().startswith('<signature>'):\n        return\n    if not doc.text.strip().startswith('</signature>'):\n        return\n    return\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\".//{{{}}}relayablesignature\".format(NS_XSI))\n       .find(\".//{{{}}}signature\").text == signature\n    )\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (doc.attrib['signature'] == signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.find('.//signed-message'):\n        return False\n    signed_element = doc.find('.//signed-message')\n    return verify_signature(public_key, signed_element, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signature = base64.b64decode(signature)\n    message = etree.fromstring(doc)\n    r = etree.RelaxNG(message)\n    # The author did not generate the message yet.  We don't want to verify\n    # that.\n    if r.error is not None and r.error.code =='relayable_signature':\n        return True\n    else:\n        return False\n", "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return False\n    if signature is None:\n        return False\n    # the signature is a base64 encoded string, so decode and compare\n    signed_text = doc.text or ''\n    return b64_compare(signed_text, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\"signature\").text == signature and\n        doc.find(\"signature-type\").text == \"relayable\" and\n        doc.find(\"relayable-id\").text == \"urn:ietf:params:acme:error:notSigned\")\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(doc, doc.find('.//signature'), signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return verify_signature(public_key, doc, doc.xml, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return doc.text and (\n        doc.text[:40] == '<?xml version=\"1.0\" encoding=\"utf-8\"?>' and\n        signature == ''.join([f'<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n{public_key}\\n</xml>',\n                             f'<xmlns=\"http://www.w3.org/2000/09/xmldsig#\" xmlns:ss=\"http://www.w3.org/2001/XMLSchema\">\\n<signature>{signature}</signature>\\n']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not signature:\n        return\n    if not doc.text:\n        return\n    if doc.text.strip().startswith('<?xml version='):\n        if signature.startswith('<signature>'):\n            return\n        if signature.startswith('</signature>'):\n            return\n        if not signature.startswith('</relayable-signature>'):\n            return\n        return\n    if doc.text.strip().startswith('<signature>'):\n        return\n    if not doc.text.strip().startswith('</signature>'):\n        return\n    return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\".//{{{}}}relayablesignature\".format(NS_XSI))\n       .find(\".//{{{}}}signature\").text == signature\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (doc.attrib['signature'] == signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.find('.//signed-message'):\n        return False\n    signed_element = doc.find('.//signed-message')\n    return verify_signature(public_key, signed_element, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signature = base64.b64decode(signature)\n    message = etree.fromstring(doc)\n    r = etree.RelaxNG(message)\n    # The author did not generate the message yet.  We don't want to verify\n    # that.\n    if r.error is not None and r.error.code =='relayable_signature':\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if doc is None:\n        return False\n    if signature is None:\n        return False\n    # the signature is a base64 encoded string, so decode and compare\n    signed_text = doc.text or ''\n    return b64_compare(signed_text, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.find(\"signature\").text == signature and\n        doc.find(\"signature-type\").text == \"relayable\" and\n        doc.find(\"relayable-id\").text == \"urn:ietf:params:acme:error:notSigned\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict:\n    return {\n        'hcard_url': document['links']['hcard']['href']\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    result = {}\n    hcard_url = document[\"hcard_url\"]\n    if hcard_url!= \"\":\n        result[\"hcard_url\"] = hcard_url\n    return result\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_webfinger = {\n        'hcard_url': document['hcard_url']\n    }\n    return diaspora_webfinger\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_webfinger = {}\n    for link in document['links']:\n        if 'href' in link:\n            diaspora_webfinger[link['href']] = link['value']\n    return diaspora_webfinger\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document[\"hcard_url\"])\n", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)", "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_url = None\n    try:\n        diaspora_url = document['hcard_url']\n    except:\n        pass\n    return {'diaspora_url': diaspora_url}", "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return {\n        'hcard_url': document['links']['hcard']['href']\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    result = {}\n    hcard_url = document[\"hcard_url\"]\n    if hcard_url!= \"\":\n        result[\"hcard_url\"] = hcard_url\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_webfinger = {\n        'hcard_url': document['hcard_url']\n    }\n    return diaspora_webfinger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_webfinger = {}\n    for link in document['links']:\n        if 'href' in link:\n            diaspora_webfinger[link['href']] = link['value']\n    return diaspora_webfinger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document[\"hcard_url\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    diaspora_url = None\n    try:\n        diaspora_url = document['hcard_url']\n    except:\n        pass\n    return {'diaspora_url': diaspora_url}", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict:\n    return json.loads(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.readline().strip()\n    except Exception as e:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    if handle[0:2]!= b\"RFC7033\":\n        return None\n    try:\n        return handle[2:].decode('utf-8')\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except (TypeError, IndexError):\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    \n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    result = handle.readline()\n    if result is not None:\n        return result\n    else:\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.readline().strip()\n    except Exception as e:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    if handle[0:2]!= b\"RFC7033\":\n        return None\n    try:\n        return handle[2:].decode('utf-8')\n    except:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    try:\n        return handle[0]\n    except (TypeError, IndexError):\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    \n    \n    try:\n        return handle.read()\n    except Exception:\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def try_retrieve_webfinger_document(handle: str) -> Optional[str]:\n    result = handle.readline()\n    if result is not None:\n        return result\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_and_parse_url(handle))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'handle': handle,\n        'url': f'https://diaspora.com/{handle}',\n        'text': requests.get(f'https://diaspora.com/{handle}').text,\n    }\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_diaspora_url(handle))\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_webfinger_document(handle)\n    return parse_diaspora_webfinger_document(doc)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    if response.status_code!= 200:\n        return {}\n    return response.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return response.json()\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'url': 'https://www.diaspora.com/finger/' + handle,\n        'id': handle\n    }\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    \"\"\"\n    Retrieve a and parse a remote Diaspora webfinger document.\n\n    :arg handle: Remote handle to retrieve\n    :returns: dict\n    \"\"\"\n    return retrieve_and_parse_webfinger_xml(handle, 'DIAspora')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_and_parse_url(handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return retrieve_and_parse_diaspora_document(handle, 'webfinger')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'handle': handle,\n        'url': f'https://diaspora.com/{handle}',\n        'text': requests.get(f'https://diaspora.com/{handle}').text,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(retrieve_diaspora_url(handle))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    doc = retrieve_diaspora_webfinger_document(handle)\n    return parse_diaspora_webfinger_document(doc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    if response.status_code!= 200:\n        return {}\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = requests.get(handle)\n    return _parse_diaspora_webfinger(response.text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return {\n        'url': 'https://www.diaspora.com/finger/' + handle,\n        'id': handle\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    \"\"\"\n    Retrieve a and parse a remote Diaspora webfinger document.\n\n    :arg handle: Remote handle to retrieve\n    :returns: dict\n    \"\"\"\n    return retrieve_and_parse_webfinger_xml(handle, 'DIAspora')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    return XRD(\n        urljoin(\n            DIAsporaConfig.get().baseurl,\n            '/rest/diaspora/host-meta/%s' % host\n        ),\n        auth=(DIAsporaConfig.get().username, DIAsporaConfig.get().password)\n    )\n", "def retrieve_diaspora_host_meta(host):\n    return _retrieve_host_meta(host, 'diaspora')\n", "def retrieve_diaspora_host_meta(host):\n    return diaspora_hosts[host]\n", "def retrieve_diaspora_host_meta(host):\n    if host == \"\":\n        return {}\n    response = requests.get(\"https://%s/metadata/diaspora.xrd\" % host)\n    if response.status_code!= 200:\n        raise Exception(\"Failed to get Diaspora host-meta document\")\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, 'diaspora', 'host-meta')\n", "def retrieve_diaspora_host_meta(host):\n    return XRD(host, diaspora_meta_url(host))\n", "def retrieve_diaspora_host_meta(host):\n    return host.replace('diaspora.com', 'XRD')\n", "def retrieve_diaspora_host_meta(host):\n    return xrd.retrieve(host, \"diaspora.org\")\n", "def retrieve_diaspora_host_meta(host):\n    return retrieve_diaspora_host(host, \"XRD\")\n", "def retrieve_diaspora_host_meta(host):\n    url = ('https://diaspora.azurewebsites.net/rest/diaspora/host/'\n           '{0}/metadata/0.0.0'.format(host))\n    return _parse_diaspora_xrd(_retrieve_resource(url))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(\n        urljoin(\n            DIAsporaConfig.get().baseurl,\n            '/rest/diaspora/host-meta/%s' % host\n        ),\n        auth=(DIAsporaConfig.get().username, DIAsporaConfig.get().password)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return _retrieve_host_meta(host, 'diaspora')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return diaspora_hosts[host]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    if host == \"\":\n        return {}\n    response = requests.get(\"https://%s/metadata/diaspora.xrd\" % host)\n    if response.status_code!= 200:\n        raise Exception(\"Failed to get Diaspora host-meta document\")\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, 'diaspora', 'host-meta')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return XRD(host, diaspora_meta_url(host))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return host.replace('diaspora.com', 'XRD')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return xrd.retrieve(host, \"diaspora.org\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    return retrieve_diaspora_host(host, \"XRD\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = ('https://diaspora.azurewebsites.net/rest/diaspora/host/'\n           '{0}/metadata/0.0.0'.format(host))\n    return _parse_diaspora_xrd(_retrieve_resource(url))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    r = requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n    if r.status_code == 200:\n        return r.text\n    else:\n        raise Exception(\"{} returned {}\".format(method, r.status_code))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    if method == \"post\":\n        return _send_document_post(url, data, timeout, *args, **kwargs)\n    else:\n        return _send_document_get(url, data, timeout, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(\n        url,\n        data,\n        timeout,\n        method=method,\n        *args,\n        **kwargs,\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return _send_response(\n        url, data, timeout, method, *args, **kwargs, method=\"post\"\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    if \"data\" not in kwargs:\n        kwargs[\"data\"] = data\n    return send(url, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(requests.post(url, data=data, timeout=timeout, **kwargs))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(\n        method, url, data, timeout, *args, **kwargs\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_response(\n        url,\n        data,\n        timeout,\n        method,\n        *args,\n        **kwargs,\n    )\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(url, data, timeout, method, *args, **kwargs)\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_response(\n        url, data, timeout, method, \"application/json\", *args, **kwargs\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    r = requests.request(method, url, data=data, timeout=timeout, *args, **kwargs)\n    if r.status_code == 200:\n        return r.text\n    else:\n        raise Exception(\"{} returned {}\".format(method, r.status_code))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    if method == \"post\":\n        return _send_document_post(url, data, timeout, *args, **kwargs)\n    else:\n        return _send_document_get(url, data, timeout, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(\n        url,\n        data,\n        timeout,\n        method=method,\n        *args,\n        **kwargs,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return _send_response(\n        url, data, timeout, method, *args, **kwargs, method=\"post\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    if \"data\" not in kwargs:\n        kwargs[\"data\"] = data\n    return send(url, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(requests.post(url, data=data, timeout=timeout, **kwargs))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(\n        method, url, data, timeout, *args, **kwargs\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_response(\n        url,\n        data,\n        timeout,\n        method,\n        *args,\n        **kwargs,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    \n    \n    return send_response(url, data, timeout, method, *args, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    return send_response(\n        url, data, timeout, method, \"application/json\", *args, **kwargs\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    if len(keys) == 1:\n        dic[key] = val\n        return\n\n    if keys[0] not in dic:\n        dic[keys[0]] = {}\n    dic = dic[keys[0]]\n\n    dict_insert(dic, val, keys[1:], *keys[1:])\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    try:\n        dic[key].update(*keys)\n    except KeyError:\n        dic[key] = {key: val}\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[1:], *keys[2:])\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n        return\n\n    if len(keys) == 1:\n        dic[key] = val\n        return\n\n    if keys[0] not in dic:\n        dic[keys[0]] = {}\n    dic = dic[keys[0]]\n\n    dict_insert(dic, val, keys[1:], *keys[1:])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic.get(key, {}), val, *keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dic.setdefault(key, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    try:\n        dic[key].update(*keys)\n    except KeyError:\n        dic[key] = {key: val}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = key + '.' + keys[0]\n    if not key in dic:\n        dic[key] = val\n    else:\n        dic[key] = dict_insert(dic[key], val, keys[1:], *keys[2:])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = '.'.join([key, *keys])\n    dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        spec_option,\n        settings_dirs,\n        default_value=[],\n        pattern=\"*.ini\",\n        allow_empty_dir=False,\n        validate_value=False,\n        allow_multiple_files=True,\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return [complex('file', spec_option)]", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return ListOfFileNames(settings_dirs, spec_option)\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return cli.ListOfFileNames(\n        settings_dirs, spec_option,\n        comment_prefix='[', comment_suffix=']',\n        extensions=['ini', 'ini.gz', 'ini'],\n        default_extension='',\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        [(spec_option, '.', '.'), (spec_option, '.py', '.py'), (spec_option, '.ini', '.ini')]\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(settings_dirs, spec_option)\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [ListOfFileNames(\n        [os.path.join(sdir, spec_option) for sdir in settings_dirs])]\n", "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        [\n            (settings_dir, spec_option)\n            for settings_dir in settings_dirs\n        ],\n        \"list_of_file_names\",\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create and return a new IniType complex type via cli.ListOfFileNames()\n    \"\"\"\n    # pylint: disable=too-many-locals, too-many-branches, too-many-statements\n    return [\n        cli.ListOfFileNames(\n            [\n                spec_option(\"file-name\"),\n                spec_option(\"directory\"),\n                spec_option(\"separator\"),\n                spec_option(\"recursive\"),\n            ],\n            spec_option(\"separator\"),\n        )\n    ]\n", "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(\"filename\", \"\", [], \"\", settings_dirs, spec_option)]\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        spec_option,\n        settings_dirs,\n        default_value=[],\n        pattern=\"*.ini\",\n        allow_empty_dir=False,\n        validate_value=False,\n        allow_multiple_files=True,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return [complex('file', spec_option)]", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return ListOfFileNames(settings_dirs, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return cli.ListOfFileNames(\n        settings_dirs, spec_option,\n        comment_prefix='[', comment_suffix=']',\n        extensions=['ini', 'ini.gz', 'ini'],\n        default_extension='',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        [(spec_option, '.', '.'), (spec_option, '.py', '.py'), (spec_option, '.ini', '.ini')]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(settings_dirs, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [ListOfFileNames(\n        [os.path.join(sdir, spec_option) for sdir in settings_dirs])]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return cli.ListOfFileNames(\n        [\n            (settings_dir, spec_option)\n            for settings_dir in settings_dirs\n        ],\n        \"list_of_file_names\",\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \"\"\"\n    Create and return a new IniType complex type via cli.ListOfFileNames()\n    \"\"\"\n    # pylint: disable=too-many-locals, too-many-branches, too-many-statements\n    return [\n        cli.ListOfFileNames(\n            [\n                spec_option(\"file-name\"),\n                spec_option(\"directory\"),\n                spec_option(\"separator\"),\n                spec_option(\"recursive\"),\n            ],\n            spec_option(\"separator\"),\n        )\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    \n    \n    return [IniType(\"filename\", \"\", [], \"\", settings_dirs, spec_option)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "def ansible_config_manager(cls):\n    return cls._get_service().config_manager\n", "def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "def ansible_config_manager(cls):\n    return cls._get_service(\"ansible\", \"ANSIBLE_CONFIG_MANAGER\")\n", "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "def ansible_config_manager(cls):\n    return cls._get_service().get('ANSIBLE_CONFIG_MANAGER', {})\n", "def ansible_config_manager(cls):\n    return cls._get_service().get('ANSIBLE_CONFIG_MANAGER')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service().config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\"ansible\", \"ANSIBLE_CONFIG_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\"ANSIBLE_CONFIG_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ANSIBLE_CONFIG_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service().get('ANSIBLE_CONFIG_MANAGER', {})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service().get('ANSIBLE_CONFIG_MANAGER')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    \n    \n    return getattr(cls, '_get_service')('WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    return cls._get_service('WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    \n    \n    return cls._get_service().get(\n        f'workspaces/{cls.WORKSPACE_MANAGER}')\n", "def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    \n    \n    return cls._get_service(\"WORKSPACE_MANAGER\")\n", "def workspace_manager(cls):\n    return getattr(cls, '_get_service')('WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    return cls._get_service().get_workspace_manager()\n", "def workspace_manager(cls):\n    \n    \n    return cls._get_service(\"WORKSPACE_MANAGER\")\n", "def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return getattr(cls, '_get_service')('WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls._get_service().get(\n        f'workspaces/{cls.WORKSPACE_MANAGER}')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls._get_service(\"WORKSPACE_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return getattr(cls, '_get_service')('WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service().get_workspace_manager()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    \n    \n    return cls._get_service(\"WORKSPACE_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return _get_service(cls, 'WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    \n    \n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "def plugins_manager(cls):\n    \n    \n    return getattr(cls, 'PLUGINS_MANAGER', None)\n", "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "def plugins_manager(cls):\n    \n    \n    return cls._get_service().PLUGINS_MANAGER\n", "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    \n    \n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "def plugins_manager(cls):\n    return cls._get_service(\"PLUGINS_MANAGER\")\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return getattr(cls, 'PLUGINS_MANAGER', None)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service().PLUGINS_MANAGER\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    \n    \n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service(\"PLUGINS_MANAGER\")\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    required_fields = [\"name\", \"description\", \"version\", \"external_url\", \"url\"]\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field '{}'\".format(field))\n\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content_dict(SPEC_FIELDS, spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec content')\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Spec content is not a dictionary')\n    for key, value in spec_content.items():\n        if key not in cls.__dict__:\n            raise IRValidatorException('Missing required field %s' % key)\n    return spec_content\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec_content is required')\n    try:\n        cls.validate(spec_content)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(str(e))\n    return cls.to_dict()\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','version', 'author', 'email', 'license', 'python_version']\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing data in spec file')\n    return {field: spec_content[field] for field in required_fields}\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException('invalid YAML: %s' % exc)\n\n    return cls.validate(data)\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    data[\"@module\"] = cls.__module__\n    data[\"@class\"] = cls.__name__\n    data[\"validator\"] = \"validate_spec\"\n    if spec_content is not None:\n        data = cls._validate(data, spec_content)\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n    return cls._validate_from_content(spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"spec content is None\")\n\n    required_keys = [\"name\", \"version\", \"license\", \"author\", \"description\", \"url\", \"python_version\"]\n    missing_keys = [k for k in required_keys if k not in spec_content]\n    if missing_keys:\n        raise IRValidatorException(\"Missing data in spec file: {}\".format(missing_keys))\n\n    return spec_content\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"No spec content provided\")\n\n    required_fields = [\"name\", \"description\", \"version\", \"external_url\", \"url\"]\n\n    for field in required_fields:\n        if field not in spec_content:\n            raise IRValidatorException(\"Missing required field '{}'\".format(field))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    return cls.validate_from_content_dict(SPEC_FIELDS, spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec content')\n    if not isinstance(spec_content, dict):\n        raise IRValidatorException('Spec content is not a dictionary')\n    for key, value in spec_content.items():\n        if key not in cls.__dict__:\n            raise IRValidatorException('Missing required field %s' % key)\n    return spec_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('spec_content is required')\n    try:\n        cls.validate(spec_content)\n    except InvalidSpecContent as e:\n        raise IRValidatorException(str(e))\n    return cls.to_dict()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name','version', 'author', 'email', 'license', 'python_version']\n    if not all(field in spec_content for field in required_fields):\n        raise IRValidatorException('Missing data in spec file')\n    return {field: spec_content[field] for field in required_fields}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        data = yaml.safe_load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException('invalid YAML: %s' % exc)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    data[\"@module\"] = cls.__module__\n    data[\"@class\"] = cls.__name__\n    data[\"validator\"] = \"validate_spec\"\n    if spec_content is not None:\n        data = cls._validate(data, spec_content)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException('Missing spec file')\n    return cls._validate_from_content(spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"spec content is None\")\n\n    required_keys = [\"name\", \"version\", \"license\", \"author\", \"description\", \"url\", \"python_version\"]\n    missing_keys = [k for k in required_keys if k not in spec_content]\n    if missing_keys:\n        raise IRValidatorException(\"Missing data in spec file: {}\".format(missing_keys))\n\n    return spec_content\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n    try:\n        with open(yaml_file) as f:\n            return cls.validate(yaml.safe_load(f))\n    except Exception as e:\n        raise IRValidatorException('Invalid YAML file:'+ str(e))\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate(yaml_file)\n\n    return cls.load(yaml_file)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('YAML file is missing')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "def validate_from_file(cls, yaml_file=None):\n    cls.validate_file_name(yaml_file)\n    cls.validate_file_contents(yaml_file)\n    return yaml.safe_load(open(yaml_file))\n", "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException(\"Yaml file path is required\")\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n    except IOError as e:\n        raise IRValidatorException(e.strerror)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e.problem)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            return cls.validate_from_string(yaml_file.read())\n    except IOError as error:\n        raise IRValidatorException(error.strerror)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except Exception as e:\n        raise IRValidatorException('Unable to parse YAML file')\n\n    return cls.validate_from_dict(yaml_data)\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        yaml_file = cls.get_yaml_file()\n    try:\n        with open(yaml_file, \"r\") as f:\n            return cls.validate_from_file_object(yaml.safe_load(f))\n    except (IOError, yaml.YAMLError) as e:\n        raise IRValidatorException(str(e))\n", "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n\n    if not yaml_file:\n        raise IRValidatorException(\n            \"A YAML file is required to validate a result of a test.\"\n        )\n\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n    except FileNotFoundError:\n        raise IRValidatorException(\n            \"The specified YAML file {} was not found.\".format(yaml_file)\n        )\n\n    return cls.validate_from_dict(data)\n", "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing Yaml File')\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n            return cls.validate(data)\n    except IOError:\n        raise IRValidatorException('Invalid YAML File')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing file path')\n    try:\n        with open(yaml_file) as f:\n            return cls.validate(yaml.safe_load(f))\n    except Exception as e:\n        raise IRValidatorException('Invalid YAML file:'+ str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate(yaml_file)\n\n    return cls.load(yaml_file)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('YAML file is missing')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    return cls.validate(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    cls.validate_file_name(yaml_file)\n    cls.validate_file_contents(yaml_file)\n    return yaml.safe_load(open(yaml_file))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = {}\n    if yaml_file is None:\n        raise IRValidatorException(\"Yaml file path is required\")\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n    except IOError as e:\n        raise IRValidatorException(e.strerror)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(e.problem)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            return cls.validate_from_string(yaml_file.read())\n    except IOError as error:\n        raise IRValidatorException(error.strerror)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing required YAML file')\n\n    try:\n        with open(yaml_file, 'r') as f:\n            yaml_data = yaml.load(f)\n    except Exception as e:\n        raise IRValidatorException('Unable to parse YAML file')\n\n    return cls.validate_from_dict(yaml_data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        yaml_file = cls.get_yaml_file()\n    try:\n        with open(yaml_file, \"r\") as f:\n            return cls.validate_from_file_object(yaml.safe_load(f))\n    except (IOError, yaml.YAMLError) as e:\n        raise IRValidatorException(str(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    yaml_file = yaml_file or cls.YAML_FILE\n\n    if not yaml_file:\n        raise IRValidatorException(\n            \"A YAML file is required to validate a result of a test.\"\n        )\n\n    try:\n        with open(yaml_file, 'r') as yaml_file:\n            data = yaml.safe_load(yaml_file)\n    except FileNotFoundError:\n        raise IRValidatorException(\n            \"The specified YAML file {} was not found.\".format(yaml_file)\n        )\n\n    return cls.validate_from_dict(data)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if not yaml_file:\n        raise IRValidatorException('Missing Yaml File')\n    try:\n        with open(yaml_file) as f:\n            data = yaml.safe_load(f)\n            return cls.validate(data)\n    except IOError:\n        raise IRValidatorException('Invalid YAML File')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    \n    \n    for include in self.spec['include']:\n        if include in parser_dict:\n            parser_dict[include] = self._resolve_group(parser_dict[include])\n        elif 'include' in parser_dict:\n            parser_dict['include'].remove(include)\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    for include_group in parser_dict.get('include-groups', []):\n        yield include_group\n", "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for include_dict in parser_dict.get(\"include\", []):\n        include_groups.append(self._resolve_include(include_dict))\n    parser_dict[\"include\"] = include_groups\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    groups = []\n    for group in parser_dict.get('include-groups', []):\n        groups.append(group)\n    parser_dict['include-groups'] = groups\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    result = []\n    for inc_group in parser_dict[\"include\"]:\n        result.extend(self._include_group(inc_group))\n    return result\n", "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    includes = []\n    for include in parser_dict[\"include\"]:\n        includes.append(include)\n    parser_dict[\"include\"] = includes\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if 'include' in parser_dict:\n        return self._resolve_include(parser_dict['include'])\n    return []\n", "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if self.include_groups is None:\n        return []\n\n    result = []\n    for group in self.include_groups:\n        group_dict = {}\n        for key, value in group.items():\n            group_dict[key] = value\n        result.append(group_dict)\n    return result\n", "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return []\n    return ['\\n'.join(['#include <%s>' % (k,)] + v for k, v in sorted(parser_dict.items()))]\n", "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return [f\"#include <{self.__filename}>\"]\n    else:\n        return []\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    for include in self.spec['include']:\n        if include in parser_dict:\n            parser_dict[include] = self._resolve_group(parser_dict[include])\n        elif 'include' in parser_dict:\n            parser_dict['include'].remove(include)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    for include_group in parser_dict.get('include-groups', []):\n        yield include_group\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \n    \n    include_groups = []\n    for include_dict in parser_dict.get(\"include\", []):\n        include_groups.append(self._resolve_include(include_dict))\n    parser_dict[\"include\"] = include_groups\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    groups = []\n    for group in parser_dict.get('include-groups', []):\n        groups.append(group)\n    parser_dict['include-groups'] = groups\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    result = []\n    for inc_group in parser_dict[\"include\"]:\n        result.extend(self._include_group(inc_group))\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"Resolves the include dict directive in the spec files.\"\"\"\n    includes = []\n    for include in parser_dict[\"include\"]:\n        includes.append(include)\n    parser_dict[\"include\"] = includes\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if 'include' in parser_dict:\n        return self._resolve_include(parser_dict['include'])\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    \"\"\"\n    Resolves the include dict directive in the spec files.\n    \"\"\"\n    if self.include_groups is None:\n        return []\n\n    result = []\n    for group in self.include_groups:\n        group_dict = {}\n        for key, value in group.items():\n            group_dict[key] = value\n        result.append(group_dict)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if not parser_dict:\n        return []\n    return ['\\n'.join(['#include <%s>' % (k,)] + v for k, v in sorted(parser_dict.items()))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict:\n        return [f\"#include <{self.__filename}>\"]\n    else:\n        return []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return self._get_defaults(self.spec)\n", "def get_spec_defaults(self):\n    return {k: self._get_defaults().get(k) for k in self.spec.keys()}\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with\n    self._get_defaults() \n    \"\"\"\n    return self._get_defaults(self.spec)\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return {\n        key: self._get_defaults(key) if key in self._spec else None\n        for key in self._spec\n    }\n", "def get_spec_defaults(self):\n    \n    \n    return {\n        name: self._get_defaults().get(name)\n        for name in self.spec[\"options\"]\n    }\n", "def get_spec_defaults(self):\n    \n    \n    for name, spec in self._get_specs():\n        if spec.get('default') is not None:\n            if spec['default'] == '*':\n                self._set_defaults(name, {'*': True})\n            else:\n                self._set_defaults(name, {'*': spec['default']})\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    for key, value in self._get_defaults().items():\n        setattr(self, key, value)\n    return self\n", "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return {k: self._get_defaults(v) for k, v in self.items()}\n", "def get_spec_defaults(self):\n    \n    \n    return {\n        k: self._get_default(k)\n        for k in self.spec.get('args', {})\n    }\n", "def get_spec_defaults(self):\n    \n    \n    return self._get_defaults()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return self._get_defaults(self.spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return {k: self._get_defaults().get(k) for k in self.spec.keys()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with\n    self._get_defaults() \n    \"\"\"\n    return self._get_defaults(self.spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return {\n        key: self._get_defaults(key) if key in self._spec else None\n        for key in self._spec\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \n    \n    return {\n        name: self._get_defaults().get(name)\n        for name in self.spec[\"options\"]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \n    \n    for name, spec in self._get_specs():\n        if spec.get('default') is not None:\n            if spec['default'] == '*':\n                self._set_defaults(name, {'*': True})\n            else:\n                self._set_defaults(name, {'*': spec['default']})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    for key, value in self._get_defaults().items():\n        setattr(self, key, value)\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \"\"\"\n    Resolve arguments' values from spec and other sources with self._get_defaults()\n    \"\"\"\n    return {k: self._get_defaults(v) for k, v in self.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \n    \n    return {\n        k: self._get_default(k)\n        for k in self.spec.get('args', {})\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    \n    \n    return self._get_defaults()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return {\n        \"help\": self.spec_helper.deprecated_help,\n        \"metavar\": self.spec_helper.deprecated_metavar,\n        \"namespace\": self.spec_helper.deprecated_namespace,\n        \"action\": self.spec_helper.deprecated_action,\n        \"nargs\": self.spec_helper.deprecated_nargs,\n    }\n", "def get_deprecated_args(self):\n    return self.deprecated_args\n", "def get_deprecated_args(self):\n    deprecated = {}\n    for name, spec in self.spec_helper.iterate_option_specs():\n        if spec['deprecated']:\n            deprecated[name] = {\n                'description': spec['description'],\n                'arguments': spec['arguments']\n            }\n    return deprecated\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    deprecated_args = {}\n    for opt_spec in self.spec_helper.iterate_option_specs():\n        if opt_spec['deprecated']:\n            deprecated_args[opt_spec['name']] = opt_spec['value']\n    return deprecated_args\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return {k: v for k, v in self.spec_helper.iterate_option_specs() if k in self.deprecated_options}\n", "def get_deprecated_args(self):\n    return {\n        k: v\n        for k, v in self.spec_helper.iterate_option_specs()\n        if k not in self.deprecated_options\n    }\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return self._deprecated_args\n", "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return {\n        'all': {\n            'append': ['--all'],\n           'remove': ['--remove'],\n            'add': ['--add'],\n           'remove-all': ['--all'],\n        },\n       'remove-all': {\n            'append': ['--remove-all'],\n        },\n        'add-all': {\n            'append': ['--add-all'],\n           'remove': ['--add-all'],\n        },\n        'add-nothing': {\n            'append': ['--add-nothing'],\n           'remove': ['--add-nothing'],\n        },\n       'remove-nothing': {\n            'append': ['--remove-nothing']", "def get_deprecated_args(self):\n    return {\n        'force': self.spec_helper.get('force'),\n        'group': self.spec_helper.get('group'),\n        'nogroup': self.spec_helper.get('nogroup'),\n    }\n", "def get_deprecated_args(self):\n    return {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return {\n        \"help\": self.spec_helper.deprecated_help,\n        \"metavar\": self.spec_helper.deprecated_metavar,\n        \"namespace\": self.spec_helper.deprecated_namespace,\n        \"action\": self.spec_helper.deprecated_action,\n        \"nargs\": self.spec_helper.deprecated_nargs,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self.deprecated_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    deprecated = {}\n    for name, spec in self.spec_helper.iterate_option_specs():\n        if spec['deprecated']:\n            deprecated[name] = {\n                'description': spec['description'],\n                'arguments': spec['arguments']\n            }\n    return deprecated\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    deprecated_args = {}\n    for opt_spec in self.spec_helper.iterate_option_specs():\n        if opt_spec['deprecated']:\n            deprecated_args[opt_spec['name']] = opt_spec['value']\n    return deprecated_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return {k: v for k, v in self.spec_helper.iterate_option_specs() if k in self.deprecated_options}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        k: v\n        for k, v in self.spec_helper.iterate_option_specs()\n        if k not in self.deprecated_options\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return self._deprecated_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    \"\"\"\n    Returning dict with options which deprecate others.\n    options from self.spec_helper.iterate_option_specs()\n    \"\"\"\n    return {\n        'all': {\n            'append': ['--all'],\n           'remove': ['--remove'],\n            'add': ['--add'],\n           'remove-all': ['--all'],\n        },\n       'remove-all': {\n            'append': ['--remove-all'],\n        },\n        'add-all': {\n            'append': ['--add-all'],\n           'remove': ['--add-all'],\n        },\n        'add-nothing': {\n            'append': ['--add-nothing'],\n           'remove': ['--add-nothing'],\n        },\n       'remove-nothing': {\n            'append': ['--remove-nothing']", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {\n        'force': self.spec_helper.get('force'),\n        'group': self.spec_helper.get('group'),\n        'nogroup': self.spec_helper.get('nogroup'),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return {}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['no_ssh']:\n        return\n    if cli_args['no_ssh_key']:\n        return\n    if cli_args['no_ssh_password']:\n        return\n    if cli_args['ssh_port'] is None:\n        return\n    if cli_args['ssh_username'] is None:\n        return\n    if cli_args['ssh_password'] is None:\n        return\n    if cli_args['ssh_key'] is None:\n        return\n    if cli_args['ssh_password_again'] is None:\n        return\n    if cli_args['ssh_key_again'] is None:\n        return\n    if cli_args['ssh_password_common'] is None:\n        return\n    if cli_args['ssh_password_fail'] is None:\n        return\n    if cli_args['ssh_key_fail'] is None:\n        return\n    if cli_args['ssh_key_common'] is None:\n        return", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    validate_arg_deprecation_internal(self, cli_args, answer_file_args)\n    validate_arg_deprecation_external(self, cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(\n        cli_args=cli_args,\n        answer_file_args=answer_file_args,\n    )\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_arg_types(cli_args, answer_file_args)\n    self.validate_arg_values(cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files\n    \"\"\"\n    # TODO: implement this function\n    pass\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    for arg_name, arg_value in cli_args.items():\n        if arg_name not in answer_file_args:\n            self.error('The {} argument is deprecated and has been ignored.'.format(\n                arg_name))\n        else:\n            self.debug('{} argument is deprecated and has been ignored.'.format(\n                arg_name))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(cli_args, answer_file_args, ['dest_path'])\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.replace_existing_answers:\n        self._replace_existing_answers(cli_args, answer_file_args)\n\n    if cli_args.debug:\n        self._debug_mode(cli_args)\n\n    if cli_args.verbose:\n        self._verbose_mode(cli_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    if cli_args.get('deprecated_answer_file') and cli_args['deprecated_answer_file']!= answer_file_args['deprecated_answer_file']:\n        raise ValueError(\"The file '{}' is deprecated and should be '{}'\".format(cli_args['deprecated_answer_file'], answer_file_args['deprecated_answer_file']))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--version' in cli_args:\n        if '--version' in answer_file_args:\n            self.print_version()\n        exit()\n    if '--version' not in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n    if '--version' in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['no_ssh']:\n        return\n    if cli_args['no_ssh_key']:\n        return\n    if cli_args['no_ssh_password']:\n        return\n    if cli_args['ssh_port'] is None:\n        return\n    if cli_args['ssh_username'] is None:\n        return\n    if cli_args['ssh_password'] is None:\n        return\n    if cli_args['ssh_key'] is None:\n        return\n    if cli_args['ssh_password_again'] is None:\n        return\n    if cli_args['ssh_key_again'] is None:\n        return\n    if cli_args['ssh_password_common'] is None:\n        return\n    if cli_args['ssh_password_fail'] is None:\n        return\n    if cli_args['ssh_key_fail'] is None:\n        return\n    if cli_args['ssh_key_common'] is None:\n        return", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    validate_arg_deprecation_internal(self, cli_args, answer_file_args)\n    validate_arg_deprecation_external(self, cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(\n        cli_args=cli_args,\n        answer_file_args=answer_file_args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self.validate_arg_types(cli_args, answer_file_args)\n    self.validate_arg_values(cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    \"\"\"\n    Validates and prints the deprecated arguments.\n\n    :param cli_args: the dict of arguments from cli\n    :param answer_file_args: the dict of arguments from files\n    \"\"\"\n    # TODO: implement this function\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    for arg_name, arg_value in cli_args.items():\n        if arg_name not in answer_file_args:\n            self.error('The {} argument is deprecated and has been ignored.'.format(\n                arg_name))\n        else:\n            self.debug('{} argument is deprecated and has been ignored.'.format(\n                arg_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    self._validate_arg_deprecation(cli_args, answer_file_args, ['dest_path'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.replace_existing_answers:\n        self._replace_existing_answers(cli_args, answer_file_args)\n\n    if cli_args.debug:\n        self._debug_mode(cli_args)\n\n    if cli_args.verbose:\n        self._verbose_mode(cli_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    # type: (dict[str, str], dict[str, str]) -> None\n    if cli_args.get('deprecated_answer_file') and cli_args['deprecated_answer_file']!= answer_file_args['deprecated_answer_file']:\n        raise ValueError(\"The file '{}' is deprecated and should be '{}'\".format(cli_args['deprecated_answer_file'], answer_file_args['deprecated_answer_file']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--version' in cli_args:\n        if '--version' in answer_file_args:\n            self.print_version()\n        exit()\n    if '--version' not in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n    if '--version' in cli_args and '--version' not in answer_file_args:\n        self.print_version()\n        exit()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    return self.command_parser.get_option_specs(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self.command_parse_map[command_name][\"option_specs\"]\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "def get_parser_option_specs(self, command_name):\n    option_specs = {}\n    for option in self.__command_options[command_name]:\n        option_specs[option[0]] = option[1]\n    return option_specs\n", "def get_parser_option_specs(self, command_name):\n    return self.command_parser.option_specs[command_name]\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list[command_name]\n", "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].options\n    else:\n        return []\n", "def get_parser_option_specs(self, command_name):\n    return self.commands[command_name].option_specs\n", "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parser.get_option_specs(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parse_map[command_name][\"option_specs\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_specs = {}\n    for option in self.__command_options[command_name]:\n        option_specs[option[0]] = option[1]\n    return option_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.command_parser.option_specs[command_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list[command_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.commands:\n        return self.commands[command_name].options\n    else:\n        return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.commands[command_name].option_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.parser.option_list(command_name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \"\"\"Gets the spec for the specified option name. Gets options of the given command_name with self.get_parser_option_specs()\"\"\"\n    return self.__command_options[command_name][argument_name][0]\n", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.commands:\n        return {}\n    if argument_name not in self.commands[command_name]:\n        return {}\n    return self.commands[command_name][argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    \"\"\"Gets the spec for the specified option name. Gets options of the\n    specified command_name with self.get_parser_option_specs()\n    \"\"\"\n    return self._get_option_spec(command_name, argument_name, '')\n", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specifc option name for the specified command_name\n    and argument_name.\n    Gets option of the given command_name with self.get_parser_option_specs()\n    \"\"\"\n    return self.get_command_option_spec(command_name)[argument_name]\n", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \"\"\"Gets the spec for the specified option name. Gets options of the given command_name with self.get_parser_option_specs()\"\"\"\n    return self.__command_options[command_name][argument_name][0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.commands:\n        return {}\n    if argument_name not in self.commands[command_name]:\n        return {}\n    return self.commands[command_name][argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \"\"\"Gets the spec for the specified option name. Gets options of the\n    specified command_name with self.get_parser_option_specs()\n    \"\"\"\n    return self._get_option_spec(command_name, argument_name, '')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    \"\"\"\n    Gets the specifc option name for the specified command_name\n    and argument_name.\n    Gets option of the given command_name with self.get_parser_option_specs()\n    \"\"\"\n    return self.get_command_option_spec(command_name)[argument_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.get_parser_option_specs()[command_name][argument_name]", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return [x for x in args if x is not None and x!= self.silent_arg]\n", "def get_silent_args(self, args):\n    if'silent' in args:\n        return ['--silent']\n    return []\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '']\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not arg in self.SILENCED_ARGS]\n", "def get_silent_args(self, args):\n    \"\"\"\n    list of silenced argument\n\n    :param args: The received arguments.\n    :return: list, silenced argument names\n    \"\"\"\n    return [\n        a for a in args if a not in self.silent_args\n    ]\n", "def get_silent_args(self, args):\n    return [name for name in args if name not in self.silent_args]\n", "def get_silent_args(self, args):\n    return [k for k in args if k!= self.__silent_arg]\n", "def get_silent_args(self, args):\n    return [k for k in args if args[k] is False]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg!='self']\n", "def get_silent_args(self, args):\n    return [arg for arg in args if not arg.startswith('-')]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return [x for x in args if x is not None and x!= self.silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    if'silent' in args:\n        return ['--silent']\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!= '']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not arg in self.SILENCED_ARGS]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    \"\"\"\n    list of silenced argument\n\n    :param args: The received arguments.\n    :return: list, silenced argument names\n    \"\"\"\n    return [\n        a for a in args if a not in self.silent_args\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [name for name in args if name not in self.silent_args]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k in args if k!= self.__silent_arg]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [k for k in args if args[k] is False]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg!='self']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if not arg.startswith('-')]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    if not args.get('id'):\n        raise errors.MissingRequiredArgumentError(\n            argument='id',\n            command='create'\n        )\n", "def validate_requires_args(self, args):\n    return args.get(\"description\", \"\") and args.get(\"name\", \"\")\n", "def validate_requires_args(self, args):\n    \n    \n    return all(x not in self.args for x in args)\n", "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError(\"No required arguments were specified\")\n", "def validate_requires_args(self, args):\n    \n    \n    if not args.ip_address:\n        raise ValueError('ip_address is a mandatory parameter')\n    if not args.port:\n        raise ValueError('port is a mandatory parameter')\n    if not args.timeout:\n        raise ValueError('timeout is a mandatory parameter')\n    if not args.time_out:\n        raise ValueError('time_out is a mandatory parameter')\n    if not args.address:\n        raise ValueError('address is a mandatory parameter')\n    if not args.username:\n        raise ValueError('username is a mandatory parameter')\n    if not args.password:\n        raise ValueError('password is a mandatory parameter')\n    if not args.vhost:\n        raise ValueError('vhost is a mandatory parameter')\n    if not args.auth_user:\n        raise ValueError('auth_user is a mandatory parameter')\n    if not args.auth_password:\n        rai", "def validate_requires_args(self, args):\n    \"\"\"\n    Check if all the required arguments have been provided.\n    \"\"\"\n    if args.dataset_id is None:\n        raise ValueError('\"dataset_id\" is a required argument.')\n    if args.model_id is None:\n        raise ValueError('\"model_id\" is a required argument.')\n    if args.model_version is None:\n        raise ValueError('\"model_version\" is a required argument.')\n", "def validate_requires_args(self, args):\n    return not args.get('email') or not args.get('password')\n", "def validate_requires_args(self, args):\n    \n    \n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if len(missing_args) > 0:\n        return False\n    return True\n", "def validate_requires_args(self, args):\n    return all([args.account_id, args.domain_id, args.name, args.description,\n                args.max_ssl_threshold, args.ssl_ca, args.ssl_key, args.ssl_cert,\n                args.ssl_ca_cert, args.ssl_key_cert, args.ssl_cert_chain,\n                args.ssl_verify, args.enable_ssl_verification])\n", "def validate_requires_args(self, args):\n    \n    \n    return all([arg is not None for arg in args])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    if not args.get('id'):\n        raise errors.MissingRequiredArgumentError(\n            argument='id',\n            command='create'\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return args.get(\"description\", \"\") and args.get(\"name\", \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    return all(x not in self.args for x in args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if not args:\n        raise ValueError(\"No required arguments were specified\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    if not args.ip_address:\n        raise ValueError('ip_address is a mandatory parameter')\n    if not args.port:\n        raise ValueError('port is a mandatory parameter')\n    if not args.timeout:\n        raise ValueError('timeout is a mandatory parameter')\n    if not args.time_out:\n        raise ValueError('time_out is a mandatory parameter')\n    if not args.address:\n        raise ValueError('address is a mandatory parameter')\n    if not args.username:\n        raise ValueError('username is a mandatory parameter')\n    if not args.password:\n        raise ValueError('password is a mandatory parameter')\n    if not args.vhost:\n        raise ValueError('vhost is a mandatory parameter')\n    if not args.auth_user:\n        raise ValueError('auth_user is a mandatory parameter')\n    if not args.auth_password:\n        rai", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \"\"\"\n    Check if all the required arguments have been provided.\n    \"\"\"\n    if args.dataset_id is None:\n        raise ValueError('\"dataset_id\" is a required argument.')\n    if args.model_id is None:\n        raise ValueError('\"model_id\" is a required argument.')\n    if args.model_version is None:\n        raise ValueError('\"model_version\" is a required argument.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return not args.get('email') or not args.get('password')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    missing_args = []\n    for arg in self.required_args:\n        if arg not in args:\n            missing_args.append(arg)\n    if len(missing_args) > 0:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return all([args.account_id, args.domain_id, args.name, args.description,\n                args.max_ssl_threshold, args.ssl_ca, args.ssl_key, args.ssl_cert,\n                args.ssl_ca_cert, args.ssl_key_cert, args.ssl_cert_chain,\n                args.ssl_verify, args.enable_ssl_verification])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    \n    \n    return all([arg is not None for arg in args])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if (self._conditionally_required_when(command_name, options_spec,\n                                               arg_name) and\n                arg_name not in args):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_required_args = []\n    for arg in args:\n        if not self._is_required_when_condition(command_name, options_spec, arg):\n            conditional_required_args.append(arg)\n    return conditional_required_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args\n            if (self._required_when(command_name, options_spec, arg) and\n                arg not in self._ignore_args)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    return self._get_conditionally_required_args_action(\n        command_name, options_spec, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if not self._conditionally_required_arg_match(command_name,\n                                                       options_spec,\n                                                       arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_condition(command_name, options_spec)\n    return [x for x in args if condition(x)]\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not options_spec or not args:\n        return args\n    conditions = options_spec.get('conditions', {})\n    args = self._get_conditionally_required_args(command_name, conditions, args)\n    if conditions.get('required_when') and args:\n        self._log.warning('required_when condition matched but no arguments '\n                          'were provided')\n    return args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._is_conditionally_required(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    args_with_required_when = [\n        arg for arg in args\n        if arg['name'] in required_when\n    ]\n    return args_with_required_when\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    if condition:\n        return [condition(arg) for arg in args]\n    return args\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if (self._conditionally_required_when(command_name, options_spec,\n                                               arg_name) and\n                arg_name not in args):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_required_args = []\n    for arg in args:\n        if not self._is_required_when_condition(command_name, options_spec, arg):\n            conditional_required_args.append(arg)\n    return conditional_required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    return [arg for arg in args\n            if (self._required_when(command_name, options_spec, arg) and\n                arg not in self._ignore_args)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    args = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    return self._get_conditionally_required_args_action(\n        command_name, options_spec, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    arg_names = []\n    for arg_name in args:\n        if not self._conditionally_required_arg_match(command_name,\n                                                       options_spec,\n                                                       arg_name):\n            arg_names.append(arg_name)\n    return arg_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_condition(command_name, options_spec)\n    return [x for x in args if condition(x)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    if not options_spec or not args:\n        return args\n    conditions = options_spec.get('conditions', {})\n    args = self._get_conditionally_required_args(command_name, conditions, args)\n    if conditions.get('required_when') and args:\n        self._log.warning('required_when condition matched but no arguments '\n                          'were provided')\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    conditional_args = []\n    for arg in args:\n        if self._is_conditionally_required(command_name, options_spec, arg):\n            conditional_args.append(arg)\n    return conditional_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    required_when = options_spec.get('required_when', [])\n    args_with_required_when = [\n        arg for arg in args\n        if arg['name'] in required_when\n    ]\n    return args_with_required_when\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    condition = self._get_conditionally_required_args_condition(\n        command_name, options_spec, args)\n    if condition:\n        return [condition(arg) for arg in args]\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if args[0] is not None and args[0] > len(args[1]):\n        self._error(\"Value of '%s' is longer than length specified %d.\" % (\n            args[0], len(args[1])))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('Argument count (%s) is greater than length (%s)' % (len(args), self.length))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the given args is longer than the \"\n                   \"specified length.\")\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self._error(\"The length of the command is too long.\")\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the request argument is more than the specified length\")\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the function argument '%s' is greater than \"\n                   \"%s.\" % (args[0], self.length))\n", "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self.send_response(400)\n        self.end_headers()\n        return \"Invalid length value.\"\n    return None\n", "def validate_length_args(self, args):\n    if args['length'] and args['length'] < len(args['value']):\n        self.set_status(400)\n        self.write_json({'error': 'Arguments length should be > %d characters.' % len(args['value'])})\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('The value of the command line argument {} is longer than the specified {} value.'.format(\n            args[0], self.length))\n", "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.set_status(400)\n        self.finish(\"{} is not longer than {}\".format(args[0], self.length))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if args[0] is not None and args[0] > len(args[1]):\n        self._error(\"Value of '%s' is longer than length specified %d.\" % (\n            args[0], len(args[1])))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('Argument count (%s) is greater than length (%s)' % (len(args), self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the given args is longer than the \"\n                   \"specified length.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self._error(\"The length of the command is too long.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the request argument is more than the specified length\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error(\"The length of the function argument '%s' is greater than \"\n                   \"%s.\" % (args[0], self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args[1] > len(args[0]):\n        self.send_response(400)\n        self.end_headers()\n        return \"Invalid length value.\"\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if args['length'] and args['length'] < len(args['value']):\n        self.set_status(400)\n        self.write_json({'error': 'Arguments length should be > %d characters.' % len(args['value'])})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.error('The value of the command line argument {} is longer than the specified {} value.'.format(\n            args[0], self.length))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > self.length:\n        self.set_status(400)\n        self.finish(\"{} is not longer than {}\".format(args[0], self.length))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    if args['choices'] and args['value'] not in args['choices']:\n        self.add_error('value', 'Invalid choice')\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    if args is None or args is False or args is True:\n        return True\n    elif isinstance(args, list) and len(args) > 0 and args[0] in self.choices:\n        return True\n    return False\n", "def validate_choices_args(self, args):\n    if args['choices'] not in self.choices:\n        self.error('Invalid choice \\'{}\\' for argument \\'choices\\''.format(args['choices']))\n", "def validate_choices_args(self, args):\n    if args[1] not in self.choices:\n        raise ValueError('Invalid choice \"%s\"' % args[1])\n", "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid value for choices.')\n", "def validate_choices_args(self, args):\n    return args in self.choices\n", "def validate_choices_args(self, args):\n    if args not in self.choices:\n        self._error('Invalid choice')\n", "def validate_choices_args(self, args):\n    if args is not None and args not in self.choices:\n        raise ValueError(\"{} is not a valid choice\".format(args))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choices'] and args['value'] not in args['choices']:\n        self.add_error('value', 'Invalid choice')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args is None or args is False or args is True:\n        return True\n    elif isinstance(args, list) and len(args) > 0 and args[0] in self.choices:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['choices'] not in self.choices:\n        self.error('Invalid choice \\'{}\\' for argument \\'choices\\''.format(args['choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args[1] not in self.choices:\n        raise ValueError('Invalid choice \"%s\"' % args[1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        raise ValidationError('Invalid value for choices.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    return args in self.choices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args not in self.choices:\n        self._error('Invalid choice')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args is not None and args not in self.choices:\n        raise ValueError(\"{} is not a valid choice\".format(args))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        raise ValidationError(\n            '{} is less than {}'.format(args[1], args[0]))\n", "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of the given args is between minimum and maximum values\n    \"\"\"\n    args = args or []\n    for arg in args:\n        if not isinstance(arg, int) or arg < self.min or arg > self.max:\n            return False\n    return True\n", "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        return ('{} >= {}'.format(args[0], args[1]), '{} <= {}'.format(args[0], args[1]))\n    else:\n        return args\n", "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        args[0], args[1] = args[1], args[0]\n", "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        return (args[0], args[1])\n    return args\n", "def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        msg = '%s < %s' % (args[1], args[0])\n        args[1] = args[0]\n        args[0] = msg\n    return args\n", "def validate_min_max_args(self, args):\n    \n    \n    return (args[0] >= args[1]) or (args[0] <= 0) or (args[1] >= args[2]) or (args[1] <= 0)\n", "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        args[1] = args[0]\n    return args\n", "def validate_min_max_args(self, args):\n    \n    \n    return (self.min <= args <= self.max)\n", "def validate_min_max_args(self, args):\n    \n    \n    if args[0] < args[1]:\n        return \"{} < {}\".format(args[0], args[1])\n    if args[0] > args[1]:\n        return \"{} > {}\".format(args[0], args[1])\n    return \"{} == {}\".format(args[0], args[1])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        raise ValidationError(\n            '{} is less than {}'.format(args[1], args[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \"\"\"\n    Check if value of the given args is between minimum and maximum values\n    \"\"\"\n    args = args or []\n    for arg in args:\n        if not isinstance(arg, int) or arg < self.min or arg > self.max:\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        return ('{} >= {}'.format(args[0], args[1]), '{} <= {}'.format(args[0], args[1]))\n    else:\n        return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        args[0], args[1] = args[1], args[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        return (args[0], args[1])\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if args[1] < args[0]:\n        msg = '%s < %s' % (args[1], args[0])\n        args[1] = args[0]\n        args[0] = msg\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    return (args[0] >= args[1]) or (args[0] <= 0) or (args[1] >= args[2]) or (args[1] <= 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    if args[0] > args[1]:\n        args[1] = args[0]\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    return (self.min <= args <= self.max)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    \n    \n    if args[0] < args[1]:\n        return \"{} < {}\".format(args[0], args[1])\n    if args[0] > args[1]:\n        return \"{} > {}\".format(args[0], args[1])\n    return \"{} == {}\".format(args[0], args[1])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if subcommand == 'list':\n        return lambda _, __: self.list_complex_arguments(option_name, type_name, spec_option)\n    elif subcommand == 'get':\n        return lambda _, __: self.get_complex_argument(option_name, type_name, spec_option)\n    elif subcommand =='set':\n        return lambda _, __: self.set_complex_argument(option_name, type_name, spec_option)\n    elif subcommand == 'delete':\n        return lambda _, __: self.delete_complex_argument(option_name, type_name, spec_option)\n    else:\n        raise NotImplementedError()\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    # type: (str, str, str, str) -> Any\n    return COMPLEX_TYPES[subcommand][type_name][option_name](self.vars,\n                                                           self.defaults,\n                                                           self.plugin_path,\n                                                           option_name)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    assert spec_option in COMPLEX_TYPES\n    assert type_name in COMPLEX_TYPES[spec_option]\n    return COMPLEX_TYPES[spec_option][type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, subcommand, spec_option)]", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[type_name](\n                                self.vars, self.defaults, self.plugin_path,\n                                option_name, subcommand, spec_option)", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Returns the corresponding function in COMPLEX_TYPES based on\n    type_name and returns the result obtained by complex_action after\n    option_name,(self.vars, self.defaults, self.plugin_path), subcommand,\n    spec_option is input.\n    \"\"\"\n    if subcommand == 'list':\n        return self.list_complex_argumet_type(option_name, type_name)\n    elif subcommand == 'create':\n        return self.create_complex_argumet_type(option_name, type_name,\n                                                                    spec_option)\n    else:\n        return None\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    complex_type = COMPLEX_TYPES.get((type_name, option_name, spec_option), None)\n    if complex_type:\n        return complex_type(self.vars, self.defaults, self.plugin_path,\n                            subcommand, option_name)\n    return None\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    if subcommand == 'list':\n        return lambda _, __: self.list_complex_arguments(option_name, type_name, spec_option)\n    elif subcommand == 'get':\n        return lambda _, __: self.get_complex_argument(option_name, type_name, spec_option)\n    elif subcommand =='set':\n        return lambda _, __: self.set_complex_argument(option_name, type_name, spec_option)\n    elif subcommand == 'delete':\n        return lambda _, __: self.delete_complex_argument(option_name, type_name, spec_option)\n    else:\n        raise NotImplementedError()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    # type: (str, str, str, str) -> Any\n    return COMPLEX_TYPES[subcommand][type_name][option_name](self.vars,\n                                                           self.defaults,\n                                                           self.plugin_path,\n                                                           option_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    assert spec_option in COMPLEX_TYPES\n    assert type_name in COMPLEX_TYPES[spec_option]\n    return COMPLEX_TYPES[spec_option][type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, subcommand, spec_option)]", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[type_name](\n                                self.vars, self.defaults, self.plugin_path,\n                                option_name, subcommand, spec_option)", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    return COMPLEX_TYPES[(type_name, option_name, spec_option)]", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Returns the corresponding function in COMPLEX_TYPES based on\n    type_name and returns the result obtained by complex_action after\n    option_name,(self.vars, self.defaults, self.plugin_path), subcommand,\n    spec_option is input.\n    \"\"\"\n    if subcommand == 'list':\n        return self.list_complex_argumet_type(option_name, type_name)\n    elif subcommand == 'create':\n        return self.create_complex_argumet_type(option_name, type_name,\n                                                                    spec_option)\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    complex_type = COMPLEX_TYPES.get((type_name, option_name, spec_option), None)\n    if complex_type:\n        return complex_type(self.vars, self.defaults, self.plugin_path,\n                            subcommand, option_name)\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            pass\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    custom = {}\n    nested = {}\n    if args:\n        control = args[0]\n        if 'control' in control:\n            custom = control['control']\n        if 'nested' in control:\n            nested = control['nested']\n    return custom, nested\n", "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args, {}\n    elif 'control_args' in args:\n        return args['control_args'], args['nested_args']\n    else:\n        return args, {}\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args, nested_args = self.get_nested_custom_and_control_args(arg)\n        else:\n            control_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('control', {})\n    nested_args = args.get('nested', {})\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args is not None:\n        for arg in args:\n            if isinstance(arg, dict):\n                control_args.update(arg)\n            elif isinstance(arg, list):\n                nested_args.update(arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args:\n        control_args, nested_args = args[0], args[1:]\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            self.log.debug('Ignoring unknown argument: %s', arg)\n    return control_args, nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            pass\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    custom = {}\n    nested = {}\n    if args:\n        control = args[0]\n        if 'control' in control:\n            custom = control['control']\n        if 'nested' in control:\n            nested = control['nested']\n    return custom, nested\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if 'control' in args:\n        return args, {}\n    elif 'control_args' in args:\n        return args['control_args'], args['nested_args']\n    else:\n        return args, {}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args, nested_args = self.get_nested_custom_and_control_args(arg)\n        else:\n            control_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = args.get('control', {})\n    nested_args = args.get('nested', {})\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args is not None:\n        for arg in args:\n            if isinstance(arg, dict):\n                control_args.update(arg)\n            elif isinstance(arg, list):\n                nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    if args:\n        control_args, nested_args = args[0], args[1:]\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        elif isinstance(arg, list):\n            nested_args.update(arg)\n        else:\n            self.log.debug('Ignoring unknown argument: %s', arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    control_args = {}\n    nested_args = {}\n    for arg in args:\n        if isinstance(arg, dict):\n            control_args.update(arg)\n        else:\n            nested_args.update(arg)\n    return control_args, nested_args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    result = vars_dict.copy()\n    result.update(extra_vars)\n    return result\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        extra_vars = []\n    for evar in extra_vars:\n        if evar not in vars_dict:\n            vars_dict[evar] = {}\n        vars_dict[evar].update(vars_dict.pop(evar))\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    if 'extra-vars' in vars_dict:\n        vars_dict['extra-vars'].extend(extra_vars)\n    else:\n        vars_dict['extra-vars'] = extra_vars\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n    return {**vars_dict, **{'extra-vars': extra_vars}}\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    return dict(vars_dict, **{'ansible_extra_vars': extra_vars})\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars in\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n        vars_dict[extra_var] = vars_dict[extra_var] or {}\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    vars_dict.update(extra_vars)\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    result = vars_dict.copy()\n    result.update(extra_vars)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        extra_vars = []\n    for evar in extra_vars:\n        if evar not in vars_dict:\n            vars_dict[evar] = {}\n        vars_dict[evar].update(vars_dict.pop(evar))\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    if 'extra-vars' in vars_dict:\n        vars_dict['extra-vars'].extend(extra_vars)\n    else:\n        vars_dict['extra-vars'] = extra_vars\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n    return {**vars_dict, **{'extra-vars': extra_vars}}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    return dict(vars_dict, **{'ansible_extra_vars': extra_vars})\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars in\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = {}\n        vars_dict[extra_var] = vars_dict[extra_var] or {}\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    \"\"\"\n    Extend ``vars_dict`` with ``extra-vars``\n\n    :param vars_dict: Dictionary to merge extra-vars into\n    :param extra_vars: List of extra-vars\n    \"\"\"\n    if extra_vars is None:\n        return vars_dict\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is not None:\n        ansible_args['verbosity'] = verbose\n    return ir_workspace.ansible(ir_plugin, playbook_path, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    ansible_args.update({\n        '--verbose': verbose or ir_workspace.verbose,\n        '--playbook': playbook_path\n    })\n    if extra_vars:\n        ansible_args.update(extra_vars)\n    return ir_workspace.ansible.playbook(\n        ir_plugin.playbook_path,\n        **ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO more options (pass in the other variables to ansible)\n    if verbose is None:\n        verbose = ir_plugin.verbose\n    if extra_vars is None:\n        extra_vars = ir_plugin.extra_vars\n    return playbook(playbook_path, ir_workspace, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is None:\n        verbose = ir_workspace.verbose\n    if playbook_path is None:\n        playbook_path = ir_plugin.playbook_path\n    ansible_args['extra_vars'] = extra_vars\n    return ansible.playbook(playbook_path, ir_workspace, verbose=verbose, **ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return {\n        'ansible_workspace': ir_workspace,\n        'ansible_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args\n    }['playbook'](playbook_path, verbose)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_run(\n        ir_workspace, ir_plugin, playbook_path,\n        verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n    )\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        cmd.extend(extra_vars)\n    if ansible_args:\n        cmd.extend(ansible_args)\n    return run_ansible_playbook(ir_workspace, ir_plugin, cmd, verbose, extra_vars)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    playbook_cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        playbook_cmd.extend(extra_vars.items())\n    if ansible_args:\n        playbook_cmd.extend(ansible_args.items())\n    return run_cmd(ir_workspace, ir_plugin, playbook_cmd, verbose,\n                   extra_vars=extra_vars)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # type: (dict[str, str], InfraredWorkspace, InfraredPlugin, bool, dict[str, str], dict[str, str]) -> int\n    return _ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                            extra_vars=extra_vars, ansible_args=ansible_args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is not None:\n        ansible_args['verbosity'] = verbose\n    return ir_workspace.ansible(ir_plugin, playbook_path, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    ansible_args = ansible_args or {}\n    ansible_args.update({\n        '--verbose': verbose or ir_workspace.verbose,\n        '--playbook': playbook_path\n    })\n    if extra_vars:\n        ansible_args.update(extra_vars)\n    return ir_workspace.ansible.playbook(\n        ir_plugin.playbook_path,\n        **ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # TODO more options (pass in the other variables to ansible)\n    if verbose is None:\n        verbose = ir_plugin.verbose\n    if extra_vars is None:\n        extra_vars = ir_plugin.extra_vars\n    return playbook(playbook_path, ir_workspace, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    if ansible_args is None:\n        ansible_args = {}\n    if verbose is None:\n        verbose = ir_workspace.verbose\n    if playbook_path is None:\n        playbook_path = ir_plugin.playbook_path\n    ansible_args['extra_vars'] = extra_vars\n    return ansible.playbook(playbook_path, ir_workspace, verbose=verbose, **ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return {\n        'ansible_workspace': ir_workspace,\n        'ansible_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n       'verbose': verbose,\n        'extra_vars': extra_vars,\n        'ansible_args': ansible_args\n    }['playbook'](playbook_path, verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return ansible_run(\n        ir_workspace, ir_plugin, playbook_path,\n        verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    return playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose=verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        cmd.extend(extra_vars)\n    if ansible_args:\n        cmd.extend(ansible_args)\n    return run_ansible_playbook(ir_workspace, ir_plugin, cmd, verbose, extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    playbook_cmd = [\"ansible-playbook\", playbook_path]\n    if extra_vars:\n        playbook_cmd.extend(extra_vars.items())\n    if ansible_args:\n        playbook_cmd.extend(ansible_args.items())\n    return run_cmd(ir_workspace, ir_plugin, playbook_cmd, verbose,\n                   extra_vars=extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    # type: (dict[str, str], InfraredWorkspace, InfraredPlugin, bool, dict[str, str], dict[str, str]) -> int\n    return _ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                            extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_plugin.play_vars:\n        vars_dict.update(ir_plugin.play_vars)\n    return cli_args[0].run(vars_dict=vars_dict, workspace=ir_workspace)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict[\"ir_workspace\"] = ir_workspace\n    vars_dict[\"ir_plugin\"] = ir_plugin\n\n    return cli_args[0](vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    res = {}\n    for key in vars_dict:\n        res[key] = ir_plugin.run_playbook(cli_args, vars_dict[key], ir_workspace, ir_plugin)\n    return res\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict[str, str], dict[str, str], dict[str, str], str) -> dict[str, str]\n    if ir_workspace is None:\n        ir_workspace = {}\n    if ir_plugin is None:\n        ir_plugin = {}\n\n    # Create the playbook and execute it\n    playbook = Playbook(cli_args, ir_workspace, ir_plugin)\n    return playbook.run()\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args.func(ir_workspace, ir_plugin, vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], dict[str, str]) -> dict[str, str]\n    result = {}  # type: dict[str, str]\n\n    if cli_args:\n        # Execute the command\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n\n    return result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](vars_dict, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], InfraredWorkspace, InfraredPlugin) -> dict[str, str]\n    ansible_result = {}\n    ansible_result['result'] ='success'\n    ansible_result['changed'] = False\n\n    # if the plugin is not active, the plugin should return false\n    if ir_plugin.is_active():\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n        if result['result'] =='success':\n            ansible_result['changed'] = True\n            ansible_result['result'] ='success'\n        else:\n            ansible_result['changed'] = True\n            ansible_result['result'] = 'fail'\n\n    return ansible_result\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_plugin.play_vars:\n        vars_dict.update(ir_plugin.play_vars)\n    return cli_args[0].run(vars_dict=vars_dict, workspace=ir_workspace)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    vars_dict[\"ir_workspace\"] = ir_workspace\n    vars_dict[\"ir_plugin\"] = ir_plugin\n\n    return cli_args[0](vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    res = {}\n    for key in vars_dict:\n        res[key] = ir_plugin.run_playbook(cli_args, vars_dict[key], ir_workspace, ir_plugin)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict[str, str], dict[str, str], dict[str, str], str) -> dict[str, str]\n    if ir_workspace is None:\n        ir_workspace = {}\n    if ir_plugin is None:\n        ir_plugin = {}\n\n    # Create the playbook and execute it\n    playbook = Playbook(cli_args, ir_workspace, ir_plugin)\n    return playbook.run()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args.func(ir_workspace, ir_plugin, vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], dict[str, str]) -> dict[str, str]\n    result = {}  # type: dict[str, str]\n\n    if cli_args:\n        # Execute the command\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return ir_workspace.run_playbook(cli_args, vars_dict, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    return cli_args[0](vars_dict, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (list[str], dict[str, str], InfraredWorkspace, InfraredPlugin) -> dict[str, str]\n    ansible_result = {}\n    ansible_result['result'] ='success'\n    ansible_result['changed'] = False\n\n    # if the plugin is not active, the plugin should return false\n    if ir_plugin.is_active():\n        result = ir_plugin.run_playbook(cli_args, vars_dict)\n        if result['result'] =='success':\n            ansible_result['changed'] = True\n            ansible_result['result'] ='success'\n        else:\n            ansible_result['changed'] = True\n            ansible_result['result'] = 'fail'\n\n    return ansible_result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = type(values_dict[parser_name])(values_dict[parser_name])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in list(values_dict.items()):\n        if value is not None:\n            values_dict[key] = str(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for k, v in list(values_dict.items()):\n        if isinstance(v, str):\n            values_dict[k] = v.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = {k: str(v) for k, v in six.iteritems(values_dict[parser_name])}\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    # TODO(sam): Implement this function.\n    pass\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key in values_dict:\n        if values_dict[key] is not None:\n            values_dict[key] = str(values_dict[key])\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = \",\".join(value)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in list(values_dict.items()):\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--' + parser_name + '='):\n            values_dict[key] = values_dict[key].replace('\\'', '\\\"')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = type(values_dict[parser_name])(values_dict[parser_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in list(values_dict.items()):\n        if value is not None:\n            values_dict[key] = str(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for k, v in list(values_dict.items()):\n        if isinstance(v, str):\n            values_dict[k] = v.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in values_dict:\n        values_dict[parser_name] = {k: str(v) for k, v in six.iteritems(values_dict[parser_name])}\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    # TODO(sam): Implement this function.\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key in values_dict:\n        if values_dict[key] is not None:\n            values_dict[key] = str(values_dict[key])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = \",\".join(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    \"\"\"\n    Casts arguments to correct types by modifying values_dict param.\n    By default all the values are strings.\n    :param parser_name: The command name, e.g. main, virsh, ospd, etc\n    :param values_dict: The dict of with arguments to be converted\n    \"\"\"\n    for key, value in list(values_dict.items()):\n        if isinstance(value, str):\n            values_dict[key] = value.strip()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key in values_dict:\n        if key in ('--' + parser_name + '='):\n            values_dict[key] = values_dict[key].replace('\\'', '\\\"')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    \"\"\"\n    Use YAML to read various information in plugin_dir, return the information in\n    dictionary form.\n    \"\"\"\n    return {\n        'name': os.path.basename(plugin_dir),\n       'version': get_version_from_plugin_dir(plugin_dir),\n        'author': get_author_from_plugin_dir(plugin_dir),\n        'description': get_description_from_plugin_dir(plugin_dir),\n        'author_email': get_author_email_from_plugin_dir(plugin_dir),\n        'license': get_license_from_plugin_dir(plugin_dir),\n        'url': get_url_from_plugin_dir(plugin_dir),\n        'dependencies': get_dependencies_from_plugin_dir(plugin_dir),\n        'long_description': get_long_description_from_plugin_dir(plugin_dir),\n       'manual_dependencies': get_manual_dependencies_from_plugin_dir(plugin_dir),\n        'python_dependencies': get_python_dependencies_from_plugin_dir(plugin_dir),\n        'test_dependencies': get_test_dependencies_from_plugin_dir(plugin_dir),\n        'test_requirements': get_test_requirements_from_pl", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, 'info.yaml')).read())\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, '__init__.py')).read())\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for plugin_file in glob.glob(os.path.join(plugin_dir, '*.yaml')):\n        plugin_spec = yaml.safe_load(open(plugin_file))\n        if'version' in plugin_spec:\n            spec_dict['version'] = plugin_spec['version']\n        if 'name' in plugin_spec:\n            spec_dict['name'] = plugin_spec['name']\n        if 'description' in plugin_spec:\n            spec_dict['description'] = plugin_spec['description']\n        if 'author' in plugin_spec:\n            spec_dict['author'] = plugin_spec['author']\n        if 'author_email' in plugin_spec:\n            spec_dict['author_email'] = plugin_spec['author_email']\n        if 'author_url' in plugin_spec:\n            spec_dict['author_url'] = plugin_spec['author_url']\n        if 'tags' in plugin_spec:\n            spec_dict['tags'] = plugin_spec['tags']\n        i", "def get_plugin_spec_flatten_dict(plugin_dir):\n    data = {}\n    for p in get_plugin_spec(plugin_dir):\n        data.update(yaml.safe_load(p))\n    return data\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    if os.path.exists(os.path.join(plugin_dir, \"config.yaml\")):\n        with open(os.path.join(plugin_dir, \"config.yaml\")) as f:\n            result = yaml.safe_load(f)\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, \"__init__.py\")).read())\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    \"\"\"\n    Use YAML to read various information in plugin_dir, return the information in dictionary form.\n    \"\"\"\n    plugin_spec_dict = {}\n    if os.path.exists(os.path.join(plugin_dir, \"meta.yaml\")):\n        with open(os.path.join(plugin_dir, \"meta.yaml\")) as ymlfile:\n            plugin_spec_dict = yaml.safe_load(ymlfile)\n    if os.path.exists(os.path.join(plugin_dir, \"plugin.yaml\")):\n        with open(os.path.join(plugin_dir, \"plugin.yaml\")) as ymlfile:\n            plugin_spec_dict = yaml.safe_load(ymlfile)\n    return plugin_spec_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, \"info.yaml\")).read())\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    \n    return yaml.safe_load(open(plugin_dir).read())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \"\"\"\n    Use YAML to read various information in plugin_dir, return the information in\n    dictionary form.\n    \"\"\"\n    return {\n        'name': os.path.basename(plugin_dir),\n       'version': get_version_from_plugin_dir(plugin_dir),\n        'author': get_author_from_plugin_dir(plugin_dir),\n        'description': get_description_from_plugin_dir(plugin_dir),\n        'author_email': get_author_email_from_plugin_dir(plugin_dir),\n        'license': get_license_from_plugin_dir(plugin_dir),\n        'url': get_url_from_plugin_dir(plugin_dir),\n        'dependencies': get_dependencies_from_plugin_dir(plugin_dir),\n        'long_description': get_long_description_from_plugin_dir(plugin_dir),\n       'manual_dependencies': get_manual_dependencies_from_plugin_dir(plugin_dir),\n        'python_dependencies': get_python_dependencies_from_plugin_dir(plugin_dir),\n        'test_dependencies': get_test_dependencies_from_plugin_dir(plugin_dir),\n        'test_requirements': get_test_requirements_from_pl", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, 'info.yaml')).read())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, '__init__.py')).read())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_dict = {}\n    for plugin_file in glob.glob(os.path.join(plugin_dir, '*.yaml')):\n        plugin_spec = yaml.safe_load(open(plugin_file))\n        if'version' in plugin_spec:\n            spec_dict['version'] = plugin_spec['version']\n        if 'name' in plugin_spec:\n            spec_dict['name'] = plugin_spec['name']\n        if 'description' in plugin_spec:\n            spec_dict['description'] = plugin_spec['description']\n        if 'author' in plugin_spec:\n            spec_dict['author'] = plugin_spec['author']\n        if 'author_email' in plugin_spec:\n            spec_dict['author_email'] = plugin_spec['author_email']\n        if 'author_url' in plugin_spec:\n            spec_dict['author_url'] = plugin_spec['author_url']\n        if 'tags' in plugin_spec:\n            spec_dict['tags'] = plugin_spec['tags']\n        i", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    data = {}\n    for p in get_plugin_spec(plugin_dir):\n        data.update(yaml.safe_load(p))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    if os.path.exists(os.path.join(plugin_dir, \"config.yaml\")):\n        with open(os.path.join(plugin_dir, \"config.yaml\")) as f:\n            result = yaml.safe_load(f)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, \"__init__.py\")).read())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \"\"\"\n    Use YAML to read various information in plugin_dir, return the information in dictionary form.\n    \"\"\"\n    plugin_spec_dict = {}\n    if os.path.exists(os.path.join(plugin_dir, \"meta.yaml\")):\n        with open(os.path.join(plugin_dir, \"meta.yaml\")) as ymlfile:\n            plugin_spec_dict = yaml.safe_load(ymlfile)\n    if os.path.exists(os.path.join(plugin_dir, \"plugin.yaml\")):\n        with open(os.path.join(plugin_dir, \"plugin.yaml\")) as ymlfile:\n            plugin_spec_dict = yaml.safe_load(ymlfile)\n    return plugin_spec_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    return yaml.safe_load(open(os.path.join(plugin_dir, \"info.yaml\")).read())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    \n    \n    return yaml.safe_load(open(plugin_dir).read())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self.ansible_config_path", "def inject_config(self):\n    os.environ.setdefault('ANSIBLE_CONFIG', self.ansible_config_path)\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "def inject_config(self):\n    \"\"\"\n    If the ANSIBLE_CONFIG property does not exist in os.environ, set it to\n    self.ansible_config_path. \n    \"\"\"\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    \n    \n    try:\n        self.ansible_config_path = os.environ[\"ANSIBLE_CONFIG\"]\n    except KeyError:\n        self.ansible_config_path = self.default_ansible_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    self.ansible_config_path = os.environ.get('ANSIBLE_CONFIG')\n    if self.ansible_config_path is None:\n        self.ansible_config_path = '/etc/ansible/ansible.cfg'\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self.ansible_config_path", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    os.environ.setdefault('ANSIBLE_CONFIG', self.ansible_config_path)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    \"\"\"\n    If the ANSIBLE_CONFIG property does not exist in os.environ, set it to\n    self.ansible_config_path. \n    \"\"\"\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    \n    \n    try:\n        self.ansible_config_path = os.environ[\"ANSIBLE_CONFIG\"]\n    except KeyError:\n        self.ansible_config_path = self.default_ansible_config_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    self.ansible_config_path = os.environ.get('ANSIBLE_CONFIG')\n    if self.ansible_config_path is None:\n        self.ansible_config_path = '/etc/ansible/ansible.cfg'\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(self.name, help=self.help)\n    self._add_arguments(self._cli_parser)\n", "def extend_cli(self, root_subparsers):\n    self._add_common_cli(root_subparsers)\n    self._add_common_opts(root_subparsers)\n    self._add_server_opts(root_subparsers)\n", "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        'account-groups',\n        help=textwrap.fill('List account groups.', width=self.max_x)\n    )\n    subparser.set_defaults(command=self.handle)\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    pass\n", "def extend_cli(self, root_subparsers):\n    self.subparsers = root_subparsers.add_parser('debug', help='Debug the spec.')\n    self.subparsers.add_argument('--version', action='version', version='%(prog)s {}'.format(self.__version__))\n", "def extend_cli(self, root_subparsers):\n    # TODO: Add support for \"--help\" and \"-h\"\n    pass\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\"spec\", help=\"Print the spec for a package.\")\n    parser.add_argument(\"package\", help=\"The package to show.\")\n    parser.set_defaults(func=self._spec)\n", "def extend_cli(self, root_subparsers):\n    self._cli.extend(root_subparsers)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli_parser = root_subparsers.add_parser(self.name, help=self.help)\n    self._add_arguments(self._cli_parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._add_common_cli(root_subparsers)\n    self._add_common_opts(root_subparsers)\n    self._add_server_opts(root_subparsers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    subparser = root_subparsers.add_parser(\n        'account-groups',\n        help=textwrap.fill('List account groups.', width=self.max_x)\n    )\n    subparser.set_defaults(command=self.handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self.subparsers = root_subparsers.add_parser('debug', help='Debug the spec.')\n    self.subparsers.add_argument('--version', action='version', version='%(prog)s {}'.format(self.__version__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    # TODO: Add support for \"--help\" and \"-h\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\"spec\", help=\"Print the spec for a package.\")\n    parser.add_argument(\"package\", help=\"The package to show.\")\n    parser.set_defaults(func=self._spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    self._cli.extend(root_subparsers)\n", "is_pass": false, "return_code": 1}]}
