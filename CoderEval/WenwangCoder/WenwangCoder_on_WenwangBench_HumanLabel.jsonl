{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "hydrate_time", "docstring": "Hydrator for `Time` and `LocalTime` values.\n\n:param nanoseconds:\n:param tz:\n:return: Time", "ques_id": "62e60f43d76274f8a4026e28", "code": ["def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, (int, float)):\n        raise ValueError(\"Invalid nanoseconds value: %s\" % nanoseconds)\n    if tz:\n        delta = timedelta(microseconds=nanoseconds)\n    else:\n        delta = timedelta(seconds=nanoseconds)\n    if tz:\n        return datetime.fromtimestamp(nanoseconds, tz)\n    else:\n        return datetime.utcfromtimestamp(nanoseconds) + delta\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_current_timezone()\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = get_current_timezone()\n\n    if nanoseconds >= 1000000000:\n        # Convert to UTC\n        tzinfo = tz.utc\n    else:\n        # Convert to local time\n        tzinfo = tz.normalize(tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds)))\n\n    return tzinfo.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz:\n        if not isinstance(tz, tzinfo):\n            raise ValueError(\"tzinfo required\")\n        nanos = nanoseconds * (10 ** -9)\n        return datetime.datetime.utcfromtimestamp(nanos).replace(tzinfo=tz)\n    else:\n        return datetime.datetime.utcfromtimestamp(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    time = datetime.datetime.fromtimestamp(nanoseconds, tz)\n    return time.isoformat()\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n\n    # TODO: this is wrong and doesn't really handle fractions. need to make\n    # it smarter\n    nanos = int(nanoseconds * 1e9)\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanos))\n", "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    if isinstance(nanoseconds, int):\n        nanoseconds = datetime.fromtimestamp(nanoseconds, tz)\n    # XXX handle fractions with no associated tzinfo\n    return tz.fromutc(nanoseconds)\n", "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, (int, long)):\n        raise ValueError(\"Integer expected, got {}\".format(type(nanoseconds)))\n    if nanoseconds < 0:\n        raise ValueError(\"Nanoseconds must be positive\")\n\n    if tz is None:\n        tz = tzlocal()\n\n    date = datetime.datetime.utcfromtimestamp(nanoseconds / 1000000000, tz=tz)\n    return date.strftime(\"%Y-%m-%d %H:%M:%S\")\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, (int, float)):\n        raise ValueError(\"Invalid nanoseconds value: %s\" % nanoseconds)\n    if tz:\n        delta = timedelta(microseconds=nanoseconds)\n    else:\n        delta = timedelta(seconds=nanoseconds)\n    if tz:\n        return datetime.fromtimestamp(nanoseconds, tz)\n    else:\n        return datetime.utcfromtimestamp(nanoseconds) + delta\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = timezone.get_current_timezone()\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not tz:\n        tz = get_current_timezone()\n\n    if nanoseconds >= 1000000000:\n        # Convert to UTC\n        tzinfo = tz.utc\n    else:\n        # Convert to local time\n        tzinfo = tz.normalize(tz.localize(datetime.datetime.utcfromtimestamp(nanoseconds)))\n\n    return tzinfo.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz:\n        if not isinstance(tz, tzinfo):\n            raise ValueError(\"tzinfo required\")\n        nanos = nanoseconds * (10 ** -9)\n        return datetime.datetime.utcfromtimestamp(nanos).replace(tzinfo=tz)\n    else:\n        return datetime.datetime.utcfromtimestamp(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = pytz.utc\n    time = datetime.datetime.fromtimestamp(nanoseconds, tz)\n    return time.isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanoseconds))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = timezone.get_current_timezone()\n\n    # TODO: this is wrong and doesn't really handle fractions. need to make\n    # it smarter\n    nanos = int(nanoseconds * 1e9)\n    return tz.fromutc(datetime.datetime.utcfromtimestamp(nanos))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if tz is None:\n        tz = get_current_timezone()\n    if isinstance(nanoseconds, int):\n        nanoseconds = datetime.fromtimestamp(nanoseconds, tz)\n    # XXX handle fractions with no associated tzinfo\n    return tz.fromutc(nanoseconds)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hydrate_time(nanoseconds, tz=None):\n    if not isinstance(nanoseconds, (int, long)):\n        raise ValueError(\"Integer expected, got {}\".format(type(nanoseconds)))\n    if nanoseconds < 0:\n        raise ValueError(\"Nanoseconds must be positive\")\n\n    if tz is None:\n        tz = tzlocal()\n\n    date = datetime.datetime.utcfromtimestamp(nanoseconds / 1000000000, tz=tz)\n    return date.strftime(\"%Y-%m-%d %H:%M:%S\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_timedelta", "docstring": "Dehydrator for `timedelta` values.\n\n:param value:\n:type value: timedelta\n:return:", "ques_id": "62e60f3bd76274f8a4026e10", "code": ["def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value\n\n    if isinstance(value, datetime.datetime):\n        return datetime.timedelta(seconds=value.seconds + value.days * 24 * 3600)\n\n    raise ValueError(\"Cannot convert %s to timedelta\" % value)\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value == None or value < timedelta():\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValidationError(_('Minutes cannot be negative'))\n    if value.seconds < 0:\n        raise ValidationError(_('Seconds cannot be negative'))\n    if value.microseconds < 0:\n        raise ValidationError(_('Microseconds cannot be negative'))\n    return timedelta(\n        days=value.days,\n        seconds=value.seconds,\n        microseconds=value.microseconds\n    )\n", "def dehydrate_timedelta(value):\n    if value.days > 0:\n        return timedelta(days=value.days)\n\n    return timedelta()\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=int(value.total_seconds()))\n", "def dehydrate_timedelta(value):\n    return timedelta(\n        seconds=value.total_seconds(),\n        microseconds=value.microseconds // 1000\n    )\n", "def dehydrate_timedelta(value):\n    if isinstance(value, timedelta):\n        return str(value)\n    return value\n", "def dehydrate_timedelta(value):\n    \"Use the value in timedelta to generate the Structure class.\"\n    return timedelta(seconds=value.total_seconds())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, datetime.timedelta):\n        return value\n\n    if isinstance(value, datetime.datetime):\n        return datetime.timedelta(seconds=value.seconds + value.days * 24 * 3600)\n\n    raise ValueError(\"Cannot convert %s to timedelta\" % value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value == None or value < timedelta():\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days < 0:\n        raise ValidationError(_('Minutes cannot be negative'))\n    if value.seconds < 0:\n        raise ValidationError(_('Seconds cannot be negative'))\n    if value.microseconds < 0:\n        raise ValidationError(_('Microseconds cannot be negative'))\n    return timedelta(\n        days=value.days,\n        seconds=value.seconds,\n        microseconds=value.microseconds\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value.days > 0:\n        return timedelta(days=value.days)\n\n    return timedelta()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if value is None:\n        return None\n    return timedelta(seconds=int(value.total_seconds()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    return timedelta(\n        seconds=value.total_seconds(),\n        microseconds=value.microseconds // 1000\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    if isinstance(value, timedelta):\n        return str(value)\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_timedelta(value):\n    \"Use the value in timedelta to generate the Structure class.\"\n    return timedelta(seconds=value.total_seconds())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/temporal.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_time", "docstring": "Dehydrator for `time` values.\n\n:param value:\n:type value: Time\n:return:", "ques_id": "62e60f37d76274f8a4026dfd", "code": ["def dehydrate_time(value):\n    \"Use ticks in the Time class to generate the Structure class. \"\n    if value is None:\n        return None\n\n    if isinstance(value, Ticks):\n        return value\n\n    return Structure(\n        time=value,\n        source='time'\n    )\n", "def dehydrate_time(value):\n    return Structure(\n        'time',\n        time=Time(value=value, format='isot', scale='utc'),\n    )\n", "def dehydrate_time(value):\n    \"Ticks in the Time class to generate the Structure class.\"\n    return Time(value, format='iso', scale='utc')\n", "def dehydrate_time(value):\n    if value is None:\n        return None\n    if isinstance(value, Structure):\n        return value\n    if isinstance(value, Time):\n        return Structure(value.shape, value.dtype, value.axes)\n    return Structure(value.shape, value.dtype)\n", "def dehydrate_time(value):\n    if value is None:\n        return None\n    return Structure(value.__class__)\n", "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0))\n    return FixedOffset(value.total_seconds() / 3600)\n", "def dehydrate_time(value):\n    \"Ticks in the Time class to generate the Structure class.\"\n    if value is None:\n        return None\n    return Structure(value.__class__)\n", "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0, \"UTC\"))\n    return Structure(\n        \"time\",\n        Time(\n            value.year, value.month, value.day, value.hour, value.minute, value.second, 0, tzinfo=FixedOffset(0, \"UTC\")\n        ),\n    )\n", "def dehydrate_time(value):\n    if value.tzinfo is None:\n        raise ValidationError(\"Time field must be a naive datetime object.\")\n    return Structure(\n        \"time\",\n        Time(\n            value.hour,\n            value.minute,\n            value.second,\n            value.microsecond,\n            tzinfo=value.tzinfo,\n        ),\n    )\n", "def dehydrate_time(value):\n    if value is None:\n        return None\n    if isinstance(value, Time):\n        return value\n    elif isinstance(value, str):\n        return Structure('Time', value=value)\n    else:\n        raise ValueError('Cannot convert %s to a Structure class' % type(value))\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_time(value):\n    \"Use ticks in the Time class to generate the Structure class. \"\n    if value is None:\n        return None\n\n    if isinstance(value, Ticks):\n        return value\n\n    return Structure(\n        time=value,\n        source='time'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    return Structure(\n        'time',\n        time=Time(value=value, format='isot', scale='utc'),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"Ticks in the Time class to generate the Structure class.\"\n    return Time(value, format='iso', scale='utc')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is None:\n        return None\n    if isinstance(value, Structure):\n        return value\n    if isinstance(value, Time):\n        return Structure(value.shape, value.dtype, value.axes)\n    return Structure(value.shape, value.dtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is None:\n        return None\n    return Structure(value.__class__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0))\n    return FixedOffset(value.total_seconds() / 3600)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    \"Ticks in the Time class to generate the Structure class.\"\n    if value is None:\n        return None\n    return Structure(value.__class__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value.tzinfo is None:\n        value = value.replace(tzinfo=FixedOffset(0, \"UTC\"))\n    return Structure(\n        \"time\",\n        Time(\n            value.year, value.month, value.day, value.hour, value.minute, value.second, 0, tzinfo=FixedOffset(0, \"UTC\")\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value.tzinfo is None:\n        raise ValidationError(\"Time field must be a naive datetime object.\")\n    return Structure(\n        \"time\",\n        Time(\n            value.hour,\n            value.minute,\n            value.second,\n            value.microsecond,\n            tzinfo=value.tzinfo,\n        ),\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_time(value):\n    if value is None:\n        return None\n    if isinstance(value, Time):\n        return value\n    elif isinstance(value, str):\n        return Structure('Time', value=value)\n    else:\n        raise ValueError('Cannot convert %s to a Structure class' % type(value))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/hydration/v1/spatial.py", "project": "neo4j/neo4j-python-driver", "name": "dehydrate_point", "docstring": "Dehydrator for Point data.\n\n:param value:\n:type value: Point\n:return:", "ques_id": "62e60f33d76274f8a4026de9", "code": ["def dehydrate_point(value):\n    if len(value) > 25:\n        raise ValidationError(\"Point cannot be longer than 25 characters.\")\n    return value\n", "def dehydrate_point(value):\n    if len(value) > 4:\n        return {\n            'x': value[0:4],\n            'y': value[4:8]\n        }\n    return {\n        'x': value[0],\n        'y': value[1]\n    }\n", "def dehydrate_point(value):\n    if len(value) < 2:\n        raise ValidationError(_(\"Point must have at least two components.\"))\n    return value\n", "def dehydrate_point(value):\n    if len(value) < 3:\n        raise ValidationError(\"Invalid point length.\")\n    return value\n", "def dehydrate_point(value):\n    if len(value) > 2:\n        return value[0:2]\n    return value\n", "def dehydrate_point(value):\n    if len(value) > 5:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n        )\n    return Point(value[0], value[1], value[2], value[3])\n", "def dehydrate_point(value):\n    if len(value) == 4:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n        )\n    elif len(value) == 6:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n            float(value[4]),\n        )\n    else:\n        raise ValueError(\"Invalid value length %s\" % len(value))\n", "def dehydrate_point(value):\n    if len(value) < 4:\n        raise ValidationError('Point must have a minimum length of 4 characters.')\n", "def dehydrate_point(value):\n    if len(value) < 4:\n        raise ValidationError(\"Point must be at least 4 characters long\")\n", "def dehydrate_point(value):\n    if len(value) <= 7:\n        return value\n    return value[0:6]\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def dehydrate_point(value):\n    if len(value) > 25:\n        raise ValidationError(\"Point cannot be longer than 25 characters.\")\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) > 4:\n        return {\n            'x': value[0:4],\n            'y': value[4:8]\n        }\n    return {\n        'x': value[0],\n        'y': value[1]\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) < 2:\n        raise ValidationError(_(\"Point must have at least two components.\"))\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) < 3:\n        raise ValidationError(\"Invalid point length.\")\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) > 2:\n        return value[0:2]\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) > 5:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n        )\n    return Point(value[0], value[1], value[2], value[3])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) == 4:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n        )\n    elif len(value) == 6:\n        return Point(\n            float(value[0]),\n            float(value[1]),\n            float(value[2]),\n            float(value[3]),\n            float(value[4]),\n        )\n    else:\n        raise ValueError(\"Invalid value length %s\" % len(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) < 4:\n        raise ValidationError('Point must have a minimum length of 4 characters.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) < 4:\n        raise ValidationError(\"Point must be at least 4 characters long\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dehydrate_point(value):\n    if len(value) <= 7:\n        return value\n    return value[0:6]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "keys", "docstring": "Return the keys of the record.\n\n:return: list of key names", "ques_id": "62e60ed4d76274f8a4026da0", "code": ["def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return self.__keys\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    keys = []\n    for item in self.__iter__():\n        keys.append(item.__keys)\n    return keys\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n", "def keys(self):\n    return list(self.__keys)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return self.__keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    keys = []\n    for item in self.__iter__():\n        keys.append(item.__keys)\n    return keys\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def keys(self):\n    return list(self.__keys)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_sync/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60ecfd76274f8a4026d6a", "code": ["def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = neo4j.PROTOCOL_VERSION\n    return {\n        'neo4j': {\n           'version': protocol_version,\n            'handlers': {\n                'neo4j': {\n                    'cls': Neo4jHandler,\n                   'version': neo4j.__version__\n                }\n            }\n        }\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_HANDLERS_CLS.get(protocol_version, [])\n", "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(protocol_version)\n    return {\n        version: HANDLERS.get(version, handler)\n        for version, handler in version_list.items()\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    cls.PROTOCOL_VERSION = protocol_version or cls.PROTOCOL_VERSION\n    return {\n        v: k for k, v in cls.HANDLER_CLS.items()\n        if cls.PROTOCOL_VERSION >= v >= cls.DER_ENC_HANDLER\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return [cls(v) for v in versions]\n    else:\n        return [cls(v, protocol_version) for v in versions]\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    version = cls.PROTOCOL_VERSION if protocol_version is None else protocol_version\n    return {\n        'neo4j': {\n           'version': version,\n            'unique_key': 'unique_key',\n            'neo4j_uri': 'neo4j://{}/{}'.format(\n                cls.HOST, cls.NEO4J_PORT),\n            'neo4j_user': cls.USER_AGENT,\n            'neo4j_password': cls.PASSWORD\n        }\n    }\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    \"protocol_handlers(cls, protocol_version=None)\"\n    version = cls.PROTOCOL_VERSION if protocol_version is None else protocol_version\n    if version == 1:\n        return cls.HANDLER_CLS\n    elif version == 2:\n        return cls.HANDLER_STATIC\n    else:\n        raise NotImplementedError(\"Unknown protocol version: %d\" % version)\n", "def protocol_handlers(cls, protocol_version=None):\n    \"protocol_handlers(self, protocol_version=None)\"\n    result = {}\n    for p in cls.protocol_versions:\n        result[p] = getattr(self, '_protocol_handler_' + p)\n    return result\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = neo4j.PROTOCOL_VERSION\n    return {\n        'neo4j': {\n           'version': protocol_version,\n            'handlers': {\n                'neo4j': {\n                    'cls': Neo4jHandler,\n                   'version': neo4j.__version__\n                }\n            }\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_HANDLERS_CLS.get(protocol_version, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version_list = cls.version_list(protocol_version)\n    return {\n        version: HANDLERS.get(version, handler)\n        for version, handler in version_list.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    cls.PROTOCOL_VERSION = protocol_version or cls.PROTOCOL_VERSION\n    return {\n        v: k for k, v in cls.HANDLER_CLS.items()\n        if cls.PROTOCOL_VERSION >= v >= cls.DER_ENC_HANDLER\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    versions = cls.version_list(cls.PROTOCOL_VERSION)\n    if protocol_version is None:\n        return [cls(v) for v in versions]\n    else:\n        return [cls(v, protocol_version) for v in versions]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    version = cls.PROTOCOL_VERSION if protocol_version is None else protocol_version\n    return {\n        'neo4j': {\n           'version': version,\n            'unique_key': 'unique_key',\n            'neo4j_uri': 'neo4j://{}/{}'.format(\n                cls.HOST, cls.NEO4J_PORT),\n            'neo4j_user': cls.USER_AGENT,\n            'neo4j_password': cls.PASSWORD\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"protocol_handlers(cls, protocol_version=None)\"\n    version = cls.PROTOCOL_VERSION if protocol_version is None else protocol_version\n    if version == 1:\n        return cls.HANDLER_CLS\n    elif version == 2:\n        return cls.HANDLER_STATIC\n    else:\n        raise NotImplementedError(\"Unknown protocol version: %d\" % version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"protocol_handlers(self, protocol_version=None)\"\n    result = {}\n    for p in cls.protocol_versions:\n        result[p] = getattr(self, '_protocol_handler_' + p)\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/work/query.py", "project": "neo4j/neo4j-python-driver", "name": "unit_of_work", "docstring": "This function is a decorator for transaction functions that allows extra control over how the transaction is carried out.\n\nFor example, a timeout may be applied::\n\n    from neo4j import unit_of_work\n\n    @unit_of_work(timeout=100)\n    def count_people_tx(tx):\n        result = tx.run(\"MATCH (a:Person) RETURN count(a) AS persons\")\n        record = result.single()\n        return record[\"persons\"]\n\n:param metadata:\n    a dictionary with metadata.\n    Specified metadata will be attached to the executing transaction and visible in the output of ``dbms.listQueries`` and ``dbms.listTransactions`` procedures.\n    It will also get logged to the ``query.log``.\n    This functionality makes it easier to tag transactions and is equivalent to ``dbms.setTXMetaData`` procedure, see https://neo4j.com/docs/operations-manual/current/reference/procedures/ for procedure reference.\n:type metadata: dict\n\n:param timeout:\n    the transaction timeout in seconds.\n    Transactions that execute longer than the configured timeout will be terminated by the database.\n    This functionality allows to limit query/transaction execution time.\n    Specified timeout overrides the default timeout configured in the database using ``dbms.transaction.timeout`` setting.\n    Value should not represent a negative duration.\n    A zero duration will make the transaction execute indefinitely.\n    None will use the default timeout configured in the database.\n:type timeout: float or :const:`None`", "ques_id": "62e60e49d76274f8a4026d25", "code": ["def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is not None:\n            func.metadata = metadata\n        if timeout is not None:\n            func.timeout = timeout\n        return func\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = 0\n\n        def get_metadata(key):\n            return metadata.get(key, getattr(cls, key))\n\n        def set_metadata(key, value):\n            get_metadata(key).update(value)\n            return metadata[key]\n\n        def del_metadata(key):\n            del get_metadata(key)\n\n        get_metadata.__name__ = str(key)\n        set_metadata.__name__ = str(key)\n        del_metadata.__name__ = str(key)\n        return cls\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is not None:\n            func.metadata = metadata\n        if timeout is not None:\n            func.timeout = timeout\n        return func\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(method):\n        if metadata is not None and not isinstance(metadata, Metadata):\n            raise TypeError('metadata must be a Metadata instance.')\n        if timeout is not None and not isinstance(timeout, Timeout):\n            raise TypeError('timeout must be a Timeout instance.')\n        return MethodType(method, (Worker,), metadata, timeout)\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if not isinstance(cls, type):\n            raise ValueError(\"class {} must be a type\".format(cls))\n        if metadata is not None and not isinstance(metadata, types.Metadata):\n            raise ValueError(\"metadata {} must be a type\".format(metadata))\n        if timeout is not None and not isinstance(timeout, types.Timeout):\n            raise ValueError(\"timeout {} must be a type\".format(timeout))\n        return cls\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is None:\n            metadata = Metadata()\n        if timeout is None:\n            timeout = 0\n        return functools.partial(_UnitOfWork, metadata, timeout)(func)\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    if timeout is None:\n        timeout = DEFAULT_TIMEOUT\n\n    def decorator(cls):\n        if metadata is None:\n            metadata = Metadata()\n\n        def _work(self):\n            return self._run_and_wait(metadata, timeout)\n\n        cls._run = _work\n        return cls\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(method):\n        if metadata is not None:\n            method._metadata = metadata\n        if timeout is not None:\n            method._timeout = timeout\n        return method\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = 0\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__unit_of_work__ = True\n        wrapper.__metadata__ = metadata\n        wrapper.__timeout__ = timeout\n        return wrapper\n    return decorator\n", "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = cls.DEFAULT_TIMEOUT\n        if 'timeout' in metadata:\n            timeout = metadata['timeout']\n        cls._timeout = timeout\n        cls._metadata = metadata\n        return cls\n    return decorator\n"], "level": "self_contained", "generate_results": [{"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is not None:\n            func.metadata = metadata\n        if timeout is not None:\n            func.timeout = timeout\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = 0\n\n        def get_metadata(key):\n            return metadata.get(key, getattr(cls, key))\n\n        def set_metadata(key, value):\n            get_metadata(key).update(value)\n            return metadata[key]\n\n        def del_metadata(key):\n            del get_metadata(key)\n\n        get_metadata.__name__ = str(key)\n        set_metadata.__name__ = str(key)\n        del_metadata.__name__ = str(key)\n        return cls\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is not None:\n            func.metadata = metadata\n        if timeout is not None:\n            func.timeout = timeout\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(method):\n        if metadata is not None and not isinstance(metadata, Metadata):\n            raise TypeError('metadata must be a Metadata instance.')\n        if timeout is not None and not isinstance(timeout, Timeout):\n            raise TypeError('timeout must be a Timeout instance.')\n        return MethodType(method, (Worker,), metadata, timeout)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if not isinstance(cls, type):\n            raise ValueError(\"class {} must be a type\".format(cls))\n        if metadata is not None and not isinstance(metadata, types.Metadata):\n            raise ValueError(\"metadata {} must be a type\".format(metadata))\n        if timeout is not None and not isinstance(timeout, types.Timeout):\n            raise ValueError(\"timeout {} must be a type\".format(timeout))\n        return cls\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is None:\n            metadata = Metadata()\n        if timeout is None:\n            timeout = 0\n        return functools.partial(_UnitOfWork, metadata, timeout)(func)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    if timeout is None:\n        timeout = DEFAULT_TIMEOUT\n\n    def decorator(cls):\n        if metadata is None:\n            metadata = Metadata()\n\n        def _work(self):\n            return self._run_and_wait(metadata, timeout)\n\n        cls._run = _work\n        return cls\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(method):\n        if metadata is not None:\n            method._metadata = metadata\n        if timeout is not None:\n            method._timeout = timeout\n        return method\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(func):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = 0\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        wrapper.__unit_of_work__ = True\n        wrapper.__metadata__ = metadata\n        wrapper.__timeout__ = timeout\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unit_of_work(metadata=None, timeout=None):\n    def decorator(cls):\n        if metadata is None:\n            metadata = {}\n        if timeout is None:\n            timeout = cls.DEFAULT_TIMEOUT\n        if 'timeout' in metadata:\n            timeout = metadata['timeout']\n        cls._timeout = timeout\n        cls._metadata = metadata\n        return cls\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "index", "docstring": "Return the index of the given item.\n\n:param key: a key\n:return: index\n:rtype: int", "ques_id": "62e60e05d76274f8a4026cfd", "code": ["def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    return self.__keys.index(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        key = int(key)\n    except (TypeError, ValueError):\n        raise KeyError\n    for i, k in enumerate(self.__keys):\n        if k == key:\n            return i\n    raise KeyError\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(repr(key))\n", "def index(self, key):\n    try:\n        key = int(key)\n    except (TypeError, ValueError):\n        raise KeyError\n    return key - self.__keys[0] + 1\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    return self.__keys.index(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        key = int(key)\n    except (TypeError, ValueError):\n        raise KeyError\n    for i, k in enumerate(self.__keys):\n        if k == key:\n            return i\n    raise KeyError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(repr(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        key = int(key)\n    except (TypeError, ValueError):\n        raise KeyError\n    return key - self.__keys[0] + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def index(self, key):\n    try:\n        return self.__keys.index(key)\n    except ValueError:\n        raise KeyError(key)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "values", "docstring": "Return the values of the record, optionally filtering to\ninclude only certain values by index or key.\n\n:param keys: indexes or keys of the items to include; if none\n             are provided, all values will be included\n:return: list of values\n:rtype: list", "ques_id": "62e60da4d76274f8a4026cf1", "code": ["def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    return list(self.__getitem__(key) for key in keys)\n", "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    key = tuple(keys)\n    return [self.__getitem__(key) for key in key]\n", "def values(self, *keys):\n    if not keys:\n        keys = self.__keys\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    return list(self.__getitem__(key) for key in keys)\n", "def values(self, *keys):\n    keys = tuple(keys)\n    if keys in self:\n        return [self[key] for key in keys]\n    return []\n", "def values(self, *keys):\n    return [self[k] for k in keys]\n", "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "def values(self, *keys):\n    return [self[key] for key in keys]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return list(self.__getitem__(key) for key in keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    key = tuple(keys)\n    return [self.__getitem__(key) for key in key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    if not keys:\n        keys = self.__keys\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def values(self, *keys):\n    return list(self.__getitem__(key) for key in keys)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    keys = tuple(keys)\n    if keys in self:\n        return [self[key] for key in keys]\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self[k] for k in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self.__getitem__(key) for key in keys]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def values(self, *keys):\n    return [self[key] for key in keys]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_data.py", "project": "neo4j/neo4j-python-driver", "name": "data", "docstring": "Return the keys and values of this record as a dictionary,\noptionally including only certain values by index or key. Keys\nprovided in the items that are not in the record will be\ninserted with a value of :const:`None`; indexes provided\nthat are out of bounds will trigger an :exc:`IndexError`.\n\n:param keys: indexes or keys of the items to include; if none\n              are provided, all values will be included\n:return: dictionary of values, keyed by field name\n:raises: :exc:`IndexError` if an out-of-bounds index is specified", "ques_id": "62e60b10d76274f8a4026ccd", "code": ["def data(self, *keys):\n    return self.__class__([self._get(key, None) for key in keys])\n", "def data(self, *keys):\n    return self._broken_record_error(*keys)\n", "def data(self, *keys):\n    return self.__data[keys]\n", "def data(self, *keys):\n    return self.__class__([self._super_getitem_single(key) for key in keys])\n", "def data(self, *keys):\n    return self._broken_record_error(keys)\n", "def data(self, *keys):\n    return self.__class__([self._broken_record_error(key)\n                          for key in keys])\n", "def data(self, *keys):\n    return self.__data__(*keys)\n", "def data(self, *keys):\n    return self.__class__(\n        map(lambda k: (k, self[k]), keys))\n", "def data(self, *keys):\n    return dict(zip(self.__keys, keys))\n", "def data(self, *keys):\n    return self.__class__([self._get(key, None) for key in keys])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def data(self, *keys):\n    return self.__class__([self._get(key, None) for key in keys])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self._broken_record_error(*keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__data[keys]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__class__([self._super_getitem_single(key) for key in keys])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self._broken_record_error(keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__class__([self._broken_record_error(key)\n                          for key in keys])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__data__(*keys)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__class__(\n        map(lambda k: (k, self[k]), keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return dict(zip(self.__keys, keys))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def data(self, *keys):\n    return self.__class__([self._get(key, None) for key in keys])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_codec/packstream/v1/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "pop_u16", "docstring": "Remove the last two bytes of data, returning them as a big-endian\n16-bit unsigned integer.", "ques_id": "62e6087bd76274f8a4026bfa", "code": ["def pop_u16(self):\n    self.used -= 1\n    return struct.unpack(b\"<H\", self.data[-2:])[0]\n", "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() & 0xff\n", "def pop_u16(self):\n    self.used -= 1\n    return struct.unpack('H', self.data.pop(0))[0]\n", "def pop_u16(self):\n    self.used -= 1\n    return self.data.pop() if self.used == 2 else None\n", "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('H', self.data.pop())[0]\n", "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() + (self.data.pop() << 8)\n", "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() + (self.data.pop() << 8)\n", "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('<H', self.data[:2])[0]\n", "def pop_u16(self):\n    self.used -= 1\n    return self.data.pop() << 8 | self.data.pop()\n", "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('<H', self.data[-2:])[0]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop_u16(self):\n    self.used -= 1\n    return struct.unpack(b\"<H\", self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() & 0xff\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 1\n    return struct.unpack('H', self.data.pop(0))[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 1\n    return self.data.pop() if self.used == 2 else None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('H', self.data.pop())[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() + (self.data.pop() << 8)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return self.data.pop() + (self.data.pop() << 8)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('<H', self.data[:2])[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 1\n    return self.data.pop() << 8 | self.data.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop_u16(self):\n    self.used -= 2\n    return struct.unpack('<H', self.data[-2:])[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "discard", "docstring": "Appends a DISCARD message to the output queue.\n\n:param n: number of records to discard, default = -1 (ALL)\n:param qid: query ID to discard for, default = -1 (last query)\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object", "ques_id": "62e6087ad76274f8a4026bf2", "code": ["def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run(self.discard_query, {'n': n,\n                                          'qid': qid,\n                                          'dehydration_hooks': dehydration_hooks,\n                                          'hydration_hooks': hydration_hooks}, mode='discard', **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run(\n        'discard', None, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                        ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    self.discard_query(n, qid, dehydration_hooks, hydration_hooks,\n                       **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        hydration_hooks = {}\n    return self.run(self.discard_n(n, qid),\n                    self.discard_deh(dehydration_hooks),\n                    self.discard_h(hydration_hooks),\n                    **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\" D\n    \"\"\"\n    def _discard(query, parameters=(), **kwargs):\n        return self.run(\n            query, parameters, mode=D.DISCARD, bookmarks=False,\n            metadata=None, timeout=self.timeout, db=self.db,\n            imp_user=self.imp_user, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers)\n\n    return self._append(_discard, n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                                                                                                                                                 ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\" D\n    \"\"\"\n    self._append({\n        \"op\": \"discard\",\n        \"n\": n,\n        \"qid\": qid,\n        \"dehydration_hooks\": dehydration_hooks,\n        \"hydration_hooks\": hydration_hooks,\n    }, handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D (DELETE)\n\n    Discards entries from the queue.\n    \"\"\"\n    self.responses[n].discard(qid, dehydration_hooks, hydration_hooks,\n                               **handlers)\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if dehydration_hooks:\n        self.dehydration_hooks = dehydration_hooks\n    if discard:\n        if n >= 0:\n            self._append(\n                {'discard': {'number': n, 'qid': qid}}, handlers)\n        elif n < 0:\n            self._append(\n                {'discard': {'number': -n, 'qid': qid}}, handlers)\n        else:\n            raise ValueError('invalid discard value')\n    if h:\n        self._append(\n            {'discard': {'headers': self.headers}}, handlers)\n    elif h:\n        self.headers = self.headers.copy()\n    return self\n", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run('discard', n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if dehydration_hooks is None:\n        dehydration_hooks = []\n    if hydration_hooks is None:\n        hydration_hooks = []\n\n    for handler in dehydration_hooks:\n        self._on_server_state_change(\n            handler, old_state=None, new_state=HandlerState.DISHARDED)\n\n    for handler in hydration_hooks:\n        self._on_server_state_change(\n            handler, old_state=None, new_state=HandlerState.HOST_DISCONNECTED)\n\n    return super(HttpSession, self).discard(n, qid, dehydration_hooks,\n                                                                                                                                                                                                     "], "level": "project_runnable", "generate_results": [{"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run(self.discard_query, {'n': n,\n                                          'qid': qid,\n                                          'dehydration_hooks': dehydration_hooks,\n                                          'hydration_hooks': hydration_hooks}, mode='discard', **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run(\n        'discard', None, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                        ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    self.discard_query(n, qid, dehydration_hooks, hydration_hooks,\n                       **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if not dehydration_hooks:\n        dehydration_hooks = {}\n    if not hydration_hooks:\n        hydration_hooks = {}\n    return self.run(self.discard_n(n, qid),\n                    self.discard_deh(dehydration_hooks),\n                    self.discard_h(hydration_hooks),\n                    **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\" D\n    \"\"\"\n    def _discard(query, parameters=(), **kwargs):\n        return self.run(\n            query, parameters, mode=D.DISCARD, bookmarks=False,\n            metadata=None, timeout=self.timeout, db=self.db,\n            imp_user=self.imp_user, dehydration_hooks=dehydration_hooks,\n            hydration_hooks=hydration_hooks, **handlers)\n\n    return self._append(_discard, n=n, qid=qid, dehydration_hooks=dehydration_hooks,\n                                                                                                                                                                                                                                                 ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\" D\n    \"\"\"\n    self._append({\n        \"op\": \"discard\",\n        \"n\": n,\n        \"qid\": qid,\n        \"dehydration_hooks\": dehydration_hooks,\n        \"hydration_hooks\": hydration_hooks,\n    }, handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D (DELETE)\n\n    Discards entries from the queue.\n    \"\"\"\n    self.responses[n].discard(qid, dehydration_hooks, hydration_hooks,\n                               **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if dehydration_hooks:\n        self.dehydration_hooks = dehydration_hooks\n    if discard:\n        if n >= 0:\n            self._append(\n                {'discard': {'number': n, 'qid': qid}}, handlers)\n        elif n < 0:\n            self._append(\n                {'discard': {'number': -n, 'qid': qid}}, handlers)\n        else:\n            raise ValueError('invalid discard value')\n    if h:\n        self._append(\n            {'discard': {'headers': self.headers}}, handlers)\n    elif h:\n        self.headers = self.headers.copy()\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    return self.run('discard', n, qid, dehydration_hooks,\n                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", "is_pass": false, "return_code": 1}, {"generate_code": "def discard(self, n=-1, qid=-1, dehydration_hooks=None,\n                hydration_hooks=None, **handlers):\n    \"\"\"\n    D\n    \"\"\"\n    if dehydration_hooks is None:\n        dehydration_hooks = []\n    if hydration_hooks is None:\n        hydration_hooks = []\n\n    for handler in dehydration_hooks:\n        self._on_server_state_change(\n            handler, old_state=None, new_state=HandlerState.DISHARDED)\n\n    for handler in hydration_hooks:\n        self._on_server_state_change(\n            handler, old_state=None, new_state=HandlerState.HOST_DISCONNECTED)\n\n    return super(HttpSession, self).discard(n, qid, dehydration_hooks,\n                                                                                                                                                                                                     ", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_async/io/_bolt3.py", "project": "neo4j/neo4j-python-driver", "name": "begin", "docstring": "Appends a BEGIN message to the output queue.\n\n:param mode: access mode for routing - \"READ\" or \"WRITE\" (default)\n:param bookmarks: iterable of bookmark values after which this transaction should begin\n:param metadata: custom metadata dictionary to attach to the transaction\n:param timeout: timeout for transaction execution (seconds)\n:param db: name of the database against which to begin the transaction\n    Requires Bolt 4.0+.\n:param imp_user: the user to impersonate\n    Requires Bolt 4.4+\n:param dehydration_hooks:\n    Hooks to dehydrate types (dict from type (class) to dehydration\n    function). Dehydration functions receive the value and returns an\n    object of type understood by packstream.\n:param hydration_hooks:\n    Hooks to hydrate types (mapping from type (class) to\n    dehydration function). Dehydration functions receive the value of\n    type understood by packstream and are free to return anything.\n:param handlers: handler functions passed into the returned Response object\n:return: Response object", "ques_id": "62e60879d76274f8a4026bec", "code": ["def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    \"\"\"\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    if timeout is not None:\n        self.timeout = timeout\n    if db is not None:\n        self.db = db\n    if imp_user is not None:\n        self.imp_user = imp_user\n  ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: http or https\n    :param bookmarks: list of reference to sub-reference\n    :param metadata: dictionary of metadata\n    :param timeout: timeout in seconds\n    :param db: database to connect to\n    :param imp_user: imp user to connect to\n    :param dehydration_hooks: dehydration hooks\n    :param hydration_hooks: hyper hyper hyper hyper\n    :return:\n    \"\"\"\n    if mode is not None:\n        self._append(mode, imp_user, dehydration_hooks, hydration_hooks)\n\n    self._on_server_state_change(None, None)\n    self._on_server_state_change('DEFAULT', None)\n    self._on_server_state_change('RECONNECTING', None)\n    self._on_server_state_change('CONNECTING', None)\n    self._on_server_state_change('DISCONNECTING', None)\n\n    return self.run(query=None, parameters=None, mode=mode, bookmarks=bookmarks,\n                    metadata=metadata, timeout=timeout, **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin the connection to the database.\n    \"\"\"\n    if self.pool is not None:\n        self.pool.put(self, timeout=timeout)\n    self.connect()\n\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    if db is not None:\n        self.db = db\n    if imp_user is not None:\n        self.imp_user = imp_user\n    if dehydration_hooks is not None:\n        self.dehydration_hooks = dehydration_hooks\n    if hydration_hooks is not None:\n        self.hydration_hooks = hydration_hooks\n\n    self._on_server_state_change('BEGIN', 'STARTED', timeout=timeout)\n    return self\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: http:// or https://\n    :param bookmarks: {string: string}\n    :param metadata: {string: string}\n    :param timeout: {int: int}\n    :param db: {string: object}\n    :param imp_user: {string: string}\n    :param dehydration_hooks: {string: string}\n    :param hydration_hooks: {string: string}\n    \"\"\"\n    # Handle timeout and db (if passed)\n    timeout = timeout or self.timeout\n    db = db or self.db\n    if timeout:\n        timeout = int(timeout)\n        self.socket.settimeout(timeout)\n\n    # Handle imp_user\n    if imp_user:\n        self.user_agent = imp_user\n\n    # Handle dehydration hooks\n    if dehydration_hooks:\n        self.dehydration_hooks = dehydration_hooks\n\n    # Handle metadata\n    if metadata:\n        self.metadata = metadata\n\n    # Handle timeout\n    if timeout:\n        self.timeout = time.time() +", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: mode of operation (e.g., ``'auth'``, ``'prod'``, ``'rollback'``)\n    :param bookmarks: list of bookmarks for operation\n    :param metadata: dictionary of metadata for operation\n    :param timeout: timeout for operation\n    :param db: database for operation\n    :param imp_user: imp user to use for authentication\n    :param dehydration_hooks: dehydration hooks to use for authentication\n    :param hydration_hooks: hydration hooks to use for authentication\n    \"\"\"\n    self._append = self._append.encode()\n    self._discard = self._discard.encode()\n    self._query = self._query.encode()\n    self._parameters = self._parameters.encode()\n    self._mode = mode\n    self._bookmarks = bookmarks\n    self._metadata = metadata\n    self._timeout = timeout\n    self._db = db\n    self._imp_user = imp_user\n    self._dehydration_hooks = dehydration_hooks\n    self._hydration_hooks = hydration_hooks\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin a connection to the database.\n    \"\"\"\n    if self.pool:\n        self.socket.close()\n    self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    self.socket.settimeout(timeout)\n    self.socket.connect(self.socket_path)\n    self.pool = PooledConnection(self.socket, self.pool_size, mode=mode,\n                               bookmarks=bookmarks, metadata=metadata,\n                               imp_user=imp_user, dehydration_hooks=dehydration_hooks,\n                               hydration_hooks=hydration_hooks)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin routing.\n    \"\"\"\n    return self.run(\n        mode=mode,\n        bookmarks=bookmarks,\n        metadata=metadata,\n        timeout=timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    \"\"\"\n    self._on_server_state_change(None, None)\n\n    super(RoutingEngine, self).begin(mode=mode, bookmarks=bookmarks,\n                                        metadata=metadata,\n                                        timeout=timeout,\n                                        db=db,\n                                        imp_user=imp_user,\n                                        dehydration_hooks=dehydration_hooks,\n    ", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :returns: a new :class:`Connection` instance\n    \"\"\"\n    if mode is not None:\n        self._append(mode)\n    if bookmarks is not None:\n        self._append(bookmarks)\n    if metadata is not None:\n        self._append(metadata)\n    if timeout is not None:\n        self._append(timeout)\n    if db is not None:\n        self._append(db)\n    if imp_user is not None:\n        self._append(imp_user)\n    if dehydration_hooks is not None:\n        self._append(dehydration_hooks)\n    if hydration_hooks is not None:\n        self._append(hydration_hooks)\n\n    return Connection(self, **handlers)\n", "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin a connection with the server.\n    \"\"\"\n    if db is not None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.settimeout(db)\n    if imp_user is not None:\n        self.imp_user = imp_user\n    if dehydration_hooks is not None:\n        self.dehydration_hooks = dehydration_hooks\n    if hydration_hooks is not None:\n        self.hydration_hooks = []\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    self.pool = ThreadPool(10)\n    self.pool.start()\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    \"\"\"\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    if timeout is not None:\n        self.timeout = timeout\n    if db is not None:\n        self.db = db\n    if imp_user is not None:\n        self.imp_user = imp_user\n  ", "is_pass": true, "return_code": 0}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: http or https\n    :param bookmarks: list of reference to sub-reference\n    :param metadata: dictionary of metadata\n    :param timeout: timeout in seconds\n    :param db: database to connect to\n    :param imp_user: imp user to connect to\n    :param dehydration_hooks: dehydration hooks\n    :param hydration_hooks: hyper hyper hyper hyper\n    :return:\n    \"\"\"\n    if mode is not None:\n        self._append(mode, imp_user, dehydration_hooks, hydration_hooks)\n\n    self._on_server_state_change(None, None)\n    self._on_server_state_change('DEFAULT', None)\n    self._on_server_state_change('RECONNECTING', None)\n    self._on_server_state_change('CONNECTING', None)\n    self._on_server_state_change('DISCONNECTING', None)\n\n    return self.run(query=None, parameters=None, mode=mode, bookmarks=bookmarks,\n                    metadata=metadata, timeout=timeout, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin the connection to the database.\n    \"\"\"\n    if self.pool is not None:\n        self.pool.put(self, timeout=timeout)\n    self.connect()\n\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    if db is not None:\n        self.db = db\n    if imp_user is not None:\n        self.imp_user = imp_user\n    if dehydration_hooks is not None:\n        self.dehydration_hooks = dehydration_hooks\n    if hydration_hooks is not None:\n        self.hydration_hooks = hydration_hooks\n\n    self._on_server_state_change('BEGIN', 'STARTED', timeout=timeout)\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: http:// or https://\n    :param bookmarks: {string: string}\n    :param metadata: {string: string}\n    :param timeout: {int: int}\n    :param db: {string: object}\n    :param imp_user: {string: string}\n    :param dehydration_hooks: {string: string}\n    :param hydration_hooks: {string: string}\n    \"\"\"\n    # Handle timeout and db (if passed)\n    timeout = timeout or self.timeout\n    db = db or self.db\n    if timeout:\n        timeout = int(timeout)\n        self.socket.settimeout(timeout)\n\n    # Handle imp_user\n    if imp_user:\n        self.user_agent = imp_user\n\n    # Handle dehydration hooks\n    if dehydration_hooks:\n        self.dehydration_hooks = dehydration_hooks\n\n    # Handle metadata\n    if metadata:\n        self.metadata = metadata\n\n    # Handle timeout\n    if timeout:\n        self.timeout = time.time() +", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :param mode: mode of operation (e.g., ``'auth'``, ``'prod'``, ``'rollback'``)\n    :param bookmarks: list of bookmarks for operation\n    :param metadata: dictionary of metadata for operation\n    :param timeout: timeout for operation\n    :param db: database for operation\n    :param imp_user: imp user to use for authentication\n    :param dehydration_hooks: dehydration hooks to use for authentication\n    :param hydration_hooks: hydration hooks to use for authentication\n    \"\"\"\n    self._append = self._append.encode()\n    self._discard = self._discard.encode()\n    self._query = self._query.encode()\n    self._parameters = self._parameters.encode()\n    self._mode = mode\n    self._bookmarks = bookmarks\n    self._metadata = metadata\n    self._timeout = timeout\n    self._db = db\n    self._imp_user = imp_user\n    self._dehydration_hooks = dehydration_hooks\n    self._hydration_hooks = hydration_hooks\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin a connection to the database.\n    \"\"\"\n    if self.pool:\n        self.socket.close()\n    self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    self.socket.settimeout(timeout)\n    self.socket.connect(self.socket_path)\n    self.pool = PooledConnection(self.socket, self.pool_size, mode=mode,\n                               bookmarks=bookmarks, metadata=metadata,\n                               imp_user=imp_user, dehydration_hooks=dehydration_hooks,\n                               hydration_hooks=hydration_hooks)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin routing.\n    \"\"\"\n    return self.run(\n        mode=mode,\n        bookmarks=bookmarks,\n        metadata=metadata,\n        timeout=timeout,\n        db=db,\n        imp_user=imp_user,\n        dehydration_hooks=dehydration_hooks,\n        hydration_hooks=hydration_hooks,\n        **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n           db=None, imp_user=None, dehydration_hooks=None, hydration_hooks=None)\n    \"\"\"\n    self._on_server_state_change(None, None)\n\n    super(RoutingEngine, self).begin(mode=mode, bookmarks=bookmarks,\n                                        metadata=metadata,\n                                        timeout=timeout,\n                                        db=db,\n                                        imp_user=imp_user,\n                                        dehydration_hooks=dehydration_hooks,\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    :returns: a new :class:`Connection` instance\n    \"\"\"\n    if mode is not None:\n        self._append(mode)\n    if bookmarks is not None:\n        self._append(bookmarks)\n    if metadata is not None:\n        self._append(metadata)\n    if timeout is not None:\n        self._append(timeout)\n    if db is not None:\n        self._append(db)\n    if imp_user is not None:\n        self._append(imp_user)\n    if dehydration_hooks is not None:\n        self._append(dehydration_hooks)\n    if hydration_hooks is not None:\n        self._append(hydration_hooks)\n\n    return Connection(self, **handlers)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def begin(self, mode=None, bookmarks=None, metadata=None, timeout=None,\n              db=None, imp_user=None, dehydration_hooks=None,\n              hydration_hooks=None, **handlers):\n    \"\"\"\n    Begin a connection with the server.\n    \"\"\"\n    if db is not None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.settimeout(db)\n    if imp_user is not None:\n        self.imp_user = imp_user\n    if dehydration_hooks is not None:\n        self.dehydration_hooks = dehydration_hooks\n    if hydration_hooks is not None:\n        self.hydration_hooks = []\n    if mode is not None:\n        self.mode = mode\n    if bookmarks is not None:\n        self.bookmarks = bookmarks\n    if metadata is not None:\n        self.metadata = metadata\n    self.pool = ThreadPool(10)\n    self.pool.start()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/time/_arithmetic.py", "project": "neo4j/neo4j-python-driver", "name": "round_half_to_even", "docstring": ">>> round_half_to_even(3)\n    3\n    >>> round_half_to_even(3.2)\n    3\n    >>> round_half_to_even(3.5)\n    4\n    >>> round_half_to_even(3.7)\n    4\n    >>> round_half_to_even(4)\n    4\n    >>> round_half_to_even(4.2)\n    4\n    >>> round_half_to_even(4.5)\n    4\n    >>> round_half_to_even(4.7)\n    5\n\n:param n:\n:return:", "ques_id": "62e60723d76274f8a4026b75", "code": ["def round_half_to_even(n):\n    return round(n / 2) * 2\n", "def round_half_to_even(n):\n    return n - (n % 2)\n", "def round_half_to_even(n):\n    return n - (n % 2)\n", "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "def round_half_to_even(n):\n    return int(round(n * 2) / 2)\n", "def round_half_to_even(n):\n    return round(n + 0.5) - 0.5\n", "def round_half_to_even(n):\n    return int(round(n * 2) / 2)\n", "def round_half_to_even(n):\n    return int(n + 0.5)\n", "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 0.5\n", "def round_half_to_even(n):\n    return int(n + 0.5)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n - (n % 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n - (n % 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return round(n / 2) * 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n * 2) / 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return round(n + 0.5) - 0.5\n", "is_pass": false, "return_code": 1}, {"generate_code": "def round_half_to_even(n):\n    return int(round(n * 2) / 2)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(n + 0.5)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return n if n % 2 == 0 else n + 0.5\n", "is_pass": true, "return_code": 0}, {"generate_code": "def round_half_to_even(n):\n    return int(n + 0.5)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_spatial/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "point_type", "docstring": "Dynamically create a Point subclass.", "ques_id": "62e60707d76274f8a4026b69", "code": ["def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return WGS84Point(name, fields, srid_map[name])\n    else:\n        return Point(name, fields)\n", "def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __schema__ = schema\n        __tablename__ = name\n        __mapper_args__ = {'polymorphic_identity': name}\n\n        def __init__(self, x, y, z):\n            super(Point, self).__init__(x, y, z)\n            self.fields = fields\n\n        def __str__(self):\n            return '<{}: {}, {}, {}>'.format(\n                self.__class__.__name__, self.x, self.y, self.z)\n\n    srid_map['SRID'] = srid_table\n    return Point\n", "def point_type(name, fields, srid_map):\n    if fields[0] == 'POINT':\n        return CartesianPoint(name, fields[1], srid_map[fields[2]])\n    elif fields[0] == 'LineString':\n        return LineString(name, fields[1], fields[2], srid_map[fields[3]])\n    elif fields[0] == 'Linearring':\n        return Linearring(name, fields[1], fields[2], srid_map[fields[4]])\n    elif fields[0] == 'MultiLineString':\n        return MultiLineString(name, fields[1], fields[2], fields[3], srid_map[fields[5]])\n    elif fields[0] == 'MultiPoint':\n        return MultiPoint(name, fields[1], fields[2], fields[3], srid_map[fields[6]])\n    elif fields[0] == 'Polygon':\n        return Polygon(name, fields[1], fields[2], fields[3], srid_map[fields[7]])\n    else:\n        return WGS84Point(name, fields[1], fields[2], fields[3], srid_map[fields[8]])\n", "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return srid_table[name]\n    else:\n        if fields is not None:\n            fields = \",\".join(fields)\n        srid_table[name] = CartesianPoint(name, fields, srid_map)\n        return srid_table[name]\n", "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return SridCartesianPoint(name, fields, srid_map[name])\n    if name in srid_table_lock:\n        lock = srid_table_lock[name]\n        return LockedSridCartesianPoint(name, fields, lock)\n    raise ValueError('Unknown SridCartesianPoint %s' % name)\n", "def point_type(name, fields, srid_map):\n    srid_key = srid_map[name]\n    return type(name, (CartesianPoint,), {\n        '__module__': __name__,\n        '__srid_key__': srid_key,\n        '__fields__': fields\n    })\n", "def point_type(name, fields, srid_map):\n    class Point(object):\n        __slots__ = fields\n\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def __repr__(self):\n            return \"{}({}, {}, {})\".format(name, self.x, self.y, self.z)\n\n        def __str__(self):\n            return \"Point({}, {}, {})\".format(self.x, self.y, self.z)\n\n        def __eq__(self, other):\n            return self.x == other.x and self.y == other.y and self.z == other.z\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n        def __lt__(self, other):\n            return self.x < other.x or self.y < other.y or self.z < other.z\n\n    return Point\n", "def point_type(name, fields, srid_map):\n    if name not in srid_table:\n        raise ValueError('Unknown SRID \"{}\"'.format(name))\n\n    # srid_map is a hash of the SQL field names (same as srid_table)\n    # and the corresponding SQL table instance.  This is used to\n    # determine whether the SQL is a point or a linear reference.\n    srid_map[name] = CartesianPoint(name, *fields)\n    return srid_map[name]\n", "def point_type(name, fields, srid_map):\n    if 'GEOMETRYCOLLECTION' in fields:\n        return CartesianPoint(name, srid_map)\n    else:\n        return WGS84Point(name, fields, srid_map)\n", "def point_type(name, fields, srid_map):\n    # pylint: disable=too-many-arguments\n    \"\"\"\n    Generating Point Class\n    \"\"\"\n    if name in srid_table:\n        return CartesianPoint(\n            name=name,\n            srid=srid_table[name][0],\n            coordinates=srid_table[name][1],\n            fields=fields\n        )\n    return CartesianPoint(\n        name=name,\n        coordinates=point_type(name, fields, srid_map)\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return WGS84Point(name, fields, srid_map[name])\n    else:\n        return Point(name, fields)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(CartesianPoint):\n        __schema__ = schema\n        __tablename__ = name\n        __mapper_args__ = {'polymorphic_identity': name}\n\n        def __init__(self, x, y, z):\n            super(Point, self).__init__(x, y, z)\n            self.fields = fields\n\n        def __str__(self):\n            return '<{}: {}, {}, {}>'.format(\n                self.__class__.__name__, self.x, self.y, self.z)\n\n    srid_map['SRID'] = srid_table\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if fields[0] == 'POINT':\n        return CartesianPoint(name, fields[1], srid_map[fields[2]])\n    elif fields[0] == 'LineString':\n        return LineString(name, fields[1], fields[2], srid_map[fields[3]])\n    elif fields[0] == 'Linearring':\n        return Linearring(name, fields[1], fields[2], srid_map[fields[4]])\n    elif fields[0] == 'MultiLineString':\n        return MultiLineString(name, fields[1], fields[2], fields[3], srid_map[fields[5]])\n    elif fields[0] == 'MultiPoint':\n        return MultiPoint(name, fields[1], fields[2], fields[3], srid_map[fields[6]])\n    elif fields[0] == 'Polygon':\n        return Polygon(name, fields[1], fields[2], fields[3], srid_map[fields[7]])\n    else:\n        return WGS84Point(name, fields[1], fields[2], fields[3], srid_map[fields[8]])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return srid_table[name]\n    else:\n        if fields is not None:\n            fields = \",\".join(fields)\n        srid_table[name] = CartesianPoint(name, fields, srid_map)\n        return srid_table[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if name in srid_table:\n        return SridCartesianPoint(name, fields, srid_map[name])\n    if name in srid_table_lock:\n        lock = srid_table_lock[name]\n        return LockedSridCartesianPoint(name, fields, lock)\n    raise ValueError('Unknown SridCartesianPoint %s' % name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    srid_key = srid_map[name]\n    return type(name, (CartesianPoint,), {\n        '__module__': __name__,\n        '__srid_key__': srid_key,\n        '__fields__': fields\n    })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    class Point(object):\n        __slots__ = fields\n\n        def __init__(self, x, y, z):\n            self.x = x\n            self.y = y\n            self.z = z\n\n        def __repr__(self):\n            return \"{}({}, {}, {})\".format(name, self.x, self.y, self.z)\n\n        def __str__(self):\n            return \"Point({}, {}, {})\".format(self.x, self.y, self.z)\n\n        def __eq__(self, other):\n            return self.x == other.x and self.y == other.y and self.z == other.z\n\n        def __ne__(self, other):\n            return not self.__eq__(other)\n\n        def __lt__(self, other):\n            return self.x < other.x or self.y < other.y or self.z < other.z\n\n    return Point\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if name not in srid_table:\n        raise ValueError('Unknown SRID \"{}\"'.format(name))\n\n    # srid_map is a hash of the SQL field names (same as srid_table)\n    # and the corresponding SQL table instance.  This is used to\n    # determine whether the SQL is a point or a linear reference.\n    srid_map[name] = CartesianPoint(name, *fields)\n    return srid_map[name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    if 'GEOMETRYCOLLECTION' in fields:\n        return CartesianPoint(name, srid_map)\n    else:\n        return WGS84Point(name, fields, srid_map)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def point_type(name, fields, srid_map):\n    # pylint: disable=too-many-arguments\n    \"\"\"\n    Generating Point Class\n    \"\"\"\n    if name in srid_table:\n        return CartesianPoint(\n            name=name,\n            srid=srid_table[name][0],\n            coordinates=srid_table[name][1],\n            fields=fields\n        )\n    return CartesianPoint(\n        name=name,\n        coordinates=point_type(name, fields, srid_map)\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/_meta.py", "project": "neo4j/neo4j-python-driver", "name": "deprecated", "docstring": "Decorator for deprecating functions and methods.\n\n::\n\n    @deprecated(\"'foo' has been deprecated in favour of 'bar'\")\n    def foo(x):\n        pass", "ques_id": "62e5dc9ed76274f8a4026b5b", "code": ["def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return await func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        async def _wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return _wrapper\n    return _decorator\n", "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return await func(*args, **kwargs)\n\n        return wrapper\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        async def _wrapper(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return _wrapper\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def _decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return _decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n\n    def decorator(func):\n        @functools.wraps(func)\n        def new_func(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return new_func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            warnings.warn(message, category=DeprecationWarning, stacklevel=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=1)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            warnings.warn(message, DeprecationWarning, stacklevel=2)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deprecated(message):\n    def decorator(func):\n        @functools.wraps(func)\n        async def newfunc(*args, **kwargs):\n            deprecation_warn(message, stack_level=2)\n            return await func(*args, **kwargs)\n        return newfunc\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/r.py", "project": "pre-commit/pre-commit", "name": "_inline_r_setup", "docstring": "Some behaviour of R cannot be configured via env variables, but can\nonly be configured via R options once R has started. These are set here.", "ques_id": "62e4fc3c85ea98643089041e", "code": ["def _inline_r_setup(code: str) -> str:\n    return f'{code}D'\n", "def _inline_r_setup(code: str) -> str:\n    return f'{inline_r}{code}{inline_r_suffix}'\n", "def _inline_r_setup(code: str):\n    return 'D'\n", "def _inline_r_setup(code: str):\n    return \"D {}\".format(code)\n", "def _inline_r_setup(code: str):\n    return \"\"\"\n__D__\n{\n    %(code)s\n}\n    \"\"\" % {'code': code}\n", "def _inline_r_setup(code: str):\n    return \"D {}\".format(code)\n", "def _inline_r_setup(code: str, inline: str) -> str:\n    return f'D{code}{inline}'\n", "def _inline_r_setup(code: str,\n                   args: List[str],\n                   kws: Dict[str, object]) -> str:\n    r\"\"\"D\"\"\"\n    code.extend(['D', *args])\n    return ''\n", "def _inline_r_setup(code: str) -> str:\n    return 'D' + code\n", "def _inline_r_setup(code: str) -> str:\n    return 'D' + code\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _inline_r_setup(code: str) -> str:\n    return f'{code}D'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return f'{inline_r}{code}{inline_r_suffix}'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    return 'D'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    return \"D {}\".format(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    return \"\"\"\n__D__\n{\n    %(code)s\n}\n    \"\"\" % {'code': code}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str):\n    return \"D {}\".format(code)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str, inline: str) -> str:\n    return f'D{code}{inline}'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str,\n                   args: List[str],\n                   kws: Dict[str, object]) -> str:\n    r\"\"\"D\"\"\"\n    code.extend(['D', *args])\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return 'D' + code\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _inline_r_setup(code: str) -> str:\n    return 'D' + code\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/xargs.py", "project": "pre-commit/pre-commit", "name": "xargs", "docstring": "A simplified implementation of xargs.\n\ncolor: Make a pty if on a platform that supports it\ntarget_concurrency: Target number of partitions to run concurrently", "ques_id": "62e4fbda85ea986430890405", "code": ["def xargs(\n        cmd: str,\n        args: List[str],\n        capture: bool = False,\n        verbose: bool = False,\n        cwd: str = None,\n        env: Dict[str, str] = None,\n        **kwargs) -> List[str]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    if env is None:\n        env = os.environ\n\n    if capture:\n        return subprocess.check_output(\n            ['/bin/sh', '-c', cmd] + args, env=env,\n            universal_newlines=True,\n            stderr=subprocess.STDOUT,\n            cwd=cwd,\n            env=env,\n            **kwargs\n        ).split('\\n')\n\n    return subprocess.check_output(\n        ['/bin/sh', '-c', cmd] + args, env=env,\n        stderr=subprocess.STDOUT,\n        cwd", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: Optional[Mapping[str, str]] = None,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        shell: bool = False,\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        timeout: int = 0,\n        input: Optional[str] = None,\n        env_sep: str = os.pathsep,\n        env_prefix: str = os.environ.get('PATH', ''),\n        shell_env: Mapping[str, str] = None,\n) -> Tuple[Command, List[str], List[str], bool, Mapping[str, str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    if stdin is None:\n        stdin = []\n    if stdout is None:\n        stdout = []\n    if stderr is None:\n        ", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        cwd: Optional[str] = None,\n        env: Optional[Dict[str, str]] = None,\n        shell: bool = False,\n        verbose: bool = False,\n        hide_stderr: bool = False,\n        timeout: Optional[int] = None,\n) -> Tuple[Command, List[str]]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    # pylint: disable=protected-access\n    return (\n        _shlex.split(cmd.cmd + ['-x'] + args),\n        [] if stdin is None else [stdin])\n", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        env: Optional[Environment] = None,\n        universal_newlines: bool = True,\n        capture: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        shell: bool = False,\n        preexec_fn=None,\n        postexec_fn=None,\n        close_fds: bool = True,\n) -> Command:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    p = Popen(\n        cmd,\n        stdin=PIPE,\n        stdout=PIPE,\n        stderr=PIPE,\n        cwd=cwd,\n        env=env,\n        universal_newlines=universal_newlines,\n        capture=capture,\n        stdout=stdout,\n        stderr=s", "def xargs(\n        cmd: str,\n        args: T.List[str],\n        stdin: T.Optional[T.List[str]] = None,\n        stdout: T.Optional[T.List[str]] = None,\n        stderr: T.Optional[T.List[str]] = None,\n        shell: bool = False,\n        cwd: T.Optional[str] = None,\n        env: T.Dict[str, str] = None,\n        preexec_fn: T.Callable = None,\n        stderr_fd: T.Optional[int] = None) -> T.List[str]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    p = subprocess.Popen(\n        cmd.split(),\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        shell=shell,\n        cwd=cwd,\n        env=env,\n        preexec_fn=preexec_fn,\n        stderr_fd=stderr_fd)\n    p.stdin.close()\n  ", "def xargs(\n        cmd: List[str],\n        args: List[str] = None,\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        capture: bool = False,\n        verbose_stderr: bool = False,\n        stdin: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        success_expected: int = 0,\n        bufsize: int = -1,\n        universal_newlines: bool = False,\n        shell: str = None) -> Tuple[List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    return _xargs(cmd, args, env, cwd, verbose, capture, verbose_stderr,\n                  stdin, stdout, stderr, success_expected,\n                  bufsize, universal_newlines, shell)\n", "def xargs(\n        cmd: str,\n        arguments: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str]\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    return subprocess.check_call(\n        cmd.split() + arguments,\n        stdin=stdin,\n        stdout=stdout,\n        stderr=stderr\n    )\n", "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: Environment,\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        dry_run: bool = False,\n) -> Tuple[Command, List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    cmd = _prepare_command(cmd, env)\n    try:\n        output = subprocess.check_output(\n            cmd, universal_newlines=True, stderr=subprocess.STDOUT\n        )\n        return (cmd, output.split(\"\\n\"))\n    except subprocess.CalledProcessError as e:\n        return (cmd, [str(e.output)])\n", "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None) -> Tuple[int, List[str]]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    # TODO: make sure we are passing in a list of arguments\n    return _run_command(\n        cmd=cmd,\n        args=args,\n        env=env,\n        stdin=stdin,\n        stdout=stdout,\n        stderr=stderr,\n        shell=False,\n    )\n", "def xargs(\n        cmd: str,\n        args: Optional[Sequence[str]] = None,\n        capture: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        close_fds: bool = False,\n) -> Tuple[List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    if args is None:\n        args = []\n    p = None\n    try:\n        p = subprocess.Popen(\n            cmd.split(),\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=close_fds,\n        )\n    except OSError as e:\n        raise LinuxBinaryError(e)\n    stdout, stderr = p.communicate(input=args)\n    if stderr:\n        raise LinuxBinaryError(stderr.decode('utf-8'))\n    if p.returncode:\n        raise Linux"], "level": "project_runnable", "generate_results": [{"generate_code": "def xargs(\n        cmd: str,\n        args: List[str],\n        capture: bool = False,\n        verbose: bool = False,\n        cwd: str = None,\n        env: Dict[str, str] = None,\n        **kwargs) -> List[str]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    if env is None:\n        env = os.environ\n\n    if capture:\n        return subprocess.check_output(\n            ['/bin/sh', '-c', cmd] + args, env=env,\n            universal_newlines=True,\n            stderr=subprocess.STDOUT,\n            cwd=cwd,\n            env=env,\n            **kwargs\n        ).split('\\n')\n\n    return subprocess.check_output(\n        ['/bin/sh', '-c', cmd] + args, env=env,\n        stderr=subprocess.STDOUT,\n        cwd", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: Optional[Mapping[str, str]] = None,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        shell: bool = False,\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        timeout: int = 0,\n        input: Optional[str] = None,\n        env_sep: str = os.pathsep,\n        env_prefix: str = os.environ.get('PATH', ''),\n        shell_env: Mapping[str, str] = None,\n) -> Tuple[Command, List[str], List[str], bool, Mapping[str, str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    if stdin is None:\n        stdin = []\n    if stdout is None:\n        stdout = []\n    if stderr is None:\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None,\n        cwd: Optional[str] = None,\n        env: Optional[Dict[str, str]] = None,\n        shell: bool = False,\n        verbose: bool = False,\n        hide_stderr: bool = False,\n        timeout: Optional[int] = None,\n) -> Tuple[Command, List[str]]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    # pylint: disable=protected-access\n    return (\n        _shlex.split(cmd.cmd + ['-x'] + args),\n        [] if stdin is None else [stdin])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        env: Optional[Environment] = None,\n        universal_newlines: bool = True,\n        capture: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        shell: bool = False,\n        preexec_fn=None,\n        postexec_fn=None,\n        close_fds: bool = True,\n) -> Command:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    p = Popen(\n        cmd,\n        stdin=PIPE,\n        stdout=PIPE,\n        stderr=PIPE,\n        cwd=cwd,\n        env=env,\n        universal_newlines=universal_newlines,\n        capture=capture,\n        stdout=stdout,\n        stderr=s", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: T.List[str],\n        stdin: T.Optional[T.List[str]] = None,\n        stdout: T.Optional[T.List[str]] = None,\n        stderr: T.Optional[T.List[str]] = None,\n        shell: bool = False,\n        cwd: T.Optional[str] = None,\n        env: T.Dict[str, str] = None,\n        preexec_fn: T.Callable = None,\n        stderr_fd: T.Optional[int] = None) -> T.List[str]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    p = subprocess.Popen(\n        cmd.split(),\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        shell=shell,\n        cwd=cwd,\n        env=env,\n        preexec_fn=preexec_fn,\n        stderr_fd=stderr_fd)\n    p.stdin.close()\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: List[str],\n        args: List[str] = None,\n        env: Dict[str, str] = None,\n        cwd: str = None,\n        verbose: bool = False,\n        capture: bool = False,\n        verbose_stderr: bool = False,\n        stdin: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        success_expected: int = 0,\n        bufsize: int = -1,\n        universal_newlines: bool = False,\n        shell: str = None) -> Tuple[List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    return _xargs(cmd, args, env, cwd, verbose, capture, verbose_stderr,\n                  stdin, stdout, stderr, success_expected,\n                  bufsize, universal_newlines, shell)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        arguments: Iterable[str],\n        stdin: Iterable[str],\n        stdout: Iterable[str],\n        stderr: Iterable[str]\n) -> Tuple[int, List[str], List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    return subprocess.check_call(\n        cmd.split() + arguments,\n        stdin=stdin,\n        stdout=stdout,\n        stderr=stderr\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: Command,\n        args: Iterable[str],\n        env: Environment,\n        cwd: Optional[str] = None,\n        verbose: bool = False,\n        dry_run: bool = False,\n) -> Tuple[Command, List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    cmd = _prepare_command(cmd, env)\n    try:\n        output = subprocess.check_output(\n            cmd, universal_newlines=True, stderr=subprocess.STDOUT\n        )\n        return (cmd, output.split(\"\\n\"))\n    except subprocess.CalledProcessError as e:\n        return (cmd, [str(e.output)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Iterable[str],\n        env: Optional[Dict[str, str]] = None,\n        stdin: Optional[str] = None,\n        stdout: Optional[str] = None,\n        stderr: Optional[str] = None) -> Tuple[int, List[str]]:\n    \"\"\"\n    Simplified Implementation of Xargs in Linux\n    \"\"\"\n    # TODO: make sure we are passing in a list of arguments\n    return _run_command(\n        cmd=cmd,\n        args=args,\n        env=env,\n        stdin=stdin,\n        stdout=stdout,\n        stderr=stderr,\n        shell=False,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xargs(\n        cmd: str,\n        args: Optional[Sequence[str]] = None,\n        capture: bool = False,\n        stdout: bool = False,\n        stderr: bool = False,\n        close_fds: bool = False,\n) -> Tuple[List[str], List[str]]:\n    \"\"\"Simplified Implementation of Xargs in Linux\"\"\"\n    if args is None:\n        args = []\n    p = None\n    try:\n        p = subprocess.Popen(\n            cmd.split(),\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            close_fds=close_fds,\n        )\n    except OSError as e:\n        raise LinuxBinaryError(e)\n    stdout, stderr = p.communicate(input=args)\n    if stderr:\n        raise LinuxBinaryError(stderr.decode('utf-8'))\n    if p.returncode:\n        raise Linux", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/languages/helpers.py", "project": "pre-commit/pre-commit", "name": "_shuffled", "docstring": "Deterministically shuffle", "ques_id": "62e4fbda85ea986430890403", "code": ["def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return shuffle(seq, FIXED_RANDOM_SEED)\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq) - FIXED_RANDOM_SEED)\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return shuffle(seq, FIXED_RANDOM_SEED)\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return sorted(seq, key=operator.methodcaller(\"random.shuffle\"))\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return list(random.sample(seq, len(seq) - len(seq) % FIXED_RANDOM_SEED))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq) - (FIXED_RANDOM_SEED // 2))\n", "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return shuffle(seq, fixed_random_seed=FIXED_RANDOM_SEED)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return shuffle(seq, FIXED_RANDOM_SEED)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq) - FIXED_RANDOM_SEED)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return shuffle(seq, FIXED_RANDOM_SEED)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return sorted(seq, key=operator.methodcaller(\"random.shuffle\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return list(random.sample(seq, len(seq) - len(seq) % FIXED_RANDOM_SEED))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    return random.sample(seq, len(seq) - (FIXED_RANDOM_SEED // 2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> List[str]:\n    \"Shuffle a given seq with the given FIXED_RANDOM_SEED\"\n    return random.sample(seq, len(seq) - len(set(seq)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _shuffled(seq: Sequence[str]) -> Sequence[str]:\n    return shuffle(seq, fixed_random_seed=FIXED_RANDOM_SEED)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pre_commit/util.py", "project": "pre-commit/pre-commit", "name": "parse_version", "docstring": "poor man's version comparison", "ques_id": "62e4fb6585ea98643089032b", "code": ["def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(ss) for ss in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "def parse_version(s: str) -> tuple:\n    return tuple(int(i) for i in s.split(\".\"))\n", "def parse_version(s: str) -> tuple[int,...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(ss) for ss in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple:\n    return tuple(int(i) for i in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> tuple[int,...]:\n    return tuple(int(i) for i in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(x) for x in s.split(\".\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def parse_version(s: str) -> Tuple[int,...]:\n    return tuple(int(n) for n in s.split(\".\"))\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pre_commit/parse_shebang.py", "project": "pre-commit/pre-commit", "name": "normalize_cmd", "docstring": "Fixes for the following issues on windows\n- https://bugs.python.org/issue8557\n- windows does not parse shebangs\n\nThis function also makes deep-path shebangs work just fine", "ques_id": "62e4fb4d85ea9864308902e7", "code": ["def normalize_cmd(cmd: str) -> str:\n    if not cmd:\n        return \"\"\n    cmd = normexe(cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    return normexe(parse_filename(cmd))\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    return cmd\n", "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n", "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def normalize_cmd(cmd: str) -> str:\n    if not cmd:\n        return \"\"\n    cmd = normexe(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return normexe(parse_filename(cmd))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = normexe(cmd)\n    return cmd\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalize_cmd(cmd: str) -> str:\n    cmd = parse_filename(cmd)\n    return normexe(cmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cached", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nresults in a cache.", "ques_id": "62b8d27a48ba5a41d1c3f4c6", "code": ["def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(args, kwargs))\n            if not result:\n                result = f(*args, **kwargs)\n                cache.set(key(args, kwargs), result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = func(*args, **kwargs)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        wrapper.cache_key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.key = key\n    decorator.lock_args = (lock,)\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                key = pickle.dumps((args, kwargs))\n                value = cache.get(key)\n                if value is None:\n                    value = func(*args, **kwargs)\n                    cache.set(key, value, timeout=cache_timeout)\n                return value\n            else:\n                if lock.acquire(False):\n                    try:\n                        value = func(*args, **kwargs)\n                    finally:\n                        lock.release()\n                    return value\n                else:\n               ", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            ret = cache.get(key(args[1]), lock)\n            if ret is None:\n                ret = func(*args, **kwargs)\n                cache.set(key(args[1]), ret, timeout=cache_timeout)\n            return ret\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is not None:\n        lock.acquire()\n        try:\n            cache = dict(lock.__cache)\n            key = lock.key\n            val = cache[key]\n            lock.release()\n            return decorator\n        finally:\n            lock.release()\n    else:\n        decorator()\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kw)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            key = lock.acquire(cache._name)\n            try:\n                result = cache[key]\n            finally:\n                lock.release()\n            if callable(result):\n                try:\n                    result(*args, **kwargs)\n                except Exception as e:\n                    lock.release()\n                    raise e\n            else:\n                lock.release()\n        return func\n    return decorator\n", "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = {}\n    decorator.lock = lock\n    decorator.cache = cache\n    decorator.key = None\n    return decorator\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(f):\n        @wraps(f)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(args, kwargs))\n            if not result:\n                result = f(*args, **kwargs)\n                cache.set(key(args, kwargs), result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            result = cache.get(key)\n            if not result:\n                result = func(*args, **kwargs)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n            return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        wrapper.lock = lock\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = (args, frozenset(sorted(kwargs.items())))\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache_clear = cache.clear\n        wrapper.cache_name = cache.name\n        wrapper.cache_key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    decorator.key = key\n    decorator.lock_args = (lock,)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                key = pickle.dumps((args, kwargs))\n                value = cache.get(key)\n                if value is None:\n                    value = func(*args, **kwargs)\n                    cache.set(key, value, timeout=cache_timeout)\n                return value\n            else:\n                if lock.acquire(False):\n                    try:\n                        value = func(*args, **kwargs)\n                    finally:\n                        lock.release()\n                    return value\n                else:\n               ", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            ret = cache.get(key(args[1]), lock)\n            if ret is None:\n                ret = func(*args, **kwargs)\n                cache.set(key(args[1]), ret, timeout=cache_timeout)\n            return ret\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is not None:\n        lock.acquire()\n        try:\n            cache = dict(lock.__cache)\n            key = lock.key\n            val = cache[key]\n            lock.release()\n            return decorator\n        finally:\n            lock.release()\n    else:\n        decorator()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            result = cache.get(key)\n            if result is None:\n                result = func(*args, **kw)\n                cache.set(key, result, cache.timeout)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            if lock is None:\n                lock = Lock()\n            key = lock.acquire(cache._name)\n            try:\n                result = cache[key]\n            finally:\n                lock.release()\n            if callable(result):\n                try:\n                    result(*args, **kwargs)\n                except Exception as e:\n                    lock.release()\n                    raise e\n            else:\n                lock.release()\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cached(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = key(*args, **kwargs)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kwargs)\n                return ret\n        wrapper.cache = cache\n        wrapper.key = key\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    cache = {}\n    decorator.lock = lock\n    decorator.cache = cache\n    decorator.key = None\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "ttl_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm with a per-item time-to-live (TTL) value.", "ques_id": "62b8d24048ba5a41d1c3f49f", "code": ["def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(None, maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(None, maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _CacheStatus(None, maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return object()\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\"\"\n    return None\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\n    return None\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return None\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(maxsize, ttl, timer, typed)\n", "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _CacheStat(None, maxsize, ttl, timer, typed)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _cache(None, maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(None, maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _CacheStatus(None, maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return object()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\"\"\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    \"None\"\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _Cache(maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ttl_cache(maxsize=128, ttl=600, timer=time.monotonic, typed=False):\n    return _CacheStat(None, maxsize, ttl, timer, typed)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "mru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Most Recently Used (MRU)\nalgorithm.", "ques_id": "62b8d23b48ba5a41d1c3f49a", "code": ["def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    \"None\"\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n", "def mru_cache(maxsize=128, typed=False):\n    \"None\"\n", "def mru_cache(maxsize=128, typed=False):\n    return None\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def mru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lru_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Recently Used (LRU)\nalgorithm.", "ques_id": "62b8d23948ba5a41d1c3f498", "code": ["def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    \"None\"\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n", "def lru_cache(maxsize=128, typed=False):\n    return None\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    \"None\"\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lru_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/func.py", "project": "pexip/os-python-cachetools", "name": "lfu_cache", "docstring": "Decorator to wrap a function with a memoizing callable that saves\nup to `maxsize` results based on a Least Frequently Used (LFU)\nalgorithm.", "ques_id": "62b8d23748ba5a41d1c3f496", "code": ["def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "def lfu_cache(maxsize=128, typed=False):\n    return None\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def lfu_cache(maxsize=128, typed=False):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/fifo.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair first inserted.", "ques_id": "62b8d22f48ba5a41d1c3f488", "code": ["def popitem(self):\n    value = dict.popitem(self)\n    self.__order.remove(value[0])\n    return value\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.pop()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    value = dict.popitem(self)\n    key = value[0]\n    self.pop(key)\n    return key, value[1]\n", "def popitem(self):\n    value = dict.popitem(self)\n    key = value[0]\n    return key, value[1]\n", "def popitem(self):\n    try:\n        key = self.__order.pop()\n        return (key, self.pop(key))\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError(\"Popping from an empty collection.\")\n    else:\n        value = self.pop(key)\n        return (key, value)\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.pop()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    value = dict.popitem(self)\n    self.__order.remove(value[0])\n    return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    value = dict.popitem(self)\n    key = value[0]\n    self.pop(key)\n    return key, value[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    value = dict.popitem(self)\n    key = value[0]\n    return key, value[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__order.pop()\n        return (key, self.pop(key))\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = next(iter(self))\n    except StopIteration:\n        raise KeyError(\"Popping from an empty collection.\")\n    else:\n        value = self.pop(key)\n        return (key, value)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.pop()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "setdefault", "docstring": "D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D", "ques_id": "62b8d22a48ba5a41d1c3f47e", "code": ["def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key in self:\n        return self[key]\n    self[key] = default\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    if key not in self:\n        self[key] = default\n    return self[key]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def setdefault(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        self[key] = default\n        return default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "get", "docstring": "D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.", "ques_id": "62b8d22948ba5a41d1c3f47c", "code": ["def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    if not isinstance(key, str):\n        raise TypeError(\"key must be a string\")\n    for k, v in self.store.items():\n        if k == key:\n            return v\n    return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get(self, key, default=None):\n    if key in self:\n        return self[key]\n    return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    return super().get(key.lower(), default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    if not isinstance(key, str):\n        raise TypeError(\"key must be a string\")\n    for k, v in self.store.items():\n        if k == key:\n            return v\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get(self, key, default=None):\n    try:\n        return self[key]\n    except KeyError:\n        return default\n", "is_pass": true, "return_code": 0}]}
{"file_path": "cachetools/decorators.py", "project": "pexip/os-python-cachetools", "name": "cachedmethod", "docstring": "Decorator to wrap a class or instance method with a memoizing\ncallable that saves results in a cache.", "ques_id": "62b8d22548ba5a41d1c3f472", "code": ["def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache.get(key(func))\n        if not cached:\n            def call(*args, **kw):\n                return func(*args, **kw)\n            cached = lock.acquire()\n            try:\n                result = func(*args, **kw)\n            finally:\n                cache.set(key(func), result, time=config.CACHE_TIMEOUT)\n            try:\n                cached.close()\n            except:\n                pass\n        return cached\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        res = CachedMethod(func, cache, key, lock)\n        return res\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        result = _CachedMethodResult(func, lock)\n        cache[key] = result\n        return result\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache.setdefault(key, [])\n        if lock is None:\n            lock = threading.Lock()\n        def call(*args, **kw):\n            with lock:\n                return func(*args, **kw)\n        cached.append(call)\n        return call\n    return decorator\n", "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(*args, **kwargs))\n            if result is None:\n                with lock:\n                    result = func(*args, **kwargs)\n                cache.set(key(*args, **kwargs), result, time=0)\n            return result\n        return wrapper\n    return decorator\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            key = key(*args, **kw)\n            try:\n                return cache[key]\n            except KeyError:\n                ret = cache[key] = func(*args, **kw)\n                return ret\n        return wrapper\n    if lock is None:\n        lock = threading.Lock()\n    decorator.lock = lock\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        return CachedMethod(func, cache, key, lock)\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache.get(key(func))\n        if not cached:\n            def call(*args, **kw):\n                return func(*args, **kw)\n            cached = lock.acquire()\n            try:\n                result = func(*args, **kw)\n            finally:\n                cache.set(key(func), result, time=config.CACHE_TIMEOUT)\n            try:\n                cached.close()\n            except:\n                pass\n        return cached\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        res = CachedMethod(func, cache, key, lock)\n        return res\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        result = _CachedMethodResult(func, lock)\n        cache[key] = result\n        return result\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    def decorator(func):\n        cached = cache.setdefault(key, [])\n        if lock is None:\n            lock = threading.Lock()\n        def call(*args, **kw):\n            with lock:\n                return func(*args, **kw)\n        cached.append(call)\n        return call\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def cachedmethod(cache, key=hashkey, lock=None):\n    if lock is None:\n        lock = threading.Lock()\n\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            result = cache.get(key(*args, **kwargs))\n            if result is None:\n                with lock:\n                    result = func(*args, **kwargs)\n                cache.set(key(*args, **kwargs), result, time=0)\n            return result\n        return wrapper\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "extostr", "docstring": "Format an exception.\n:param e: Any exception instance.\n:type e: Exception\n:param max_level: Maximum call stack level (default 30)\n:type max_level: int\n:param max_path_level: Maximum path level (default 5)\n:type max_path_level: int\n:return The exception readable string\n:rtype str", "ques_id": "62b8c517e0d34b282c18122e", "code": ["def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SocketError):\n        if e.errno == errno.ECONNABORTED:\n            logger.warning(\"Could not connect to remote master \"\n                           \"(%s:%d). Is the master running?\",\n                           e.host, e.port)\n            return \"\", \"\"\n        else:\n            raise e\n    if isinstance(e, Exception):\n        raise e\n    return super(RemoteSocket, cls).extostr(e, max_level, max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"to str method as is.\"\n    if e is None:\n        e = ''\n    # replace with repr if necessary\n    return str((e, cls.__name__))\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        if isinstance(e, (OSError, IOError)):\n            if e.errno == errno.ENOENT:\n                return cls._(u'[Error] File not found.')\n            elif e.errno == errno.EACCES:\n                return cls._(u'[Error] Permission denied.')\n            elif e.errno == errno.ENOENT:\n                return cls._(u'[Error] File is not found.')\n        elif isinstance(e, TypeError):\n            return cls._(u'[Error] %s' % e)\n    return cls._(u'[Error] %s' % e)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        tb = ''.join(format_exception(type(e), e, e.__traceback__))\n        return tb + '\\n' + str(e) + '\\n' + tb.strip()\n    else:\n        return str(e) + '\\n' + str(max_path_level)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, (OSError, IOError)):\n        if e.errno == errno.ENOENT:\n            if max_path_level == 0:\n                # a file does not exist => raise an error\n                raise OSError('%s: not found' % e.filename)\n            else:\n                # a file already exists => raise an error\n                raise OSError('%s: file exists already' % e.filename)\n        else:\n            if max_path_level == 0:\n                # a directory does not exist => raise an error\n                raise OSError('%s: not found' % e.dirname)\n            else:\n                # a directory already exists => raise an error\n                raise OSError('%s: file already exists' % e.dirname)\n    else:\n    ", "def extostr(cls, e, max_level=30, max_path_level=5):\n    # XXX: can we do better than str(e) or e.strerror\n    return str(e).capitalize()\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Extends the log message with information that the sol will send.\n    \"\"\"\n    s = str(e)\n    if len(s) > max_path_level:\n        s = s[:max_path_level] + \"...\"\n    return \"%s: %s\" % (cls.__name__, s)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    ext = \"\"\n    if e.exc_info and hasattr(e, 'exc_text'):\n        exc_type, exc_obj, exc_tb = e.exc_info\n        traceback.print_exception(exc_type, exc_obj, exc_tb)\n        ext = \"%s: %s\" % (exc_type.__name__, exc_obj.__class__.__name__)\n    if not ext:\n        ext = str(e)\n    return \"%s %s\" % (cls.__name__, ext)\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        # some kind of exception - ignore it\n        return '<exception>'\n    else:\n        return str(e).replace('\\n', '<newline>')\n", "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = \"\"\n    if isinstance(e, Exception):\n        s += str(e)\n        s += \"\\n\"\n        if hasattr(e, \"traceback\"):\n            for tb in e.traceback:\n                s += str(tb) + \"\\n\"\n        if hasattr(e, \"__traceback__\"):\n            s += \"\".join(traceback.format_list(e.__traceback__))\n    else:\n        s = str(e)\n    return s\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, SocketError):\n        if e.errno == errno.ECONNABORTED:\n            logger.warning(\"Could not connect to remote master \"\n                           \"(%s:%d). Is the master running?\",\n                           e.host, e.port)\n            return \"\", \"\"\n        else:\n            raise e\n    if isinstance(e, Exception):\n        raise e\n    return super(RemoteSocket, cls).extostr(e, max_level, max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"to str method as is.\"\n    if e is None:\n        e = ''\n    # replace with repr if necessary\n    return str((e, cls.__name__))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        if isinstance(e, (OSError, IOError)):\n            if e.errno == errno.ENOENT:\n                return cls._(u'[Error] File not found.')\n            elif e.errno == errno.EACCES:\n                return cls._(u'[Error] Permission denied.')\n            elif e.errno == errno.ENOENT:\n                return cls._(u'[Error] File is not found.')\n        elif isinstance(e, TypeError):\n            return cls._(u'[Error] %s' % e)\n    return cls._(u'[Error] %s' % e)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        tb = ''.join(format_exception(type(e), e, e.__traceback__))\n        return tb + '\\n' + str(e) + '\\n' + tb.strip()\n    else:\n        return str(e) + '\\n' + str(max_path_level)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, (OSError, IOError)):\n        if e.errno == errno.ENOENT:\n            if max_path_level == 0:\n                # a file does not exist => raise an error\n                raise OSError('%s: not found' % e.filename)\n            else:\n                # a file already exists => raise an error\n                raise OSError('%s: file exists already' % e.filename)\n        else:\n            if max_path_level == 0:\n                # a directory does not exist => raise an error\n                raise OSError('%s: not found' % e.dirname)\n            else:\n                # a directory already exists => raise an error\n                raise OSError('%s: file already exists' % e.dirname)\n    else:\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    # XXX: can we do better than str(e) or e.strerror\n    return str(e).capitalize()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    \"\"\"\n    Extends the log message with information that the sol will send.\n    \"\"\"\n    s = str(e)\n    if len(s) > max_path_level:\n        s = s[:max_path_level] + \"...\"\n    return \"%s: %s\" % (cls.__name__, s)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    ext = \"\"\n    if e.exc_info and hasattr(e, 'exc_text'):\n        exc_type, exc_obj, exc_tb = e.exc_info\n        traceback.print_exception(exc_type, exc_obj, exc_tb)\n        ext = \"%s: %s\" % (exc_type.__name__, exc_obj.__class__.__name__)\n    if not ext:\n        ext = str(e)\n    return \"%s %s\" % (cls.__name__, ext)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    if isinstance(e, Exception):\n        # some kind of exception - ignore it\n        return '<exception>'\n    else:\n        return str(e).replace('\\n', '<newline>')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def extostr(cls, e, max_level=30, max_path_level=5):\n    s = \"\"\n    if isinstance(e, Exception):\n        s += str(e)\n        s += \"\\n\"\n        if hasattr(e, \"traceback\"):\n            for tb in e.traceback:\n                s += str(tb) + \"\\n\"\n        if hasattr(e, \"__traceback__\"):\n            s += \"\".join(traceback.format_list(e.__traceback__))\n    else:\n        s = str(e)\n    return s\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "append_text_to_file", "docstring": "Write to the specified filename, the provided binary buffer\nCreate the file if required.\n:param file_name:  File name.\n:type file_name: str\n:param text_buffer: Text buffer to write.\n:type text_buffer: str\n:param encoding: The encoding to use.\n:type encoding: str\n:param overwrite: If true, file is overwritten.\n:type overwrite: bool\n:return: The number of bytes written or lt 0 if error.\n:rtype int", "ques_id": "62b8bbbfe0d34b282c181210", "code": ["def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.isfile(file_name) or overwrite:\n        with open(file_name, \"wb\") as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug('Appending text to file {}'.format(file_name))\n    with open(file_name, 'a', encoding=encoding) as f:\n        if overwrite is True:\n            f.write(text_buffer)\n        else:\n            f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Appending text to file '%s'\" % file_name)\n    with open(file_name, \"wb\") as f:\n        if overwrite or not os.path.exists(file_name):\n            f.write(text_buffer.encode(encoding))\n        else:\n            logger.debug(\"File '%s' already exists\" % file_name)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer.getvalue())\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Appending text to file: %s\", file_name)\n    if os.path.isfile(file_name) and not overwrite:\n        logger.warning(\"File already exists: %s\", file_name)\n        return\n    with open(file_name, \"wb\") as file_handle:\n        file_handle.write(text_buffer.encode(encoding))\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Writing file %s\" % file_name)\n    file = open(file_name, 'wb')\n    file.write(text_buffer.getvalue())\n    if overwrite:\n        os.remove(file_name)\n    else:\n        file.close()\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error('File \"{}\" already exists. Skipping.'.format(file_name))\n        return\n\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        logger.error(\"Text file \" + file_name + \" already exists.\")\n        return\n\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer.encode(encoding))\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error('File \"{}\" already exists'.format(file_name))\n        return\n\n    with codecs.open(file_name, 'w', encoding) as out_file:\n        out_file.write(text_buffer)\n", "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not os.path.isfile(file_name) or overwrite:\n        with open(file_name, \"wb\") as file_handle:\n            file_handle.write(text_buffer.encode(encoding))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug('Appending text to file {}'.format(file_name))\n    with open(file_name, 'a', encoding=encoding) as f:\n        if overwrite is True:\n            f.write(text_buffer)\n        else:\n            f.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Appending text to file '%s'\" % file_name)\n    with open(file_name, \"wb\") as f:\n        if overwrite or not os.path.exists(file_name):\n            f.write(text_buffer.encode(encoding))\n        else:\n            logger.debug(\"File '%s' already exists\" % file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer.getvalue())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Appending text to file: %s\", file_name)\n    if os.path.isfile(file_name) and not overwrite:\n        logger.warning(\"File already exists: %s\", file_name)\n        return\n    with open(file_name, \"wb\") as file_handle:\n        file_handle.write(text_buffer.encode(encoding))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    logger.debug(\"Writing file %s\" % file_name)\n    file = open(file_name, 'wb')\n    file.write(text_buffer.getvalue())\n    if overwrite:\n        os.remove(file_name)\n    else:\n        file.close()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error('File \"{}\" already exists. Skipping.'.format(file_name))\n        return\n\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.exists(file_name):\n        logger.error(\"Text file \" + file_name + \" already exists.\")\n        return\n\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer.encode(encoding))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    if not overwrite and os.path.isfile(file_name):\n        logger.error('File \"{}\" already exists'.format(file_name))\n        return\n\n    with codecs.open(file_name, 'w', encoding) as out_file:\n        out_file.write(text_buffer)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def append_text_to_file(file_name, text_buffer, encoding, overwrite=False):\n    with codecs.open(file_name, 'ab', encoding) as f:\n        f.write(text_buffer)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "file_to_textbuffer", "docstring": "Load a file toward a text buffer (UTF-8), using the specify encoding while reading.\nCAUTION : This will read the whole file IN MEMORY.\n:param file_name: File name.\n:type file_name: str\n:param encoding: Encoding to use.\n:type encoding: str\n:return: A text buffer or None in case of error.\n:rtype str", "ques_id": "62b8bbbfe0d34b282c18120f", "code": ["def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"file_to_textbuffer: %s\" % file_name)\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except UnicodeDecodeError:\n        logger.warn(\"File %s is not utf-8 encoded\" % file_name)\n        file_handle = open(file_name, 'rb')\n    text_buffer = file_handle.read()\n    file_handle.close()\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    file_path = os.path.join(self.get_current_dir(), file_name)\n    with codecs.open(file_path, \"rb\", encoding) as f:\n        text_buffer = f.read()\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"Loading %s as a text buffer\", file_name)\n    try:\n        file_handle = codecs.open(file_name, \"rb\", encoding)\n    except (IOError, OSError) as err:\n        logger.error(\"Unable to open file %s: %s\", file_name, err)\n        return None\n\n    text_buffer = file_handle.read()\n    file_handle.close()\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    file_path = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)), file_name\n    )\n    with codecs.open(file_path, 'rb', encoding) as f:\n        text_buffer = f.read()\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    with open(file_name, 'rb') as f:\n        textbuffer = f.read()\n\n    return textbuffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='rb', encoding=encoding) as f:\n            text_buffer = f.read()\n    except Exception as err:\n        logger.error('Error opening file {} - {}'.format(file_name, str(err)))\n        raise err\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"Loading file %s as a text buffer\", file_name)\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buffer = f.read()\n    except Exception as e:\n        logger.error(\"Failed to load file %s - %s\", file_name, e)\n        raise e\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    logger.debug('file_to_textbuffer({0}, {1})'.format(file_name, encoding))\n\n    try:\n        file_content = open(file_name, 'rb').read()\n    except (OSError, IOError, UnicodeDecodeError) as err:\n        logger.error('file_to_textbuffer({0}, {1}): {2}'.format(file_name, encoding, err))\n        return None\n\n    return TextBlob(file_content, encoding=encoding)\n", "def file_to_textbuffer(file_name, encoding):\n    text_buffer = None\n    if os.path.isfile(file_name):\n        logger.info('File %s exists. Trying to load it as text file.' % file_name)\n        try:\n            text_buffer = codecs.open(file_name, encoding=encoding)\n        except (IOError, OSError) as e:\n            logger.error('Unable to load file %s: %s' % (file_name, e))\n            return None\n    else:\n        logger.info('File %s does not exist. Creating it.' % file_name)\n        try:\n            text_buffer = codecs.open(file_name, 'w', encoding=encoding)\n        except (IOError, OSError) as e:\n            logger.error('Unable to create file %s: %s' % (file_name, e))\n            return None\n    return text_buffer\n", "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, 'r', encoding)\n    except IOError as e:\n        logger.error(\"Cannot open file %s: %s\" % (file_name, e))\n        return None\n\n    return text_buffer\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"file_to_textbuffer: %s\" % file_name)\n    try:\n        file_handle = codecs.open(file_name, encoding=encoding)\n    except UnicodeDecodeError:\n        logger.warn(\"File %s is not utf-8 encoded\" % file_name)\n        file_handle = open(file_name, 'rb')\n    text_buffer = file_handle.read()\n    file_handle.close()\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    file_path = os.path.join(self.get_current_dir(), file_name)\n    with codecs.open(file_path, \"rb\", encoding) as f:\n        text_buffer = f.read()\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"Loading %s as a text buffer\", file_name)\n    try:\n        file_handle = codecs.open(file_name, \"rb\", encoding)\n    except (IOError, OSError) as err:\n        logger.error(\"Unable to open file %s: %s\", file_name, err)\n        return None\n\n    text_buffer = file_handle.read()\n    file_handle.close()\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    file_path = os.path.join(\n        os.path.dirname(os.path.realpath(__file__)), file_name\n    )\n    with codecs.open(file_path, 'rb', encoding) as f:\n        text_buffer = f.read()\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    with open(file_name, 'rb') as f:\n        textbuffer = f.read()\n\n    return textbuffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        with codecs.open(file_name, mode='rb', encoding=encoding) as f:\n            text_buffer = f.read()\n    except Exception as err:\n        logger.error('Error opening file {} - {}'.format(file_name, str(err)))\n        raise err\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug(\"Loading file %s as a text buffer\", file_name)\n    try:\n        with codecs.open(file_name, 'rb', encoding) as f:\n            text_buffer = f.read()\n    except Exception as e:\n        logger.error(\"Failed to load file %s - %s\", file_name, e)\n        raise e\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    logger.debug('file_to_textbuffer({0}, {1})'.format(file_name, encoding))\n\n    try:\n        file_content = open(file_name, 'rb').read()\n    except (OSError, IOError, UnicodeDecodeError) as err:\n        logger.error('file_to_textbuffer({0}, {1}): {2}'.format(file_name, encoding, err))\n        return None\n\n    return TextBlob(file_content, encoding=encoding)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    text_buffer = None\n    if os.path.isfile(file_name):\n        logger.info('File %s exists. Trying to load it as text file.' % file_name)\n        try:\n            text_buffer = codecs.open(file_name, encoding=encoding)\n        except (IOError, OSError) as e:\n            logger.error('Unable to load file %s: %s' % (file_name, e))\n            return None\n    else:\n        logger.info('File %s does not exist. Creating it.' % file_name)\n        try:\n            text_buffer = codecs.open(file_name, 'w', encoding=encoding)\n        except (IOError, OSError) as e:\n            logger.error('Unable to create file %s: %s' % (file_name, e))\n            return None\n    return text_buffer\n", "is_pass": false, "return_code": 1}, {"generate_code": "def file_to_textbuffer(file_name, encoding):\n    try:\n        text_buffer = codecs.open(file_name, 'r', encoding)\n    except IOError as e:\n        logger.error(\"Cannot open file %s: %s\" % (file_name, e))\n        return None\n\n    return text_buffer\n", "is_pass": false, "return_code": 1}]}
{"file_path": "pysolbase/FileUtility.py", "project": "champax/pysolbase", "name": "is_file_exist", "docstring": "Check if file name exist.\n:param file_name: File name.\n:type file_name: str\n:return: Return true (exist), false (do not exist, or invalid file name)\n:rtype bool", "ques_id": "62b8bbbce0d34b282c18120d", "code": ["def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        logger.debug(\"File {} exists\".format(file_name))\n        return True\n    else:\n        logger.debug(\"File {} does not exist\".format(file_name))\n        return False\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    logger.debug(\"file_name: {}\".format(file_name))\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "def is_file_exist(file_name):\n    logger.debug('is_file_exist: %s' % file_name)\n    return os.path.isfile(file_name)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    if os.path.isfile(file_name):\n        logger.debug(\"File {} exists\".format(file_name))\n        return True\n    else:\n        logger.debug(\"File {} does not exist\".format(file_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    logger.debug(\"file_name: {}\".format(file_name))\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_file_exist(file_name):\n    logger.debug('is_file_exist: %s' % file_name)\n    return os.path.isfile(file_name)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "pysolbase/SolBase.py", "project": "champax/pysolbase", "name": "_reset_logging", "docstring": "Reset", "ques_id": "62b8b99de0d34b282c1811f8", "code": ["def _reset_logging(cls):\n    if cls._logging is not None:\n        logging.shutdown()\n        cls._logging = None\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n", "def _reset_logging(cls):\n    # Reset the logger\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.DEBUG)\n    logging.debug('Resetting logger')\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = lambda self, *args, **kwargs: None\n", "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = lambda self, *args, **kwargs: None\n", "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "def _reset_logging(cls):\n    if '_tz' in cls.__dict__:\n        del cls._tz\n    if '_ts' in cls.__dict__:\n        del cls._ts\n    logging.getLogger().handlers = []\n", "def _reset_logging(cls):\n    logging.config.fileConfig('logging.conf')\n", "def _reset_logging(cls):\n    if cls._log_level == logging.NOTSET:\n        return\n    logging.basicConfig(level=cls._log_level,\n                        format='%(levelname)s:%(asctime)s:%(name)s:%(message)s')\n", "def _reset_logging(cls):\n    logging._shutdown = False\n    logging._lock = threading.Lock()\n    logging._reset_logging()\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _reset_logging(cls):\n    if cls._logging is not None:\n        logging.shutdown()\n        cls._logging = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.basicConfig()\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    # Reset the logger\n    logging.getLogger().handlers = []\n    logging.getLogger().setLevel(logging.DEBUG)\n    logging.debug('Resetting logger')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = lambda self, *args, **kwargs: None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.getLogger().handlers = []\n    logging.StreamHandler.emit = lambda self, *args, **kwargs: None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.disable(logging.CRITICAL)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if '_tz' in cls.__dict__:\n        del cls._tz\n    if '_ts' in cls.__dict__:\n        del cls._ts\n    logging.getLogger().handlers = []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging.config.fileConfig('logging.conf')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    if cls._log_level == logging.NOTSET:\n        return\n    logging.basicConfig(level=cls._log_level,\n                        format='%(levelname)s:%(asctime)s:%(name)s:%(message)s')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _reset_logging(cls):\n    logging._shutdown = False\n    logging._lock = threading.Lock()\n    logging._reset_logging()\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/tests/test_declarations.py", "project": "pexip/os-zope", "name": "_getTargetClass", "docstring": "Define this to return the implementation in use,\nwithout the 'Py' or 'Fallback' suffix.", "ques_id": "62b8b59feb7e40a82d2d1291", "code": ["def _getTargetClass(self):\n    return NodeClass\n", "def _getTargetClass(self):\n    return Component\n", "def _getTargetClass(self):\n    return DotDict\n", "def _getTargetClass(self):\n    return DotDict\n", "def _getTargetClass(self):\n    return DotDict\n", "def _getTargetClass(self):\n    return DotDict\n", "def _getTargetClass(self):\n    return SimpleChildModel\n", "def _getTargetClass(self):\n    return ParseJSON\n", "def _getTargetClass(self):\n    return NodeClass\n", "def _getTargetClass(self):\n    return Component\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _getTargetClass(self):\n    return NodeClass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Component\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DotDict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DotDict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DotDict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return DotDict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return SimpleChildModel\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return ParseJSON\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return NodeClass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _getTargetClass(self):\n    return Component\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/ro.py", "project": "pexip/os-zope", "name": "_legacy_mergeOrderings", "docstring": "Merge multiple orderings so that within-ordering order is preserved\n\nOrderings are constrained in such a way that if an object appears\nin two or more orderings, then the suffix that begins with the\nobject must be in both orderings.\n\nFor example:\n\n>>> _mergeOrderings([\n... ['x', 'y', 'z'],\n... ['q', 'z'],\n... [1, 3, 5],\n... ['z']\n... ])\n['x', 'y', 'q', 1, 3, 5, 'z']", "ques_id": "62b8b590eb7e40a82d2d1275", "code": ["def _legacy_mergeOrderings(orderings):\n    if len(orderings) == 1:\n        return orderings[0]\n    else:\n        return sorted(set(orderings))\n", "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    elif len(orderings[0]) == 1:\n        return orderings\n    else:\n        first = orderings[0]\n        return [\n            first[0]\n        ] + [\n            o for o in orderings[1:]\n            if o not in first\n        ]\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(result) == 0 or o < result[-1]:\n            result.append(o)\n    return result\n", "def _legacy_mergeOrderings(orderings):\n    combined = []\n    for o in orderings:\n        if o not in combined:\n            combined.append(o)\n    return combined\n", "def _legacy_mergeOrderings(orderings):\n    mergedOrderings = []\n    for o in orderings:\n        for e in o:\n            mergedOrderings.append(e)\n    return mergedOrderings\n", "def _legacy_mergeOrderings(orderings):\n    # TODO: Facilitate merging of OrderedDicts with OrderedDicts.\n    orderings = list(orderings)\n    merged = []\n    while orderings:\n        merged.append(orderings.pop(0))\n        for o in orderings:\n            if o not in merged:\n                merged.append(o)\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    orderings = [x for x in orderings if x is not None]\n    if not orderings:\n        return None\n    if len(set(orderings)) == 1:\n        return orderings[0]\n    return tuple(orderings)\n", "def _legacy_mergeOrderings(orderings):\n    merged = []\n    for o in orderings:\n        if o not in merged:\n            merged.append(o)\n    return merged\n", "def _legacy_mergeOrderings(orderings):\n    merged_orderings = []\n    for ordering in orderings:\n        for occurrence in ordering:\n            merged_orderings.append(occurrence)\n    return merged_orderings\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _legacy_mergeOrderings(orderings):\n    if len(orderings) == 1:\n        return orderings[0]\n    else:\n        return sorted(set(orderings))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    if not orderings:\n        return []\n    elif len(orderings[0]) == 1:\n        return orderings\n    else:\n        first = orderings[0]\n        return [\n            first[0]\n        ] + [\n            o for o in orderings[1:]\n            if o not in first\n        ]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if o not in result:\n            result.append(o)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    result = []\n    for o in orderings:\n        if len(result) == 0 or o < result[-1]:\n            result.append(o)\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    combined = []\n    for o in orderings:\n        if o not in combined:\n            combined.append(o)\n    return combined\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    mergedOrderings = []\n    for o in orderings:\n        for e in o:\n            mergedOrderings.append(e)\n    return mergedOrderings\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    # TODO: Facilitate merging of OrderedDicts with OrderedDicts.\n    orderings = list(orderings)\n    merged = []\n    while orderings:\n        merged.append(orderings.pop(0))\n        for o in orderings:\n            if o not in merged:\n                merged.append(o)\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    orderings = [x for x in orderings if x is not None]\n    if not orderings:\n        return None\n    if len(set(orderings)) == 1:\n        return orderings[0]\n    return tuple(orderings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged = []\n    for o in orderings:\n        if o not in merged:\n            merged.append(o)\n    return merged\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _legacy_mergeOrderings(orderings):\n    merged_orderings = []\n    for ordering in orderings:\n        for occurrence in ordering:\n            merged_orderings.append(occurrence)\n    return merged_orderings\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "directlyProvidedBy", "docstring": "Return the interfaces directly provided by the given object\n\nThe value returned is an `~zope.interface.interfaces.IDeclaration`.", "ques_id": "62b8b58deb7e40a82d2d1269", "code": ["def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    if isinstance(object, type) and issubclass(object, InstanceDeclaration):\n        return object\n    raise TypeError('%s is not directly provided by %s' % (object, type(object)))\n", "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.direct\n    else:\n        return _implements_advice(object)\n", "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.type\n    if isinstance(object, ProvidedBy):\n        return object\n    raise TypeError(\n        \"%s is not directly provided by %s\" % (object, type(object))\n    )\n", "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    elif issubclass(object, Component):\n        return Component\n    elif issubclass(object, Proxy):\n        return Proxy\n    else:\n        spec = _implements_name(object)\n        if spec is not None:\n            return getattr(object, spec)\n", "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.type.directlyProvidedBy(object)\n    if isinstance(object, ProvidedBy):\n        return object\n    raise TypeError(\n        \"%r is not directly provided by %r\" % (object, object.type))\n", "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    if issubclass(object, type):\n        # We are a class\n        return InstanceDeclaration\n    if hasattr(object, '__providedBy__'):\n        # We are a type that inherits from BaseType\n        return ObjectSpecification\n", "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    if isinstance(object, type) and issubclass(object, InstanceDeclaration):\n        return object\n    raise TypeError('%s is not directly provided by %s' % (object, type(object)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.direct\n    else:\n        return _implements_advice(object)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.type\n    if isinstance(object, ProvidedBy):\n        return object\n    raise TypeError(\n        \"%s is not directly provided by %s\" % (object, type(object))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    elif issubclass(object, Component):\n        return Component\n    elif issubclass(object, Proxy):\n        return Proxy\n    else:\n        spec = _implements_name(object)\n        if spec is not None:\n            return getattr(object, spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, InstanceDeclaration):\n        return object.type.directlyProvidedBy(object)\n    if isinstance(object, ProvidedBy):\n        return object\n    raise TypeError(\n        \"%r is not directly provided by %r\" % (object, object.type))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if providedBy(object):\n        return object\n    if issubclass(object, type):\n        # We are a class\n        return InstanceDeclaration\n    if hasattr(object, '__providedBy__'):\n        # We are a type that inherits from BaseType\n        return ObjectSpecification\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def directlyProvidedBy(object):\n    if isinstance(object, Instance):\n        return object.__provides__\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "minimalBases", "docstring": "Reduce a list of base classes to its ordered minimum equivalent", "ques_id": "62b8b559eb7e40a82d2d11f8", "code": ["def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, type)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, type)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def minimalBases(classes):\n    return [c for c in classes if not issubclass(c, Base)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "namesAndDescriptions", "docstring": "Return attribute names and descriptions defined by interface.", "ques_id": "62b8b4b9eb7e40a82d2d1134", "code": ["def namesAndDescriptions(self, all=False):\n    cls = self.__class__\n    if all:\n        names = sorted(cls.__dict__.keys())\n        desc = [cls.__dict__[name] for name in names]\n        return (names, desc)\n    else:\n        return (cls.__name__, cls.__doc__)\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    if self.__class__ is Attribute:\n        names = [self.__name__]\n        descriptions = [self.__doc__]\n    else:\n        for base in self.__bases__:\n            if hasattr(base, \"namesAndDescriptions\"):\n                names.extend(base.namesAndDescriptions(all=all))\n                descriptions.extend(base.__doc__)\n            else:\n                names.extend(base.namesAndDescriptions(all=all))\n                descriptions.extend(base.__doc__)\n    if all:\n        return names, descriptions\n    else:\n        return names, descriptions, self.__doc__\n", "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        if hasattr(base, 'namesAndDescriptions'):\n            names.extend(base.namesAndDescriptions(all=all))\n            descriptions.extend(base.descriptions)\n    if not all and self.__name__!= '_Property':\n        names.append(self.__name__)\n    if not all and self.__description__!= '':\n        descriptions.append(self.__description__)\n    if all and self.__description__ is not None:\n        descriptions.append(self.__description__)\n    if not all and self.__identifier__!= '':\n        names.append(self.__identifier__)\n        descriptions.append(self.__identifier__)\n    return (names, descriptions)\n", "def namesAndDescriptions(self, all=False):\n    attr = self.__attrs\n    if all:\n        names = attr.keys()\n        descriptions = []\n        for name in names:\n            desc = attr.get(name, None)\n            if desc is not None:\n                descriptions.append(\"%s=%s\" % (name, desc))\n        return \", \".join(descriptions)\n    else:\n        return attr.getTaggedValue(self.__identifier__)\n", "def namesAndDescriptions(self, all=False):\n    name = self.__class__.__name__\n    if all:\n        return (name, self.queryTaggedValue('description', []))\n    return (name, self.queryTaggedValue('description', []) +\n            self.getDescriptionFor(name))\n", "def namesAndDescriptions(self, all=False):\n    cls = self.__class__\n    if not all:\n        names = []\n        descs = []\n        for name, tag in self.__attrs:\n            if tag is not None:\n                names.append(name)\n                descs.append(tag)\n        if not names:\n            return names, descs\n        if not all:\n            return names, descs,\n        names = sorted(names)\n        descs = sorted(descs)\n        return names, descs,\n    return self.__class__.__name__, self.__ibmodule__, [], []\n", "def namesAndDescriptions(self, all=False):\n    d = self.__attrs\n    if all:\n        d = dict((k, v.__doc__ or '') for k, v in d.items())\n        d.update((k, v.__doc__ or '') for k, v in self.__bases__.items())\n    return NamesAndDescriptions(self.__name__, d)\n", "def namesAndDescriptions(self, all=False):\n    name = self.__name__\n    desc = self.__doc__\n    if all:\n        desc = [desc]\n        name = [name]\n    return name, desc\n", "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((name, getattr(self, name).__doc__)\n                     for name in self.__class__.__names__)\n    return self.__class__.__names__\n", "def namesAndDescriptions(self, all=False):\n    name = self.__class__.__name__\n    if all:\n        desc = []\n    else:\n        desc = self.__doc__\n    return (name, desc)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def namesAndDescriptions(self, all=False):\n    cls = self.__class__\n    if all:\n        names = sorted(cls.__dict__.keys())\n        desc = [cls.__dict__[name] for name in names]\n        return (names, desc)\n    else:\n        return (cls.__name__, cls.__doc__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    if self.__class__ is Attribute:\n        names = [self.__name__]\n        descriptions = [self.__doc__]\n    else:\n        for base in self.__bases__:\n            if hasattr(base, \"namesAndDescriptions\"):\n                names.extend(base.namesAndDescriptions(all=all))\n                descriptions.extend(base.__doc__)\n            else:\n                names.extend(base.namesAndDescriptions(all=all))\n                descriptions.extend(base.__doc__)\n    if all:\n        return names, descriptions\n    else:\n        return names, descriptions, self.__doc__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    names = []\n    descriptions = []\n    for base in self.__bases__:\n        if hasattr(base, 'namesAndDescriptions'):\n            names.extend(base.namesAndDescriptions(all=all))\n            descriptions.extend(base.descriptions)\n    if not all and self.__name__!= '_Property':\n        names.append(self.__name__)\n    if not all and self.__description__!= '':\n        descriptions.append(self.__description__)\n    if all and self.__description__ is not None:\n        descriptions.append(self.__description__)\n    if not all and self.__identifier__!= '':\n        names.append(self.__identifier__)\n        descriptions.append(self.__identifier__)\n    return (names, descriptions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    attr = self.__attrs\n    if all:\n        names = attr.keys()\n        descriptions = []\n        for name in names:\n            desc = attr.get(name, None)\n            if desc is not None:\n                descriptions.append(\"%s=%s\" % (name, desc))\n        return \", \".join(descriptions)\n    else:\n        return attr.getTaggedValue(self.__identifier__)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    name = self.__class__.__name__\n    if all:\n        return (name, self.queryTaggedValue('description', []))\n    return (name, self.queryTaggedValue('description', []) +\n            self.getDescriptionFor(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    cls = self.__class__\n    if not all:\n        names = []\n        descs = []\n        for name, tag in self.__attrs:\n            if tag is not None:\n                names.append(name)\n                descs.append(tag)\n        if not names:\n            return names, descs\n        if not all:\n            return names, descs,\n        names = sorted(names)\n        descs = sorted(descs)\n        return names, descs,\n    return self.__class__.__name__, self.__ibmodule__, [], []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    d = self.__attrs\n    if all:\n        d = dict((k, v.__doc__ or '') for k, v in d.items())\n        d.update((k, v.__doc__ or '') for k, v in self.__bases__.items())\n    return NamesAndDescriptions(self.__name__, d)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    name = self.__name__\n    desc = self.__doc__\n    if all:\n        desc = [desc]\n        name = [name]\n    return name, desc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    if all:\n        return tuple((name, getattr(self, name).__doc__)\n                     for name in self.__class__.__names__)\n    return self.__class__.__names__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def namesAndDescriptions(self, all=False):\n    name = self.__class__.__name__\n    if all:\n        desc = []\n    else:\n        desc = self.__doc__\n    return (name, desc)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/interface.py", "project": "pexip/os-zope", "name": "names", "docstring": "Return the attribute names defined by the interface.", "ques_id": "62b8b416eb7e40a82d2d1129", "code": ["def names(self, all=False):\n    if self.__class__ is Attribute:\n        names = []\n        for c in self.__class__.__mro__:\n            try:\n                names.extend(getattr(c, '__slots__', ()))\n            except AttributeError:\n                pass\n        if all:\n            return names\n        return names or (self.__class__.__name__,)\n    return super(Attribute, self).names(all)\n", "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "def names(self, all=False):\n    if all:\n        return self.__class__.__bases__\n    return self.__class__.__name__\n", "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "def names(self, all=False):\n    if all:\n        return self.__class__.__bases__\n    return self.__class__.__name__\n", "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "def names(self, all=False):\n    if self.__class__ is Class:\n        return [name for name, _ in self.__class__.__dict__.items()\n                if not name.startswith('_')]\n    if all:\n        return list(self.__class__.__dict__.keys())\n    return self.__class__.__name__.lower().split('.')\n", "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    else:\n        return list(self.__names)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def names(self, all=False):\n    if self.__class__ is Attribute:\n        names = []\n        for c in self.__class__.__mro__:\n            try:\n                names.extend(getattr(c, '__slots__', ()))\n            except AttributeError:\n                pass\n        if all:\n            return names\n        return names or (self.__class__.__name__,)\n    return super(Attribute, self).names(all)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__class__.__bases__\n    return self.__class__.__name__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return self.__class__.__bases__\n    return self.__class__.__name__\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    return self.__class__.__name__.split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if self.__class__ is Class:\n        return [name for name, _ in self.__class__.__dict__.items()\n                if not name.startswith('_')]\n    if all:\n        return list(self.__class__.__dict__.keys())\n    return self.__class__.__name__.lower().split('.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def names(self, all=False):\n    if all:\n        return list(self.__attrs)\n    else:\n        return list(self.__names)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/declarations.py", "project": "pexip/os-zope", "name": "_normalizeargs", "docstring": "Normalize declaration arguments\n\nNormalization arguments might contain Declarions, tuples, or single\ninterfaces.\n\nAnything but individial interfaces or implements specs will be expanded.", "ques_id": "62b8b3d6eb7e40a82d2d111c", "code": ["def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return arg.__class__\n        except AttributeError:\n            return arg\n\n    if isinstance(sequence, ProvidedClass):\n        for item in sequence.__implied__:\n            output.append(_normalize(item))\n    elif isinstance(sequence, Implements):\n        for item in sequence.__implied__:\n            output.extend(_normalize(item))\n    elif isinstance(sequence, ImplementsFirst):\n        for item in sequence.__implied__:\n            output.insert(0, _normalize(item))\n    elif isinstance(sequence, ImplementsAfter):\n        for item in sequence.__implied__:\n            output.append(_normalize(item))\n    else:\n        for item in sequence:\n            output.append(_normalize(item))\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def decorate(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            for item in sequence:\n                if item not in args:\n                    args = list(args)\n                    args.append(item)\n            return fn(*args, **kwargs)\n        return wrapped\n    output.append(decorate)\n    return output\n", "def _normalizeargs(sequence, output=None):\n    output = output or []\n    result = []\n    for item in sequence:\n        result.append(_normalizeargs(item, output))\n    return result\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            return arg.__of__(output)\n        if isinstance(arg, Specification):\n            return arg.direct(output)\n        return arg\n\n    for iface in sequence:\n        if isinstance(iface, InterfaceClass):\n            output.append(_normalize(iface))\n        elif isinstance(iface, Class):\n            output.append(_normalize(iface))\n        else:\n            raise TypeError(_next_super_class(iface))\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, ObjectSpecification):\n            return arg\n        elif isinstance(arg, InstanceSpecification):\n            return arg.providedBy(output[0])\n        else:\n            return InstanceSpecification.wrap(arg)\n\n    if isinstance(sequence, Sequence):\n        return output + [_normalize(arg) for arg in sequence]\n    elif isinstance(sequence, Mapping):\n        return output + dict((_normalize(k), _normalize(v))\n                            for k, v in sequence.items())\n    else:\n        raise TypeError('%r is not a sequence or mapping' % sequence)\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def decorate(fn):\n        if fn is ObjectSpecification:\n            output.append((fn, sequence))\n        return fn\n\n    return decorate\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, ClassTypes):\n            return arg\n        elif isinstance(arg, InstanceTypes):\n            return arg._proxied(output=output)\n        else:\n            raise TypeError(\"%s cannot be normalized as %s\" % (sequence, output))\n\n    return reduce(_normalize, sequence)\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(iface):\n        if iface is None:\n            return None\n        return iface(output.append)\n\n    for iface in sequence:\n        _normalize(iface)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    \"Provides directlyProvidedBy objects\"\n    if output is None:\n        output = []\n\n    for iface in sequence:\n        providedBy = getObjectSpecification(iface)\n        if providedBy is not None:\n            output.append(providedBy)\n\n    return output\n", "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def wrapper(ob):\n        try:\n            return output.append(ob)\n        except AttributeError:\n            output.append(ob)\n            return ob\n\n    for i in sequence:\n        try:\n            wrapper(i)\n        except TypeError:\n            if hasattr(i, '__call__'):\n                wrapper(i())\n            else:\n                wrapper(i)\n    return output\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        try:\n            return arg.__class__\n        except AttributeError:\n            return arg\n\n    if isinstance(sequence, ProvidedClass):\n        for item in sequence.__implied__:\n            output.append(_normalize(item))\n    elif isinstance(sequence, Implements):\n        for item in sequence.__implied__:\n            output.extend(_normalize(item))\n    elif isinstance(sequence, ImplementsFirst):\n        for item in sequence.__implied__:\n            output.insert(0, _normalize(item))\n    elif isinstance(sequence, ImplementsAfter):\n        for item in sequence.__implied__:\n            output.append(_normalize(item))\n    else:\n        for item in sequence:\n            output.append(_normalize(item))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def decorate(fn):\n        @functools.wraps(fn)\n        def wrapped(*args, **kwargs):\n            for item in sequence:\n                if item not in args:\n                    args = list(args)\n                    args.append(item)\n            return fn(*args, **kwargs)\n        return wrapped\n    output.append(decorate)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    output = output or []\n    result = []\n    for item in sequence:\n        result.append(_normalizeargs(item, output))\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, Instance):\n            return arg.__of__(output)\n        if isinstance(arg, Specification):\n            return arg.direct(output)\n        return arg\n\n    for iface in sequence:\n        if isinstance(iface, InterfaceClass):\n            output.append(_normalize(iface))\n        elif isinstance(iface, Class):\n            output.append(_normalize(iface))\n        else:\n            raise TypeError(_next_super_class(iface))\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, ObjectSpecification):\n            return arg\n        elif isinstance(arg, InstanceSpecification):\n            return arg.providedBy(output[0])\n        else:\n            return InstanceSpecification.wrap(arg)\n\n    if isinstance(sequence, Sequence):\n        return output + [_normalize(arg) for arg in sequence]\n    elif isinstance(sequence, Mapping):\n        return output + dict((_normalize(k), _normalize(v))\n                            for k, v in sequence.items())\n    else:\n        raise TypeError('%r is not a sequence or mapping' % sequence)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def decorate(fn):\n        if fn is ObjectSpecification:\n            output.append((fn, sequence))\n        return fn\n\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(arg):\n        if isinstance(arg, ClassTypes):\n            return arg\n        elif isinstance(arg, InstanceTypes):\n            return arg._proxied(output=output)\n        else:\n            raise TypeError(\"%s cannot be normalized as %s\" % (sequence, output))\n\n    return reduce(_normalize, sequence)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def _normalize(iface):\n        if iface is None:\n            return None\n        return iface(output.append)\n\n    for iface in sequence:\n        _normalize(iface)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    \"Provides directlyProvidedBy objects\"\n    if output is None:\n        output = []\n\n    for iface in sequence:\n        providedBy = getObjectSpecification(iface)\n        if providedBy is not None:\n            output.append(providedBy)\n\n    return output\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _normalizeargs(sequence, output=None):\n    if output is None:\n        output = []\n\n    def wrapper(ob):\n        try:\n            return output.append(ob)\n        except AttributeError:\n            output.append(ob)\n            return ob\n\n    for i in sequence:\n        try:\n            wrapper(i)\n        except TypeError:\n            if hasattr(i, '__call__'):\n                wrapper(i())\n            else:\n                wrapper(i)\n    return output\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_available", "docstring": "Return the C optimization module, if available, otherwise\na false value.\n\nIf the optimizations are required but not available, this\nraises the ImportError.\n\nThis does not say whether they should be used or not.", "ques_id": "62b8b3d5eb7e40a82d2d1110", "code": ["def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n    except ImportError:\n        return False\n    else:\n        return implementer.__module__ == 'Products.CMFCore.interfaces'\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer.__module__ == 'zope.interface'\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_available is not None:\n        return _c_optimizations_available\n    if not PYPY2:\n        # Only available under pypy2\n        return False\n    try:\n        import c_optimizations\n    except ImportError:\n        _c_optimizations_available = False\n    else:\n        _c_optimizations_available = True\n    return _c_optimizations_available\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('coptimization')\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n", "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('zope.interface')\n    except ImportError:\n        return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n    except ImportError:\n        return False\n    else:\n        return implementer.__module__ == 'Products.CMFCore.interfaces'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations  # noqa\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        import c_optimizations\n        return c_optimizations\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer.__module__ == 'zope.interface'\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    global _c_optimizations_available\n    if _c_optimizations_available is not None:\n        return _c_optimizations_available\n    if not PYPY2:\n        # Only available under pypy2\n        return False\n    try:\n        import c_optimizations\n    except ImportError:\n        _c_optimizations_available = False\n    else:\n        _c_optimizations_available = True\n    return _c_optimizations_available\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('coptimization')\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementedBy\n        return implementedBy\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_available():\n    try:\n        from zope.interface import implementer\n        return implementer('zope.interface')\n    except ImportError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_should_attempt_c_optimizations", "docstring": "Return a true value if we should attempt to use the C optimizations.\n\nThis takes into account whether we're on PyPy and the value of the\n``PURE_PYTHON`` environment variable, as defined in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110f", "code": ["def _should_attempt_c_optimizations():\n    from zope.interface import implementedBy\n    return (implementedBy(OptimizableBlock) and\n            hasattr(OptimizableBlock, '_c_optimizations') and\n            len(OptimizableBlock._c_optimizations) > 0)\n", "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    # c_optimizations is only available in PYPY2 and PYPY3\n    return not _c_optimizations_available()\n", "def _should_attempt_c_optimizations():\n    # Note: We might want to turn this into a unit test since it will\n    # take a long time when we remove Python 2 support.\n    return _c_optimizations_available() or _c_optimizations_ignored()\n", "def _should_attempt_c_optimizations():\n    # If we don't have Python 2, don't use C optimizations.\n    if not PYPY2:\n        return _c_optimizations_required()\n\n    # If we don't have C optimizations enabled, don't use C implementations.\n    if _c_optimizations_available():\n        return False\n\n    # If we don't have C optimizations enabled and we have Python 2, don't\n    # use C implementations.\n    if _c_optimizations_ignored():\n        return True\n\n    return _skip_under_py2k()\n", "def _should_attempt_c_optimizations():\n    # If we don't have Python 2, we can use the C optimizations.\n    return not _c_optimizations_available()\n", "def _should_attempt_c_optimizations():\n    # Note: this could be done more efficiently if we were to support\n    # C extensions even when we weren't using the Python 2 implementation.\n    return (not _c_optimizations_required() and\n            not _c_optimizations_ignored())\n", "def _should_attempt_c_optimizations():\n    # If we're using C implementations, we can optimize using the C\n    # implementation. Otherwise, we cannot optimize using the Python implementation\n    return _c_optimizations_required() or _c_optimizations_available()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _should_attempt_c_optimizations():\n    from zope.interface import implementedBy\n    return (implementedBy(OptimizableBlock) and\n            hasattr(OptimizableBlock, '_c_optimizations') and\n            len(OptimizableBlock._c_optimizations) > 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    if PYPY2:\n        return _c_optimizations_required()\n    else:\n        return _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # c_optimizations is only available in PYPY2 and PYPY3\n    return not _c_optimizations_available()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # Note: We might want to turn this into a unit test since it will\n    # take a long time when we remove Python 2 support.\n    return _c_optimizations_available() or _c_optimizations_ignored()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # If we don't have Python 2, don't use C optimizations.\n    if not PYPY2:\n        return _c_optimizations_required()\n\n    # If we don't have C optimizations enabled, don't use C implementations.\n    if _c_optimizations_available():\n        return False\n\n    # If we don't have C optimizations enabled and we have Python 2, don't\n    # use C implementations.\n    if _c_optimizations_ignored():\n        return True\n\n    return _skip_under_py2k()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # If we don't have Python 2, we can use the C optimizations.\n    return not _c_optimizations_available()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _should_attempt_c_optimizations():\n    # Note: this could be done more efficiently if we were to support\n    # C extensions even when we weren't using the Python 2 implementation.\n    return (not _c_optimizations_required() and\n            not _c_optimizations_ignored())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _should_attempt_c_optimizations():\n    # If we're using C implementations, we can optimize using the C\n    # implementation. Otherwise, we cannot optimize using the Python implementation\n    return _c_optimizations_required() or _c_optimizations_available()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_ignored", "docstring": "The opposite of `_c_optimizations_required`.", "ques_id": "62b8b3d4eb7e40a82d2d110e", "code": ["def _c_optimizations_ignored():\n    pure_python_env = os.environ.get('PURE_PYTHON')\n    if pure_python_env is not None:\n        return pure_python_env!= '0'\n    else:\n        return False\n", "def _c_optimizations_ignored():\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    if pure_env is None:\n        return False\n    return pure_env!= \"0\"\n", "def _c_optimizations_ignored():\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    return pure_env is not None and pure_env!= 0\n", "def _c_optimizations_ignored():\n    pure_python_env = os.getenv('PURE_PYTHON')\n    if pure_python_env is not None and pure_python_env!= '0':\n        return True\n    else:\n        return False\n", "def _c_optimizations_ignored():\n    return os.getenv('PURE_PYTHON') is not None and int(os.getenv('PURE_PYTHON')) == 0\n", "def _c_optimizations_ignored():\n    pure_python = os.environ.get('PURE_PYTHON')\n    return pure_python is not None and pure_python!= 0\n", "def _c_optimizations_ignored():\n    pure_python = os.environ.get(\"PURE_PYTHON\")\n    return pure_python is not None and pure_python!= \"0\"\n", "def _c_optimizations_ignored():\n    return bool(os.environ.get(\"PURE_PYTHON\", \"0\"))\n", "def _c_optimizations_ignored():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "def _c_optimizations_ignored():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= 0\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_ignored():\n    pure_python_env = os.environ.get('PURE_PYTHON')\n    if pure_python_env is not None:\n        return pure_python_env!= '0'\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    if pure_env is None:\n        return False\n    return pure_env!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_env = os.environ.get(\"PURE_PYTHON\")\n    return pure_env is not None and pure_env!= 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_python_env = os.getenv('PURE_PYTHON')\n    if pure_python_env is not None and pure_python_env!= '0':\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return os.getenv('PURE_PYTHON') is not None and int(os.getenv('PURE_PYTHON')) == 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_python = os.environ.get('PURE_PYTHON')\n    return pure_python is not None and pure_python!= 0\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_python = os.environ.get(\"PURE_PYTHON\")\n    return pure_python is not None and pure_python!= \"0\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    return bool(os.environ.get(\"PURE_PYTHON\", \"0\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_ignored():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= '0'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_ignored():\n    pure_env = os.environ.get('PURE_PYTHON')\n    return pure_env is not None and pure_env!= 0\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/zope/interface/_compat.py", "project": "pexip/os-zope", "name": "_c_optimizations_required", "docstring": "Return a true value if the C optimizations are required.\n\nThis uses the ``PURE_PYTHON`` variable as documented in `_use_c_impl`.", "ques_id": "62b8b3d4eb7e40a82d2d110d", "code": ["def _c_optimizations_required():\n    return sys.platform!= \"win32\"\n", "def _c_optimizations_required():\n    c_opt_required = False\n    if sys.platform == \"win32\":\n        # On Windows, C extensions must be installed in order to use the\n        # optimizations.\n        for ext in [\"c\", \"dll\"]:\n            if sys.version_info[:2] >= (3, 3):\n                if \"_pypy_c\" in sys.modules:\n                    # _pypy_c extensions are always installed in order to\n                    # use the C extension.\n                    c_opt_required = True\n                    break\n            if \"_cpyext_c\" in sys.modules:\n                # _cpyext_c extensions are always installed in order to\n                # use the C extension.\n                c_opt_required = True\n                break\n    return c_opt_required\n", "def _c_optimizations_required():\n    return os.environ.get('C_OPTIMIZATIONS') == 'true'\n", "def _c_optimizations_required():\n    return os.getenv(\"NOSE_C_OPTIMIZATIONS\", \"0\").lower() in (\"1\", \"yes\", \"y\")\n", "def _c_optimizations_required():\n    return sys.argv.get('--c-optimizations') == 'true'\n", "def _c_optimizations_required():\n    c_optimizations_required = sys.argv.pop(0) == \"c\"\n\n    return c_optimizations_required\n", "def _c_optimizations_required():\n    if sys.version_info >= (3, 8) and sys.version_info < (3, 9):\n        return True\n    else:\n        return False\n", "def _c_optimizations_required():\n    from.. import c_optimizations\n    return c_optimizations.required\n", "def _c_optimizations_required():\n    return sys.platform == 'win32' and sys.version_info.major == 2\n", "def _c_optimizations_required():\n    if sys.platform == \"win32\":\n        return False\n    return sys.version_info[0] == 2\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _c_optimizations_required():\n    return sys.platform!= \"win32\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    c_opt_required = False\n    if sys.platform == \"win32\":\n        # On Windows, C extensions must be installed in order to use the\n        # optimizations.\n        for ext in [\"c\", \"dll\"]:\n            if sys.version_info[:2] >= (3, 3):\n                if \"_pypy_c\" in sys.modules:\n                    # _pypy_c extensions are always installed in order to\n                    # use the C extension.\n                    c_opt_required = True\n                    break\n            if \"_cpyext_c\" in sys.modules:\n                # _cpyext_c extensions are always installed in order to\n                # use the C extension.\n                c_opt_required = True\n                break\n    return c_opt_required\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return os.environ.get('C_OPTIMIZATIONS') == 'true'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return os.getenv(\"NOSE_C_OPTIMIZATIONS\", \"0\").lower() in (\"1\", \"yes\", \"y\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    return sys.argv.get('--c-optimizations') == 'true'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    c_optimizations_required = sys.argv.pop(0) == \"c\"\n\n    return c_optimizations_required\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    if sys.version_info >= (3, 8) and sys.version_info < (3, 9):\n        return True\n    else:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    from.. import c_optimizations\n    return c_optimizations.required\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _c_optimizations_required():\n    return sys.platform == 'win32' and sys.version_info.major == 2\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _c_optimizations_required():\n    if sys.platform == \"win32\":\n        return False\n    return sys.version_info[0] == 2\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "reset", "docstring": "Reset the histogram.\n\nCurrent context is reset to an empty dict.\nBins are reinitialized with the *initial_value*\nor with *make_bins()* (depending on the initialization).", "ques_id": "62b87b989a0c4fa8b80b35ee", "code": ["def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = None\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n    self._initial_value = self._initial_bins\n    self._initial_bins = self.make_bins()\n", "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n    self.bins = self._initial_bins\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n    self._initial_value = self._initial_bins\n    self._initial_bins = self.make_bins()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def reset(self):\n    self._hist = {}\n    self._cur_context = {}\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "to_csv", "docstring": ".. deprecated:: 0.5 in Lena 0.5 to_csv is not used.\n      Iterables are converted to tables.\n\nConvert graph's points to CSV.\n\n*separator* delimits values, the default is comma.\n\n*header*, if not ``None``, is the first string of the output\n(new line is added automatically).\n\nSince a graph can be multidimensional,\nfor each point first its coordinate is converted to string\n(separated by *separator*), then each part of its value.\n\nTo convert :class:`Graph` to CSV inside a Lena sequence,\nuse :class:`lena.output.ToCSV`.", "ques_id": "62b87b859a0c4fa8b80b35d7", "code": ["def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n    rows = []\n    for item in self._points:\n        rows.append([item[k] for k in self._dim])\n    csv_str = separator.join(rows)\n    return csv_str\n", "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n\n    points = self.points\n    points = np.array(points, dtype=np.float64)\n    csv_string = separator.join([str(i) for i in points.tolist()])\n    if self._sort:\n        points = points.sort()\n    if self._context is not None:\n        csv_string += \";\" + self._context\n    return csv_string\n", "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(self._context)] + [str(point) for point in self.points])\n", "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(p) for p in self.points])\n", "def to_csv(self, separator=\",\", header=None):\n    if self._points is None:\n        raise ValueError(\"Points haven't been computed yet.\")\n\n    return separator.join([str(pt) for pt in self._points])\n", "def to_csv(self, separator=\",\", header=None):\n    return separator.join(str(p) for p in self._points)\n", "def to_csv(self, separator=\",\", header=None):\n    s = separator.join([str(x) for x in self.points])\n    if header:\n        s = header + \",\" + s\n    return s\n", "def to_csv(self, separator=\",\", header=None):\n    csv = StringIO()\n    self._update()\n    if header is not None:\n        csv.write(\"%s\\n\" % header)\n    csv.write(\"%s\\n\" % separator.join(str(p) for p in self._points))\n    return csv.getvalue()\n", "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n    points = self.points\n    if self._sort:\n        points.sort()\n    return separator.join([str(i) for i in points])\n", "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(p) for p in self.points])\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n    rows = []\n    for item in self._points:\n        rows.append([item[k] for k in self._dim])\n    csv_str = separator.join(rows)\n    return csv_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n\n    points = self.points\n    points = np.array(points, dtype=np.float64)\n    csv_string = separator.join([str(i) for i in points.tolist()])\n    if self._sort:\n        points = points.sort()\n    if self._context is not None:\n        csv_string += \";\" + self._context\n    return csv_string\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(self._context)] + [str(point) for point in self.points])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(p) for p in self.points])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if self._points is None:\n        raise ValueError(\"Points haven't been computed yet.\")\n\n    return separator.join([str(pt) for pt in self._points])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return separator.join(str(p) for p in self._points)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    s = separator.join([str(x) for x in self.points])\n    if header:\n        s = header + \",\" + s\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    csv = StringIO()\n    self._update()\n    if header is not None:\n        csv.write(\"%s\\n\" % header)\n    csv.write(\"%s\\n\" % separator.join(str(p) for p in self._points))\n    return csv.getvalue()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    if header is None:\n        header = []\n    points = self.points\n    if self._sort:\n        points.sort()\n    return separator.join([str(i) for i in points])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def to_csv(self, separator=\",\", header=None):\n    return separator.join([str(p) for p in self.points])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_get_err_indices", "docstring": "Get error indices corresponding to a coordinate.", "ques_id": "62b87b839a0c4fa8b80b35cb", "code": ["def _get_err_indices(self, coord_name):\n    try:\n        return self._coord_names.index(coord_name)\n    except ValueError:\n        raise ValueError(\n            \"coordinate name {!r} is not valid for \"\n            \"variable {!r}\".format(coord_name, self.name)\n        )\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Unknown coordinate name: {}.'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "def _get_err_indices(self, coord_name):\n    # NOTE: this will only work if scale is not None\n    return np.where(\n        (self._scale is not None)\n        & (self._coord_names == coord_name)\n        & (self._parsed_error_names is None)\n    )[0]\n", "def _get_err_indices(self, coord_name):\n    try:\n        err_indices = [i for i, c in enumerate(self._coord_names) if c == coord_name]\n    except TypeError:\n        err_indices = [i for i, c in enumerate(self._coord_names) if c == 'coord_name']\n    return err_indices\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\"Unknown coordinate name '{}'\".format(coord_name))\n\n    return self._coord_names.index(coord_name)\n", "def _get_err_indices(self, coord_name):\n    # Find indexes corresponding to all scaled coordinates\n    err_idxs = []\n    for i, c in enumerate(self._coord_names):\n        if c == coord_name:\n            err_idxs.append(i)\n\n    return err_idxs\n", "def _get_err_indices(self, coord_name):\n    matching_indices = []\n    for i, (coord, name) in enumerate(zip(self.coords, self.field_names)):\n        if name == coord_name:\n            matching_indices.append(i)\n    return matching_indices\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError('coord_name not in coordinate names: {0!r}'\n                        .format(coord_name))\n\n    return np.where(self._parsed_error_names == coord_name)[0]\n", "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise KeyError(\"Coordinate name {} not found\".format(coord_name))\n\n    return np.where(self._parsed_error_names == coord_name)[0]\n", "def _get_err_indices(self, coord_name):\n    return np.where(self._parsed_error_names == coord_name)[0]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _get_err_indices(self, coord_name):\n    try:\n        return self._coord_names.index(coord_name)\n    except ValueError:\n        raise ValueError(\n            \"coordinate name {!r} is not valid for \"\n            \"variable {!r}\".format(coord_name, self.name)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._parsed_error_names:\n        raise KeyError('Unknown coordinate name: {}.'.format(coord_name))\n    return self._parsed_error_names[coord_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    # NOTE: this will only work if scale is not None\n    return np.where(\n        (self._scale is not None)\n        & (self._coord_names == coord_name)\n        & (self._parsed_error_names is None)\n    )[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    try:\n        err_indices = [i for i, c in enumerate(self._coord_names) if c == coord_name]\n    except TypeError:\n        err_indices = [i for i, c in enumerate(self._coord_names) if c == 'coord_name']\n    return err_indices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError(\"Unknown coordinate name '{}'\".format(coord_name))\n\n    return self._coord_names.index(coord_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    # Find indexes corresponding to all scaled coordinates\n    err_idxs = []\n    for i, c in enumerate(self._coord_names):\n        if c == coord_name:\n            err_idxs.append(i)\n\n    return err_idxs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    matching_indices = []\n    for i, (coord, name) in enumerate(zip(self.coords, self.field_names)):\n        if name == coord_name:\n            matching_indices.append(i)\n    return matching_indices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise ValueError('coord_name not in coordinate names: {0!r}'\n                        .format(coord_name))\n\n    return np.where(self._parsed_error_names == coord_name)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    if coord_name not in self._coord_names:\n        raise KeyError(\"Coordinate name {} not found\".format(coord_name))\n\n    return np.where(self._parsed_error_names == coord_name)[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_err_indices(self, coord_name):\n    return np.where(self._parsed_error_names == coord_name)[0]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "_update_context", "docstring": "Update *context* with the properties of this graph.\n\n*context.error* is appended with indices of errors.\nExample subcontext for a graph with fields \"E,t,error_E_low\":\n{\"error\": {\"x_low\": {\"index\": 2}}}.\nNote that error names are called \"x\", \"y\" and \"z\"\n(this corresponds to first three coordinates,\nif they are present), which allows to simplify plotting.\nExisting values are not removed\nfrom *context.value* and its subcontexts.\n\nCalled on \"destruction\" of the graph (for example,\nin :class:`.ToCSV`). By destruction we mean conversion\nto another structure (like text) in the flow.\nThe graph object is not really destroyed in this process.", "ques_id": "62b87b7e9a0c4fa8b80b35bc", "code": ["def _update_context(self, context):\n    for field_name, value in context.items():\n        if not isinstance(field_name, str):\n            raise TypeError(\n                \"field_name must be a string, not {}\".format(type(field_name).__name__)\n            )\n        if not isinstance(value, tuple):\n            raise TypeError(\"value must be a tuple, not {}\".format(type(value).__name__))\n        if field_name not in self.field_names:\n            raise ValueError(\"field name not in coord names: {}\".format(field_name))\n        if len(value)!= self.dim:\n            raise ValueError(\"value length not match the coord length: {}\".format(len(value)))\n        context[field_name] = tuple(value)\n", "def _update_context(self, context):\n    context['_scale'] = self.scale(context['_coord_names'])\n    context['_parsed_error_names'] = self._parse_error_names(\n        self.field_names)\n", "def _update_context(self, context):\n    for key, val in context.items():\n        if key in self._parsed_error_names:\n            setattr(self, key, val)\n        else:\n            raise KeyError('Unknown coordinate \"{0}\"'.format(key))\n", "def _update_context(self, context):\n    context['shape'] = self.shape\n    context['dtype'] = self.dtype\n", "def _update_context(self, context):\n    super()._update_context(context)\n    context['shape'] = self.coords.shape\n", "def _update_context(self, context):\n    for key, val in context.items():\n        if not (isinstance(key, tuple) and len(key) == 2 and isinstance(val, tuple)):\n            raise ValueError(\"Only tuples of length 2 are accepted in context. Got: %s\" % str(key))\n        try:\n            context[key] = tuple(val)\n        except TypeError:\n            context[key] = val\n\n    self._parsed_error_names = self._parse_error_names(self.field_names)\n", "def _update_context(self, context):\n    super()._update_context(context)\n    context['coords'] = self.coords\n    context['scale'] = self.scale\n    return context\n", "def _update_context(self, context):\n    super()._update_context(context)\n    context['scale'] = self.scale\n", "def _update_context(self, context):\n    context['scale'] = self.scale\n    context['dim'] = self.dim\n    context['_coord_names'] = self._coord_names\n", "def _update_context(self, context):\n    super()._update_context(context)\n\n    context['shape'] = self._coord_names\n    context['scale'] = self._scale\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _update_context(self, context):\n    for field_name, value in context.items():\n        if not isinstance(field_name, str):\n            raise TypeError(\n                \"field_name must be a string, not {}\".format(type(field_name).__name__)\n            )\n        if not isinstance(value, tuple):\n            raise TypeError(\"value must be a tuple, not {}\".format(type(value).__name__))\n        if field_name not in self.field_names:\n            raise ValueError(\"field name not in coord names: {}\".format(field_name))\n        if len(value)!= self.dim:\n            raise ValueError(\"value length not match the coord length: {}\".format(len(value)))\n        context[field_name] = tuple(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context['_scale'] = self.scale(context['_coord_names'])\n    context['_parsed_error_names'] = self._parse_error_names(\n        self.field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for key, val in context.items():\n        if key in self._parsed_error_names:\n            setattr(self, key, val)\n        else:\n            raise KeyError('Unknown coordinate \"{0}\"'.format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context['shape'] = self.shape\n    context['dtype'] = self.dtype\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    super()._update_context(context)\n    context['shape'] = self.coords.shape\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    for key, val in context.items():\n        if not (isinstance(key, tuple) and len(key) == 2 and isinstance(val, tuple)):\n            raise ValueError(\"Only tuples of length 2 are accepted in context. Got: %s\" % str(key))\n        try:\n            context[key] = tuple(val)\n        except TypeError:\n            context[key] = val\n\n    self._parsed_error_names = self._parse_error_names(self.field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    super()._update_context(context)\n    context['coords'] = self.coords\n    context['scale'] = self.scale\n    return context\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    super()._update_context(context)\n    context['scale'] = self.scale\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _update_context(self, context):\n    context['scale'] = self.scale\n    context['dim'] = self.dim\n    context['_coord_names'] = self._coord_names\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _update_context(self, context):\n    super()._update_context(context)\n\n    context['shape'] = self._coord_names\n    context['scale'] = self._scale\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "integral", "docstring": "Compute integral (scale for a histogram).\n\n*bins* contain values, and *edges* form the mesh\nfor the integration.\nTheir format is defined in :class:`.histogram` description.", "ques_id": "62b87b4f9a0c4fa8b80b3580", "code": ["def integral(bins, edges):\n    return (bins[1] - bins[0]) * (edges[1] + edges[0])\n", "def integral(bins, edges):\n    return (bins[1] - bins[0]) * sum(edges[:-1] * edges[1:])\n", "def integral(bins, edges):\n    return bin_area(*(edges[:-1] + edges[1:]))\n", "def integral(bins, edges):\n    bins = _check_edges_increasing_1d(bins)\n    return integrate.trapz(bins * edges[1:], edges)\n", "def integral(bins, edges):\n    return sum(bins[i] * (edges[i] + edges[(i + 1) % bins])\n               for i in range(bins.size))\n", "def integral(bins, edges):\n    return reduce(integral_1d, bins, 0)\n", "def integral(bins, edges):\n    return _bin_area(bins, edges, func=integrate.trapz)\n", "def integral(bins, edges):\n    return np.trapz(hist_to_graph(hist=edges, make_value=True, field_names=edges), bins)\n", "def integral(bins, edges):\n    bin_edges = get_bin_on_value_1d(edges, bins)\n    return np.trapz(bin_edges[:-1] * bin_edges[1:], edges)\n", "def integral(bins, edges):\n    return np.trapz(hist_to_graph(hist=edges, make_value=True, get_coordinate=True, field_names=[\"value\", \"coord\"]), bins)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def integral(bins, edges):\n    return (bins[1] - bins[0]) * (edges[1] + edges[0])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return (bins[1] - bins[0]) * sum(edges[:-1] * edges[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return bin_area(*(edges[:-1] + edges[1:]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bins = _check_edges_increasing_1d(bins)\n    return integrate.trapz(bins * edges[1:], edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return sum(bins[i] * (edges[i] + edges[(i + 1) % bins])\n               for i in range(bins.size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return reduce(integral_1d, bins, 0)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return _bin_area(bins, edges, func=integrate.trapz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.trapz(hist_to_graph(hist=edges, make_value=True, field_names=edges), bins)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    bin_edges = get_bin_on_value_1d(edges, bins)\n    return np.trapz(bin_edges[:-1] * bin_edges[1:], edges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def integral(bins, edges):\n    return np.trapz(hist_to_graph(hist=edges, make_value=True, get_coordinate=True, field_names=[\"value\", \"coord\"]), bins)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_seq", "docstring": "Test whether *seq* can be converted to a FillRequestSeq.\n\nTrue only if it is a FillRequest element\nor contains at least one such,\nand it is not a Source sequence.", "ques_id": "62b87b199a0c4fa8b80b354e", "code": ["def is_fill_request_seq(seq):\n    if not isinstance(seq, Sequence):\n        return False\n    return all(is_fill_compute_el(el) for el in seq)\n", "def is_fill_request_seq(seq):\n    try:\n        [is_fill_request_seq(x) for x in seq]\n    except TypeError:\n        return False\n    else:\n        return True\n", "def is_fill_request_seq(seq):\n    return is_fill_compute_el(seq) or is_fill_request_el(seq)\n", "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq):\n        return False\n    return is_fill_compute_seq(seq) and len(seq) > 1\n", "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq) and not is_fill_request_el(seq):\n        return False\n    return is_fill_compute_seq(seq) and isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    if is_fill_compute_el(seq) and len(seq) > 1:\n        return is_fill_request_el(seq[0]) and is_fill_request_seq(seq[1:])\n    else:\n        return False\n", "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq):\n        return False\n    if isinstance(seq, FillRequestSeq):\n        return True\n    if isinstance(seq, bool):\n        return seq\n    if not isinstance(seq, Sequence):\n        return False\n    return is_fill_request_el(seq[0]) and is_fill_request_seq(seq[1:])\n", "def is_fill_request_seq(seq):\n    return is_fill_compute_el(seq) and isinstance(seq, FillRequestSeq)\n", "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequestSeq):\n        return True\n    elif isinstance(seq, bool):\n        return seq\n    elif isinstance(seq, str):\n        return is_fill_compute_el(seq)\n    else:\n        raise TypeError(\"Unsupported type for seq being converted.\")\n", "def is_fill_request_seq(seq):\n    if not isinstance(seq, Sequence) or len(seq) <= 1:\n        return False\n    return is_fill_compute_el(seq) and isinstance(seq[0], FillRequestSeq)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, Sequence):\n        return False\n    return all(is_fill_compute_el(el) for el in seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    try:\n        [is_fill_request_seq(x) for x in seq]\n    except TypeError:\n        return False\n    else:\n        return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_compute_el(seq) or is_fill_request_el(seq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq):\n        return False\n    return is_fill_compute_seq(seq) and len(seq) > 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq) and not is_fill_request_el(seq):\n        return False\n    return is_fill_compute_seq(seq) and isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if is_fill_compute_el(seq) and len(seq) > 1:\n        return is_fill_request_el(seq[0]) and is_fill_request_seq(seq[1:])\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not is_fill_compute_el(seq):\n        return False\n    if isinstance(seq, FillRequestSeq):\n        return True\n    if isinstance(seq, bool):\n        return seq\n    if not isinstance(seq, Sequence):\n        return False\n    return is_fill_request_el(seq[0]) and is_fill_request_seq(seq[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    return is_fill_compute_el(seq) and isinstance(seq, FillRequestSeq)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if isinstance(seq, FillRequestSeq):\n        return True\n    elif isinstance(seq, bool):\n        return seq\n    elif isinstance(seq, str):\n        return is_fill_compute_el(seq)\n    else:\n        raise TypeError(\"Unsupported type for seq being converted.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_seq(seq):\n    if not isinstance(seq, Sequence) or len(seq) <= 1:\n        return False\n    return is_fill_compute_el(seq) and isinstance(seq[0], FillRequestSeq)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_request_el", "docstring": "Object contains executable methods 'fill' and 'request'.", "ques_id": "62b87b099a0c4fa8b80b3538", "code": ["def is_fill_request_el(obj):\n    return (\n        hasattr(obj, 'fill') and\n        hasattr(obj,'request')\n    )\n", "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request') and\n            hasattr(obj, 'type'))\n", "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request') and\n            hasattr(obj, 'type'))\n", "def is_fill_request_el(obj):\n    return (\n        obj.type == 'fillRequest' and\n        obj.fill_request.type =='request'\n    )\n", "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "def is_fill_request_el(obj):\n    return (\n        obj.type == 'FILL_REQUEST' and\n        hasattr(obj, 'fill') and\n        hasattr(obj,'request')\n    )\n", "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "def is_fill_request_el(obj):\n    return (obj.tag == 'fill' and\n            hasattr(obj,'request') and\n            hasattr(obj, 'options'))\n", "def is_fill_request_el(obj):\n    return (\n        obj.type == 'FILL_REQUEST' and\n        obj.request_id is not None and\n        hasattr(obj, 'fill_price') and\n        hasattr(obj, 'quantity')\n    )\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_request_el(obj):\n    return (\n        hasattr(obj, 'fill') and\n        hasattr(obj,'request')\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request') and\n            hasattr(obj, 'type'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request') and\n            hasattr(obj, 'type'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        obj.type == 'fillRequest' and\n        obj.fill_request.type =='request'\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        obj.type == 'FILL_REQUEST' and\n        hasattr(obj, 'fill') and\n        hasattr(obj,'request')\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj,'request'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_request_el(obj):\n    return (obj.tag == 'fill' and\n            hasattr(obj,'request') and\n            hasattr(obj, 'options'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_request_el(obj):\n    return (\n        obj.type == 'FILL_REQUEST' and\n        obj.request_id is not None and\n        hasattr(obj, 'fill_price') and\n        hasattr(obj, 'quantity')\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_run_el", "docstring": "Object contains executable method 'run'.", "ques_id": "62b87af99a0c4fa8b80b3524", "code": ["def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "def is_run_el(obj):\n    return hasattr(obj, 'run')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_run_el(obj):\n    return hasattr(obj, \"run\")\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_run_el(obj):\n    return hasattr(obj, 'run')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/check_sequence_type.py", "project": "ynikitenko/lena", "name": "is_fill_compute_el", "docstring": "Object contains executable methods 'fill' and 'compute'.", "ques_id": "62b87af69a0c4fa8b80b351a", "code": ["def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, '__call__'))\n", "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and hasattr(obj, 'compute'))\n            or (hasattr(obj, 'compute_from_data') and obj.fill is not None))\n", "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and callable(obj.fill)) or\n            (hasattr(obj, 'compute') and callable(obj.compute)))\n", "def is_fill_compute_el(obj):\n    return (\n        hasattr(obj, \"fill\") and hasattr(obj, \"compute\") and hasattr(obj, \"compute_grad\")\n    )\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, 'fill_value'))\n", "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and hasattr(obj, 'compute')) or\n            (hasattr(obj, 'fill_value') and obj.fill_value is not None))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and hasattr(obj, 'compute') and\n            hasattr(obj, '_fill') and hasattr(obj, '_compute'))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, \"fill\") and hasattr(obj, \"compute\"))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, '__call__'))\n", "def is_fill_compute_el(obj):\n    return (hasattr(obj, '__dict__') and\n            'fill' in obj.__dict__ and\n            hasattr(obj.fill, '__call__') and\n            hasattr(obj.fill, 'compute'))\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, '__call__'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and hasattr(obj, 'compute'))\n            or (hasattr(obj, 'compute_from_data') and obj.fill is not None))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and callable(obj.fill)) or\n            (hasattr(obj, 'compute') and callable(obj.compute)))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return (\n        hasattr(obj, \"fill\") and hasattr(obj, \"compute\") and hasattr(obj, \"compute_grad\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, 'fill_value'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return ((hasattr(obj, 'fill') and hasattr(obj, 'compute')) or\n            (hasattr(obj, 'fill_value') and obj.fill_value is not None))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and hasattr(obj, 'compute') and\n            hasattr(obj, '_fill') and hasattr(obj, '_compute'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, \"fill\") and hasattr(obj, \"compute\"))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, 'fill') and\n            hasattr(obj, 'compute') and\n            hasattr(obj, '__call__'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_fill_compute_el(obj):\n    return (hasattr(obj, '__dict__') and\n            'fill' in obj.__dict__ and\n            hasattr(obj.fill, '__call__') and\n            hasattr(obj.fill, 'compute'))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/context/functions.py", "project": "ynikitenko/lena", "name": "difference", "docstring": "Return a dictionary with items from *d1* not contained in *d2*.\n\n*level* sets the maximum depth of recursion. For infinite recursion,\nset that to -1. For level 1,\nif a key is present both in *d1* and *d2* but has different values,\nit is included into the difference.\nSee :func:`intersection` for more details.\n\n*d1* and *d2* remain unchanged. However, *d1* or some of its\nsubdictionaries may be returned directly.\nMake a deep copy of the result when appropriate.\n\n.. versionadded:: 0.5\n   add keyword argument *level*.", "ques_id": "62b87af19a0c4fa8b80b34f7", "code": ["def difference(d1, d2, level=-1):\n    r = {}\n    for key in d1:\n        if key not in d2:\n            level += 1\n            r[key] = _sentinel\n        else:\n            r[key] = d1[key] if key in d2 else _sentinel\n    for key in d2:\n        if key not in d1:\n            level -= 1\n            r[key] = _sentinel\n        else:\n            r[key] = d2[key] if key in d1 else _sentinel\n    return r\n", "def difference(d1, d2, level=-1):\n    r = {}\n    for k in d1:\n        if k not in d2:\n            if level == 0:\n                prefix = ''\n            else:\n                prefix = '..'\n            r[prefix + k] = d1[k]\n    return r\n", "def difference(d1, d2, level=-1):\n    if level == 0:\n        return dict(d1)\n\n    keys = d1.keys() & d2.keys()\n    res = difference(d1[k], d2[k], level=level - 1)\n    return res\n", "def difference(d1, d2, level=-1):\n    return dict([(k, v) for k, v in iterate_update(d1, d2, level)])\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for key in d1:\n        if key not in d2:\n            if level == 0:\n                prefix = ''\n            else:\n                prefix = '.' * level\n            print(\"{}{} not in {}\".format(prefix, key, d2))\n            result[key] = _sentinel\n    return result\n", "def difference(d1, d2, level=-1):\n    if level == 0:\n        diff = {}\n        for k in d1:\n            if k not in d2:\n                diff[k] = d1[k]\n        return diff\n    else:\n        d1_copy = d1.copy()\n        for k in d1:\n            if k not in d2:\n                d1_copy.pop(k)\n        return difference(d1_copy, d2, level - 1)\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for k in d1:\n        if k not in d2:\n            if level == 0:\n                result[k] = d1[k]\n            else:\n                result[k] = _sentinel\n            level -= 1\n    for k in d2:\n        if k not in d1:\n            if level == 0:\n                result[k] = d2[k]\n            else:\n                result[k] = _sentinel\n            level -= 1\n    return result\n", "def difference(d1, d2, level=-1):\n    result = {}\n    for key in d1:\n        if key not in d2:\n            if level >= 0:\n                result[key] = _sentinel\n            else:\n                result[key] = d1[key]\n            level += 1\n    return result\n", "def difference(d1, d2, level=-1):\n    if level == 0:\n        return dict(d2)\n    d = dict(d1)\n    for k in d2:\n        if k not in d:\n            d[k] = d2[k]\n    return difference(d, d2, level - 1)\n", "def difference(d1, d2, level=-1):\n    d = {}\n    for k in d1:\n        if k not in d2:\n            d[k] = d1[k]\n        elif isinstance(d1[k], dict) and isinstance(d2[k], dict):\n            d[k] = difference(d1[k], d2[k], level + 1)\n        else:\n            d[k] = d1[k]\n    return d\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def difference(d1, d2, level=-1):\n    r = {}\n    for key in d1:\n        if key not in d2:\n            level += 1\n            r[key] = _sentinel\n        else:\n            r[key] = d1[key] if key in d2 else _sentinel\n    for key in d2:\n        if key not in d1:\n            level -= 1\n            r[key] = _sentinel\n        else:\n            r[key] = d2[key] if key in d1 else _sentinel\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    r = {}\n    for k in d1:\n        if k not in d2:\n            if level == 0:\n                prefix = ''\n            else:\n                prefix = '..'\n            r[prefix + k] = d1[k]\n    return r\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level == 0:\n        return dict(d1)\n\n    keys = d1.keys() & d2.keys()\n    res = difference(d1[k], d2[k], level=level - 1)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    return dict([(k, v) for k, v in iterate_update(d1, d2, level)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for key in d1:\n        if key not in d2:\n            if level == 0:\n                prefix = ''\n            else:\n                prefix = '.' * level\n            print(\"{}{} not in {}\".format(prefix, key, d2))\n            result[key] = _sentinel\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level == 0:\n        diff = {}\n        for k in d1:\n            if k not in d2:\n                diff[k] = d1[k]\n        return diff\n    else:\n        d1_copy = d1.copy()\n        for k in d1:\n            if k not in d2:\n                d1_copy.pop(k)\n        return difference(d1_copy, d2, level - 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for k in d1:\n        if k not in d2:\n            if level == 0:\n                result[k] = d1[k]\n            else:\n                result[k] = _sentinel\n            level -= 1\n    for k in d2:\n        if k not in d1:\n            if level == 0:\n                result[k] = d2[k]\n            else:\n                result[k] = _sentinel\n            level -= 1\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    result = {}\n    for key in d1:\n        if key not in d2:\n            if level >= 0:\n                result[key] = _sentinel\n            else:\n                result[key] = d1[key]\n            level += 1\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    if level == 0:\n        return dict(d2)\n    d = dict(d1)\n    for k in d2:\n        if k not in d:\n            d[k] = d2[k]\n    return difference(d, d2, level - 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def difference(d1, d2, level=-1):\n    d = {}\n    for k in d1:\n        if k not in d2:\n            d[k] = d1[k]\n        elif isinstance(d1[k], dict) and isinstance(d2[k], dict):\n            d[k] = difference(d1[k], d2[k], level + 1)\n        else:\n            d[k] = d1[k]\n    return d\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "fill", "docstring": "Fill histogram at *coord* with the given *weight*.\n\nCoordinates outside the histogram edges are ignored.", "ques_id": "62b87af09a0c4fa8b80b34f1", "code": ["def fill(self, coord, weight=1):\n    if self.edges is not None and coord in self.edges:\n        edges = self.edges[coord]\n        return self.bins[edges].fill(coord, weight)\n    else:\n        return self.initial_value\n", "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    if self.bins is None:\n        self.bins = 1\n    elif self.bins > 1:\n        self.bins = self.bins + 1\n\n    self.edges[0] = coord[0]\n    self.edges[-1] = coord[-1]\n\n    self.ranges = [[0, weight]]\n\n    if self.bins > 1:\n        for i in range(self.bins - 1):\n            self.ranges.append([coord[i], coord[-1 - i]])\n\n    self.ranges = np.array(self.ranges)\n    self.nbins = len(self.ranges)\n", "def fill(self, coord, weight=1):\n    # check type of coord\n    ccoord = Coordinates(coord)\n    if ccoord.dim!= self.dim:\n        raise ValueError(\"coord has wrong dimension\")\n    # check if the fill coordinate is within the bounds\n    if self.bins is not None and self.bins < ccoord.bins:\n        raise ValueError(\"coord has too few bins\")\n    # check if the weight is within the bounds\n    if self.bins is not None and self.bins < ccoord.bins:\n        raise ValueError(\"coord has too many bins\")\n    # check if the edges are within the bounds\n    if self.edges is not None and self.edges < ccoord.edges:\n        raise ValueError(\"coord has too few edges\")\n    # update the context\n    self._update_context({coord: weight})\n", "def fill(self, coord, weight=1):\n    # TODO: check if coord is within ranges\n    self.ranges[coord] = (\n        min(self.edges[coord][0], self.edges[coord + 1][-1]),\n        max(self.edges[coord][1], self.edges[coord + 1][0]),\n        weight\n    )\n", "def fill(self, coord, weight=1):\n    self.ranges = [(coord[0] - self.edges[0], coord[1] - self.edges[1]),\n                   (coord[0] + self.edges[0], coord[1] + self.edges[1])]\n    self.bins = self._update_context({'weight': weight})\n", "def fill(self, coord, weight=1):\n    if self.bins is not None:\n        if coord not in self.bins.keys():\n            raise ValueError(\"coord is not in bins\")\n        bin_edges = self.bins[coord]\n    else:\n        bin_edges = self.edges\n\n    self.coords[coord] = (bin_edges[:-1], bin_edges[1:] + weight)\n", "def fill(self, coord, weight=1):\n    xmin, xmax = coord\n    self.ranges = [(xmin, xmax)]\n    self.bins[0] = xmin\n    self.bins[-1] = xmax\n    self.nbins = self.bins.size\n    self.bins[0] = xmin\n    self.nbins = self.nbins + 1\n    self.bins[-1] = xmax\n    self.nbins = self.nbins + 1\n    self._update_context(context={})\n    self._update_context(context={'weight': weight})\n    return\n", "def fill(self, coord, weight=1):\n    self.ranges[coord] = (min(self.edges[coord]), max(self.edges[coord]))\n    self.bins[coord] = (min(self.bins[coord]), max(self.bins[coord]))\n    self.coords[coord] = weight\n", "def fill(self, coord, weight=1):\n    c = coord - self.edges[0]\n    x = c / self.bins\n    self._update_context({'x': x, 'y': (x * weight)})\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fill(self, coord, weight=1):\n    if self.edges is not None and coord in self.edges:\n        edges = self.edges[coord]\n        return self.bins[edges].fill(coord, weight)\n    else:\n        return self.initial_value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.bins is None:\n        self.bins = 1\n    elif self.bins > 1:\n        self.bins = self.bins + 1\n\n    self.edges[0] = coord[0]\n    self.edges[-1] = coord[-1]\n\n    self.ranges = [[0, weight]]\n\n    if self.bins > 1:\n        for i in range(self.bins - 1):\n            self.ranges.append([coord[i], coord[-1 - i]])\n\n    self.ranges = np.array(self.ranges)\n    self.nbins = len(self.ranges)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # check type of coord\n    ccoord = Coordinates(coord)\n    if ccoord.dim!= self.dim:\n        raise ValueError(\"coord has wrong dimension\")\n    # check if the fill coordinate is within the bounds\n    if self.bins is not None and self.bins < ccoord.bins:\n        raise ValueError(\"coord has too few bins\")\n    # check if the weight is within the bounds\n    if self.bins is not None and self.bins < ccoord.bins:\n        raise ValueError(\"coord has too many bins\")\n    # check if the edges are within the bounds\n    if self.edges is not None and self.edges < ccoord.edges:\n        raise ValueError(\"coord has too few edges\")\n    # update the context\n    self._update_context({coord: weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    # TODO: check if coord is within ranges\n    self.ranges[coord] = (\n        min(self.edges[coord][0], self.edges[coord + 1][-1]),\n        max(self.edges[coord][1], self.edges[coord + 1][0]),\n        weight\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.ranges = [(coord[0] - self.edges[0], coord[1] - self.edges[1]),\n                   (coord[0] + self.edges[0], coord[1] + self.edges[1])]\n    self.bins = self._update_context({'weight': weight})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    if self.bins is not None:\n        if coord not in self.bins.keys():\n            raise ValueError(\"coord is not in bins\")\n        bin_edges = self.bins[coord]\n    else:\n        bin_edges = self.edges\n\n    self.coords[coord] = (bin_edges[:-1], bin_edges[1:] + weight)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    xmin, xmax = coord\n    self.ranges = [(xmin, xmax)]\n    self.bins[0] = xmin\n    self.bins[-1] = xmax\n    self.nbins = self.bins.size\n    self.bins[0] = xmin\n    self.nbins = self.nbins + 1\n    self.bins[-1] = xmax\n    self.nbins = self.nbins + 1\n    self._update_context(context={})\n    self._update_context(context={'weight': weight})\n    return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    self.ranges[coord] = (min(self.edges[coord]), max(self.edges[coord]))\n    self.bins[coord] = (min(self.bins[coord]), max(self.bins[coord]))\n    self.coords[coord] = weight\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fill(self, coord, weight=1):\n    c = coord - self.edges[0]\n    x = c / self.bins\n    self._update_context({'x': x, 'y': (x * weight)})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_validate_labels", "docstring": "Check that keys and values in the given labels match against their corresponding\nregular expressions.\n\nArgs:\n    labels (dict): the different labels to validate.\n\nRaises:\n    ValidationError: if any of the keys and labels does not match their respective\n        regular expression. The error contains as message the list of all errors\n        which occurred in the labels. Each element of the list is a dictionary with\n        one key-value pair:\n        - key: the label key or label value for which an error occurred as string.\n        - value: the error message.\n\n        .. code:: python\n\n            # Example:\n            labels = {\n                \"key1\": \"valid\",\n                \"key2\": [\"invalid\"],\n                \"$$\": \"invalid\",\n                True: True,\n            }\n            try:\n                _validate_labels(labels)\n            except ValidationError as err:\n                assert err.messages == [\n                    {\"['invalid']\": 'expected string or bytes-like object'},\n                    {'$$': \"Label key '$$' does not match the regex [...]\"},\n                    {'True': 'expected string or bytes-like object'},\n                    {'True': 'expected string or bytes-like object'},\n                ]", "ques_id": "62b86aa3b4d922cb0e688d36", "code": ["def _validate_labels(labels):\n    return _validate_key(labels[0]) and _validate_value(labels[1])\n", "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "def _validate_labels(labels):\n    labels = validate_key(labels)\n    return validate_value(labels)\n", "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "def _validate_labels(labels):\n    labels = dataclasses.asdict(labels)\n    _validate_labels(labels)\n    return labels\n", "def _validate_labels(labels):\n    return _validate_key(labels.get(LABEL_KEY)) and _validate_value(labels.get(LABEL_VALUE))\n", "def _validate_labels(labels):\n    for key, value in labels.items():\n        _validate_labels_key(key)\n        _validate_labels_value(value)\n", "def _validate_labels(labels):\n    return {key: validate_key(value) for key, value in labels.items()}\n", "def _validate_labels(labels):\n    _validate_labels_regex(_label_key_pattern, labels)\n    _validate_labels_regex(_label_value_pattern, labels.values())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _validate_labels(labels):\n    return _validate_key(labels[0]) and _validate_value(labels[1])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    labels = validate_key(labels)\n    return validate_value(labels)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return _validate_key(labels.get(\"key\")) and _validate_value(labels.get(\"value\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    labels = dataclasses.asdict(labels)\n    _validate_labels(labels)\n    return labels\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return _validate_key(labels.get(LABEL_KEY)) and _validate_value(labels.get(LABEL_VALUE))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    for key, value in labels.items():\n        _validate_labels_key(key)\n        _validate_labels_value(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    return {key: validate_key(value) for key, value in labels.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _validate_labels(labels):\n    _validate_labels_regex(_label_key_pattern, labels)\n    _validate_labels_regex(_label_value_pattern, labels.values())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "_get_resource_name_regex", "docstring": "Build or return the regular expressions that are used to validate\nthe name of the Krake resources.\n\nReturns:\n    (re.Pattern): the compiled regular expressions, to validate\n    the resource name.", "ques_id": "62b86a9eb4d922cb0e688d25", "code": ["def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n       's3': _label_key_regex,\n        'dynamodb_batch': _label_value_regex,\n       'sqs': _label_key_regex,\n        'dynamodb_queue': _label_value_regex\n    }\n", "def _get_resource_name_regex():\n    return {\n        \"kinesis\": r\"^kinesis-(\\d{1,})$\",\n        \"dynamodb\": r\"^dynamodb-(\\d{1,})$\",\n        \"s3\": r\"^s3-(\\d{1,})$\",\n        \"gcs\": r\"^gcs-(\\d{1,})$\",\n        \"sns\": r\"^sns-(\\d{1,})$\",\n        \"dynamodb_topic\": r\"^dynamodb-(\\d{1,})$\",\n    }\n", "def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n    }\n", "def _get_resource_name_regex():\n    return {\n        \"name\": (\n            r\"^{}$\".format(_resource_name_pattern.format(\"\")),\n            False,\n        ),\n    }\n", "def _get_resource_name_regex():\n    return {\n        \"resources\": _resource_name_regex,\n    }\n", "def _get_resource_name_regex():\n    return {\n        \"namespace\": r\"^(?P<namespace>.+?)/(?P<resource_name>[^/]+)$\",\n        \"resource_name\": r\"^(?P<resource_name>[^/]+)$\",\n        \"name\": r\"^(?P<name>[^/]+)$\",\n    }\n", "def _get_resource_name_regex():\n    return {\n        'km': _label_key_regex,\n        'kinesis': _label_value_regex,\n    }\n", "def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n        'dynamodb_global': _label_key_regex + r'/(?P<namespace>.+)$',\n       's3': _label_value_regex,\n       'sqs': _label_value_regex,\n       'mqs': _label_value_regex,\n        'rds': _label_value_regex,\n        'dynamodb_batch': _label_key_regex + r'/(?P<namespace>.+)$',\n       'sqs_batch': _label_value_regex + r'/(?P<namespace>.+)$',\n    }\n", "def _get_resource_name_regex():\n    return {\n        'kinesis': r'^kinesis-([^/]+)$',\n        'dynamodb': r'^dynamodb-([^/]+)$',\n       'msg': r'^msg-([^/]+)$',\n        'dynamodb_batch': r'^dynamodb-batch-([^/]+)$',\n        'dynamodb_shard': r'^dynamodb-shard-([^/]+)$',\n        'dynamodb_topic': r'^dynamodb-topic-([^/]+)$',\n        'rds': r'^rds-([^/]+)$',\n        'rds_instance': r'^rds-([^/]+)$',\n       's3': r'^s3-([^/]+)$',\n       'sns': r'^sns-([^/]+)$',\n       'sqs': r'^sqs-([^/]+)$',\n       'sqs_topic': r'^sqs-topic-([^/]+)$',\n        'dynamodb_subscription': r'^dynamodb-subscription-([^/]+)$',\n        'dynamodb_topic_subscription': r'^dynamodb-topic-subscription-(", "def _get_resource_name_regex():\n    return {\n        '{resource_name_prefix}-{resource_name}': _label_key_regex,\n        '{resource_name_prefix}-{resource_name}-{label}': _label_value_regex,\n    }\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n       's3': _label_key_regex,\n        'dynamodb_batch': _label_value_regex,\n       'sqs': _label_key_regex,\n        'dynamodb_queue': _label_value_regex\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        \"kinesis\": r\"^kinesis-(\\d{1,})$\",\n        \"dynamodb\": r\"^dynamodb-(\\d{1,})$\",\n        \"s3\": r\"^s3-(\\d{1,})$\",\n        \"gcs\": r\"^gcs-(\\d{1,})$\",\n        \"sns\": r\"^sns-(\\d{1,})$\",\n        \"dynamodb_topic\": r\"^dynamodb-(\\d{1,})$\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        \"name\": (\n            r\"^{}$\".format(_resource_name_pattern.format(\"\")),\n            False,\n        ),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        \"resources\": _resource_name_regex,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        \"namespace\": r\"^(?P<namespace>.+?)/(?P<resource_name>[^/]+)$\",\n        \"resource_name\": r\"^(?P<resource_name>[^/]+)$\",\n        \"name\": r\"^(?P<name>[^/]+)$\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        'km': _label_key_regex,\n        'kinesis': _label_value_regex,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        'kinesis': _label_key_regex,\n        'dynamodb': _label_value_regex,\n        'dynamodb_global': _label_key_regex + r'/(?P<namespace>.+)$',\n       's3': _label_value_regex,\n       'sqs': _label_value_regex,\n       'mqs': _label_value_regex,\n        'rds': _label_value_regex,\n        'dynamodb_batch': _label_key_regex + r'/(?P<namespace>.+)$',\n       'sqs_batch': _label_value_regex + r'/(?P<namespace>.+)$',\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        'kinesis': r'^kinesis-([^/]+)$',\n        'dynamodb': r'^dynamodb-([^/]+)$',\n       'msg': r'^msg-([^/]+)$',\n        'dynamodb_batch': r'^dynamodb-batch-([^/]+)$',\n        'dynamodb_shard': r'^dynamodb-shard-([^/]+)$',\n        'dynamodb_topic': r'^dynamodb-topic-([^/]+)$',\n        'rds': r'^rds-([^/]+)$',\n        'rds_instance': r'^rds-([^/]+)$',\n       's3': r'^s3-([^/]+)$',\n       'sns': r'^sns-([^/]+)$',\n       'sqs': r'^sqs-([^/]+)$',\n       'sqs_topic': r'^sqs-topic-([^/]+)$',\n        'dynamodb_subscription': r'^dynamodb-subscription-([^/]+)$',\n        'dynamodb_topic_subscription': r'^dynamodb-topic-subscription-(", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_resource_name_regex():\n    return {\n        '{resource_name_prefix}-{resource_name}': _label_key_regex,\n        '{resource_name_prefix}-{resource_name}-{label}': _label_value_regex,\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_value", "docstring": "Validate the given value against the corresponding regular expression.\n\nArgs:\n    value: the string to validate\n\nRaises:\n    ValidationError: if the given value is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf8", "code": ["def validate_value(value):\n    return _validate_resource_name(value)\n", "def validate_value(value):\n    return _validate_labels(_get_labels_regex().match(value))\n", "def validate_value(value):\n    _validate_labels(value.get(\"labels\", []))\n    _validate_label_key_regex(value.get(\"label_key_regex\"))\n    _validate_label_value_regex(value.get(\"label_value_regex\"))\n\n    if value.get(\"namespace\"):\n        _validate_resource_namespace(value.get(\"namespace\"))\n", "def validate_value(value):\n    return _validate_resource_name(value) and _validate_labels(value)\n", "def validate_value(value):\n    return _validate_labels(_get_labels_regex().findall(value))\n", "def validate_value(value):\n    try:\n        return _validate_labels(re.match(_label_key_regex, value))\n    except TypeError:\n        return False\n", "def validate_value(value):\n    if isinstance(value, str):\n        try:\n            return _resource_name_regex.match(value)\n        except AttributeError:\n            raise ValueError(f\"Invalid value for label '{value}': it must be a string or match the regex: {_resource_name_regex.pattern}\")\n    elif isinstance(value, bool):\n        return value\n    elif isinstance(value, (int, float)):\n        return value\n    elif not isinstance(value, (list, tuple)):\n        raise TypeError(f\"Invalid value for label '{value}': must be a list or tuple\")\n    return all(_validate_labels(labels) for labels in value)\n", "def validate_value(value):\n    _validate_resource_name(resource_ref(value))\n", "def validate_value(value):\n    return _validate_resource_name(value) and _validate_labels(value)\n", "def validate_value(value):\n    try:\n        return _validate_resource_name(value)\n    except vol.error.Invalid as exc:\n        raise vol.Invalid(\n            f'Resource name \"{value}\" is not valid: {exc}'\n        )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_value(value):\n    return _validate_resource_name(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return _validate_labels(_get_labels_regex().match(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_labels(value.get(\"labels\", []))\n    _validate_label_key_regex(value.get(\"label_key_regex\"))\n    _validate_label_value_regex(value.get(\"label_value_regex\"))\n\n    if value.get(\"namespace\"):\n        _validate_resource_namespace(value.get(\"namespace\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return _validate_resource_name(value) and _validate_labels(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return _validate_labels(_get_labels_regex().findall(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        return _validate_labels(re.match(_label_key_regex, value))\n    except TypeError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    if isinstance(value, str):\n        try:\n            return _resource_name_regex.match(value)\n        except AttributeError:\n            raise ValueError(f\"Invalid value for label '{value}': it must be a string or match the regex: {_resource_name_regex.pattern}\")\n    elif isinstance(value, bool):\n        return value\n    elif isinstance(value, (int, float)):\n        return value\n    elif not isinstance(value, (list, tuple)):\n        raise TypeError(f\"Invalid value for label '{value}': must be a list or tuple\")\n    return all(_validate_labels(labels) for labels in value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    _validate_resource_name(resource_ref(value))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    return _validate_resource_name(value) and _validate_labels(value)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_value(value):\n    try:\n        return _validate_resource_name(value)\n    except vol.error.Invalid as exc:\n        raise vol.Invalid(\n            f'Resource name \"{value}\" is not valid: {exc}'\n        )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/data/core.py", "project": "rak-n-rok/Krake", "name": "validate_key", "docstring": "Validate the given key against the corresponding regular expression.\n\nArgs:\n    key: the string to validate\n\nRaises:\n    ValidationError: if the given key is not conform to the regular expression.", "ques_id": "62b86a4fb4d922cb0e688cf7", "code": ["def validate_key(key):\n    return _validate_labels(key.split(\":\"))\n", "def validate_key(key):\n    if not isinstance(key, str):\n        raise TypeError(f\"expected a string, got {type(key)}\")\n    if not _label_key_pattern.match(key):\n        raise InvalidKeyError(f\"key {key!r} is not a valid regular expression\")\n    if not _label_value_pattern.match(key):\n        raise InvalidKeyError(f\"key {key!r} is not a valid regular expression value\")\n", "def validate_key(key):\n    return _validate_labels(_get_labels_regex(key))\n", "def validate_key(key):\n    if not _label_key_regex.match(key):\n        raise ValueError(\"Invalid label key: {}\".format(key))\n    if not _label_value_regex.match(key):\n        raise ValueError(\"Invalid label value: {}\".format(key))\n", "def validate_key(key):\n    if not isinstance(key, str):\n        raise TypeError(f\"key {key!r} must be a string\")\n\n    if not _label_key_pattern.match(key):\n        raise ValueError(f\"key {key!r} must match the pattern {_label_key_pattern!r}\")\n\n    if not _label_value_pattern.match(key):\n        raise ValueError(\n            f\"key {key!r} must match the pattern {_label_value_pattern!r}\"\n        )\n\n    return key\n", "def validate_key(key):\n    if not _label_key_regex.match(key):\n        raise InvalidKeyError(f\"Invalid label key: {key!r}\")\n    if not _label_value_regex.match(key):\n        raise InvalidKeyError(f\"Invalid label value: {key!r}\")\n", "def validate_key(key):\n    return _validate_labels(_get_labels_regex().match(key))\n", "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise InvalidKeyException(\n            f\"'{key}' is not a valid key regex. Must match {_label_key_regex.pattern}\"\n        )\n\n    if not _label_value_pattern.match(key):\n        raise InvalidKeyException(\n            f\"'{key}' is not a valid label regex. Must match {_label_value_regex.pattern}\"\n        )\n", "def validate_key(key):\n    match = _label_key_pattern.match(key)\n    if not match:\n        raise InvalidKeyError(f\"Invalid key {key!r}\")\n\n    namespace, key = match.groups()\n\n    if namespace not in _label_key_regex:\n        raise InvalidKeyError(f\"Invalid key {key!r} in namespace: {namespace!r}\")\n\n    return _label_key_regex[namespace][key]\n", "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValueError(f'Invalid key: {key}')\n\n    if not _label_value_pattern.match(key):\n        raise ValueError(f'Invalid value for key: {key}')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_key(key):\n    return _validate_labels(key.split(\":\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not isinstance(key, str):\n        raise TypeError(f\"expected a string, got {type(key)}\")\n    if not _label_key_pattern.match(key):\n        raise InvalidKeyError(f\"key {key!r} is not a valid regular expression\")\n    if not _label_value_pattern.match(key):\n        raise InvalidKeyError(f\"key {key!r} is not a valid regular expression value\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    return _validate_labels(_get_labels_regex(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_regex.match(key):\n        raise ValueError(\"Invalid label key: {}\".format(key))\n    if not _label_value_regex.match(key):\n        raise ValueError(\"Invalid label value: {}\".format(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not isinstance(key, str):\n        raise TypeError(f\"key {key!r} must be a string\")\n\n    if not _label_key_pattern.match(key):\n        raise ValueError(f\"key {key!r} must match the pattern {_label_key_pattern!r}\")\n\n    if not _label_value_pattern.match(key):\n        raise ValueError(\n            f\"key {key!r} must match the pattern {_label_value_pattern!r}\"\n        )\n\n    return key\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_regex.match(key):\n        raise InvalidKeyError(f\"Invalid label key: {key!r}\")\n    if not _label_value_regex.match(key):\n        raise InvalidKeyError(f\"Invalid label value: {key!r}\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    return _validate_labels(_get_labels_regex().match(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise InvalidKeyException(\n            f\"'{key}' is not a valid key regex. Must match {_label_key_regex.pattern}\"\n        )\n\n    if not _label_value_pattern.match(key):\n        raise InvalidKeyException(\n            f\"'{key}' is not a valid label regex. Must match {_label_value_regex.pattern}\"\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    match = _label_key_pattern.match(key)\n    if not match:\n        raise InvalidKeyError(f\"Invalid key {key!r}\")\n\n    namespace, key = match.groups()\n\n    if namespace not in _label_key_regex:\n        raise InvalidKeyError(f\"Invalid key {key!r} in namespace: {namespace!r}\")\n\n    return _label_key_regex[namespace][key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_key(key):\n    if not _label_key_pattern.match(key):\n        raise ValueError(f'Invalid key: {key}')\n\n    if not _label_value_pattern.match(key):\n        raise ValueError(f'Invalid value for key: {key}')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema_dict", "docstring": "Together with :func:``generate_default_observer_schema_list``, this function is\ncalled recursively to generate part of a default ``observer_schema`` from part of a\nKubernetes resource, defined respectively by ``manifest_dict`` or ``manifest_list``.\n\nArgs:\n    manifest_dict (dict): Partial Kubernetes resources\n    first_level (bool, optional): If True, indicates that the dictionary represents\n        the whole observer schema of a Kubernetes resource\n\nReturns:\n    dict: Generated partial observer_schema\n\nThis function creates a new dictionary from ``manifest_dict`` and replaces all\nnon-list and non-dict values by ``None``.\n\nIn case of ``first_level`` dictionary (i.e. complete ``observer_schema`` for a\nresource), the values of the identifying fields are copied from the manifest file.", "ques_id": "62b86a01b4d922cb0e688ccc", "code": ["def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    The values corresponding to different keys in the new dict are generated\n    based on the value type (such as dict and list) in the manifest_dict file.\n\n    Then new dictionary is returned.\n    \"\"\"\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(\n                value, first_level=first_level)\n        elif isinstance(value, list):\n            new_dict[key] = [generate_default_observer_schema_dict(\n                item, first_level=first_level) for item in value]\n        else:\n            new_dict[key] = value\n    return new_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict_copy = manifest_dict.copy()\n\n    if first_level:\n        keys_to_skip = ('_schema_version', '_manifest_version')\n        for key in manifest_dict_copy:\n            if key not in keys_to_skip:\n                manifest_dict_copy[key] = generate_default_observer_schema(\n                    manifest_dict_copy[key])\n\n        return manifest_dict_copy\n\n    return generate_default_observer_schema_list(manifest_dict_copy)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            if first_level:\n                observer_schema_dict[key] = generate_default_observer_schema_dict(value)\n            else:\n                observer_schema_dict[key] = dict_to_schema(value)\n        elif isinstance(value, list):\n            observer_schema_dict[key] = list_to_schema(value)\n        else:\n            observer_schema_dict[key] = value\n    return observer_schema_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict = generate_default_observer_schema_list(manifest_dict)\n    if first_level:\n        manifest_dict = update_last_applied_manifest_dict_from_resp(\n            manifest_dict, observer_schema=manifest_dict['observer'],\n            response=manifest_dict['response'])\n    return manifest_dict\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema = {}\n\n    for key in manifest_dict:\n        if first_level:\n            observer_schema[key] = manifest_dict[key]\n        else:\n            observer_schema[key] = manifest_dict[key].get('type')\n\n    return observer_schema\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    for key, value in manifest_dict.items():\n        key_type = SchemaType.from_string(key)\n        if key_type == SchemaType.OBSERVER_SCHEMA:\n            result[key] = generate_observer_schema_dict(\n                value, first_level=first_level)\n        elif key_type == SchemaType.APPLICATION_SCHEMA:\n            result[key] = generate_app_schema_dict(\n                value, first_level=first_level)\n        else:\n            result[key] = value\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict = update_last_observed_manifest_dict(\n        manifest_dict, \"observer\", first_level\n    )\n    if manifest_dict[\"type\"] == \"list\":\n        return generate_default_observer_schema_list(manifest_dict)\n    else:\n        return generate_default_observer_schema_dict(manifest_dict)\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    new_manifest = {}\n    for k, v in manifest_dict.items():\n        if isinstance(v, (dict, list)):\n            v = generate_default_observer_schema_list(v, first_level)\n        elif isinstance(v, str):\n            v = generate_default_observer_schema_str(v, first_level)\n        elif isinstance(v, int):\n            v = generate_default_observer_schema_int(v, first_level)\n        elif isinstance(v, float):\n            v = generate_default_observer_schema_float(v, first_level)\n        elif first_level:\n            v = generate_default_observer_schema_str(v, first_level)\n        new_manifest[k] = v\n    return new_manifest\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    if manifest_dict['observer_schema'] == 'list':\n        result['observer_schema'] = generate_default_observer_schema_list(manifest_dict, first_level)\n    elif manifest_dict['observer_schema'] == 'dict':\n        result['observer_schema'] = generate_default_observer_schema_dict(manifest_dict, first_level)\n    else:\n        raise Exception(\"Unknown observer_schema type: {}\".format(manifest_dict['observer_schema']))\n\n    return result\n", "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        observer_schema = {\n            'type': 'object',\n            'properties': {},\n            'additionalProperties': {}\n        }\n    else:\n        observer_schema = {\n            'type': 'object',\n            'properties': {},\n            'additionalProperties': {}\n        }\n\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            observer_schema['properties'][key] = generate_default_observer_schema_dict(\n                value, first_level=False)\n\n        elif isinstance(value, list):\n            observer_schema['additionalProperties'][key] = generate_default_observer_schema_list(\n                value)\n\n    return observer_schema\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    # type: (dict, bool) -> dict\n    \"\"\"\n    The values corresponding to different keys in the new dict are generated\n    based on the value type (such as dict and list) in the manifest_dict file.\n\n    Then new dictionary is returned.\n    \"\"\"\n    new_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            new_dict[key] = generate_default_observer_schema_dict(\n                value, first_level=first_level)\n        elif isinstance(value, list):\n            new_dict[key] = [generate_default_observer_schema_dict(\n                item, first_level=first_level) for item in value]\n        else:\n            new_dict[key] = value\n    return new_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict_copy = manifest_dict.copy()\n\n    if first_level:\n        keys_to_skip = ('_schema_version', '_manifest_version')\n        for key in manifest_dict_copy:\n            if key not in keys_to_skip:\n                manifest_dict_copy[key] = generate_default_observer_schema(\n                    manifest_dict_copy[key])\n\n        return manifest_dict_copy\n\n    return generate_default_observer_schema_list(manifest_dict_copy)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema_dict = {}\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            if first_level:\n                observer_schema_dict[key] = generate_default_observer_schema_dict(value)\n            else:\n                observer_schema_dict[key] = dict_to_schema(value)\n        elif isinstance(value, list):\n            observer_schema_dict[key] = list_to_schema(value)\n        else:\n            observer_schema_dict[key] = value\n    return observer_schema_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict = generate_default_observer_schema_list(manifest_dict)\n    if first_level:\n        manifest_dict = update_last_applied_manifest_dict_from_resp(\n            manifest_dict, observer_schema=manifest_dict['observer'],\n            response=manifest_dict['response'])\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    observer_schema = {}\n\n    for key in manifest_dict:\n        if first_level:\n            observer_schema[key] = manifest_dict[key]\n        else:\n            observer_schema[key] = manifest_dict[key].get('type')\n\n    return observer_schema\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    for key, value in manifest_dict.items():\n        key_type = SchemaType.from_string(key)\n        if key_type == SchemaType.OBSERVER_SCHEMA:\n            result[key] = generate_observer_schema_dict(\n                value, first_level=first_level)\n        elif key_type == SchemaType.APPLICATION_SCHEMA:\n            result[key] = generate_app_schema_dict(\n                value, first_level=first_level)\n        else:\n            result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    manifest_dict = update_last_observed_manifest_dict(\n        manifest_dict, \"observer\", first_level\n    )\n    if manifest_dict[\"type\"] == \"list\":\n        return generate_default_observer_schema_list(manifest_dict)\n    else:\n        return generate_default_observer_schema_dict(manifest_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    new_manifest = {}\n    for k, v in manifest_dict.items():\n        if isinstance(v, (dict, list)):\n            v = generate_default_observer_schema_list(v, first_level)\n        elif isinstance(v, str):\n            v = generate_default_observer_schema_str(v, first_level)\n        elif isinstance(v, int):\n            v = generate_default_observer_schema_int(v, first_level)\n        elif isinstance(v, float):\n            v = generate_default_observer_schema_float(v, first_level)\n        elif first_level:\n            v = generate_default_observer_schema_str(v, first_level)\n        new_manifest[k] = v\n    return new_manifest\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    result = {}\n    if manifest_dict['observer_schema'] == 'list':\n        result['observer_schema'] = generate_default_observer_schema_list(manifest_dict, first_level)\n    elif manifest_dict['observer_schema'] == 'dict':\n        result['observer_schema'] = generate_default_observer_schema_dict(manifest_dict, first_level)\n    else:\n        raise Exception(\"Unknown observer_schema type: {}\".format(manifest_dict['observer_schema']))\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema_dict(manifest_dict, first_level=False):\n    if first_level:\n        observer_schema = {\n            'type': 'object',\n            'properties': {},\n            'additionalProperties': {}\n        }\n    else:\n        observer_schema = {\n            'type': 'object',\n            'properties': {},\n            'additionalProperties': {}\n        }\n\n    for key, value in manifest_dict.items():\n        if isinstance(value, dict):\n            observer_schema['properties'][key] = generate_default_observer_schema_dict(\n                value, first_level=False)\n\n        elif isinstance(value, list):\n            observer_schema['additionalProperties'][key] = generate_default_observer_schema_list(\n                value)\n\n    return observer_schema\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_list_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_dict_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (list): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (list): partial ``observer_schema``\n    response (list): partial response from the Kubernetes API.\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869ebb4d922cb0e688cc6", "code": ["def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list=last_applied_manifest)\n    generate_default_observer_schema_list(manifest_list=last_applied_manifest)\n    generate_default_observer_schema_dict(observer_schema=observer_schema)\n    generate_default_observer_schema_list(observer_schema_list=response)\n    update_last_observed_manifest_list(last_applied_manifest, response)\n    update_last_applied_manifest_dict(observer_schema, response)\n    update_last_observed_manifest_dict(observer_schema_list=response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old)\n    update_last_applied_manifest_dict(observer_schema, response)\n    update_last_observed_manifest_dict(observer_schema_list=response)\n    utc_difference()\n    logger.info(\"last applied manifest updated\")\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    \"\"\"\n    if not isinstance(last_applied_manifest, list):\n        return  # pragma: no cover\n\n    logger.debug(\n        \"update_last_applied_manifest_list_from_resp - last_applied_manifest: %s\",\n        last_applied_manifest,\n    )\n    manifest_list = response[\"manifestList\"]\n    last_applied_manifest.update(manifest_list)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n\n    generate_default_observer_schema(app)\n\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    \"\"\"\n    if not isinstance(last_applied_manifest, list):\n        raise TypeError(\"last_applied_manifest must be a list\")\n\n    if not isinstance(response, dict):\n        raise TypeError(\"response must be a dict\")\n\n    if not observer_schema:\n        raise TypeError(\"observer_schema must be a list\")\n\n    if not response:\n        raise TypeError(\"response must be a dict\")\n\n    for manifest in last_applied_manifest:\n        manifest[\"observer\"] = observer_schema\n        manifest[\"response\"] = response\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Generate certificate and observer schema list from response\n    \"\"\"\n    if last_applied_manifest is None:\n        return\n\n    if observer_schema is None:\n        return\n\n    if response is None:\n        return\n\n    for observer in observer_schema:\n        update_last_observed_manifest_from_resp(\n            last_applied_manifest, observer, response\n        )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    update_last_applied_manifest_dict_from_spec(response, last_applied_manifest)\n    update_last_observed_manifest_list(observed_resource, response)\n    update_last_applied_manifest_dict(observed_resource, response)\n    \"\"\"\n    for observer_schema_obj in observer_schema:\n        if observer_schema_obj.name == response[\"@type\"]:\n            observer_schema_obj.update(last_applied_manifest)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(observer_schema)\n    generate_default_observer_schema_list(last_applied_manifest)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    utc_difference()\n    \"\"\"\n    observer_schema_dict = json.loads(observer_schema)\n    last_applied_manifest_list = observer_schema_dict.get(\"lastObservedManifest\")\n    return last_applied_manifest_list\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, last_applied_manifest.observer_schema)\n    generate_default_observer_schema_list(observer_schema, last_applied_manifest.observer_schemas)\n    update_last_applied_manifest_dict_from_spec(response, last_applied_manifest)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    \"\"\"\n    if observer_schema.updates is None:\n        return\n\n    for update in observer_schema.updates:\n        if update.key not in last_applied_manifest.updates:\n            last_applied_manifest.updates.append(update)\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_list(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    \"\"\"\n    if not observer_schema:\n        return\n    for observer_schema_dict in observer_schema:\n        update_last_observed_manifest_dict(\n            observer_schema_dict,\n            last_applied_manifest,\n            response\n        )\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=False)\n    \"\"\"\n    # noinspection PyTypeChecker\n    response['ObserverSchemaList'] = [\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, i)\n        for i in response['ObserverSchemaList']\n    ]\n", "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list)\n    generate_default_observer_schema_list(manifest_list)\n    update_last_applied_manifest_dict(\n        observer_schema, last_applied_manifest\n    )\n    update_last_observed_manifest_dict(\n        observer_schema, response\n    )\n    update_last_applied_manifest_list(observer_schema, response)\n    update_last_applied_manifest_dict_from_spec(response)\n    \"\"\"\n    return update_last_applied_manifest_list(\n        last_applied_manifest, observer_schema, response\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list=last_applied_manifest)\n    generate_default_observer_schema_list(manifest_list=last_applied_manifest)\n    generate_default_observer_schema_dict(observer_schema=observer_schema)\n    generate_default_observer_schema_list(observer_schema_list=response)\n    update_last_observed_manifest_list(last_applied_manifest, response)\n    update_last_applied_manifest_dict(observer_schema, response)\n    update_last_observed_manifest_dict(observer_schema_list=response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old)\n    update_last_applied_manifest_dict(observer_schema, response)\n    update_last_observed_manifest_dict(observer_schema_list=response)\n    utc_difference()\n    logger.info(\"last applied manifest updated\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    \"\"\"\n    if not isinstance(last_applied_manifest, list):\n        return  # pragma: no cover\n\n    logger.debug(\n        \"update_last_applied_manifest_list_from_resp - last_applied_manifest: %s\",\n        last_applied_manifest,\n    )\n    manifest_list = response[\"manifestList\"]\n    last_applied_manifest.update(manifest_list)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n\n    generate_default_observer_schema(app)\n\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    \"\"\"\n    if not isinstance(last_applied_manifest, list):\n        raise TypeError(\"last_applied_manifest must be a list\")\n\n    if not isinstance(response, dict):\n        raise TypeError(\"response must be a dict\")\n\n    if not observer_schema:\n        raise TypeError(\"observer_schema must be a list\")\n\n    if not response:\n        raise TypeError(\"response must be a dict\")\n\n    for manifest in last_applied_manifest:\n        manifest[\"observer\"] = observer_schema\n        manifest[\"response\"] = response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Generate certificate and observer schema list from response\n    \"\"\"\n    if last_applied_manifest is None:\n        return\n\n    if observer_schema is None:\n        return\n\n    if response is None:\n        return\n\n    for observer in observer_schema:\n        update_last_observed_manifest_from_resp(\n            last_applied_manifest, observer, response\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    update_last_applied_manifest_dict_from_spec(response, last_applied_manifest)\n    update_last_observed_manifest_list(observed_resource, response)\n    update_last_applied_manifest_dict(observed_resource, response)\n    \"\"\"\n    for observer_schema_obj in observer_schema:\n        if observer_schema_obj.name == response[\"@type\"]:\n            observer_schema_obj.update(last_applied_manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(observer_schema)\n    generate_default_observer_schema_list(last_applied_manifest)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    utc_difference()\n    \"\"\"\n    observer_schema_dict = json.loads(observer_schema)\n    last_applied_manifest_list = observer_schema_dict.get(\"lastObservedManifest\")\n    return last_applied_manifest_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, last_applied_manifest.observer_schema)\n    generate_default_observer_schema_list(observer_schema, last_applied_manifest.observer_schemas)\n    update_last_applied_manifest_dict_from_spec(response, last_applied_manifest)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    \"\"\"\n    if observer_schema.updates is None:\n        return\n\n    for update in observer_schema.updates:\n        if update.key not in last_applied_manifest.updates:\n            last_applied_manifest.updates.append(update)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_list(last_applied_manifest, observer_schema, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    \"\"\"\n    if not observer_schema:\n        return\n    for observer_schema_dict in observer_schema:\n        update_last_observed_manifest_dict(\n            observer_schema_dict,\n            last_applied_manifest,\n            response\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=False)\n    \"\"\"\n    # noinspection PyTypeChecker\n    response['ObserverSchemaList'] = [\n        update_last_applied_manifest_dict_from_resp(last_applied_manifest, observer_schema, i)\n        for i in response['ObserverSchemaList']\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_list_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_list)\n    generate_default_observer_schema_list(manifest_list)\n    update_last_applied_manifest_dict(\n        observer_schema, last_applied_manifest\n    )\n    update_last_observed_manifest_dict(\n        observer_schema, response\n    )\n    update_last_applied_manifest_list(observer_schema, response)\n    update_last_applied_manifest_dict_from_spec(response)\n    \"\"\"\n    return update_last_applied_manifest_list(\n        last_applied_manifest, observer_schema, response\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "update_last_applied_manifest_dict_from_resp", "docstring": "Together with :func:``update_last_applied_manifest_list_from_resp``, this\nfunction is called recursively to update a partial ``last_applied_manifest``\nfrom a partial Kubernetes response\n\nArgs:\n    last_applied_manifest (dict): partial ``last_applied_manifest`` being\n        updated\n    observer_schema (dict): partial ``observer_schema``\n    response (dict): partial response from the Kubernetes API.\n\nRaises:\n    KeyError: If the observed field is not present in the Kubernetes response\n\nThis function go through all observed fields, and initialized their value in\nlast_applied_manifest if they are not yet present", "ques_id": "62b869eab4d922cb0e688cc5", "code": ["def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=False)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    update_last_applied_manifest_list(last_applied_manifest, response)\n    \"\"\"\n    if response is None:\n        return\n\n    # update manifests list with new manifests\n    update_last_observed_manifest_list(last_applied_manifest, response)\n\n    # update manifests dict with new manifests\n    update_last_applied_manifest_dict_from_spec(last_applied_manifest, observer_schema)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Generate certificate (config) from response\n    \"\"\"\n    if response is None:\n        return\n\n    if not isinstance(last_applied_manifest, dict):\n        raise TypeError(\n            'expected type dict, got {}'.format(type(last_applied_manifest))\n        )\n\n    if not isinstance(observer_schema, dict):\n        raise TypeError('expected type dict, got {}'.format(type(observer_schema)))\n\n    if not isinstance(response, dict):\n        raise TypeError('expected type dict, got {}'.format(type(response)))\n\n    if not observer_schema:\n        return\n\n    observer_schema_new = generate_default_observer_schema_dict(observer_schema)\n\n    last_applied_manifest_dict.update(observer_schema_new)\n    last_applied_manifest_list.append(last_applied_manifest)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, response)\n    \"\"\"\n    if last_applied_manifest is None:\n        return\n    observer_schema = parse_observer_schema(observer_schema)\n    last_applied_manifest.update(observer_schema)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    update_last_observed_manifest_list(observed_resource, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_spec(\n        response, observer_schema\n    )\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    generate_default_observer_schema_dict(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    \"\"\"\n    logger.debug(\"update_last_applied_manifest_dict_from_resp === %s\", type(last_applied_manifest))\n    logger.debug(\"update_last_applied_manifest_dict_from_resp === %s\", last_applied_manifest)\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n\n    generate_default_observer_schema(app)\n\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    \"\"\"\n    if last_applied_manifest is not None:\n        observer_schema.update(last_applied_manifest)\n\n    if response is not None:\n        response.update(last_applied_manifest)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    utc_difference()\n    \"\"\"\n    if not last_applied_manifest:\n        return\n\n    observer_schema_dict = generate_observer_schema_dict(last_applied_manifest)\n    last_applied_manifest_dict = update_last_applied_manifest_dict(last_applied_manifest, observer_schema_dict)\n    return last_applied_manifest_dict\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    \"\"\"\n    if not last_applied_manifest:\n        return\n    last_applied_manifest.update(observer_schema)\n    logger.info('updated last applied manifest: %r', last_applied_manifest)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list_from_spec(response)\n    \"\"\"\n    logger.debug(\"update_last_applied_manifest_dict_from_resp %s\", last_applied_manifest)\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n", "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    update_last_observed_manifest_list(observed_resource, response)\n    \"\"\"\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    generate_default_observer_schema_list(observer_schema, first_level=False)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    update_last_applied_manifest_list(last_applied_manifest, response)\n    \"\"\"\n    if response is None:\n        return\n\n    # update manifests list with new manifests\n    update_last_observed_manifest_list(last_applied_manifest, response)\n\n    # update manifests dict with new manifests\n    update_last_applied_manifest_dict_from_spec(last_applied_manifest, observer_schema)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    Generate certificate (config) from response\n    \"\"\"\n    if response is None:\n        return\n\n    if not isinstance(last_applied_manifest, dict):\n        raise TypeError(\n            'expected type dict, got {}'.format(type(last_applied_manifest))\n        )\n\n    if not isinstance(observer_schema, dict):\n        raise TypeError('expected type dict, got {}'.format(type(observer_schema)))\n\n    if not isinstance(response, dict):\n        raise TypeError('expected type dict, got {}'.format(type(response)))\n\n    if not observer_schema:\n        return\n\n    observer_schema_new = generate_default_observer_schema_dict(observer_schema)\n\n    last_applied_manifest_dict.update(observer_schema_new)\n    last_applied_manifest_list.append(last_applied_manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    update_last_applied_manifest_from_resp(last_applied_manifest, response)\n    \"\"\"\n    if last_applied_manifest is None:\n        return\n    observer_schema = parse_observer_schema(observer_schema)\n    last_applied_manifest.update(observer_schema)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    update_last_observed_manifest_list(observed_resource, response)\n    \"\"\"\n    return update_last_applied_manifest_dict_from_spec(\n        response, observer_schema\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    generate_default_observer_schema_dict(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    \"\"\"\n    logger.debug(\"update_last_applied_manifest_dict_from_resp === %s\", type(last_applied_manifest))\n    logger.debug(\"update_last_applied_manifest_dict_from_resp === %s\", last_applied_manifest)\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n\n    generate_default_observer_schema(app)\n\n    generate_default_observer_schema_dict(observer_schema, first_level=True)\n\n    generate_default_observer_schema_list(observer_schema, first_level=True)\n    \"\"\"\n    if last_applied_manifest is not None:\n        observer_schema.update(last_applied_manifest)\n\n    if response is not None:\n        response.update(last_applied_manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    utc_difference()\n    \"\"\"\n    if not last_applied_manifest:\n        return\n\n    observer_schema_dict = generate_observer_schema_dict(last_applied_manifest)\n    last_applied_manifest_dict = update_last_applied_manifest_dict(last_applied_manifest, observer_schema_dict)\n    return last_applied_manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_dict(last_applied_manifest, response)\n    \"\"\"\n    if not last_applied_manifest:\n        return\n    last_applied_manifest.update(observer_schema)\n    logger.info('updated last applied manifest: %r', last_applied_manifest)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_dict(manifest_dict, first_level=True)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_list(observer_schema)\n    update_last_applied_manifest_dict_from_spec(response)\n    update_last_applied_manifest_list_from_spec(response)\n    \"\"\"\n    logger.debug(\"update_last_applied_manifest_dict_from_resp %s\", last_applied_manifest)\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def update_last_applied_manifest_dict_from_resp(\n    last_applied_manifest, observer_schema, response\n):\n    \"\"\"\n    generate_certificate(config)\n    generate_default_observer_schema(app)\n    generate_default_observer_schema_list(manifest_list)\n    generate_default_observer_schema_dict(observer_schema)\n    generate_default_observer_schema_list(response)\n    update_last_applied_manifest_dict(last_applied_manifest, response)\n    update_last_observed_manifest_from_resp(last_applied_manifest, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_list(observed_resource, response)\n    update_last_observed_manifest_dict(observed_resource, response)\n    update_last_applied_manifest_dict_from_spec(resource_status_new, resource_status_old, resource_observed)\n    update_last_observed_manifest_list(observed_resource, response)\n    \"\"\"\n    return update_last_applied_manifest_dict(last_applied_manifest, response)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "generate_default_observer_schema", "docstring": "Generate the default observer schema for each Kubernetes resource present in\n``spec.manifest`` for which a custom observer schema hasn't been specified.\n\nArgs:\n    app (krake.data.kubernetes.Application): The application for which to generate a\n        default observer schema", "ques_id": "62b869eab4d922cb0e688cbf", "code": ["def generate_default_observer_schema(app):\n    manifest = app.spec.get('manifest')\n    if manifest is not None:\n        for resource in manifest.get('resources', []):\n            if resource.get('status')!= 'ACTIVE':\n                resource_status_old = resource.get('status')\n                resource_status_new = update_last_applied_manifest_dict_from_resp(\n                    resource,\n                    manifest.get('resource_status'),\n                    response\n                )\n                update_last_applied_manifest_dict(resource, resource_status_new)\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    if manifest_dict[\"observer_schema\"] is None:\n        manifest_dict[\"observer_schema\"] = {\"type\": \"custom-observer\", \"version\": 1}\n\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    if 'observer-schema' not in app.config:\n        return\n    manifest_dict = app.config['observer-schema']\n    manifest_list = generate_observer_schema_list(manifest_dict)\n    app.config['observer-schema'] = manifest_list\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    spec_manifest = app.config.get('KUL_SPEC_MANIFEST', {})\n    if spec_manifest and 'observer_schema' not in manifest_dict:\n        manifest_dict['observer_schema'] = spec_manifest.get(\n            'observer_schema', 'custom-observer-schema')\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    manifest = spec.get_manifest(app.config[\"Kubernetes\"])\n    if not manifest:\n        return\n    manifest_dict = generate_default_observer_schema_dict(manifest)\n    update_last_observed_manifest_dict(manifest_dict, manifest.get(\"observer_schema\", {}))\n    update_last_applied_manifest_dict_from_spec(manifest_dict, manifest.get(\"spec\", {}))\n    app.logger.info(\"Generated default observer schema for Kubernetes: %r\", manifest_dict)\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_manifest_dict(app)\n\n    for resource_status in (\n        ResourceStatus.CREATING,\n        ResourceStatus.UPDATING,\n        ResourceStatus.DELETING,\n    ):\n        if manifest_dict.get(resource_status) is None:\n            yield {\n                '$ref': '#/definitions/{}'.format(resource_status.value),\n                '@type': '#/definitions/{}'.format(resource_status.value),\n                '@id': '{}#/ObserverSchema'.format(resource_status.value),\n                'title': '{} Schema'.format(resource_status.value),\n                'description': 'Observer schema for {}'.format(resource_status.value),\n            }\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    spec = app.config.get('Kubernetes.SPEC')\n    if spec is None:\n        return manifest_dict\n\n    logger.info('Creating default observer schema for manifest %s', spec)\n    manifest_dict.update(\n        {\n            'apiVersion': 'v1',\n            'kind': 'Observer',\n           'metadata': {'name': spec.get('name', 'default')},\n           'spec': {'apiVersion': spec.get('version', 'v1'), 'kind': spec.get('kind', 'default')},\n        }\n    )\n    return manifest_dict\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    if manifest_dict is not None:\n        # Update the manifest with the new schema\n        app['spec']['manifest'] = manifest_dict\n        app['spec']['template'] = app['spec']['manifest']\n        app['spec']['updated'] = utc_difference()\n", "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    app['spec']['manifest'].update(manifest_dict)\n    return app['spec']\n", "def generate_default_observer_schema(app):\n    manifest = app.config.get(\"Kubernetes.manifest\")\n    if manifest is None:\n        return\n\n    for resource_status_old, resource_status_new in manifest.items():\n        if resource_status_old == \"default\":\n            yield generate_default_observer_schema_old(app)\n        else:\n            yield generate_default_observer_schema_new(app, resource_status_old, resource_status_new)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def generate_default_observer_schema(app):\n    manifest = app.spec.get('manifest')\n    if manifest is not None:\n        for resource in manifest.get('resources', []):\n            if resource.get('status')!= 'ACTIVE':\n                resource_status_old = resource.get('status')\n                resource_status_new = update_last_applied_manifest_dict_from_resp(\n                    resource,\n                    manifest.get('resource_status'),\n                    response\n                )\n                update_last_applied_manifest_dict(resource, resource_status_new)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    if manifest_dict[\"observer_schema\"] is None:\n        manifest_dict[\"observer_schema\"] = {\"type\": \"custom-observer\", \"version\": 1}\n\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    if 'observer-schema' not in app.config:\n        return\n    manifest_dict = app.config['observer-schema']\n    manifest_list = generate_observer_schema_list(manifest_dict)\n    app.config['observer-schema'] = manifest_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    spec_manifest = app.config.get('KUL_SPEC_MANIFEST', {})\n    if spec_manifest and 'observer_schema' not in manifest_dict:\n        manifest_dict['observer_schema'] = spec_manifest.get(\n            'observer_schema', 'custom-observer-schema')\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = spec.get_manifest(app.config[\"Kubernetes\"])\n    if not manifest:\n        return\n    manifest_dict = generate_default_observer_schema_dict(manifest)\n    update_last_observed_manifest_dict(manifest_dict, manifest.get(\"observer_schema\", {}))\n    update_last_applied_manifest_dict_from_spec(manifest_dict, manifest.get(\"spec\", {}))\n    app.logger.info(\"Generated default observer schema for Kubernetes: %r\", manifest_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_manifest_dict(app)\n\n    for resource_status in (\n        ResourceStatus.CREATING,\n        ResourceStatus.UPDATING,\n        ResourceStatus.DELETING,\n    ):\n        if manifest_dict.get(resource_status) is None:\n            yield {\n                '$ref': '#/definitions/{}'.format(resource_status.value),\n                '@type': '#/definitions/{}'.format(resource_status.value),\n                '@id': '{}#/ObserverSchema'.format(resource_status.value),\n                'title': '{} Schema'.format(resource_status.value),\n                'description': 'Observer schema for {}'.format(resource_status.value),\n            }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    spec = app.config.get('Kubernetes.SPEC')\n    if spec is None:\n        return manifest_dict\n\n    logger.info('Creating default observer schema for manifest %s', spec)\n    manifest_dict.update(\n        {\n            'apiVersion': 'v1',\n            'kind': 'Observer',\n           'metadata': {'name': spec.get('name', 'default')},\n           'spec': {'apiVersion': spec.get('version', 'v1'), 'kind': spec.get('kind', 'default')},\n        }\n    )\n    return manifest_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    if manifest_dict is not None:\n        # Update the manifest with the new schema\n        app['spec']['manifest'] = manifest_dict\n        app['spec']['template'] = app['spec']['manifest']\n        app['spec']['updated'] = utc_difference()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest_dict = generate_default_observer_schema_dict(app)\n    app['spec']['manifest'].update(manifest_dict)\n    return app['spec']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def generate_default_observer_schema(app):\n    manifest = app.config.get(\"Kubernetes.manifest\")\n    if manifest is None:\n        return\n\n    for resource_status_old, resource_status_new in manifest.items():\n        if resource_status_old == \"default\":\n            yield generate_default_observer_schema_old(app)\n        else:\n            yield generate_default_observer_schema_new(app, resource_status_old, resource_status_new)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "format", "docstring": "Convert the SQL query to use the out-style parameters instead of\nthe in-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\ncontains the set of in-style parameters. It maps each parameter\n(:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\nis a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\nIf :attr:`.SQLParams.in_style` is an ordinal parameter style, then\n*params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       The set of converted out-style parameters (:class:`dict` or\n        :class:`list`).", "ques_id": "62b43427903eeb48555d3ea5", "code": ["def format(\n\t\tself,\n\t\tsql: str,\nparams: tuple = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Mapping[str, Any]] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\n\nreturn self._converter.convert(\nsql,\nparams,\n)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[Any] = (),\n) -> str:\nif self._in_obj is None:\nself._in_obj = []\nobj = self._converter.convert(sql, params)\nself._in_obj.append(obj)\nreturn self._out_obj.format(*self._in_obj)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[str] = (),\n) -> str:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None,\n) -> str:\n\n\"\"\"Convert sql using self._converter.convert\"\"\"\n\nreturn self._converter.convert(sql, params or self._in_obj)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Dict[str, str]] = None,\n) -> str:\nif params is None:\nparams = {}\n\nif self._in_obj:\nreturn self._converter.convert(sql, params, self._in_obj)\nelse:\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Sequence[str]] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(\nsql,\nparams if params is not None else {},\n)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: tuple = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Mapping[str, Any]] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping[str, Any] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\n\nreturn self._converter.convert(\nsql,\nparams,\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[Any] = (),\n) -> str:\nif self._in_obj is None:\nself._in_obj = []\nobj = self._converter.convert(sql, params)\nself._in_obj.append(obj)\nreturn self._out_obj.format(*self._in_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Sequence[str] = (),\n) -> str:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None,\n) -> str:\n\n\"\"\"Convert sql using self._converter.convert\"\"\"\n\nreturn self._converter.convert(sql, params or self._in_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Dict[str, str]] = None,\n) -> str:\nif params is None:\nparams = {}\n\nif self._in_obj:\nreturn self._converter.convert(sql, params, self._in_obj)\nelse:\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Optional[Sequence[str]] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(sql, params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format(\n\t\tself,\n\t\tsql: str,\nparams: Mapping = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert\"\"\"\nreturn self._converter.convert(\nsql,\nparams if params is not None else {},\n)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "formatmany", "docstring": "Convert the SQL query to use the out-style parameters instead of the\nin-style parameters.\n\n*sql* (:class:`str` or :class:`bytes`) is the SQL query.\n\n*many_params* (:class:`~collections.abc.Iterable`) contains each set\nof in-style parameters (*params*).\n\n-       *params* (:class:`~collections.abc.Mapping` or :class:`~collections.abc.Sequence`)\n        contains the set of in-style parameters. It maps each parameter\n        (:class:`str` or :class:`int`) to value. If :attr:`.SQLParams.in_style`\n        is a named parameter style. then *params* must be a :class:`~collections.abc.Mapping`.\n        If :attr:`.SQLParams.in_style` is an ordinal parameter style. then\n        *params* must be a :class:`~collections.abc.Sequence`.\n\nReturns a :class:`tuple` containing:\n\n-       The formatted SQL query (:class:`str` or :class:`bytes`).\n\n-       A :class:`list` containing each set of converted out-style\n        parameters (:class:`dict` or :class:`list`).", "ques_id": "62b43428903eeb48555d3eaa", "code": ["def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = None\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nif self._in_regex:\nreturn f\"({sql})\"\nelse:\nreturn f\"{self._converter.convert_many(sql, many_params)}\"\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: List[str] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params,\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> Sequence[str]:\nif not self._converter:\nreturn []\n\nif self._in_obj:\nreturn [self._converter.convert_many(sql, many_params)]\n\nreturn [self._converter.convert_many(sql, many_params)] + self._in_regex.findall(sql)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql, many_params, self\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Optional[Sequence[str]] = None\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nif self._in_regex:\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params\n)\nelse:\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params,\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> str:\nreturn self._converter.convert_many(sql, many_params)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> str:\nreturn self._converter.convert_many(\nsql, many_params\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql,\nmany_params,\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: typing.List[str] = None,\n) -> str:\n\"\"\"\nConvert sql using self._converter.convert_many\n\n:param sql: Sql to be converted\n:param many_params: list of parameters to be passed to the converter\n:return: Sql with converted parameters\n\"\"\"\n\nreturn self._converter.convert_many(\nsql,\nmany_params,\n)\n", "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: List[str] = None\n) -> str:\n\nif self._in_obj:\nreturn self._converter.convert_many(sql, many_params)\nelse:\nreturn self._converter.convert_many(sql, many_params)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = None\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nif self._in_regex:\nreturn f\"({sql})\"\nelse:\nreturn f\"{self._converter.convert_many(sql, many_params)}\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: List[str] = None,\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params,\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> Sequence[str]:\nif not self._converter:\nreturn []\n\nif self._in_obj:\nreturn [self._converter.convert_many(sql, many_params)]\n\nreturn [self._converter.convert_many(sql, many_params)] + self._in_regex.findall(sql)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql, many_params, self\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Optional[Sequence[str]] = None\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nif self._in_regex:\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params\n)\nelse:\nreturn self._converter.convert_many(\nsql=sql,\nmany_params=many_params,\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> str:\nreturn self._converter.convert_many(sql, many_params)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = ()\n) -> str:\nreturn self._converter.convert_many(\nsql, many_params\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: Sequence[str] = (),\n) -> str:\n\"\"\"Convert sql using self._converter.convert_many\"\"\"\nreturn self._converter.convert_many(\nsql,\nmany_params,\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: typing.List[str] = None,\n) -> str:\n\"\"\"\nConvert sql using self._converter.convert_many\n\n:param sql: Sql to be converted\n:param many_params: list of parameters to be passed to the converter\n:return: Sql with converted parameters\n\"\"\"\n\nreturn self._converter.convert_many(\nsql,\nmany_params,\n)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def formatmany(\n\t\tself,\n\t\tsql: str,\nmany_params: List[str] = None\n) -> str:\n\nif self._in_obj:\nreturn self._converter.convert_many(sql, many_params)\nelse:\nreturn self._converter.convert_many(sql, many_params)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate OCFL object at path or pyfs root.\n\nReturns True if valid (warnings permitted), False otherwise.", "ques_id": "62b45df05108cfac7f2109ce", "code": ["def validate(self, path):\n    try:\n        self.validate_content(path)\n    except Exception as e:\n        self.log.error(\"Failed to validate file: %s\", e)\n        self.log.error(\"Please check the file path and try again\")\n        raise e\n\n    return self.status_str(\"ok\")\n", "def validate(self, path):\n    if not os.path.exists(path):\n        self.log.error(\"%s does not exist!\", path)\n        return False\n    if not os.path.isfile(path):\n        self.log.error(\"%s is not a file!\", path)\n        return False\n    if not self.spec_version:\n        self.log.error(\"no version specified!\")\n        return False\n    return True\n", "def validate(self, path):\n    super().validate(path)\n\n    if not os.path.isfile(path):\n        raise IOError(\"Path does not exist {}\".format(path))\n\n    with open(path, \"rb\") as inv_digest:\n        self.read_inventory_digest(inv_digest)\n\n    self.check_additional_digests(path, self.registered_extensions, additional_digests=[])\n\n    self.obj_fs.rm_safe(path)\n", "def validate(self, path):\n    self.log.debug('validate(%s)', path)\n    if self.inventory_digest_files:\n        self.read_inventory_digest(path)\n    if self.content_directory:\n        self.read_content_directory(path)\n    if self.root_inv_validator:\n        self.root_inv_validator.validate(path)\n", "def validate(self, path):\n    if self.spec_version is not None:\n        self.spec_version = self.read_inventory_digest(path)\n    if self.digest_algorithm is not None:\n        self.digest_algorithm = self.read_inventory_digest(path)\n    if self.digest_version is not None:\n        self.digest_version = self.digest_algorithm\n    self.check_digests(path)\n", "def validate(self, path):\n    if not self.spec_version:\n        self.log.debug(\"No specification version found. Assuming latest version for %s\", path)\n        return\n\n    if self.check_digests(path):\n        return True\n\n    return self.status_str(\"incomplete\")\n", "def validate(self, path):\n    self.log.debug('Validating %s', path)\n    path = os.path.abspath(path)\n\n    # Read the inventory file and validate it\n    inv = self.read_inventory_digest(path)\n    if not self.validate_inventory(inv, path):\n        self.log.error('Inventory file corrupted, invalid or missing file or directory')\n        return False\n\n    # Validate the additional digests\n    self.validate_additional_digests(path, additional_digests=inv.get('additional_digests', []))\n\n    # Validate the extensions directory\n    self.validate_extensions_dir()\n\n    return True\n", "def validate(self, path):\n    self.log.debug('validate %s', path)\n    self.digest_algorithm.validate(path)\n    self.digest_inventory.validate(path)\n    self.spec_version.validate(path)\n    self.inventory_digest_files.validate(path)\n    self.initialize()\n", "def validate(self, path):\n    try:\n        self.validate_version_inventories()\n        self.validate_extensions_dir()\n        self.validate_inventory()\n    except FileDigestException as e:\n        self.log.error('FileDigestException: %s', e)\n        raise\n    except Exception as e:\n        self.log.error('Validator: %s', e)\n        raise\n    return True\n", "def validate(self, path):\n    self.inventory_digest_files = []\n    self.root_inv_validator.validate(path)\n    self.inventory_digest_files += self.obj_fs.list_files(path)\n\n    return self.status_str('Valid')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, path):\n    try:\n        self.validate_content(path)\n    except Exception as e:\n        self.log.error(\"Failed to validate file: %s\", e)\n        self.log.error(\"Please check the file path and try again\")\n        raise e\n\n    return self.status_str(\"ok\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not os.path.exists(path):\n        self.log.error(\"%s does not exist!\", path)\n        return False\n    if not os.path.isfile(path):\n        self.log.error(\"%s is not a file!\", path)\n        return False\n    if not self.spec_version:\n        self.log.error(\"no version specified!\")\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    super().validate(path)\n\n    if not os.path.isfile(path):\n        raise IOError(\"Path does not exist {}\".format(path))\n\n    with open(path, \"rb\") as inv_digest:\n        self.read_inventory_digest(inv_digest)\n\n    self.check_additional_digests(path, self.registered_extensions, additional_digests=[])\n\n    self.obj_fs.rm_safe(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug('validate(%s)', path)\n    if self.inventory_digest_files:\n        self.read_inventory_digest(path)\n    if self.content_directory:\n        self.read_content_directory(path)\n    if self.root_inv_validator:\n        self.root_inv_validator.validate(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if self.spec_version is not None:\n        self.spec_version = self.read_inventory_digest(path)\n    if self.digest_algorithm is not None:\n        self.digest_algorithm = self.read_inventory_digest(path)\n    if self.digest_version is not None:\n        self.digest_version = self.digest_algorithm\n    self.check_digests(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    if not self.spec_version:\n        self.log.debug(\"No specification version found. Assuming latest version for %s\", path)\n        return\n\n    if self.check_digests(path):\n        return True\n\n    return self.status_str(\"incomplete\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug('Validating %s', path)\n    path = os.path.abspath(path)\n\n    # Read the inventory file and validate it\n    inv = self.read_inventory_digest(path)\n    if not self.validate_inventory(inv, path):\n        self.log.error('Inventory file corrupted, invalid or missing file or directory')\n        return False\n\n    # Validate the additional digests\n    self.validate_additional_digests(path, additional_digests=inv.get('additional_digests', []))\n\n    # Validate the extensions directory\n    self.validate_extensions_dir()\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.log.debug('validate %s', path)\n    self.digest_algorithm.validate(path)\n    self.digest_inventory.validate(path)\n    self.spec_version.validate(path)\n    self.inventory_digest_files.validate(path)\n    self.initialize()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    try:\n        self.validate_version_inventories()\n        self.validate_extensions_dir()\n        self.validate_inventory()\n    except FileDigestException as e:\n        self.log.error('FileDigestException: %s', e)\n        raise\n    except Exception as e:\n        self.log.error('Validator: %s', e)\n        raise\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, path):\n    self.inventory_digest_files = []\n    self.root_inv_validator.validate(path)\n    self.inventory_digest_files += self.obj_fs.list_files(path)\n\n    return self.status_str('Valid')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validation_logger.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string of validator status, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dc", "code": ["def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '%sWarning: %d / %d' % (prefix, len(self.warnings),\n                                      len(self.errors))\n    else:\n        return '%sError: %d / %d' % (prefix, len(self.errors),\n                                      len(self.warnings))\n", "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '%s: %s' % (prefix, self.status_str)\n        if self.messages:\n            status_str += ','+ ', '.join(self.messages)\n    return status_str\n", "def status_str(self, prefix=''):\n    if self.status_str is None:\n        self.status_str = ''\n    if self.status_str:\n        return prefix + self.status_str +''\n    return prefix\n", "def status_str(self, prefix=''):\n    if not self.status_str:\n        self.status_str = ''\n    if self.status_str:\n        return '%s%s: %s' % (prefix, self.status_str,\n                             ', '.join(self.messages))\n    return ''\n", "def status_str(self, prefix=''):\n    result = ''\n    for i, m in sorted(enumerate(self.messages), key=lambda x: (x[1].lower(), x[0])):\n        result += '%s%s: %s\\n' % (prefix, i, m)\n    return result\n", "def status_str(self, prefix=''):\n    if len(self.messages) > 0:\n        msgs = sorted(self.messages, key=lambda x: (x.start_line, x.start_column))\n        return '\\n'.join(prefix +''.join(map(str, x)) for x in msgs)\n    else:\n        return ''\n", "def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '[{}] '.format(', '.join(prefix + msg for msg in self.messages))\n    else:\n        return '[{}] '.format(', '.join(prefix + msg for msg in self.messages))\n", "def status_str(self, prefix=''):\n    return \"\\n\".join(\"%s%s: %s\" % (prefix, msg, self.status_str(msg))\n                     for msg in sorted(self.messages))\n", "def status_str(self, prefix=''):\n    return '\\n'.join(\n        '%s%s: %s' % (prefix, msg, ', '.join(sorted(w)))\n        for msg, w in sorted(self.messages.items())\n    )\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status_str is not None:\n        s = self.status_str(prefix)\n    for m in sorted(self.messages, key=lambda m: m.start_line):\n        s += m.show_str(prefix=prefix +' ')\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '%sWarning: %d / %d' % (prefix, len(self.warnings),\n                                      len(self.errors))\n    else:\n        return '%sError: %d / %d' % (prefix, len(self.errors),\n                                      len(self.warnings))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str = '%s: %s' % (prefix, self.status_str)\n        if self.messages:\n            status_str += ','+ ', '.join(self.messages)\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str is None:\n        self.status_str = ''\n    if self.status_str:\n        return prefix + self.status_str +''\n    return prefix\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if not self.status_str:\n        self.status_str = ''\n    if self.status_str:\n        return '%s%s: %s' % (prefix, self.status_str,\n                             ', '.join(self.messages))\n    return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    result = ''\n    for i, m in sorted(enumerate(self.messages), key=lambda x: (x[1].lower(), x[0])):\n        result += '%s%s: %s\\n' % (prefix, i, m)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if len(self.messages) > 0:\n        msgs = sorted(self.messages, key=lambda x: (x.start_line, x.start_column))\n        return '\\n'.join(prefix +''.join(map(str, x)) for x in msgs)\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.show_warnings:\n        return '[{}] '.format(', '.join(prefix + msg for msg in self.messages))\n    else:\n        return '[{}] '.format(', '.join(prefix + msg for msg in self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return \"\\n\".join(\"%s%s: %s\" % (prefix, msg, self.status_str(msg))\n                     for msg in sorted(self.messages))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    return '\\n'.join(\n        '%s%s: %s' % (prefix, msg, ', '.join(sorted(w)))\n        for msg, w in sorted(self.messages.items())\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status_str is not None:\n        s = self.status_str(prefix)\n    for m in sorted(self.messages, key=lambda m: m.start_line):\n        s += m.show_str(prefix=prefix +' ')\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "status_str", "docstring": "Return string representation of validation log, with optional prefix.", "ques_id": "62b45df15108cfac7f2109dd", "code": ["def status_str(self, prefix=''):\n    if self.log:\n        self.log.write(''+ prefix +'' + self.status_str_short)\n    return self.status_str_short\n", "def status_str(self, prefix=''):\n    if self.status_str:\n        return self.status_str\n    elif self.status_str is None:\n        return ''\n    else:\n        return prefix +'status:'+ self.status_str\n", "def status_str(self, prefix=''):\n    if self.status_str:\n        return self.status_str\n\n    status_str = ''\n    for k, v in sorted(self.items()):\n        if k.startswith(prefix):\n            status_str += k +''\n            status_str += v\n            status_str += '\\n'\n    return status_str\n", "def status_str(self, prefix=''):\n    self.log.debug('status_str({0}) -> {1}'.format(self.id, prefix))\n    return str(self)\n", "def status_str(self, prefix=''):\n    s = \"\"\n    if self.id is not None:\n        s += \"%sID: %s\\n\" % (prefix, self.id)\n    if self.status_str_no_fs is not None:\n        s += \"%sStatus: %s\\n\" % (prefix, self.status_str_no_fs)\n    return s\n", "def status_str(self, prefix=''):\n    msg = \"{}{}\".format(prefix, self.status_str_value)\n    return msg\n", "def status_str(self, prefix=''):\n    s = ''\n    if self.status_str_flag:\n        s += '[{}] '.format(prefix) + str(self)\n        self.status_str_flag = False\n    return s\n", "def status_str(self, prefix=''):\n    l = []\n    l.append(prefix + \"status: \")\n    l.append(self.status_str_success)\n    l.append(self.status_str_failure)\n    if self.lax_digests:\n        l.append(\" (lax)\")\n    if len(self.lax_digests) > 1:\n        l.append(\" (more than one digest)\")\n    if len(self.spec_version) > 1:\n        l.append(\" (more than one version)\")\n    if len(self.inventory_digest) > 1:\n        l.append(\" (more than one digest for inventory)\")\n    if len(self.inventory_digest_files) > 1:\n        l.append(\" (more than one digest for inventory files)\")\n    if len(self.content_directory) > 1:\n        l.append(\" (more than one content directory)\")\n    return''.join(l)\n", "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str ='({})'.format(self.status_str)\n    return '{}{}'.format(prefix, status_str)\n", "def status_str(self, prefix=''):\n    s = \"{}ID: {}\\n\".format(prefix, self.id)\n    s += \"{}Root: {}\\n\".format(prefix, self.root_inv_validator.status_str(prefix=''))\n    s += \"{}Digests:\\n\".format(prefix)\n    for digest in self.lax_digests:\n        s += \"  {}\\n\".format(digest)\n    s += \"{}Extensions Digests:\\n\".format(prefix)\n    for digest in self.extensions_dir:\n        s += \"  {}\\n\".format(digest)\n    return s\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def status_str(self, prefix=''):\n    if self.log:\n        self.log.write(''+ prefix +'' + self.status_str_short)\n    return self.status_str_short\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str:\n        return self.status_str\n    elif self.status_str is None:\n        return ''\n    else:\n        return prefix +'status:'+ self.status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    if self.status_str:\n        return self.status_str\n\n    status_str = ''\n    for k, v in sorted(self.items()):\n        if k.startswith(prefix):\n            status_str += k +''\n            status_str += v\n            status_str += '\\n'\n    return status_str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    self.log.debug('status_str({0}) -> {1}'.format(self.id, prefix))\n    return str(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = \"\"\n    if self.id is not None:\n        s += \"%sID: %s\\n\" % (prefix, self.id)\n    if self.status_str_no_fs is not None:\n        s += \"%sStatus: %s\\n\" % (prefix, self.status_str_no_fs)\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    msg = \"{}{}\".format(prefix, self.status_str_value)\n    return msg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = ''\n    if self.status_str_flag:\n        s += '[{}] '.format(prefix) + str(self)\n        self.status_str_flag = False\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    l = []\n    l.append(prefix + \"status: \")\n    l.append(self.status_str_success)\n    l.append(self.status_str_failure)\n    if self.lax_digests:\n        l.append(\" (lax)\")\n    if len(self.lax_digests) > 1:\n        l.append(\" (more than one digest)\")\n    if len(self.spec_version) > 1:\n        l.append(\" (more than one version)\")\n    if len(self.inventory_digest) > 1:\n        l.append(\" (more than one digest for inventory)\")\n    if len(self.inventory_digest_files) > 1:\n        l.append(\" (more than one digest for inventory files)\")\n    if len(self.content_directory) > 1:\n        l.append(\" (more than one content directory)\")\n    return''.join(l)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    status_str = ''\n    if self.status_str:\n        status_str ='({})'.format(self.status_str)\n    return '{}{}'.format(prefix, status_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def status_str(self, prefix=''):\n    s = \"{}ID: {}\\n\".format(prefix, self.id)\n    s += \"{}Root: {}\\n\".format(prefix, self.root_inv_validator.status_str(prefix=''))\n    s += \"{}Digests:\\n\".format(prefix)\n    for digest in self.lax_digests:\n        s += \"  {}\\n\".format(digest)\n    s += \"{}Extensions Digests:\\n\".format(prefix)\n    for digest in self.extensions_dir:\n        s += \"  {}\\n\".format(digest)\n    return s\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/dispositor.py", "project": "zimeon/ocfl-py", "name": "is_valid", "docstring": "Return True if identifier is valid, always True in this base implementation.", "ques_id": "62b45e135108cfac7f2109f4", "code": ["def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n", "def is_valid(self, identifier):\n    return True\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_valid(self, identifier):\n    return True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate", "docstring": "Validate a given inventory.\n\nIf extract_spec_version is True then will look at the type value to determine\nthe specification version. In the case that there is no type value or it isn't\nvalid, then other tests will be based on the version given in self.spec_version.", "ques_id": "62b45e145108cfac7f210a07", "code": ["def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating %s\" % self.id)\n    self.check_digests_present_and_used(self.manifest_files, self.digest_regex())\n    self.check_content_paths_map_to_versions(inventory, self.spec_versions_supported)\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n    self.check_logical_path(self.content_path, version=self.id, logical_paths=self.logical_paths)\n    self.check_logical_path(self.logical_path, version=self.id, logical_paths=self.logical_paths)\n\n    if self.digest_algorithm == \"sha512\":\n        self.check_digests_present_and_used(self.unnormalized_digests, self.digest_regex())\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(inventory, self.digest_regex())\n\n    self.check_content_paths_map_to_versions(inventory, self.spec_versions_supported)\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n\n    self.check_digests_present_and_used(self.unnormalized_digests, self.digest_regex())\n    self.check_digests_present_and", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        [\n            self.spec_version,\n            self.content_directory,\n            self.content_logical_path,\n            self.content_path,\n            self.spec_versions_supported,\n        ],\n        [\"specification\", \"content\"],\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory,\n        all_versions=True,\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory,\n            all_versions=True,\n        )\n\n    self.check_digests_present_and_used(\n        [self.head],\n        [\"head\"],\n    )\n", "def validate(self, inventory, extract_spec_version=False):\n    self.check_content_paths_map_to_versions(\n        inventory,\n        self.manifest_files,\n        self.manifest_files_unnormalized_digests,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory,\n        self.spec_versions_supported,\n        self.spec_versions_unnormalized_digests,\n    )\n\n    self.check_logical_path(\n        self.content_path,\n        versions=self.spec_versions_supported,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_logical_path(\n        self.content_path_unnormalized,\n        versions=self.spec_versions_unnormalized_digests,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_content_path(\n        self.content_path_normalized,\n        versions=self.spec_versions_normalized,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_content_path(\n        self.content_path_unnormalized_digest,\n        versions=self.spec_versions_unnormalized_digests,\n        logical_paths=self.logical_paths,\n  ", "def validate(self, inventory, extract_spec_version=False):\n    if self.where == \"source\":\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_version, [\"source\"]\n        )\n    elif self.where == \"target\":\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_version, [\"target\"]\n        )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_version, [\"source\", \"target\"]\n    )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex, logical_paths=self.digest_paths\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_version, logical_paths=[\"source\", \"target\"]\n    )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex, logical_paths=[\"source\", \"target\"]\n    )\n\n    self.check_lax_digests(inventory, self.lax_digests)\n\n   ", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex(), extract_spec_version\n    )\n    self.check_content_paths_map_to_versions(\n        inventory, self.manifest_files, all_versions=True\n    )\n    self.check_logical_path(\n        inventory, self.spec_version, logical_paths=self.logical_paths\n    )\n    self.check_content_path(inventory, self.content_paths, content_directories=True)\n    self.check_logical_path(inventory, self.spec_version, logical_paths=True)\n    self.check_content_path(inventory, self.unnormalized_digests, unnormalized_digests=True)\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_versions_supported, all_versions=True\n    )\n    self.check_state_block(inventory, self.state, versions=True)\n\n    return inventory\n", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        manifest_files=self.manifest_files,\n        digests_used=self.digest_regex(),\n        extract_spec_version=extract_spec_version,\n    )\n\n    if not self.spec_version:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True,\n        )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=self.manifest_files,\n        all_versions=True,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=self.manifest_files,\n        all_versions=True,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_logical_path(self.content_path, versions=self.versions, logical_paths=self.logical_paths)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=bool(self.digest_regex),\n    )\n\n    self.check_logical_path(self.content_path, version=self.id, logical_paths=self.logical_paths)\n    self.check_logical_path(self.content_directory, version=self.id, logical_paths=self.logical_paths)\n\n    self.check_content_path(\n        path=self.content_path,\n        content_directory=self.content_directory,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_content_path(\n        path=self.content_directory,\n        content_path=self.content_path,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        manifest_files=self.manifest_files,\n        digests_used=self.digests_used,\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True\n        )\n\n    self.check_logical_path(self.where, version=True, logical_paths=True)\n    self.check_content_path(self.where, content_paths=True, content_directories=True)\n\n    self.check_state_block(\n        inventory=inventory,\n        version=True,\n        logical_paths=True,\n        logical_directories=True,\n    )\n\n    self.check_content_path(self.where, content_paths=True, content_directories=True)\n\n    self.check_content_path(self.where, content_paths=True, logical_directories=True)\n\n    self.check_logical_path(self.where, version=True, logical_paths=True)\n    self.check_logical_path(self.where, content_paths=True, logical_directories=True)\n", "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex()\n    )\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=False)\n\n    self.check_logical_path(self.head, versions=False, logical_paths=True)\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex()\n    )\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex(), raw_only=True\n    )\n\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex(), raw_only=True\n    )\n\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    self.check_logical_path(self.head, versions=True)\n\n    self.check_digests_present_and_used(inventory, all_versio", "def validate(self, inventory, extract_spec_version=False):\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(),\n        digests_used=[self.id],\n    )\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True),\n        digests_used=[self.id, self.id],\n    )\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_logical_path(inventory)\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True, logical_paths=True),\n        digests_used=[self.id],\n    )\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True, logical_paths=False),\n        digests_used=[self.id],\n    )\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(\n          "], "level": "class_runnable", "generate_results": [{"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.log.info(\"Validating %s\" % self.id)\n    self.check_digests_present_and_used(self.manifest_files, self.digest_regex())\n    self.check_content_paths_map_to_versions(inventory, self.spec_versions_supported)\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n    self.check_logical_path(self.content_path, version=self.id, logical_paths=self.logical_paths)\n    self.check_logical_path(self.logical_path, version=self.id, logical_paths=self.logical_paths)\n\n    if self.digest_algorithm == \"sha512\":\n        self.check_digests_present_and_used(self.unnormalized_digests, self.digest_regex())\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(inventory, self.digest_regex())\n\n    self.check_content_paths_map_to_versions(inventory, self.spec_versions_supported)\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n\n    self.check_content_paths_map_to_versions(inventory, self.logical_paths)\n\n    self.check_digests_present_and_used(self.unnormalized_digests, self.digest_regex())\n    self.check_digests_present_and", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        [\n            self.spec_version,\n            self.content_directory,\n            self.content_logical_path,\n            self.content_path,\n            self.spec_versions_supported,\n        ],\n        [\"specification\", \"content\"],\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory,\n        all_versions=True,\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            inventory,\n            all_versions=True,\n        )\n\n    self.check_digests_present_and_used(\n        [self.head],\n        [\"head\"],\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_content_paths_map_to_versions(\n        inventory,\n        self.manifest_files,\n        self.manifest_files_unnormalized_digests,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory,\n        self.spec_versions_supported,\n        self.spec_versions_unnormalized_digests,\n    )\n\n    self.check_logical_path(\n        self.content_path,\n        versions=self.spec_versions_supported,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_logical_path(\n        self.content_path_unnormalized,\n        versions=self.spec_versions_unnormalized_digests,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_content_path(\n        self.content_path_normalized,\n        versions=self.spec_versions_normalized,\n        logical_paths=self.logical_paths,\n    )\n\n    self.check_content_path(\n        self.content_path_unnormalized_digest,\n        versions=self.spec_versions_unnormalized_digests,\n        logical_paths=self.logical_paths,\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    if self.where == \"source\":\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_version, [\"source\"]\n        )\n    elif self.where == \"target\":\n        self.check_content_paths_map_to_versions(\n            inventory, self.spec_version, [\"target\"]\n        )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_version, [\"source\", \"target\"]\n    )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex, logical_paths=self.digest_paths\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_version, logical_paths=[\"source\", \"target\"]\n    )\n\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex, logical_paths=[\"source\", \"target\"]\n    )\n\n    self.check_lax_digests(inventory, self.lax_digests)\n\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory, self.digest_regex(), extract_spec_version\n    )\n    self.check_content_paths_map_to_versions(\n        inventory, self.manifest_files, all_versions=True\n    )\n    self.check_logical_path(\n        inventory, self.spec_version, logical_paths=self.logical_paths\n    )\n    self.check_content_path(inventory, self.content_paths, content_directories=True)\n    self.check_logical_path(inventory, self.spec_version, logical_paths=True)\n    self.check_content_path(inventory, self.unnormalized_digests, unnormalized_digests=True)\n    self.check_content_paths_map_to_versions(\n        inventory, self.spec_versions_supported, all_versions=True\n    )\n    self.check_state_block(inventory, self.state, versions=True)\n\n    return inventory\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        manifest_files=self.manifest_files,\n        digests_used=self.digest_regex(),\n        extract_spec_version=extract_spec_version,\n    )\n\n    if not self.spec_version:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True,\n        )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=self.manifest_files,\n        all_versions=True,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=self.manifest_files,\n        all_versions=True,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_logical_path(self.content_path, versions=self.versions, logical_paths=self.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory=inventory,\n        digests_used=self.digests_used,\n        extract_spec_version=extract_spec_version,\n    )\n\n    self.check_content_paths_map_to_versions(\n        inventory=inventory,\n        all_versions=bool(self.digest_regex),\n    )\n\n    self.check_logical_path(self.content_path, version=self.id, logical_paths=self.logical_paths)\n    self.check_logical_path(self.content_directory, version=self.id, logical_paths=self.logical_paths)\n\n    self.check_content_path(\n        path=self.content_path,\n        content_directory=self.content_directory,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n\n    self.check_content_path(\n        path=self.content_directory,\n        content_path=self.content_path,\n        unnormalized_digests=self.unnormalized_digests,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        manifest_files=self.manifest_files,\n        digests_used=self.digests_used,\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True\n        )\n\n    self.check_logical_path(self.where, version=True, logical_paths=True)\n    self.check_content_path(self.where, content_paths=True, content_directories=True)\n\n    self.check_state_block(\n        inventory=inventory,\n        version=True,\n        logical_paths=True,\n        logical_directories=True,\n    )\n\n    self.check_content_path(self.where, content_paths=True, content_directories=True)\n\n    self.check_content_path(self.where, content_paths=True, logical_directories=True)\n\n    self.check_logical_path(self.where, version=True, logical_paths=True)\n    self.check_logical_path(self.where, content_paths=True, logical_directories=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex()\n    )\n    self.check_content_paths_map_to_versions(\n        inventory, all_versions=True\n    )\n\n    if extract_spec_version:\n        self.check_content_paths_map_to_versions(inventory, all_versions=False)\n\n    self.check_logical_path(self.head, versions=False, logical_paths=True)\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex()\n    )\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex(), raw_only=True\n    )\n\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    self.check_digests_present_and_used(\n        inventory, [self.id], self.digest_regex(), raw_only=True\n    )\n\n    self.check_content_paths_map_to_versions(inventory, all_versions=True)\n\n    self.check_logical_path(self.head, versions=True)\n\n    self.check_digests_present_and_used(inventory, all_versio", "is_pass": false, "return_code": 1}, {"generate_code": "def validate(self, inventory, extract_spec_version=False):\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(),\n        digests_used=[self.id],\n    )\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True),\n        digests_used=[self.id, self.id],\n    )\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_content_paths_map_to_versions(inventory)\n\n    self.check_logical_path(inventory)\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True, logical_paths=True),\n        digests_used=[self.id],\n    )\n\n    self.check_digests_present_and_used(\n        inventory,\n        self.digest_regex(version=True, logical_paths=False),\n        digests_used=[self.id],\n    )\n\n    if extract_spec_version:\n        self.check_digests_present_and_used(\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "check_digests_present_and_used", "docstring": "Check all digests in manifest that are needed are present and used.", "ques_id": "62b45e145108cfac7f210a09", "code": ["def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if self.check_digests_present(manifest_file, digests_used):\n            self.log.info(\"Digest file %s already present and used\", manifest_file.path)\n            return True\n    self.log.info(\"Digest files %s not found and not used\", \", \".join(manifest_files))\n    return False\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        found_digest = self.check_digest(manifest_files, digest)\n        if found_digest is None:\n            self.error(\"Digest {} not found in manifest files {}\".format(digest, manifest_files))\n            self.log.warning(\"Using unnormalized digest {}\".format(found_digest))\n            return found_digest\n    return None\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest_type in digests_used:\n        digests = digests_used[digest_type]\n        for digest in digests:\n            if digest not in unnormalized_digests[digest_type]:\n                self.log.debug(\"Digest {} not found in {}\".format(digest, digest_type))\n                self.digest_regex(digest, manifest_files)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    digests = self.digest_regex()\n    for digest in digests:\n        if digest not in manifest_files:\n            self.log.info(\"Digest '%s' not found in manifest files.\", digest)\n            digests_used.append(digest)\n    return digests_used\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    # check if digests are present in all versions\n    for version in manifest_files.keys():\n        self.check_digests_present_and_used_version(version, manifest_files, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file not in digests_used:\n            self.log.debug(\"Digest file {} is missing from manifest\".format(file))\n            self.error(\"Digest file {} is missing from manifest\".format(file))\n            return False\n    return True\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            self.digest_regex()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if self.check_digests_present(manifest_file, digests_used):\n            self.log.info(\"Digest file %s already present and used\", manifest_file.path)\n            return True\n    self.log.info(\"Digest files %s not found and not used\", \", \".join(manifest_files))\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for digest in digests_used:\n        found_digest = self.check_digest(manifest_files, digest)\n        if found_digest is None:\n            self.error(\"Digest {} not found in manifest files {}\".format(digest, manifest_files))\n            self.log.warning(\"Using unnormalized digest {}\".format(found_digest))\n            return found_digest\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    for digest_type in digests_used:\n        digests = digests_used[digest_type]\n        for digest in digests:\n            if digest not in unnormalized_digests[digest_type]:\n                self.log.debug(\"Digest {} not found in {}\".format(digest, digest_type))\n                self.digest_regex(digest, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n\n    self.check_digests_present(manifest_files, digests_used)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    digests = self.digest_regex()\n    for digest in digests:\n        if digest not in manifest_files:\n            self.log.info(\"Digest '%s' not found in manifest files.\", digest)\n            digests_used.append(digest)\n    return digests_used\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    self.check_digests_present(manifest_files, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    # check if digests are present in all versions\n    for version in manifest_files.keys():\n        self.check_digests_present_and_used_version(version, manifest_files, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for file in manifest_files:\n        if file not in digests_used:\n            self.log.debug(\"Digest file {} is missing from manifest\".format(file))\n            self.error(\"Digest file {} is missing from manifest\".format(file))\n            return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        self.check_digests_present(manifest_file, digests_used)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_digests_present_and_used(self, manifest_files, digests_used):\n    for manifest_file in manifest_files:\n        if manifest_file not in digests_used:\n            self.digest_regex()\n", "is_pass": true, "return_code": 0}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_as_prior_version", "docstring": "Check that prior is a valid prior version of the current inventory object.\n\nThe input variable prior is also expected to be an InventoryValidator object\nand both self and prior inventories are assumed to have been checked for\ninternal consistency.", "ques_id": "62b45e165108cfac7f210a16", "code": ["def validate_as_prior_version(self, prior):\n    if prior.is_special:\n        self.warning(\n            \"It's assumed that the file {} is the reference \"\n            \"to a special file {}, which is probably not \"\n            \"necessary for this package.\".format(\n                prior.file_path,\n                prior.special_file_path,\n            )\n        )\n        self.warning(\"This is a warning for an unknown special file: {}\".format(prior.special_file_path))\n", "def validate_as_prior_version(self, prior):\n    if prior in self.lax_digests:\n        self.lax_digests.remove(prior)\n\n    if prior not in self.digest_algorithm.algorithms:\n        self.log.error(\"Unknown version %s in manifest files %s\",\n                       prior, self.manifest_files)\n        raise errors.UnknownManifestException(\n            \"Unknown version %s in manifest files %s\" %\n            (prior, self.manifest_files)\n        )\n", "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='unknown',\n            message='Can only validate in a previous version of the inventory',\n        )\n", "def validate_as_prior_version(self, prior):\n\n    if prior is None:\n        return\n\n    if self.lax_digests and prior.version in self.lax_digests:\n        if self.lax_digests[prior.version]!= prior.digest:\n            self.error(code='inconsistent-lax-digest',\n                       message='{} (expected {}) and {} (actual {})'\n                      .format(prior.digest, self.lax_digests[prior.version],\n                               prior.digest, self.lax_digests[prior.version]))\n    elif self.digest_regex and not self.digest_regex.match(prior.digest):\n        self.error(code='inconsistent-lax-digest',\n                   message='{} (expected {})'\n                  .format(prior.digest, self.digest_regex.pattern))\n", "def validate_as_prior_version(self, prior):\n    for version in prior.versions:\n        self.check_content_paths_map_to_versions(\n            prior.content_paths, version)\n        self.check_logical_path(\n            prior.logical_path, version, logical_paths=prior.logical_path)\n", "def validate_as_prior_version(self, prior):\n    self.error(\"This test requires at least {} version of the inventory.\".format(prior))\n", "def validate_as_prior_version(self, prior):\n    self.log.debug(\"Validating as prior version %s\" % prior)\n    state = self.where.get_current_state()\n    if not self.validate_state_block(state, prior):\n        self.error(\"Unexpected state %s in %s\" % (state, prior))\n", "def validate_as_prior_version(self, prior):\n    self.error(\"This version of this package is prior to version %s\" % prior)\n", "def validate_as_prior_version(self, prior):\n    if prior not in self.lax_digests:\n        self.error(\n            code='MISSING_HASH',\n            message='Missing lax_digest {}. Found {}'.format(prior, self.lax_digests)\n        )\n\n    for version in self.lax_digests[prior]:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True,\n            version=version\n        )\n", "def validate_as_prior_version(self, prior):\n\n    self.log.debug(\"Validating as prior version %d\" % prior)\n\n    # If the version is not known, raise an error\n    if prior not in self.spec_versions_supported:\n        raise RuntimeError(\"Unknown version: %d\" % prior)\n\n    # Make sure the manifest files are present\n    self.check_digests_present_and_used(self.manifest_files, self.digest_regex())\n\n    # Make sure the content directory is empty\n    self.check_content_paths_map_to_versions(self.manifest_files, [])\n\n    # Make sure the logical path is empty\n    self.check_logical_path(self.content_directory, self.spec_versions_supported, [])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.is_special:\n        self.warning(\n            \"It's assumed that the file {} is the reference \"\n            \"to a special file {}, which is probably not \"\n            \"necessary for this package.\".format(\n                prior.file_path,\n                prior.special_file_path,\n            )\n        )\n        self.warning(\"This is a warning for an unknown special file: {}\".format(prior.special_file_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior in self.lax_digests:\n        self.lax_digests.remove(prior)\n\n    if prior not in self.digest_algorithm.algorithms:\n        self.log.error(\"Unknown version %s in manifest files %s\",\n                       prior, self.manifest_files)\n        raise errors.UnknownManifestException(\n            \"Unknown version %s in manifest files %s\" %\n            (prior, self.manifest_files)\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior.version!= self.id:\n        self.error(\n            code='unknown',\n            message='Can only validate in a previous version of the inventory',\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n\n    if prior is None:\n        return\n\n    if self.lax_digests and prior.version in self.lax_digests:\n        if self.lax_digests[prior.version]!= prior.digest:\n            self.error(code='inconsistent-lax-digest',\n                       message='{} (expected {}) and {} (actual {})'\n                      .format(prior.digest, self.lax_digests[prior.version],\n                               prior.digest, self.lax_digests[prior.version]))\n    elif self.digest_regex and not self.digest_regex.match(prior.digest):\n        self.error(code='inconsistent-lax-digest',\n                   message='{} (expected {})'\n                  .format(prior.digest, self.digest_regex.pattern))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    for version in prior.versions:\n        self.check_content_paths_map_to_versions(\n            prior.content_paths, version)\n        self.check_logical_path(\n            prior.logical_path, version, logical_paths=prior.logical_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.error(\"This test requires at least {} version of the inventory.\".format(prior))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.log.debug(\"Validating as prior version %s\" % prior)\n    state = self.where.get_current_state()\n    if not self.validate_state_block(state, prior):\n        self.error(\"Unexpected state %s in %s\" % (state, prior))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n    self.error(\"This version of this package is prior to version %s\" % prior)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_as_prior_version(self, prior):\n    if prior not in self.lax_digests:\n        self.error(\n            code='MISSING_HASH',\n            message='Missing lax_digest {}. Found {}'.format(prior, self.lax_digests)\n        )\n\n    for version in self.lax_digests[prior]:\n        self.check_content_paths_map_to_versions(\n            manifest_files=self.manifest_files,\n            all_versions=True,\n            version=version\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_as_prior_version(self, prior):\n\n    self.log.debug(\"Validating as prior version %d\" % prior)\n\n    # If the version is not known, raise an error\n    if prior not in self.spec_versions_supported:\n        raise RuntimeError(\"Unknown version: %d\" % prior)\n\n    # Make sure the manifest files are present\n    self.check_digests_present_and_used(self.manifest_files, self.digest_regex())\n\n    # Make sure the content directory is empty\n    self.check_content_paths_map_to_versions(self.manifest_files, [])\n\n    # Make sure the logical path is empty\n    self.check_logical_path(self.content_directory, self.spec_versions_supported, [])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "get_logical_path_map", "docstring": "Get a map of logical paths in state to files on disk for version in inventory.\n\nReturns a dictionary: logical_path_in_state -> set(content_files)\n\nThe set of content_files may includes references to duplicate files in\nlater versions than the version being described.", "ques_id": "62b45e165108cfac7f210a17", "code": ["def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        version = inventory.get_latest_version()\n    else:\n        version = parse_version_tag(version)\n\n    if not version:\n        return {}\n\n    inventory_root = inventory.get_root()\n    if not inventory_root:\n        return {}\n\n    return {\n        os.path.join(inventory_root, '%s.json' % item): os.path.join(inventory_root, '%s.yml' % item)\n        for item in inventory.get_paths(version)\n    }\n", "def get_logical_path_map(inventory, version):\n    if not inventory:\n        return {}\n    return {\n        state.path: state.relative_path\n        for state in inventory.states\n        if isinstance(state, InventoryState) and state.version == version\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        state.name: {\n            'path': os.path.join('/', version, state.name + '.yml'),\n            'content': state.content.get('path'),\n        } for state in inventory.states.all()\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        '__inventory__': inventory,\n        '__version__': version,\n        '__host__': socket.gethostname(),\n    }\n", "def get_logical_path_map(inventory, version):\n    return {\n        state.name: state.file_path\n        for state in inventory.states.values()\n        if state.version == version\n    }\n", "def get_logical_path_map(inventory, version):\n    if version == '':\n        return inventory.keys()\n    else:\n        return inventory[version].keys()\n", "def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        inventory = inventory['all']\n    else:\n        inventory = inventory[inventory['version'] == version]\n    return {state['name']: state['file_path'] for state in inventory}\n", "def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        inventory_source = inventory\n    else:\n        inventory_source = inventory.update_version(version)\n\n    if inventory_source is None:\n        return {}\n\n    paths = {}\n    for key, value in inventory_source.items():\n        if isinstance(value, dict):\n            paths.update(get_logical_path_map(value, version))\n        else:\n            if os.path.isabs(value):\n                paths[key] = value\n            else:\n                path = os.path.normpath(os.path.join(inventory_source.directory, value))\n                paths[key] = path\n    return paths\n", "def get_logical_path_map(inventory, version):\n    if version == '':\n        return inventory.keys()\n    else:\n        return inventory[version].keys()\n", "def get_logical_path_map(inventory, version):\n    if version == '':\n        version = inventory.get('__version__', '')\n\n    if version == 'latest':\n        version = inventory['__version__']\n\n    if not isinstance(inventory, dict):\n        raise AnsibleFilterError('Inventory is not a dict.')\n\n    try:\n        path_map = inventory[version]\n    except KeyError:\n        raise AnsibleFilterError('No inventory state file in the inventory dict.')\n\n    if not isinstance(path_map, dict):\n        raise AnsibleFilterError('Inventory state path_map is not a dict.')\n\n    return path_map\n"], "level": "self_contained", "generate_results": [{"generate_code": "def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        version = inventory.get_latest_version()\n    else:\n        version = parse_version_tag(version)\n\n    if not version:\n        return {}\n\n    inventory_root = inventory.get_root()\n    if not inventory_root:\n        return {}\n\n    return {\n        os.path.join(inventory_root, '%s.json' % item): os.path.join(inventory_root, '%s.yml' % item)\n        for item in inventory.get_paths(version)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if not inventory:\n        return {}\n    return {\n        state.path: state.relative_path\n        for state in inventory.states\n        if isinstance(state, InventoryState) and state.version == version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        state.name: {\n            'path': os.path.join('/', version, state.name + '.yml'),\n            'content': state.content.get('path'),\n        } for state in inventory.states.all()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        '__inventory__': inventory,\n        '__version__': version,\n        '__host__': socket.gethostname(),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    return {\n        state.name: state.file_path\n        for state in inventory.states.values()\n        if state.version == version\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version == '':\n        return inventory.keys()\n    else:\n        return inventory[version].keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        inventory = inventory['all']\n    else:\n        inventory = inventory[inventory['version'] == version]\n    return {state['name']: state['file_path'] for state in inventory}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version == 'latest':\n        inventory_source = inventory\n    else:\n        inventory_source = inventory.update_version(version)\n\n    if inventory_source is None:\n        return {}\n\n    paths = {}\n    for key, value in inventory_source.items():\n        if isinstance(value, dict):\n            paths.update(get_logical_path_map(value, version))\n        else:\n            if os.path.isabs(value):\n                paths[key] = value\n            else:\n                path = os.path.normpath(os.path.join(inventory_source.directory, value))\n                paths[key] = path\n    return paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version == '':\n        return inventory.keys()\n    else:\n        return inventory[version].keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_logical_path_map(inventory, version):\n    if version == '':\n        version = inventory.get('__version__', '')\n\n    if version == 'latest':\n        version = inventory['__version__']\n\n    if not isinstance(inventory, dict):\n        raise AnsibleFilterError('Inventory is not a dict.')\n\n    try:\n        path_map = inventory[version]\n    except KeyError:\n        raise AnsibleFilterError('No inventory state file in the inventory dict.')\n\n    if not isinstance(path_map, dict):\n        raise AnsibleFilterError('Inventory state path_map is not a dict.')\n\n    return path_map\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/inventory_validator.py", "project": "zimeon/ocfl-py", "name": "validate_fixity", "docstring": "Validate fixity block in inventory.\n\nCheck the structure of the fixity block and makes sure that only files\nlisted in the manifest are referenced.", "ques_id": "62b45e175108cfac7f210a19", "code": ["def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(\n        manifest_files,\n        all_versions=True\n    )\n    self.check_logical_path(fixity.logical_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.content_path, content_directories=fixity.content_directories)\n    self.check_logical_path(fixity.content_path_with_version, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.normalized_content_path, content_directories=fixity.normalized_content_directories)\n    self.check_content_path_with_version(fixity.version, version=fixity.version, logical_paths=fixity.logical_paths)\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_digests_present_and_used(manifest_files, self.digest_regex())\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n", "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity {0}\".format(fixity))\n\n    if fixity == \"error\":\n        self.error(fixity)\n        return\n\n    if self.digest_regex.match(fixity):\n        self.error(fixity)\n        return\n\n    # Check versions of the files\n    versions = self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_versions(versions, all_versions=True)\n\n    # Check if the files are in the same version as the one we are looking for\n    for file_path in manifest_files:\n        if self.where.match(os.path.basename(file_path)):\n            self.check_content_path(file_path, manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n    if self.digest_algorithm == \"sha512\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha256\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha512l\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha256l\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    else:\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.check_digests_present_and_used(manifest_files, digests_used={\"sha512\": self.digest_algorithm})\n", "def validate_fixity(self, fixity, manifest_files):\n\n    # check that the fixity is valid\n    for content_path in manifest_files:\n        content = self.content_directory.get_content(content_path)\n        if self.digest_regex.match(content.digest) is None:\n            self.log.error(\"Unsupported content digest for %s: %s\",\n                           content_path, content.digest)\n            self.digest_algorithm.add(content.digest)\n\n            if self.error is not None:\n                self.error(self.error)\n\n    return True\n", "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_logical_path(fixity.logical_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_logical_path(fixity.content_path_with_extension, version=fixity.version, logical_paths=fixity.logical_paths)\n", "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.lower() not in self.fixity_map:\n        self.error(\"Invalid fixity type '{}' for manifest files '{}'. Valid fixities are: {}\"\n                 .format(fixity, manifest_files, self.fixity_map.keys()))\n\n    return self.fixity_map[fixity.lower()](manifest_files)\n", "def validate_fixity(self, fixity, manifest_files):\n\n    # check for bad versions\n    if fixity.version not in self.spec_versions_supported:\n        self.error(\"Unsupported version: {}\".format(fixity.version))\n        self.error(\"Supported versions: {}\".format(self.spec_versions_supported))\n        self.log.warning(\"Did not understand version: {}\".format(fixity.version))\n        return\n\n    # check for bad paths\n    if not all([os.path.exists(path) for path in fixity.content_paths]):\n        self.error(\"Bad content paths: {}\".format(fixity.content_paths))\n        self.log.warning(\"Bad content paths: {}\".format(self.spec_content_paths))\n        return\n\n    # check for bad digests\n    if fixity.digest_algorithm not in self.digest_regex:\n        self.error(\"Unknown digest algorithm: {}\".format(fixity.digest_algorithm))\n        self.log.warning(\"Bad digest algorithm: {}\".format(fixity.digest_algorithm))\n        return\n", "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug('validate_fixity(%s)', fixity)\n\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    if fixity.normalize:\n        normalized_fixity = self.normalize_fixity(fixity)\n        self.check_digests_present_and_used(\n            normalized_fixity, digests_used=[self.id]\n        )\n    else:\n        normalized_fixity = fixity\n\n    if fixity.content_paths is None:\n        self.check_content_paths_map_to_versions(\n            manifest_files=manifest_files, all_versions=True\n        )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=manifest_files, content_paths=[self.content_path], all_versions=True\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=manifest_files, content_paths=normalized_fixity.content_paths, all_versions=True\n    )\n\n    self.check_logical_path(normalized_fixity.logical_path, versions=normalized_fixity.versions, logical_paths=normalized_fixity.logical_paths)\n", "def validate_fixity(self, fixity, manifest_files):\n\n    # Check the fixity object\n    if not isinstance(fixity, Fixity):\n        self.error(\"Fixity object is not of type 'Fixity'\")\n\n    # Check the version of the fixity\n    if fixity.version!= self.spec_version:\n        self.error(\"Fixity version ({}) does not match the expected version ({})\".format(\n            fixity.version, self.spec_version\n        ))\n\n    # Check the content paths\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_content_path(fixity.content_path, fixity.content_directories)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(\n        manifest_files,\n        all_versions=True\n    )\n    self.check_logical_path(fixity.logical_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.content_path, content_directories=fixity.content_directories)\n    self.check_logical_path(fixity.content_path_with_version, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.normalized_content_path, content_directories=fixity.normalized_content_directories)\n    self.check_content_path_with_version(fixity.version, version=fixity.version, logical_paths=fixity.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_digests_present_and_used(manifest_files, self.digest_regex())\n\n    # check the content paths\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug(\"Validating fixity {0}\".format(fixity))\n\n    if fixity == \"error\":\n        self.error(fixity)\n        return\n\n    if self.digest_regex.match(fixity):\n        self.error(fixity)\n        return\n\n    # Check versions of the files\n    versions = self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_versions(versions, all_versions=True)\n\n    # Check if the files are in the same version as the one we are looking for\n    for file_path in manifest_files:\n        if self.where.match(os.path.basename(file_path)):\n            self.check_content_path(file_path, manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    if self.digest_algorithm == \"sha512\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha256\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha512l\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    elif self.digest_algorithm == \"sha256l\":\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    else:\n        self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n\n    self.check_digests_present_and_used(manifest_files, digests_used={\"sha512\": self.digest_algorithm})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    # check that the fixity is valid\n    for content_path in manifest_files:\n        content = self.content_directory.get_content(content_path)\n        if self.digest_regex.match(content.digest) is None:\n            self.log.error(\"Unsupported content digest for %s: %s\",\n                           content_path, content.digest)\n            self.digest_algorithm.add(content.digest)\n\n            if self.error is not None:\n                self.error(self.error)\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_logical_path(fixity.logical_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_content_path(fixity.content_path, version=fixity.version, logical_paths=fixity.logical_paths)\n    self.check_logical_path(fixity.content_path_with_extension, version=fixity.version, logical_paths=fixity.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    if fixity.lower() not in self.fixity_map:\n        self.error(\"Invalid fixity type '{}' for manifest files '{}'. Valid fixities are: {}\"\n                 .format(fixity, manifest_files, self.fixity_map.keys()))\n\n    return self.fixity_map[fixity.lower()](manifest_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    # check for bad versions\n    if fixity.version not in self.spec_versions_supported:\n        self.error(\"Unsupported version: {}\".format(fixity.version))\n        self.error(\"Supported versions: {}\".format(self.spec_versions_supported))\n        self.log.warning(\"Did not understand version: {}\".format(fixity.version))\n        return\n\n    # check for bad paths\n    if not all([os.path.exists(path) for path in fixity.content_paths]):\n        self.error(\"Bad content paths: {}\".format(fixity.content_paths))\n        self.log.warning(\"Bad content paths: {}\".format(self.spec_content_paths))\n        return\n\n    # check for bad digests\n    if fixity.digest_algorithm not in self.digest_regex:\n        self.error(\"Unknown digest algorithm: {}\".format(fixity.digest_algorithm))\n        self.log.warning(\"Bad digest algorithm: {}\".format(fixity.digest_algorithm))\n        return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n    self.log.debug('validate_fixity(%s)', fixity)\n\n    self.check_digests_present_and_used(manifest_files, digests_used=[self.id])\n\n    if fixity.normalize:\n        normalized_fixity = self.normalize_fixity(fixity)\n        self.check_digests_present_and_used(\n            normalized_fixity, digests_used=[self.id]\n        )\n    else:\n        normalized_fixity = fixity\n\n    if fixity.content_paths is None:\n        self.check_content_paths_map_to_versions(\n            manifest_files=manifest_files, all_versions=True\n        )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=manifest_files, content_paths=[self.content_path], all_versions=True\n    )\n\n    self.check_content_paths_map_to_versions(\n        manifest_files=manifest_files, content_paths=normalized_fixity.content_paths, all_versions=True\n    )\n\n    self.check_logical_path(normalized_fixity.logical_path, versions=normalized_fixity.versions, logical_paths=normalized_fixity.logical_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_fixity(self, fixity, manifest_files):\n\n    # Check the fixity object\n    if not isinstance(fixity, Fixity):\n        self.error(\"Fixity object is not of type 'Fixity'\")\n\n    # Check the version of the fixity\n    if fixity.version!= self.spec_version:\n        self.error(\"Fixity version ({}) does not match the expected version ({})\".format(\n            fixity.version, self.spec_version\n        ))\n\n    # Check the content paths\n    self.check_content_paths_map_to_versions(manifest_files, all_versions=True)\n    self.check_content_path(fixity.content_path, fixity.content_directories)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list", "docstring": "Return the files in `path`", "ques_id": "62b463153879012d19481498", "code": ["def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n    files = []\n    for root, _, files in os.walk(path):\n        for file in files:\n            files.append(os.path.join(root, file))\n    return files\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    files = []\n    for root, dirs, files in os.walk(path):\n        for filename in files:\n            files.append(os.path.join(root, filename))\n        for subdirname in dirs:\n            files.extend(files_list(os.path.join(root, subdirname)))\n    return files\n", "def files_list(path):\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    for filename in os.listdir(path):\n        filepath = os.path.join(path, filename)\n        if os.path.isfile(filepath):\n            yield filepath\n", "def files_list(path):\n    files = []\n    if not os.path.isdir(path):\n        return files\n    for root, dirs, files in os.walk(path):\n        for name in files:\n            files_path = os.path.join(root, name)\n            files.append(files_path)\n    return files\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    if not os.path.isdir(path):\n        os.mkdir(path)\n    for filename in os.listdir(path):\n        filepath = os.path.join(path, filename)\n        if os.path.isfile(filepath):\n            yield filepath\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list(path):\n    return [f for f in os.listdir(path) if os.path.isfile(os.path.join(path, f))]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_group_files_by_xml_filename", "docstring": "Group files by their XML basename\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nxml_filename : str\n    XML filenames\nfiles : list\n    list of files in the folder or zipfile\n\nReturns\n-------\ndict\n    key: name of the XML files\n    value: Package", "ques_id": "62b463153879012d1948149a", "code": ["def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data.update(_group_files_by_xml(source, xml, files))\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_core(source, xml, files)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for filename in files:\n            if filename.endswith('.xml') and os.path.isfile(os.path.join(source, filename)):\n                data[xml_filename] = _eval_file(prefix=xml_filename, file_path=filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        logger.debug('Processing xml: %s', xml)\n        results[xml] = _group_files_by_xml(source, xml, files)\n    return results\n", "def _group_files_by_xml_filename(source, xmls, files):\n    logger.debug('Grouping files by xml filenames.')\n    data = {}\n    for xml_filename in xmls:\n        data[xml_filename] = []\n        for filename in files:\n            if filename.startswith(xml_filename + '.'):\n                data[xml_filename].append(filename)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = {}\n        for file_path in files:\n            file_path = os.path.join(source, file_path)\n            if not os.path.exists(file_path):\n                continue\n            data[xml][file_path] = _eval_file(prefix=xml, file_path=file_path)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    filenames = _eval_file(prefix=source, file_path=source)\n    for xml in xmls:\n        if xml not in filenames.keys():\n            continue\n        files.update({xml: filenames[xml]})\n    logger.debug(\"Grouped %d files by xmls\", len(files))\n    return files\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for file_path in _eval_file(prefix=xml_filename, file_path=source):\n            data[file_path] = _group_files_by_xml_filename(source=source, xmls=xmls, files=files)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_file_path = os.path.join(source, xml_file)\n        data[xml_file] = _eval_file(xml_file_path, files)\n    return data\n", "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_impl(source, xml, files)\n    return data\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data.update(_group_files_by_xml(source, xml, files))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_core(source, xml, files)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for filename in files:\n            if filename.endswith('.xml') and os.path.isfile(os.path.join(source, filename)):\n                data[xml_filename] = _eval_file(prefix=xml_filename, file_path=filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    results = {}\n    for xml in xmls:\n        logger.debug('Processing xml: %s', xml)\n        results[xml] = _group_files_by_xml(source, xml, files)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    logger.debug('Grouping files by xml filenames.')\n    data = {}\n    for xml_filename in xmls:\n        data[xml_filename] = []\n        for filename in files:\n            if filename.startswith(xml_filename + '.'):\n                data[xml_filename].append(filename)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = {}\n        for file_path in files:\n            file_path = os.path.join(source, file_path)\n            if not os.path.exists(file_path):\n                continue\n            data[xml][file_path] = _eval_file(prefix=xml, file_path=file_path)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    filenames = _eval_file(prefix=source, file_path=source)\n    for xml in xmls:\n        if xml not in filenames.keys():\n            continue\n        files.update({xml: filenames[xml]})\n    logger.debug(\"Grouped %d files by xmls\", len(files))\n    return files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_filename in xmls:\n        for file_path in _eval_file(prefix=xml_filename, file_path=source):\n            data[file_path] = _group_files_by_xml_filename(source=source, xmls=xmls, files=files)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml_file in xmls:\n        xml_file_path = os.path.join(source, xml_file)\n        data[xml_file] = _eval_file(xml_file_path, files)\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _group_files_by_xml_filename(source, xmls, files):\n    data = {}\n    for xml in xmls:\n        data[xml] = _group_files_by_xml_filename_impl(source, xml, files)\n    return data\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "match_file_by_prefix", "docstring": "Identify if a `file_path` belongs to a document package by a given `prefix`\n\nRetorna `True` para documentos pertencentes a um pacote.\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfile_path : str\n    File path\nReturns\n-------\nbool\n    True - file belongs to the package", "ques_id": "62b463153879012d1948149b", "code": ["def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    if file_path.startswith(prefix):\n        return True\n    if file_path.startswith('.' + prefix):\n        return True\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n\n    if not file_path.endswith(\"-\") and not file_path.endswith(\".\" + prefix):\n        return False\n\n    return True\n", "def match_file_by_prefix(prefix, file_path):\n    return (\n        file_path.startswith(prefix) and\n        not file_path.startswith(\".\" + prefix) and\n        not file_path.startswith(\".\" + \"-\")\n    )\n", "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        return True\n    if '-' in prefix and file_path.startswith('-' + prefix):\n        return True\n    if '.' in prefix and file_path.startswith('.' + prefix):\n        return True\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    if file_path.startswith(prefix):\n        return True\n    if file_path.startswith(\".\" + prefix):\n        return True\n    if file_path.startswith(\"-\" + prefix):\n        return True\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n    if file_path[len(prefix)] == '.':\n        return False\n    if file_path[len(prefix)] == '-':\n        return False\n    return True\n", "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        if file_path.endswith('-') or file_path.endswith('.'):\n            return True\n        else:\n            return False\n    else:\n        return False\n", "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            (file_path.split(prefix)[1] == '' or\n             file_path.split(prefix)[1][0] == '.'))\n", "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        return True\n    return False\n", "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    return file_path.startswith(prefix) and file_path.rsplit('-', 1)[1] == ''\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    if file_path.startswith(prefix):\n        return True\n    if file_path.startswith('.' + prefix):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n\n    if not file_path.endswith(\"-\") and not file_path.endswith(\".\" + prefix):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (\n        file_path.startswith(prefix) and\n        not file_path.startswith(\".\" + prefix) and\n        not file_path.startswith(\".\" + \"-\")\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        return True\n    if '-' in prefix and file_path.startswith('-' + prefix):\n        return True\n    if '.' in prefix and file_path.startswith('.' + prefix):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    if file_path.startswith(prefix):\n        return True\n    if file_path.startswith(\".\" + prefix):\n        return True\n    if file_path.startswith(\"-\" + prefix):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not file_path.startswith(prefix):\n        return False\n    if file_path[len(prefix)] == '.':\n        return False\n    if file_path[len(prefix)] == '-':\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        if file_path.endswith('-') or file_path.endswith('.'):\n            return True\n        else:\n            return False\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    return (file_path.startswith(prefix) and\n            (file_path.split(prefix)[1] == '' or\n             file_path.split(prefix)[1][0] == '.'))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if file_path.startswith(prefix):\n        return True\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def match_file_by_prefix(prefix, file_path):\n    if not prefix:\n        return True\n    return file_path.startswith(prefix) and file_path.rsplit('-', 1)[1] == ''\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "select_filenames_by_prefix", "docstring": "Get files which belongs to a document package.\n\nRetorna os arquivos da lista `files` cujos nomes iniciam com `prefix`\n\nParameters\n----------\nprefix : str\n    Filename prefix\nfiles : str list\n    Files paths\nReturns\n-------\nlist\n    files paths which basename files matches to prefix", "ques_id": "62b463153879012d1948149c", "code": ["def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    selected_files = []\n    for filename in files:\n        if match_file_by_prefix(prefix, filename):\n            selected_files.append(filename)\n    return selected_files\n", "def select_filenames_by_prefix(prefix, files):\n    results = []\n    for file_path in files:\n        for match in match_file_by_prefix(prefix, file_path):\n            results.append(file_path)\n    return results\n", "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = {}\n    for f in files:\n        f_path = os.path.join(prefix, f)\n        if match_file_by_prefix(f_path, prefix):\n            files_by_prefix[f] = f_path\n    return files_by_prefix\n", "def select_filenames_by_prefix(prefix, files):\n    for f in files:\n        for suffix in ['.xml', '.py']:\n            prefix_suffix = ''.join([prefix, suffix])\n            if f.endswith(prefix_suffix):\n                yield f[:-len(prefix_suffix)]\n", "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "def select_filenames_by_prefix(prefix, files):\n    result = []\n    for file_path in files:\n        match = _eval_file(prefix, file_path)\n        if match:\n            result.append(file_path)\n    return result\n", "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for xml_filename in files:\n        for f in _group_files_by_xml_filename(xml_filename, files):\n            if f.startswith(prefix):\n                matches.append(f)\n    return matches\n", "def select_filenames_by_prefix(prefix, files):\n    for file_path in files:\n        if match_file_by_prefix(prefix, file_path):\n            yield file_path\n", "def select_filenames_by_prefix(prefix, files):\n    result = []\n    for file_path in files:\n        name = os.path.basename(file_path)\n        if name.startswith(prefix):\n            result.append(file_path)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    selected_files = []\n    for filename in files:\n        if match_file_by_prefix(prefix, filename):\n            selected_files.append(filename)\n    return selected_files\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    results = []\n    for file_path in files:\n        for match in match_file_by_prefix(prefix, file_path):\n            results.append(file_path)\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    files_by_prefix = {}\n    for f in files:\n        f_path = os.path.join(prefix, f)\n        if match_file_by_prefix(f_path, prefix):\n            files_by_prefix[f] = f_path\n    return files_by_prefix\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    for f in files:\n        for suffix in ['.xml', '.py']:\n            prefix_suffix = ''.join([prefix, suffix])\n            if f.endswith(prefix_suffix):\n                yield f[:-len(prefix_suffix)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    return [f for f in files if match_file_by_prefix(prefix, f)]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    result = []\n    for file_path in files:\n        match = _eval_file(prefix, file_path)\n        if match:\n            result.append(file_path)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    matches = []\n    for xml_filename in files:\n        for f in _group_files_by_xml_filename(xml_filename, files):\n            if f.startswith(prefix):\n                matches.append(f)\n    return matches\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    for file_path in files:\n        if match_file_by_prefix(prefix, file_path):\n            yield file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def select_filenames_by_prefix(prefix, files):\n    result = []\n    for file_path in files:\n        name = os.path.basename(file_path)\n        if name.startswith(prefix):\n            result.append(file_path)\n    return result\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_folder", "docstring": "Get packages' data from folder\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nfolder : str\n    Folder of the package\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149d", "code": ["def _explore_folder(folder):\n    for filename in _group_files_by_xml_filename(folder, []):\n        filepath = os.path.join(folder, filename)\n        yield filepath\n", "def _explore_folder(folder):\n    for file_path in _group_files_by_xml_filename(folder, []):\n        file_name = os.path.basename(file_path)\n        logger.info('Found file \"{}\"'.format(file_name))\n", "def _explore_folder(folder):\n    for xml_filename, xml_file in _group_files_by_xml_filename(folder, []):\n        yield xml_file\n", "def _explore_folder(folder):\n    for file_path in os.listdir(folder):\n        file_path = os.path.join(folder, file_path)\n        if os.path.isfile(file_path):\n            filename = _eval_file(prefix=file_path.split(os.sep)[-1], file_path=file_path)\n            if filename:\n                yield filename\n", "def _explore_folder(folder):\n    for root, dirs, files in os.walk(folder):\n        for file_path in _group_files_by_xml_filename(root, files):\n            file_path = os.path.join(root, file_path)\n            logger.info('Processing file: {}'.format(file_path))\n            explore_source(file_path)\n", "def _explore_folder(folder):\n    for root, dirs, files in os.walk(folder):\n        for file_path in files:\n            file_path = os.path.join(root, file_path)\n            yield _group_files_by_xml_filename(file_path, dirs)\n", "def _explore_folder(folder):\n    for xml_filename in explore_source(folder):\n        filename = os.path.basename(xml_filename)\n        yield filename, _group_files_by_xml_filename(xml_filename)\n", "def _explore_folder(folder):\n    for xml_filename in _group_files_by_xml_filename(folder, []):\n        yield _eval_file(folder, xml_filename)\n", "def _explore_folder(folder):\n    for file_path in _group_files_by_xml_filename(folder, []):\n        file_path = file_path[len(folder):].replace(os.path.sep, '/')\n        logger.debug('Found file: {}'.format(file_path))\n        yield file_path\n", "def _explore_folder(folder):\n    for root, _, files in os.walk(folder):\n        for file_path in _group_files_by_xml_filename(root, files):\n            yield file_path\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_folder(folder):\n    for filename in _group_files_by_xml_filename(folder, []):\n        filepath = os.path.join(folder, filename)\n        yield filepath\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for file_path in _group_files_by_xml_filename(folder, []):\n        file_name = os.path.basename(file_path)\n        logger.info('Found file \"{}\"'.format(file_name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for xml_filename, xml_file in _group_files_by_xml_filename(folder, []):\n        yield xml_file\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for file_path in os.listdir(folder):\n        file_path = os.path.join(folder, file_path)\n        if os.path.isfile(file_path):\n            filename = _eval_file(prefix=file_path.split(os.sep)[-1], file_path=file_path)\n            if filename:\n                yield filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for root, dirs, files in os.walk(folder):\n        for file_path in _group_files_by_xml_filename(root, files):\n            file_path = os.path.join(root, file_path)\n            logger.info('Processing file: {}'.format(file_path))\n            explore_source(file_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for root, dirs, files in os.walk(folder):\n        for file_path in files:\n            file_path = os.path.join(root, file_path)\n            yield _group_files_by_xml_filename(file_path, dirs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for xml_filename in explore_source(folder):\n        filename = os.path.basename(xml_filename)\n        yield filename, _group_files_by_xml_filename(xml_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for xml_filename in _group_files_by_xml_filename(folder, []):\n        yield _eval_file(folder, xml_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for file_path in _group_files_by_xml_filename(folder, []):\n        file_path = file_path[len(folder):].replace(os.path.sep, '/')\n        logger.debug('Found file: {}'.format(file_path))\n        yield file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_folder(folder):\n    for root, _, files in os.walk(folder):\n        for file_path in _group_files_by_xml_filename(root, files):\n            yield file_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_eval_file", "docstring": "Identifica o tipo de arquivo do pacote: `asset` ou `rendition`.\n\nIdentifica o tipo de arquivo do pacote e atualiza `packages` com o tipo e\no endere\u00e7o do arquivo em an\u00e1lise.\n\nParameters\n----------\nprefix : str\n    nome do arquivo XML sem extens\u00e3o\nfilename : str\n    filename\nfile_folder : str\n    file folder\n\nReturns\n-------\ndict", "ques_id": "62b463153879012d1948149f", "code": ["def _eval_file(prefix, file_path):\n    # First select files that match the prefix\n    matches = []\n    for component_id, file_path in _group_files_by_xml_filename(file_path, prefix):\n        if _eval_file(prefix, file_path):\n            matches.append((component_id, file_path))\n    # Then check for other types of files that are not xml\n    for component_id, file_path in _group_files_by_xml_filename(file_path, prefix):\n        if not _eval_file(prefix, file_path):\n            continue\n        if not os.path.isfile(file_path):\n            continue\n        if not matches:\n            logger.debug(\"Found no matching files for prefix %s\", prefix)\n            return None\n        matches.append((component_id, file_path))\n    logger.debug(\"Found matching files for prefix %s\", prefix)\n    return matches\n", "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".xml\"):\n        # Select the right file type\n        xml_file = etree.parse(file_path).getroot()\n        if xml_file.tag == '{%s}fileType' % OPENSHIFT_NS:\n            return {\"component_id\": xml_file.attrib[\"componentID\"],\n                    \"file_path\": file_path,\n                    \"ftype\": \"xml\",\n                    \"file_path\": _group_files_by_xml_filename(\n                        source=xml_file, xmls=files)}\n        else:\n            logger.warning(\"Unknown file type for file %s: %s\",\n                           file_path, xml_file.tag)\n    return None\n", "def _eval_file(prefix, file_path):\n    if file_path.lower().endswith(('.xml', '.xml.gz')):\n        ftype = 'xml'\n    elif file_path.lower().endswith(('.pdf', '.pdf.gz')):\n        ftype = 'pdf'\n    else:\n        return None\n\n    if select_filenames_by_prefix(prefix, file_path):\n        return {\n            'component_id': file_path[:-4],\n            'file_path': file_path,\n            'ftype': ftype\n        }\n    else:\n        return None\n", "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".pdf\"):\n        return {\"component_id\": \"pdf\", \"file_path\": file_path}\n    if file_path.endswith((\".xml\", \".xsl\")):\n        return {\"component_id\": \"xml\", \"file_path\": file_path}\n    return None\n", "def _eval_file(prefix, file_path):\n    for component_id, file_path in _group_files_by_xml_filename(source=file_path, xmls=[]):\n        if file_path.endswith('.xml'):\n            return {component_id: file_path}\n        if component_id.startswith(prefix):\n            return {component_id: file_path}\n    return None\n", "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".pdf\"):\n        ftype = \"xml\"\n        logger.debug(\"Determining ftype from file %s\", file_path)\n\n    if file_path.endswith((\".csv\", \".txt\")):\n        return None\n\n    return {\"component_id\": None, \"file_path\": file_path, \"ftype\": ftype}\n", "def _eval_file(prefix, file_path):\n    if not prefix or prefix == '.':\n        return None\n    if file_path.endswith('.xml'):\n        return {'component_id': prefix, 'file_path': file_path}\n    for component, files in _group_files_by_xml_filename(file_path, files=True):\n        if component == prefix:\n            return {'component_id': component, 'file_path': file_path, 'ftype': 'xml',\n                    'file_path': _eval_file(prefix, files)}\n    return {'component_id': prefix, 'file_path': file_path, 'ftype': 'pdf'}\n", "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".tif\"):\n        ftype = \"tiff\"\n    elif file_path.endswith(\".png\"):\n        ftype = \"png\"\n    elif file_path.endswith(\".jpg\"):\n        ftype = \"jpg\"\n    elif file_path.endswith(\".jpeg\"):\n        ftype = \"jpeg\"\n    elif file_path.endswith(\".gif\"):\n        ftype = \"gif\"\n    if select_filenames_by_prefix(prefix, file_path):\n        return {\n            \"component_id\": os.path.basename(file_path),\n            \"file_path\": file_path,\n            \"ftype\": ftype,\n            \"file_path\": _eval_file(prefix, file_path),\n        }\n    return None\n", "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".txt\"):\n        ftype = \"txt\"\n    elif file_path.endswith(\".csv\"):\n        ftype = \"csv\"\n    elif file_path.endswith(\".xls\"):\n        ftype = \"xls\"\n    elif file_path.endswith(\".xlsx\"):\n        ftype = \"xlsx\"\n    elif file_path.endswith(\".ods\"):\n        ftype = \"ods\"\n    elif file_path.endswith(\".zip\"):\n        ftype = \"zip\"\n    return ftype\n", "def _eval_file(prefix, file_path):\n    if file_path.lower().endswith(('.pdf', '.xml')):\n        return {'component_id': 'f', 'file_path': file_path}\n    else:\n        return None\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _eval_file(prefix, file_path):\n    # First select files that match the prefix\n    matches = []\n    for component_id, file_path in _group_files_by_xml_filename(file_path, prefix):\n        if _eval_file(prefix, file_path):\n            matches.append((component_id, file_path))\n    # Then check for other types of files that are not xml\n    for component_id, file_path in _group_files_by_xml_filename(file_path, prefix):\n        if not _eval_file(prefix, file_path):\n            continue\n        if not os.path.isfile(file_path):\n            continue\n        if not matches:\n            logger.debug(\"Found no matching files for prefix %s\", prefix)\n            return None\n        matches.append((component_id, file_path))\n    logger.debug(\"Found matching files for prefix %s\", prefix)\n    return matches\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".xml\"):\n        # Select the right file type\n        xml_file = etree.parse(file_path).getroot()\n        if xml_file.tag == '{%s}fileType' % OPENSHIFT_NS:\n            return {\"component_id\": xml_file.attrib[\"componentID\"],\n                    \"file_path\": file_path,\n                    \"ftype\": \"xml\",\n                    \"file_path\": _group_files_by_xml_filename(\n                        source=xml_file, xmls=files)}\n        else:\n            logger.warning(\"Unknown file type for file %s: %s\",\n                           file_path, xml_file.tag)\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.lower().endswith(('.xml', '.xml.gz')):\n        ftype = 'xml'\n    elif file_path.lower().endswith(('.pdf', '.pdf.gz')):\n        ftype = 'pdf'\n    else:\n        return None\n\n    if select_filenames_by_prefix(prefix, file_path):\n        return {\n            'component_id': file_path[:-4],\n            'file_path': file_path,\n            'ftype': ftype\n        }\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.endswith(\".pdf\"):\n        return {\"component_id\": \"pdf\", \"file_path\": file_path}\n    if file_path.endswith((\".xml\", \".xsl\")):\n        return {\"component_id\": \"xml\", \"file_path\": file_path}\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    for component_id, file_path in _group_files_by_xml_filename(source=file_path, xmls=[]):\n        if file_path.endswith('.xml'):\n            return {component_id: file_path}\n        if component_id.startswith(prefix):\n            return {component_id: file_path}\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".pdf\"):\n        ftype = \"xml\"\n        logger.debug(\"Determining ftype from file %s\", file_path)\n\n    if file_path.endswith((\".csv\", \".txt\")):\n        return None\n\n    return {\"component_id\": None, \"file_path\": file_path, \"ftype\": ftype}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if not prefix or prefix == '.':\n        return None\n    if file_path.endswith('.xml'):\n        return {'component_id': prefix, 'file_path': file_path}\n    for component, files in _group_files_by_xml_filename(file_path, files=True):\n        if component == prefix:\n            return {'component_id': component, 'file_path': file_path, 'ftype': 'xml',\n                    'file_path': _eval_file(prefix, files)}\n    return {'component_id': prefix, 'file_path': file_path, 'ftype': 'pdf'}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".tif\"):\n        ftype = \"tiff\"\n    elif file_path.endswith(\".png\"):\n        ftype = \"png\"\n    elif file_path.endswith(\".jpg\"):\n        ftype = \"jpg\"\n    elif file_path.endswith(\".jpeg\"):\n        ftype = \"jpeg\"\n    elif file_path.endswith(\".gif\"):\n        ftype = \"gif\"\n    if select_filenames_by_prefix(prefix, file_path):\n        return {\n            \"component_id\": os.path.basename(file_path),\n            \"file_path\": file_path,\n            \"ftype\": ftype,\n            \"file_path\": _eval_file(prefix, file_path),\n        }\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    ftype = \"pdf\"\n    if file_path.endswith(\".txt\"):\n        ftype = \"txt\"\n    elif file_path.endswith(\".csv\"):\n        ftype = \"csv\"\n    elif file_path.endswith(\".xls\"):\n        ftype = \"xls\"\n    elif file_path.endswith(\".xlsx\"):\n        ftype = \"xlsx\"\n    elif file_path.endswith(\".ods\"):\n        ftype = \"ods\"\n    elif file_path.endswith(\".zip\"):\n        ftype = \"zip\"\n    return ftype\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _eval_file(prefix, file_path):\n    if file_path.lower().endswith(('.pdf', '.xml')):\n        return {'component_id': 'f', 'file_path': file_path}\n    else:\n        return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_rendition", "docstring": "{\n    \"original\": \"artigo02.pdf\",\n    \"en\": \"artigo02-en.pdf\",\n}", "ques_id": "62b463153879012d194814a1", "code": ["def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang in self._renditions:\n        self._renditions[lang][file_path] = None\n    else:\n        self._renditions[lang] = {file_path: None}\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang in self._renditions:\n        self._renditions[lang][file_path] = None\n    else:\n        self._renditions[lang] = {file_path: None}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    self._renditions[lang] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_rendition(self, lang, file_path):\n    if lang not in self._renditions:\n        self._renditions[lang] = {}\n    self._renditions[lang][file_path] = True\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "add_asset", "docstring": "\"{\n    \"artigo02-gf03.tiff\": \"/path/artigo02-gf03.tiff\",\n    \"artigo02-gf03.jpg\": \"/path/artigo02-gf03.jpg\",\n    \"artigo02-gf03.png\": \"/path/artigo02-gf03.png\",\n}", "ques_id": "62b463163879012d194814a2", "code": ["def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = []\n\n    self._assets[basename].append(file_path)\n", "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    if basename not in self._assets:\n        self._assets[basename] = []\n\n    self._assets[basename].append(file_path)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def add_asset(self, basename, file_path):\n    self._assets[basename] = file_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/models/packages.py", "project": "scieloorg/packtools", "name": "_explore_zipfile", "docstring": "Get packages' data from zip_path\n\nGroups files by their XML basename and returns data in dict format.\n\nParameters\n----------\nzip_path : str\n    zip file path\nReturns\n-------\ndict", "ques_id": "62b463163879012d194814a4", "code": ["def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _explore_folder(zip_path))\n", "def _explore_zipfile(zip_path):\n    # TODO: Consider using regex to match the filename pattern\n    for xml_filename, files in _group_files_by_xml_filename(zip_path, [\"*.xml\"]):\n        yield xml_filename, [f for f in files if f!= \"index.xml\"]\n", "def _explore_zipfile(zip_path):\n    logger.info('Exploiting zip file {}'.format(zip_path))\n    for xml_filename in _group_files_by_xml_filename(zip_path, ['xml']):\n        yield xml_filename\n", "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _read_xml_files())\n", "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _walk_xml_files(zip_path))\n", "def _explore_zipfile(zip_path):\n    file_paths = _group_files_by_xml_filename(zip_path, [], [])\n    return file_paths\n", "def _explore_zipfile(zip_path):\n    for xml_filename in _group_files_by_xml_filename(zip_path, []):\n        yield xml_filename\n", "def _explore_zipfile(zip_path):\n    xmls = []\n    files = []\n    with zipfile.ZipFile(zip_path) as zf:\n        for path, subdirs, files in walk(zip_path):\n            if files:\n                xmls.append(path)\n                files += [f for f in files if not f.endswith('.xml')]\n                logger.debug('Files: %s', files)\n                break\n            for subdir in subdirs:\n                subdir = path + '/' + subdir\n                xmls += _group_files_by_xml_filename(subdir, xmls, files)\n    return xmls, files\n", "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _explore_folder(zip_path))\n", "def _explore_zipfile(zip_path):\n    for xml_filename in _group_files_by_xml_filename(zip_path, []):\n        yield xml_filename\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _explore_folder(zip_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    # TODO: Consider using regex to match the filename pattern\n    for xml_filename, files in _group_files_by_xml_filename(zip_path, [\"*.xml\"]):\n        yield xml_filename, [f for f in files if f!= \"index.xml\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    logger.info('Exploiting zip file {}'.format(zip_path))\n    for xml_filename in _group_files_by_xml_filename(zip_path, ['xml']):\n        yield xml_filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _read_xml_files())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _walk_xml_files(zip_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    file_paths = _group_files_by_xml_filename(zip_path, [], [])\n    return file_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    for xml_filename in _group_files_by_xml_filename(zip_path, []):\n        yield xml_filename\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    xmls = []\n    files = []\n    with zipfile.ZipFile(zip_path) as zf:\n        for path, subdirs, files in walk(zip_path):\n            if files:\n                xmls.append(path)\n                files += [f for f in files if not f.endswith('.xml')]\n                logger.debug('Files: %s', files)\n                break\n            for subdir in subdirs:\n                subdir = path + '/' + subdir\n                xmls += _group_files_by_xml_filename(subdir, xmls, files)\n    return xmls, files\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    return _group_files_by_xml_filename(zip_path, _explore_folder(zip_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _explore_zipfile(zip_path):\n    for xml_filename in _group_files_by_xml_filename(zip_path, []):\n        yield xml_filename\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/file_utils.py", "project": "scieloorg/packtools", "name": "files_list_from_zipfile", "docstring": "Return the files in `zip_path`\n\nExample:\n\n```\n[\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200069.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.pdf',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071.xml',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf01.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf02.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf03.tif',\n    '2318-0889-tinf-33-0421/2318-0889-tinf-33-e200071-gf04.tif',\n]\n```", "ques_id": "62b463163879012d194814a6", "code": ["def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.filelist]\n", "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.namelist() if f.endswith('/')]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.filelist]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.encode('utf-8') for fname in zf.namelist()]\n", "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist() if not name.endswith('/')]\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    return [f for f in zip_path.namelist() if f.endswith('/')]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.filelist]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.filename for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [f.filename for f in zf.infolist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [fname.encode('utf-8') for fname in zf.namelist()]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def files_list_from_zipfile(zip_path):\n    with zipfile.ZipFile(zip_path) as zf:\n        return [name for name in zf.namelist() if not name.endswith('/')]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "fix_namespace_prefix_w", "docstring": "Convert text that defaults to 'w:st=\"' to 'w-st=\"'", "ques_id": "62b4631b3879012d194814dd", "code": ["def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*<w:st=\"[^\"]+\">\\s*</w:st>\\s*', 'w-st=\"\\\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s:\\s+w:([\\w\\-_]+)', r'w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r' w:(\\w+)=\"(.*?)\"', r' w-st=\"\\1\"', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=|w-st=)\\s*', r'\\g<1>-st=\\g<2>', content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=[\"\\'])(.*)(\\1>)',\n                  r'\\1-w-st=\\2', content)\n", "def fix_namespace_prefix_w(content):\n    match = re.search(r'\\w:(?:st=|em|t)=([^\"]+)', content)\n    if match:\n        return 'w-st=\"{}\"'.format(match.group(1))\n    return content\n", "def fix_namespace_prefix_w(content):\n    match = re.search(r\"\\w:(?:st|em)=(['\\\"])(.+?)\\1\", content)\n    if match:\n        return content.replace(match.group(1), \"w-st='{}'\".format(match.group(2)))\n    return content\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r\"\\bw:(st=|w:)\\s*=\\s*['\\\"](.+)['\\\"]\", r\"\\g<1>-\\g<2>\", content)\n", "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=\")(.+?)(\">)', r'\\1-w-st=\"\\2\"', content)\n", "def fix_namespace_prefix_w(content):\n    m = re.match(r\"\"\"\\\n            <meta name=\"property-group[^\"]+content=['\"](.+?)[\"\"]\"\"\",\n            content, re.M)\n    if m:\n        return content.replace(\n            '<meta name=\"property-group[^\"]+content=\"%s\">' % m.group(1),\n            '<meta name=\"property-group[^\"]+content=\"w-st=\"%s\">' % m.group(1))\n    return content\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*<w:st=\"[^\"]+\">\\s*</w:st>\\s*', 'w-st=\"\\\\1\"', content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s:\\s+w:([\\w\\-_]+)', r'w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r' w:(\\w+)=\"(.*?)\"', r' w-st=\"\\1\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=|w-st=)\\s*', r'\\g<1>-st=\\g<2>', content)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=[\"\\'])(.*)(\\1>)',\n                  r'\\1-w-st=\\2', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    match = re.search(r'\\w:(?:st=|em|t)=([^\"]+)', content)\n    if match:\n        return 'w-st=\"{}\"'.format(match.group(1))\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    match = re.search(r\"\\w:(?:st|em)=(['\\\"])(.+?)\\1\", content)\n    if match:\n        return content.replace(match.group(1), \"w-st='{}'\".format(match.group(2)))\n    return content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r\"\\bw:(st=|w:)\\s*=\\s*['\\\"](.+)['\\\"]\", r\"\\g<1>-\\g<2>\", content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    return re.sub(r'\\s*w:(st=\")(.+?)(\">)', r'\\1-w-st=\"\\2\"', content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fix_namespace_prefix_w(content):\n    m = re.match(r\"\"\"\\\n            <meta name=\"property-group[^\"]+content=['\"](.+?)[\"\"]\"\"\",\n            content, re.M)\n    if m:\n        return content.replace(\n            '<meta name=\"property-group[^\"]+content=\"%s\">' % m.group(1),\n            '<meta name=\"property-group[^\"]+content=\"w-st=\"%s\">' % m.group(1))\n    return content\n", "is_pass": true, "return_code": 0}]}
{"file_path": "packtools/sps/utils/xml_utils.py", "project": "scieloorg/packtools", "name": "match_pubdate", "docstring": "Returns the first match in the pubdate_xpaths list", "ques_id": "62b463283879012d1948153d", "code": ["def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            item\n            for item in pubdate_xpaths\n            if node.xpath(item)\n        ),\n        None,\n    )\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        found = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if found:\n            return found[0]\n    return None\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        matches = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if matches:\n            return matches[0]\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            xpath\n            for xpath in pubdate_xpaths\n            if xpath.search(node.text)\n        ),\n        None,\n    )\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (x for x in pubdate_xpaths if x.match(node)),\n        None,\n        \"Couldn't find a publication date for %s.\" % node.tag,\n    )\n", "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        node.xpath(pubdate_xpath)[0]\n        for pubdate_xpath in pubdate_xpaths\n    ), None)\n", "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n"], "level": "self_contained", "generate_results": [{"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            item\n            for item in pubdate_xpaths\n            if node.xpath(item)\n        ),\n        None,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        found = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if found:\n            return found[0]\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        matches = node.xpath(pubdate_xpath, namespaces=NSMAP)\n        if matches:\n            return matches[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (\n            xpath\n            for xpath in pubdate_xpaths\n            if xpath.search(node.text)\n        ),\n        None,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return node.xpath(pubdate_xpaths[0])[0].text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next(\n        (x for x in pubdate_xpaths if x.match(node)),\n        None,\n        \"Couldn't find a publication date for %s.\" % node.tag,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    return next((\n        node.xpath(pubdate_xpath)[0]\n        for pubdate_xpath in pubdate_xpaths\n    ), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match_pubdate(node, pubdate_xpaths):\n    for pubdate_xpath in pubdate_xpaths:\n        match = pubdate_xpath(node)\n        if match:\n            return match\n", "is_pass": false, "return_code": 1}]}
{"file_path": "packtools/sps/models/front_articlemeta_issue.py", "project": "scieloorg/packtools", "name": "_extract_number_and_supplment_from_issue_element", "docstring": "Extract the possible values of number and suppl from the contents of issue.", "ques_id": "62b463303879012d19481579", "code": ["def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    sup = issue.find('supplement').text\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//Number')\n    sup = issue.find('.//Supply')\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    sup = None\n    for child in issue.iterchildren():\n        if child.tag == 'Number':\n            number = child.text\n        elif child.tag == 'Supply':\n            sup = child.text\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('sb:Number', NS).text\n    sup = issue.find('sb:Supply', NS).text\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    sup = issue.find('sup').text\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    supplement = ''\n    for element in issue.iter(tag=\"Number\"):\n        if element.text:\n            number = element.text\n    for element in issue.iter(tag=\"Supplement\"):\n        if element.text:\n            supplement = element.text\n    return number, supplement\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//{http://www.loc.gov/standards/issn/1.0}number')\n    sup = issue.find('.//{http://www.loc.gov/standards/issn/1.0}supplement')\n    if number is not None and sup is not None:\n        return (number.text, sup.text)\n    else:\n        raise ValueError('Cannot find number or supplement for issue %s' % issue)\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    if issue.find('sc:Number') is not None:\n        number = issue.find('sc:Number').text\n\n    if issue.find('sc:Sup') is not None:\n        suppl = issue.find('sc:Sup').text\n\n    return number, suppl\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = _extract_text_from_issue_element(issue, 'number')\n    sup = _extract_text_from_issue_element(issue,'supplement')\n\n    return number, sup\n", "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    if issue.find('xbrli:Number', namespaces=NSMAP) is not None:\n        number = issue.find('xbrli:Number', namespaces=NSMAP).text\n    if issue.find('xbrli:SupportingInformation', namespaces=NSMAP) is not None:\n        suppl = issue.find('xbrli:SupportingInformation', namespaces=NSMAP).text\n    return number, suppl\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    sup = issue.find('supplement').text\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//Number')\n    sup = issue.find('.//Supply')\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    sup = None\n    for child in issue.iterchildren():\n        if child.tag == 'Number':\n            number = child.text\n        elif child.tag == 'Supply':\n            sup = child.text\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('sb:Number', NS).text\n    sup = issue.find('sb:Supply', NS).text\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('number').text\n    sup = issue.find('sup').text\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = ''\n    supplement = ''\n    for element in issue.iter(tag=\"Number\"):\n        if element.text:\n            number = element.text\n    for element in issue.iter(tag=\"Supplement\"):\n        if element.text:\n            supplement = element.text\n    return number, supplement\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = issue.find('.//{http://www.loc.gov/standards/issn/1.0}number')\n    sup = issue.find('.//{http://www.loc.gov/standards/issn/1.0}supplement')\n    if number is not None and sup is not None:\n        return (number.text, sup.text)\n    else:\n        raise ValueError('Cannot find number or supplement for issue %s' % issue)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n\n    if issue.find('sc:Number') is not None:\n        number = issue.find('sc:Number').text\n\n    if issue.find('sc:Sup') is not None:\n        suppl = issue.find('sc:Sup').text\n\n    return number, suppl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = _extract_text_from_issue_element(issue, 'number')\n    sup = _extract_text_from_issue_element(issue,'supplement')\n\n    return number, sup\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _extract_number_and_supplment_from_issue_element(issue):\n    number = None\n    suppl = None\n    if issue.find('xbrli:Number', namespaces=NSMAP) is not None:\n        number = issue.find('xbrli:Number', namespaces=NSMAP).text\n    if issue.find('xbrli:SupportingInformation', namespaces=NSMAP) is not None:\n        suppl = issue.find('xbrli:SupportingInformation', namespaces=NSMAP).text\n    return number, suppl\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "pretty", "docstring": "Return a pretty formatted representation of self.", "ques_id": "62b46740d2f69a53b466171a", "code": ["def pretty(self, indent=0, debug=False):\n    details = (\n        \"{0}({1})\"\n    ).format(\n        self.__class__.__name__,\n        \", \".join(map(pretty, self.details)),\n    )\n    if self.iscanonical:\n        details += \" ({})\".format(self.iscanonical)\n    if debug:\n        return (\n            \" \" * indent\n            + f\"{self.__class__.__name__}({self.iscanonical})\"\n            + f\"{details}\"\n        )\n    return (\n        \" \" * indent\n        + f\"{self.__class__.__name__}({details})\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if debug:\n        debug_details += f\"\\nDEBUG     : {self.debug}\"\n        debug_details += f\"\\nPREDICTIONS: {self.predictions}\"\n        debug_details += f\"\\nSAMPLES:    {self.samples}\"\n        debug_details += f\"\\n\"\n\n    if self.iscanonical:\n        return (\n            f\"({indent} \"\n            f\"'{self.obj}')\"\n        )\n\n    return (\n        f\"({indent} '{self.obj}' \"\n        f\"{debug_details}\"\n        f\"'{self.samples}' \"\n        f\"{indent} '{self.pretty(indent + 1, debug)}')\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" => \"\n    debug_details += \"iscanonical: {}\".format(self.iscanonical)\n    if self.dual:\n        debug_details += \", dual: {}\".format(self.dual)\n    if debug:\n        return f\"{indent}{self.__class__.__name__}({debug_details}{self.obj})\"\n    else:\n        return f\"{indent}{self.__class__.__name__}({debug_details}{self.obj})\"\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" => \"\n        debug_details += f\"{self.__class__.__name__}({self.obj})\"\n    else:\n        debug_details += \" => False\"\n\n    debug_details += \"({})\".format(self.sort_order)\n    if debug:\n        return f\"{debug_details} ({self.iscanonical})\"\n    else:\n        return debug_details\n", "def pretty(self, indent=0, debug=False):\n    if debug:\n        return \"{}('{}')\".format(self.__class__.__name__, self.obj)\n    else:\n        return \"{}({})\".format(self.__class__.__name__, self.obj)\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += f\"'{self.obj}'\"\n    else:\n        debug_details += f\"{self.obj}\"\n\n    return f\"{indent}{self.__class__.__name__}({debug_details}{self.dual})\"\n", "def pretty(self, indent=0, debug=False):\n    debug_details = f\"{self.iscanonical}\" if self.iscanonical else \"\"\n    return (\n        \"\\n\"\n        + indent\n        + f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\" if debug else \" (debug)\"\n    return (\n        f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n    )\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \", \".join(\n        [\"{}={!r}\".format(name, value) for name, value in self._debug_details]\n    )\n    if debug:\n        debug_details = f\"debug: {debug_details}\"\n    else:\n        debug_details = \"\"\n    return (\n        \"{}{}({})\"\n        \"\".format(\n            indent * \" \" + f\"{self.__class__.__name__}({debug_details})\",\n            indent,\n            self.__str__(),\n        )\n        if indent > 0\n        else self.__str__()\n    )\n", "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" is canonical\"\n    else:\n        debug_details += \" is not canonical\"\n    if debug:\n        return (\n            f\"{indent}\"\n            f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n            f\"{indent}\"\n        )\n    else:\n        return f\"{indent}{self.__class__.__name__}({self.obj})\"\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pretty(self, indent=0, debug=False):\n    details = (\n        \"{0}({1})\"\n    ).format(\n        self.__class__.__name__,\n        \", \".join(map(pretty, self.details)),\n    )\n    if self.iscanonical:\n        details += \" ({})\".format(self.iscanonical)\n    if debug:\n        return (\n            \" \" * indent\n            + f\"{self.__class__.__name__}({self.iscanonical})\"\n            + f\"{details}\"\n        )\n    return (\n        \" \" * indent\n        + f\"{self.__class__.__name__}({details})\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if debug:\n        debug_details += f\"\\nDEBUG     : {self.debug}\"\n        debug_details += f\"\\nPREDICTIONS: {self.predictions}\"\n        debug_details += f\"\\nSAMPLES:    {self.samples}\"\n        debug_details += f\"\\n\"\n\n    if self.iscanonical:\n        return (\n            f\"({indent} \"\n            f\"'{self.obj}')\"\n        )\n\n    return (\n        f\"({indent} '{self.obj}' \"\n        f\"{debug_details}\"\n        f\"'{self.samples}' \"\n        f\"{indent} '{self.pretty(indent + 1, debug)}')\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" => \"\n    debug_details += \"iscanonical: {}\".format(self.iscanonical)\n    if self.dual:\n        debug_details += \", dual: {}\".format(self.dual)\n    if debug:\n        return f\"{indent}{self.__class__.__name__}({debug_details}{self.obj})\"\n    else:\n        return f\"{indent}{self.__class__.__name__}({debug_details}{self.obj})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" => \"\n        debug_details += f\"{self.__class__.__name__}({self.obj})\"\n    else:\n        debug_details += \" => False\"\n\n    debug_details += \"({})\".format(self.sort_order)\n    if debug:\n        return f\"{debug_details} ({self.iscanonical})\"\n    else:\n        return debug_details\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    if debug:\n        return \"{}('{}')\".format(self.__class__.__name__, self.obj)\n    else:\n        return \"{}({})\".format(self.__class__.__name__, self.obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += f\"'{self.obj}'\"\n    else:\n        debug_details += f\"{self.obj}\"\n\n    return f\"{indent}{self.__class__.__name__}({debug_details}{self.dual})\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = f\"{self.iscanonical}\" if self.iscanonical else \"\"\n    return (\n        \"\\n\"\n        + indent\n        + f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\" if debug else \" (debug)\"\n    return (\n        f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \", \".join(\n        [\"{}={!r}\".format(name, value) for name, value in self._debug_details]\n    )\n    if debug:\n        debug_details = f\"debug: {debug_details}\"\n    else:\n        debug_details = \"\"\n    return (\n        \"{}{}({})\"\n        \"\".format(\n            indent * \" \" + f\"{self.__class__.__name__}({debug_details})\",\n            indent,\n            self.__str__(),\n        )\n        if indent > 0\n        else self.__str__()\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pretty(self, indent=0, debug=False):\n    debug_details = \"\"\n    if self.iscanonical:\n        debug_details += \" is canonical\"\n    else:\n        debug_details += \" is not canonical\"\n    if debug:\n        return (\n            f\"{indent}\"\n            f\"{self.__class__.__name__}({debug_details}{self.obj})\"\n            f\"{indent}\"\n        )\n    else:\n        return f\"{indent}{self.__class__.__name__}({self.obj})\"\n", "is_pass": false, "return_code": 1}]}
{"file_path": "boolean/boolean.py", "project": "bastikr/boolean", "name": "absorb", "docstring": "Given an `args` sequence of expressions, return a new list of expression\napplying absorption and negative absorption.\n\nSee https://en.wikipedia.org/wiki/Absorption_law\n\nAbsorption::\n\n    A & (A | B) = A, A | (A & B) = A\n\nNegative absorption::\n\n    A & (~A | B) = A & B, A | (~A & B) = A | B", "ques_id": "62b46746d2f69a53b4661722", "code": ["def absorb(self, args):\n    args = list(args)\n    for i, expr in enumerate(args):\n        if isinstance(expr, self.__class__):\n            args[i] = expr.absorb()\n        else:\n            if expr == self.NOT:\n                args[i] = self.NOT\n            elif expr == self.AND:\n                args[i] = self\n            elif expr == self.OR:\n                args[i] = args[i - 1] | self\n            elif expr == self.XOR:\n                args[i] = args[i - 1] ^ self\n            elif expr == self.ANDOR:\n                args[i] = self & args[i - 1]\n            elif expr == self.XOROROR:\n                args[i] = self ^ args[i - 1]\n            elif expr", "def absorb(self, args):\n    args = list(args)\n    if len(args) > 1:\n        # If more than one argument is given, return the same expression\n        # as before.\n        return args[0]\n    elif len(args) == 1:\n        # If only one argument is given, return it.\n        return args[0]\n\n    # If no argument is given, return an identity expression.\n    expr = self.identity\n    for arg in args:\n        expr = expr.absorb(arg)\n    return expr\n", "def absorb(self, args):\n    args = list(args)\n    if self == args[0]:\n        return args\n\n    if self.iscanonical:\n        for i in range(1, len(args)):\n            args[i] = self - args[i]\n        return args\n\n    args = [self] + args\n    return self._pyoperator(*args)\n", "def absorb(self, args):\n    args = tuple(args)\n    if len(args) < 2:\n        raise IndexError(\"absorb() takes at least 2 arguments\")\n    args = tuple([arg.absorb() for arg in args])\n    if args in self.dual:\n        return self\n    else:\n        self.dual.add(args)\n        return self.__class__(args)\n", "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        expr = args[0]\n        if isinstance(expr, self.__class__):\n            if self.iscanonical == expr.iscanonical:\n                continue\n            else:\n                args = [expr.args[0]]\n        elif isinstance(expr, Symbol):\n            if self.iscanonical == Symbol.iscanonical:\n                continue\n            else:\n                args = [self]\n        elif isinstance(expr, Monadic):\n            args = [self]\n        elif isinstance(expr, Add):\n            args = args + expr.args\n        elif isinstance(expr, Mul):\n            args = args + [arg for arg in args if arg not in expr.args]\n        elif isinstance(expr, Division):\n  ", "def absorb(self, args):\n    args = tuple(args)\n    if args in self.annihilator.args:\n        return self\n    args = tuple([arg if self.iscanonical(arg) else arg.absorb(args)\n                  for arg in args])\n    return self.__class__(*args)\n", "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if isinstance(arg, self.__class__):\n            args[i] = arg.absorb()\n        else:\n            if arg == self.identity:\n                continue\n            args[i] = self.NOT(arg)\n    return self._pyoperator(*args)\n", "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        return args[0] + self.args[0]\n    elif len(args) == 2:\n        return self.args[0] + args[1]\n    else:\n        return self.NOT(self)\n", "def absorb(self, args):\n    args = list(args)\n    syms = [arg.symbol for arg in args]\n    for i, a in enumerate(self.args):\n        if a.symbol not in syms:\n            self.args[i] = a.absorb(args[i])\n            syms.append(a.symbol)\n    return self\n", "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if isinstance(arg, self.__class__):\n            args[i] = arg.absorb()\n        else:\n            if arg == self.NOT:\n                args[i] = self\n            else:\n                args[i] = self.absorb(arg)\n    return self.__class__(*args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i, expr in enumerate(args):\n        if isinstance(expr, self.__class__):\n            args[i] = expr.absorb()\n        else:\n            if expr == self.NOT:\n                args[i] = self.NOT\n            elif expr == self.AND:\n                args[i] = self\n            elif expr == self.OR:\n                args[i] = args[i - 1] | self\n            elif expr == self.XOR:\n                args[i] = args[i - 1] ^ self\n            elif expr == self.ANDOR:\n                args[i] = self & args[i - 1]\n            elif expr == self.XOROROR:\n                args[i] = self ^ args[i - 1]\n            elif expr", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    if len(args) > 1:\n        # If more than one argument is given, return the same expression\n        # as before.\n        return args[0]\n    elif len(args) == 1:\n        # If only one argument is given, return it.\n        return args[0]\n\n    # If no argument is given, return an identity expression.\n    expr = self.identity\n    for arg in args:\n        expr = expr.absorb(arg)\n    return expr\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    if self == args[0]:\n        return args\n\n    if self.iscanonical:\n        for i in range(1, len(args)):\n            args[i] = self - args[i]\n        return args\n\n    args = [self] + args\n    return self._pyoperator(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = tuple(args)\n    if len(args) < 2:\n        raise IndexError(\"absorb() takes at least 2 arguments\")\n    args = tuple([arg.absorb() for arg in args])\n    if args in self.dual:\n        return self\n    else:\n        self.dual.add(args)\n        return self.__class__(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        expr = args[0]\n        if isinstance(expr, self.__class__):\n            if self.iscanonical == expr.iscanonical:\n                continue\n            else:\n                args = [expr.args[0]]\n        elif isinstance(expr, Symbol):\n            if self.iscanonical == Symbol.iscanonical:\n                continue\n            else:\n                args = [self]\n        elif isinstance(expr, Monadic):\n            args = [self]\n        elif isinstance(expr, Add):\n            args = args + expr.args\n        elif isinstance(expr, Mul):\n            args = args + [arg for arg in args if arg not in expr.args]\n        elif isinstance(expr, Division):\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = tuple(args)\n    if args in self.annihilator.args:\n        return self\n    args = tuple([arg if self.iscanonical(arg) else arg.absorb(args)\n                  for arg in args])\n    return self.__class__(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if isinstance(arg, self.__class__):\n            args[i] = arg.absorb()\n        else:\n            if arg == self.identity:\n                continue\n            args[i] = self.NOT(arg)\n    return self._pyoperator(*args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    if len(args) == 1:\n        return args[0] + self.args[0]\n    elif len(args) == 2:\n        return self.args[0] + args[1]\n    else:\n        return self.NOT(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    syms = [arg.symbol for arg in args]\n    for i, a in enumerate(self.args):\n        if a.symbol not in syms:\n            self.args[i] = a.absorb(args[i])\n            syms.append(a.symbol)\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def absorb(self, args):\n    args = list(args)\n    for i, arg in enumerate(args):\n        if isinstance(arg, self.__class__):\n            args[i] = arg.absorb()\n        else:\n            if arg == self.NOT:\n                args[i] = self\n            else:\n                args[i] = self.absorb(arg)\n    return self.__class__(*args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/krake/controller/kubernetes/hooks.py", "project": "rak-n-rok/Krake", "name": "on", "docstring": "Decorator function to add a new handler to the registry.\n\nArgs:\n    hook (HookType): Hook attribute for which to register the handler.\n\nReturns:\n    callable: Decorator for registering listeners for the specified\n    hook.", "ques_id": "62b86707b4d922cb0e688c2a", "code": ["def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "def on(self, hook):\n    def wrapper(handler):\n        if hook not in self.registry:\n            self.registry[hook] = handler\n        return handler\n    return wrapper\n", "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook].append(func)\n        return func\n\n    return wrapper\n", "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = set()\n        self.registry[hook].add(func)\n        return func\n\n    return decorator\n", "def on(self, hook):\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = {}\n        return func\n    return decorator\n", "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook] = func\n        return func\n\n    return wrapper\n", "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = []\n        self.registry[hook].append(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def wrapper(handler):\n        if hook not in self.registry:\n            self.registry[hook] = handler\n        return handler\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook].append(func)\n        return func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = set()\n        self.registry[hook].add(func)\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        if hook not in self.registry:\n            self.registry[hook] = {}\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n\n    def wrapper(func):\n        self.registry[hook] = func\n        return func\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def on(self, hook):\n    def decorator(func):\n        self.registry[hook] = func\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}]}
{"file_path": "krake/tests/conftest.py", "project": "rak-n-rok/Krake", "name": "base_config", "docstring": "Creates a configuration with some simple parameters, which have a default value\nthat can be set.\n\nArgs:\n    user (str): the name of the user for the static authentication\n    etcd_host (str): the host for the database.\n    etcd_port (int): the port for the database.\n\nReturns:\n    dict: the created configuration.", "ques_id": "62b86729b4d922cb0e688c2f", "code": ["def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": {\n            \"etcd\": {\n                \"/\": {\n                    \"tls\": True,\n                    \"authentication\": \"basic\",\n                    \"authorization\": \"Basic dXNlcjpwYXNz\"\n                }\n            }\n        },\n        \"log\": {\n            \"/\": {\n                \"tls\": False,\n                \"authentication\": \"basic\",\n                \"authorization\": \"Basic dXNlcjpwYXNz\"\n            }\n        },\n        \"tls\": False,\n        \"auth\": {\n            \"user\": \"\",\n           ", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": False,\n        \"authentication\": \"password\",\n        \"authorization\": \"password\",\n        \"docs\": \"hello world\",\n        \"log\": \"hello world\",\n    }\n    config.update({\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n        },\n        \"tls-client\": {\n            \"version\": \"1.2.3\",\n        },\n        \"client\": {\n            \"version\": \"1.2.3\",\n        },\n    })\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": False,\n        \"authentication\": \"basic\",\n        \"authorization\": \"password:\",\n        \"docs\": \"\",\n        \"log\": \"\"\n    }\n    config['etcd'] = {\n        'host': etcd_host,\n        'port': etcd_port\n    }\n    return config\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": False,\n        \"log\": False,\n        \"tls\": False,\n        \"authentication\": \"basic\",\n        \"authorization\": \"basic\",\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": True,\n        \"authentication\": \"basic\",\n        \"authorization\": \"basic\",\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"certificate-authority\": {\n                \"type\": \"x509-external\",\n                \"certificate\": \"/tmp/tls.crt\",\n                \"private-key\": \"/tmp/tls.key\"\n            }\n        },\n        \"docs\": True,\n        \"log\": True,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"log\": \"/var/log/etcd.log\",\n        \"docs\": \"/var/www/html/\",\n        \"authorization\": \"Basic %s\" % b64encode(b\"%s:%s\" % (user, etcd_port)).decode(),\n        \"tls\": True,\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd\": {\n            \"authorization\": \"token %s\" % user,\n            \"docs\": \"docs %s\" % user,\n            \"log\": \"log %s\" % user,\n        },\n        \"simple_config\": {\n            \"tls\": False,\n            \"authentication\": \"\",\n            \"authorization\": \"\",\n            \"etcd\": {\n                \"docs\": \"docs %s\" % user,\n                \"log\": \"log %s\" % user,\n            },\n            \"docs\": \"docs %s\" % user,\n            \"log\": \"log %s\" % user,\n        },\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"tls\": False,\n        \"authentication\": \"token\",\n        \"authorization\": \"token\",\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"tls\": True,\n            \"docs\": True,\n            \"log\": True\n        }\n    }\n", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": {\n            \"auth\": {\n                \"type\": \"basic\",\n                \"username\": \"admin\",\n                \"password\": \"password\"\n            },\n            \"tls\": {\n                \"type\": \"basic\",\n                \"certificate\": \"/etc/ssl/certs/ca-certificates.crt\",\n                \"privatekey\": \"/etc/ssl/private/ca-key.pem\",\n                \"certificateAuthorities\": [\"/etc/ssl/certs/ca-certificates.crt\"]\n            }\n        },\n        \"log\": {\n            \"level\": \"debug\",\n            \"logFile\": \"/var/log/ec2/ec2_event_log.log\"\n        ", "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": \"docs\",\n        \"log\": \"log\",\n        \"tls\": \"tls\",\n        \"authentication\": \"authentication\",\n        \"authorization\": \"authorization\",\n    }\n"], "level": "self_contained", "generate_results": [{"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": {\n            \"etcd\": {\n                \"/\": {\n                    \"tls\": True,\n                    \"authentication\": \"basic\",\n                    \"authorization\": \"Basic dXNlcjpwYXNz\"\n                }\n            }\n        },\n        \"log\": {\n            \"/\": {\n                \"tls\": False,\n                \"authentication\": \"basic\",\n                \"authorization\": \"Basic dXNlcjpwYXNz\"\n            }\n        },\n        \"tls\": False,\n        \"auth\": {\n            \"user\": \"\",\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": False,\n        \"authentication\": \"password\",\n        \"authorization\": \"password\",\n        \"docs\": \"hello world\",\n        \"log\": \"hello world\",\n    }\n    config.update({\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n        },\n        \"tls-client\": {\n            \"version\": \"1.2.3\",\n        },\n        \"client\": {\n            \"version\": \"1.2.3\",\n        },\n    })\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    config = {\n        \"tls\": False,\n        \"authentication\": \"basic\",\n        \"authorization\": \"password:\",\n        \"docs\": \"\",\n        \"log\": \"\"\n    }\n    config['etcd'] = {\n        'host': etcd_host,\n        'port': etcd_port\n    }\n    return config\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": False,\n        \"log\": False,\n        \"tls\": False,\n        \"authentication\": \"basic\",\n        \"authorization\": \"basic\",\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"tls\": True,\n        \"authentication\": \"basic\",\n        \"authorization\": \"basic\",\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"certificate-authority\": {\n                \"type\": \"x509-external\",\n                \"certificate\": \"/tmp/tls.crt\",\n                \"private-key\": \"/tmp/tls.key\"\n            }\n        },\n        \"docs\": True,\n        \"log\": True,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"log\": \"/var/log/etcd.log\",\n        \"docs\": \"/var/www/html/\",\n        \"authorization\": \"Basic %s\" % b64encode(b\"%s:%s\" % (user, etcd_port)).decode(),\n        \"tls\": True,\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"etcd\": {\n            \"authorization\": \"token %s\" % user,\n            \"docs\": \"docs %s\" % user,\n            \"log\": \"log %s\" % user,\n        },\n        \"simple_config\": {\n            \"tls\": False,\n            \"authentication\": \"\",\n            \"authorization\": \"\",\n            \"etcd\": {\n                \"docs\": \"docs %s\" % user,\n                \"log\": \"log %s\" % user,\n            },\n            \"docs\": \"docs %s\" % user,\n            \"log\": \"log %s\" % user,\n        },\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"tls\": False,\n        \"authentication\": \"token\",\n        \"authorization\": \"token\",\n        \"etcd\": {\n            \"host\": etcd_host,\n            \"port\": etcd_port,\n            \"tls\": True,\n            \"docs\": True,\n            \"log\": True\n        }\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": {\n            \"auth\": {\n                \"type\": \"basic\",\n                \"username\": \"admin\",\n                \"password\": \"password\"\n            },\n            \"tls\": {\n                \"type\": \"basic\",\n                \"certificate\": \"/etc/ssl/certs/ca-certificates.crt\",\n                \"privatekey\": \"/etc/ssl/private/ca-key.pem\",\n                \"certificateAuthorities\": [\"/etc/ssl/certs/ca-certificates.crt\"]\n            }\n        },\n        \"log\": {\n            \"level\": \"debug\",\n            \"logFile\": \"/var/log/ec2/ec2_event_log.log\"\n        ", "is_pass": false, "return_code": 1}, {"generate_code": "def base_config(user, etcd_host=\"localhost\", etcd_port=2379):\n    return {\n        \"user\": user,\n        \"etcd_host\": etcd_host,\n        \"etcd_port\": etcd_port,\n        \"docs\": \"docs\",\n        \"log\": \"log\",\n        \"tls\": \"tls\",\n        \"authentication\": \"authentication\",\n        \"authorization\": \"authorization\",\n    }\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "_fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d2", "code": ["def _fromutc(self, dt):\n    if dt.tzinfo:\n        return dt.astimezone(self.timezone)\n    else:\n        return dt.replace(tzinfo=self.timezone)\n", "def _fromutc(self, dt):\n    return dt + timedelta(hours=1)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    return dt.astimezone(pytz.utc)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self)\n", "def _fromutc(self, dt):\n    if dt.tzinfo:\n        raise ValueError(\"Cannot change timezone on a naive datetime\")\n    return dt.replace(tzinfo=FixedOffset.for_system())\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=pytz.utc)\n    return dt.astimezone(pytz.utc)\n", "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo:\n        return dt.astimezone(self.timezone)\n    else:\n        return dt.replace(tzinfo=self.timezone)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt + timedelta(hours=1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=self)\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(pytz.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo:\n        raise ValueError(\"Cannot change timezone on a naive datetime\")\n    return dt.replace(tzinfo=FixedOffset.for_system())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    if dt.tzinfo is None:\n        dt = dt.replace(tzinfo=pytz.utc)\n    return dt.astimezone(pytz.utc)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _fromutc(self, dt):\n    return dt.astimezone(self.tz)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/relativedelta.py", "project": "pexip/os-python-dateutil", "name": "normalized", "docstring": "Return a version of this object represented entirely using integer\nvalues for the relative attributes.\n\n>>> relativedelta(days=1.5, hours=2).normalized()\nrelativedelta(days=+1, hours=+14)\n\n:return:\n    Returns a :class:`dateutil.relativedelta.relativedelta` object.", "ques_id": "62b8982f755ee91dce50a241", "code": ["def normalized(self):\n    return self.__class__(\n        self.years, self.months, self.days, self.leapdays,\n        self.weeks, self.hours, self.minutes, self.seconds,\n        self.microseconds, self.year, self.month, self.day,\n        self.week, self.day_of_year)\n", "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour,\n                          self.day, self.weeks, self.months,\n                          self.leapdays)\n", "def normalized(self):\n    return self.__class__(self.seconds / self.nanoseconds,\n                          **dict(normalize='normalized'))\n", "def normalized(self):\n    return self.__class__(self.seconds / self.nanoseconds,\n                          **{k: int(v) for k, v in self.__dict__.items()\n                             if k!= 'normalized'})\n", "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days, self.leapdays)\n", "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days,\n                          leapdays=self.leapdays)\n", "def normalized(self):\n    return self.__class__(self.hour, self.minute, self.second,\n                          self.microsecond, self.year,\n                          self.month, self.day, self.weekday,\n                          self.yearday, self.nlyear, self.nlday)\n", "def normalized(self):\n    return self.__class__(self.hour, self.minute, self.second,\n                          self.microsecond, self.year, self.month,\n                          self.day, self.weekday, self.year + 1,\n                          day=self.day)\n", "def normalized(self):\n    return self.__class__(self.seconds / self.nanos,\n                                      self.microseconds / self.nanos)\n", "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days, -self.leapdays)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def normalized(self):\n    return self.__class__(\n        self.years, self.months, self.days, self.leapdays,\n        self.weeks, self.hours, self.minutes, self.seconds,\n        self.microseconds, self.year, self.month, self.day,\n        self.week, self.day_of_year)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour,\n                          self.day, self.weeks, self.months,\n                          self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.seconds / self.nanoseconds,\n                          **dict(normalize='normalized'))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.seconds / self.nanoseconds,\n                          **{k: int(v) for k, v in self.__dict__.items()\n                             if k!= 'normalized'})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days, self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days,\n                          leapdays=self.leapdays)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.hour, self.minute, self.second,\n                          self.microsecond, self.year,\n                          self.month, self.day, self.weekday,\n                          self.yearday, self.nlyear, self.nlday)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.hour, self.minute, self.second,\n                          self.microsecond, self.year, self.month,\n                          self.day, self.weekday, self.year + 1,\n                          day=self.day)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.seconds / self.nanos,\n                                      self.microseconds / self.nanos)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def normalized(self):\n    return self.__class__(self.second, self.minute, self.hour, self.day,\n                          self.weeks, self.months, self.days, -self.leapdays)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "tzname_in_python2", "docstring": "Change unicode output into bytestrings in Python 2\n\ntzname() API changed in Python 3. It used to return bytes, but was changed\nto unicode strings", "ques_id": "62b89640755ee91dce50a114", "code": ["def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def _(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if not six.PY2 and isinstance(name, bytes):\n            name = name.decode('utf-8', errors='replace')\n        return name\n    return _\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode(\"utf-8\", \"backslashreplace\")\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    if six.PY3:\n        @wraps(namefunc)\n        def adjust_encoding(*args, **kwargs):\n            name = namefunc(*args, **kwargs)\n            if name is not None:\n                name = name.encode()\n\n            return name\n\n        return adjust_encoding\n    else:\n        return namefunc\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    def inner(self, dt):\n        return namefunc(self, dt).encode('utf-8')\n    return inner\n", "def tzname_in_python2(namefunc):\n    if not IS_PY2:\n        return namefunc\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8', 'backslashreplace')\n\n        return name\n\n    return adjust_encoding\n", "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def _(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if not six.PY2 and isinstance(name, bytes):\n            name = name.decode('utf-8', errors='replace')\n        return name\n    return _\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode(\"utf-8\", \"backslashreplace\")\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if six.PY3:\n        @wraps(namefunc)\n        def adjust_encoding(*args, **kwargs):\n            name = namefunc(*args, **kwargs)\n            if name is not None:\n                name = name.encode()\n\n            return name\n\n        return adjust_encoding\n    else:\n        return namefunc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def wrapper(self):\n        name = namefunc(self)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    def inner(self, dt):\n        return namefunc(self, dt).encode('utf-8')\n    return inner\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    if not IS_PY2:\n        return namefunc\n\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if not PY3:\n            name = name.encode()\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode()\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n    @wraps(namefunc)\n    def adjust_encoding(*args, **kwargs):\n        name = namefunc(*args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8', 'backslashreplace')\n\n        return name\n\n    return adjust_encoding\n", "is_pass": false, "return_code": 1}, {"generate_code": "def tzname_in_python2(namefunc):\n\n    @wraps(namefunc)\n    def wrapper(self, *args, **kwargs):\n        name = namefunc(self, *args, **kwargs)\n        if name is not None:\n            name = name.encode('utf-8')\n\n        return name\n\n    return wrapper\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_versions", "docstring": "Get version information or return default if unable to do so.", "ques_id": "62b87d24d292efb640a55670", "code": ["def get_versions():\n    try:\n        return get_config().version\n    except ConfigParser.NoSectionError:\n        return versions_from_parentdir(parentdir_prefix='',\n                                       root=os.getcwd(),\n                                       verbose=True)\n", "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(os.getcwd(), \"VERSION\", verbose=True)\n", "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError):\n        return versions_from_parentdir(\".\", \"releases\", verbose=True)\n", "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(parentdir_prefix=get_config().parentdir,\n                                       root=get_config().root,\n                                       verbose=get_config().verbose)\n", "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(\".\", \"release\")[1]\n", "def get_versions():\n    try:\n        return get_config().version\n    except ConfigError:\n        return versions_from_parentdir(parentdir_prefix=get_config().parentdir,\n                                       root=get_config().root,\n                                       verbose=get_config().verbose)\n", "def get_versions():\n    versions = {}\n    try:\n        versions = get_config().versions\n    except ConfigParser.NoOptionError:\n        pass\n\n    return versions\n", "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(parentdir_prefix, 'VERSION', verbose=True)\n", "def get_versions():\n    try:\n        return get_config().version\n    except ConfigParser.NoSectionError:\n        return versions_from_parentdir(os.sep, '.')[-1]\n", "def get_versions():\n    versions = {}\n    try:\n        output = check_output(['git', 'describe', '--long', '--dirty',\n                               '--match', 'v[0-9]*.*'])\n        for line in output.splitlines():\n            pieces = line.decode('utf-8').strip().split()\n            versions[pieces[0]] = {\n               'version': pieces[1],\n                'dirty': not bool(pieces[2]),\n            }\n    except (IndexError, ValueError, subprocess.CalledProcessError):\n        pass\n    return versions\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except ConfigParser.NoSectionError:\n        return versions_from_parentdir(parentdir_prefix='',\n                                       root=os.getcwd(),\n                                       verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(os.getcwd(), \"VERSION\", verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError):\n        return versions_from_parentdir(\".\", \"releases\", verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(parentdir_prefix=get_config().parentdir,\n                                       root=get_config().root,\n                                       verbose=get_config().verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(\".\", \"release\")[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except ConfigError:\n        return versions_from_parentdir(parentdir_prefix=get_config().parentdir,\n                                       root=get_config().root,\n                                       verbose=get_config().verbose)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    versions = {}\n    try:\n        versions = get_config().versions\n    except ConfigParser.NoOptionError:\n        pass\n\n    return versions\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except (NoSectionError, NoOptionError) as e:\n        return versions_from_parentdir(parentdir_prefix, 'VERSION', verbose=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    try:\n        return get_config().version\n    except ConfigParser.NoSectionError:\n        return versions_from_parentdir(os.sep, '.')[-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_versions():\n    versions = {}\n    try:\n        output = check_output(['git', 'describe', '--long', '--dirty',\n                               '--match', 'v[0-9]*.*'])\n        for line in output.splitlines():\n            pieces = line.decode('utf-8').strip().split()\n            versions[pieces[0]] = {\n               'version': pieces[1],\n                'dirty': not bool(pieces[2]),\n            }\n    except (IndexError, ValueError, subprocess.CalledProcessError):\n        pass\n    return versions\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "render", "docstring": "Render the given version pieces into the requested style.", "ques_id": "62b87d24d292efb640a5566f", "code": ["def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre-branch\":\n        rendered = render_pep440_pre_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces"], "level": "file_runnable", "generate_results": [{"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre-branch\":\n        rendered = render_pep440_pre_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces)\n    elif style == \"git-describe\":\n        rendered = render_git_describe(pieces)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}, {"generate_code": "def render(pieces, style):\n    if pieces[\"error\"]:\n        return {\"version\": \"unknown\",\n                \"full-revisionid\": pieces.get(\"long\"),\n                \"dirty\": None,\n                \"error\": pieces[\"error\"],\n                \"date\": None}\n\n    if not style or style == \"default\":\n        style = \"pep440\"  # the default\n\n    if style == \"pep440\":\n        rendered = render_pep440(pieces)\n    elif style == \"pep440-branch\":\n        rendered = render_pep440_branch(pieces)\n    elif style == \"pep440-post\":\n        rendered = render_pep440_post(pieces)\n    elif style == \"pep440-pre\":\n        rendered = render_pep440_pre(pieces)\n    elif style == \"pep440-post-branch\":\n        rendered = render_pep440_post_branch(pieces)\n    elif style == \"pep440-old\":\n        rendered = render_pep440_old(pieces", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "plus_or_dot", "docstring": "Return a + if we don't already have one, else return a .", "ques_id": "62b87d24d292efb640a5566d", "code": ["def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n"], "level": "self_contained", "generate_results": [{"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plus_or_dot(pieces):\n    if \"+\" in pieces.get(\"closest-tag\", \"\"):\n        return \".\"\n    return \"+\"\n", "is_pass": true, "return_code": 0}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62b87d23d292efb640a5566b", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                prin", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \"\"\"\n    :return: (status, stdout, stderr)\n    \"\"\"\n    # type: (List[str], List[str], str, bool, Dict[str, Any]) -> Tuple[bool, str, str]\n    \"\"\"\n    :return: (status, stdout, stderr)\n    \"\"\"\n    commands = [str(c) for c in commands]\n    process = Popen(\n        commands, stdout=PIPE, stderr=PIPE, cwd=cwd, env=env, universal_newlines=True\n    )\n    stdout, stderr = process.communicate()\n    if process.returncode!= 0:\n        if verbose:\n            print(\"Command failed: {}\".format(\" \".join(commands)))\n        return False, stdout, stderr\n    return True, stdout, stderr\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    if env is None:\n        env = os.environ\n\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            out, err = p.communicate()\n            return out.decode('utf-8'), err.decode('utf-8')\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n           ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen(\n                [c] + args,\n                cwd=cwd,\n                env=env,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n            )\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" ", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                prin", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    assert not hide_stderr\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose"], "level": "plib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                prin", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    \"\"\"\n    :return: (status, stdout, stderr)\n    \"\"\"\n    # type: (List[str], List[str], str, bool, Dict[str, Any]) -> Tuple[bool, str, str]\n    \"\"\"\n    :return: (status, stdout, stderr)\n    \"\"\"\n    commands = [str(c) for c in commands]\n    process = Popen(\n        commands, stdout=PIPE, stderr=PIPE, cwd=cwd, env=env, universal_newlines=True\n    )\n    stdout, stderr = process.communicate()\n    if process.returncode!= 0:\n        if verbose:\n            print(\"Command failed: {}\".format(\" \".join(commands)))\n        return False, stdout, stderr\n    return True, stdout, stderr\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    if env is None:\n        env = os.environ\n\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            out, err = p.communicate()\n            return out.decode('utf-8'), err.decode('utf-8')\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen(\n                [c] + args,\n                cwd=cwd,\n                env=env,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n            )\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" ", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                prin", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    assert isinstance(args, list)\n    assert not hide_stderr\n\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "get_config", "docstring": "Create, populate and return the VersioneerConfig() object.", "ques_id": "62b87d23d292efb640a55668", "code": ["def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tidepy/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tetris/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"sorenata/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"scsi_converter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"ftp_download/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodedash/_version.py\"\n    cfg.verbose = False\n    return cfg\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tidepy/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tetris/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"sorenata/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"scsi_converter/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"tableauserverclient/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"ftp_download/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"taurus/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"seminario/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_config():\n    # these strings are filled in when'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    cfg.style = \"pep440-post\"\n    cfg.tag_prefix = \"v\"\n    cfg.parentdir_prefix = \"None\"\n    cfg.versionfile_source = \"nodedash/_version.py\"\n    cfg.verbose = False\n    return cfg\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/prestoplot/_version.py", "project": "eykd/prestoplot", "name": "register_vcs_handler", "docstring": "Create decorator to mark a method as the handler of a VCS.", "ques_id": "62b87d23d292efb640a55667", "code": ["def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n"], "level": "self_contained", "generate_results": [{"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}, {"generate_code": "def register_vcs_handler(vcs, method):  # decorator\n    \"\"\"Create decorator to mark a method as the handler of a object\"\"\"\n    def decorate(f):\n        HANDLERS.setdefault(vcs, {})[method] = f\n        return f\n    return decorate\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "validate_hierarchy", "docstring": "Validate storage root hierarchy.\n\nReturns:\n    num_objects - number of objects checked\n    good_objects - number of objects checked that were found to be valid", "ques_id": "62b45e945108cfac7f210a4a", "code": ["def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.num_objects > 1:\n        self.log.error(\"Only one hierarchy allowed for hierarchy validation\")\n        return None\n\n    if self.object_path is None:\n        self.log.error(\"No object path for hierarchy validation\")\n        return None\n\n    if self.dispositor:\n        self.log.debug(\"Disposing dispositor\")\n        self.dispositor.dispositor()\n\n    self.log.debug(\"Validating object path %s\" % self.object_path)\n\n    if validate_objects:\n        self.object_paths = self.check_root_structure()\n        self.check_root_structure()\n\n    self._dispositor.dispositor()\n\n    if self.description is not None:\n        self.log.info(\"Configuring %s\" % self.description)\n\n    if self.dispositor and not validate_objects:\n        self.log.error(\"Dispositor has already been configured. Aborting.\")\n        self.dispositor.dispositor()\n\n    return self.object_paths\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self._validate_objects()\n    if check_digests:\n        self._check_digests()\n    if show_warnings:\n        self.log.warn(\"Hierarchy check failed. \"\n                      \"Validation of all object paths failed.\")\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"validate_hierarchy %s\", self.hierarchy)\n    self._dispositor.dispositor(self)\n    self.log.debug(\"validate_hierarchy complete\")\n    return super(FSContainer, self).validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    if validate_objects:\n        self.object_paths()\n    if check_digests:\n        self.check_digests()\n    if show_warnings:\n        self.log.warning(\"Hierarchy validation failed. \"\n                         \"This indicates a problem with the hierarchy.\")\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.object_path is not None:\n        self.object_paths()\n        if self.object_path is not None:\n            self.object_paths()\n        else:\n            self.log.error(\"Object path not provided in initialization\")\n            self.log.error(\"Object paths are %s\", self.object_paths())\n            self.log.error(\"Object path is %s\", self.object_path)\n            self.log.error(\"Please check the disposition or file name\")\n            if show_warnings:\n                self.log.warning(\"Please check the disposition or file name\")\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.description is not None:\n        self.log.debug(\"Description is %s\", self.description)\n\n    if self.object_paths is not None:\n        self.log.debug(\"Object paths are %s\", self.object_paths)\n\n    if self.lax_digests is not None:\n        self.log.debug(\"Lax digests are %s\", self.lax_digests)\n\n    if self.extension is not None:\n        self.log.debug(\"Extension is %s\", self.extension)\n\n    if validate_objects:\n        self.check_root_structure()\n\n    if self.description and self.object_paths and self.object_paths[0] is not None:\n        self.log.debug(\"Validating object paths\")\n        self.check_object_paths()\n\n    if self.description and self.lax_digests and self.lax_digests[0] is not None:\n        self.log.debug(\"Validating lax digests\")\n        self.check_lax_digests()\n\n    if self.dispositor and show_warnings:\n        self.log.warning(\"Not yet implemented\")\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"None\"\n    pass\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if not self.dispositor():\n        return\n    if self.log:\n        self.log.info(\"checking hierarchy of %s\" % self.object_path)\n    if self.lax_digests:\n        self._dispositor.dispositor.check_lax_digests(self.object_path)\n    if validate_objects:\n        self._dispositor.dispositor.check_objects(self.object_path)\n    if check_digests:\n        self._dispositor.dispositor.check_digests(self.object_path)\n    if show_warnings:\n        self._dispositor.dispositor.show_warnings(self.object_path)\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self._dispositor.validate_hierarchy(\n        self.object_paths, validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings\n    )\n", "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        if self.object_path is None:\n            raise FSError(\"File %s does not exist in %s\" % (self.spec_file, self.root))\n\n        if self.object_path in self.good_objects:\n            self.log.debug(\"Object path %s already in good paths %s\" % (self.object_path, self.good_objects))\n            return\n\n    if check_digests:\n        if self.description.has_disposition and self.description.digest_type == \"SHA1\":\n            if self.description.digest_value is not None:\n                if self.description.digest_value.startswith(\"sha1:\"):\n                    self.log.debug(\"Digest type is SHA1\")\n                    self.description.digest_type = \"sha1\"\n                else:\n                    self.log.debug(\"Digest type is NOT SHA1\")\n                    self.description.digest_type = \"non"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.num_objects > 1:\n        self.log.error(\"Only one hierarchy allowed for hierarchy validation\")\n        return None\n\n    if self.object_path is None:\n        self.log.error(\"No object path for hierarchy validation\")\n        return None\n\n    if self.dispositor:\n        self.log.debug(\"Disposing dispositor\")\n        self.dispositor.dispositor()\n\n    self.log.debug(\"Validating object path %s\" % self.object_path)\n\n    if validate_objects:\n        self.object_paths = self.check_root_structure()\n        self.check_root_structure()\n\n    self._dispositor.dispositor()\n\n    if self.description is not None:\n        self.log.info(\"Configuring %s\" % self.description)\n\n    if self.dispositor and not validate_objects:\n        self.log.error(\"Dispositor has already been configured. Aborting.\")\n        self.dispositor.dispositor()\n\n    return self.object_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        self._validate_objects()\n    if check_digests:\n        self._check_digests()\n    if show_warnings:\n        self.log.warn(\"Hierarchy check failed. \"\n                      \"Validation of all object paths failed.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self.log.debug(\"validate_hierarchy %s\", self.hierarchy)\n    self._dispositor.dispositor(self)\n    self.log.debug(\"validate_hierarchy complete\")\n    return super(FSContainer, self).validate_hierarchy(validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n\n    if validate_objects:\n        self.object_paths()\n    if check_digests:\n        self.check_digests()\n    if show_warnings:\n        self.log.warning(\"Hierarchy validation failed. \"\n                         \"This indicates a problem with the hierarchy.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.object_path is not None:\n        self.object_paths()\n        if self.object_path is not None:\n            self.object_paths()\n        else:\n            self.log.error(\"Object path not provided in initialization\")\n            self.log.error(\"Object paths are %s\", self.object_paths())\n            self.log.error(\"Object path is %s\", self.object_path)\n            self.log.error(\"Please check the disposition or file name\")\n            if show_warnings:\n                self.log.warning(\"Please check the disposition or file name\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if self.description is not None:\n        self.log.debug(\"Description is %s\", self.description)\n\n    if self.object_paths is not None:\n        self.log.debug(\"Object paths are %s\", self.object_paths)\n\n    if self.lax_digests is not None:\n        self.log.debug(\"Lax digests are %s\", self.lax_digests)\n\n    if self.extension is not None:\n        self.log.debug(\"Extension is %s\", self.extension)\n\n    if validate_objects:\n        self.check_root_structure()\n\n    if self.description and self.object_paths and self.object_paths[0] is not None:\n        self.log.debug(\"Validating object paths\")\n        self.check_object_paths()\n\n    if self.description and self.lax_digests and self.lax_digests[0] is not None:\n        self.log.debug(\"Validating lax digests\")\n        self.check_lax_digests()\n\n    if self.dispositor and show_warnings:\n        self.log.warning(\"Not yet implemented\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    \"None\"\n    pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if not self.dispositor():\n        return\n    if self.log:\n        self.log.info(\"checking hierarchy of %s\" % self.object_path)\n    if self.lax_digests:\n        self._dispositor.dispositor.check_lax_digests(self.object_path)\n    if validate_objects:\n        self._dispositor.dispositor.check_objects(self.object_path)\n    if check_digests:\n        self._dispositor.dispositor.check_digests(self.object_path)\n    if show_warnings:\n        self._dispositor.dispositor.show_warnings(self.object_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    self._dispositor.validate_hierarchy(\n        self.object_paths, validate_objects=validate_objects, check_digests=check_digests, show_warnings=show_warnings\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_hierarchy(self, validate_objects=True, check_digests=True, show_warnings=False):\n    if validate_objects:\n        if self.object_path is None:\n            raise FSError(\"File %s does not exist in %s\" % (self.spec_file, self.root))\n\n        if self.object_path in self.good_objects:\n            self.log.debug(\"Object path %s already in good paths %s\" % (self.object_path, self.good_objects))\n            return\n\n    if check_digests:\n        if self.description.has_disposition and self.description.digest_type == \"SHA1\":\n            if self.description.digest_value is not None:\n                if self.description.digest_value.startswith(\"sha1:\"):\n                    self.log.debug(\"Digest type is SHA1\")\n                    self.description.digest_type = \"sha1\"\n                else:\n                    self.log.debug(\"Digest type is NOT SHA1\")\n                    self.description.digest_type = \"non", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/store.py", "project": "zimeon/ocfl-py", "name": "initialize", "docstring": "Create and initialize a new OCFL storage root.", "ques_id": "62b45e515108cfac7f210a3c", "code": ["def initialize(self):\n    self.log.debug(\"initialize\")\n    self.spec_file = None\n    self.log.debug(\"finalize\")\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log = logging.getLogger('ocfl')\n\n    # initialize the storage root\n    self.root_fs = self.open_root_fs(create=False)\n\n    # keep track of the number of objects in the storage root\n    self.num_objects = 0\n\n    # keep track of the number of files that have been created\n    self.num_files = 0\n\n    # keep track of the number of extensions that have been registered\n    self.num_extensions = 0\n\n    # keep track of the number of valid extensions\n    self.num_valid_extensions = 0\n\n    # keep track of the number of extensions that have been loaded\n    self.num_loaded_extensions = 0\n\n    # keep track of the number of object paths that have been loaded\n    self.num_object_paths = 0\n\n    # keep track of the number of extensions that have been loaded\n    self.num_loaded_extensions = 0\n\n    # keep track of the number of layout files that have been loaded\n    self.num_layout_files = 0\n\n    # keep track of the number of valid layout files\n   ", "def initialize(self):\n    self.log.info('initializing')\n\n    self.root_fs = OCFLFSession(self.root, self.log)\n    self.num_objects = self.root_fs.num_objects\n\n    self.spec_file = None\n    self.dispositor = None\n    self.log.debug('initialized with %d objects', self.num_objects)\n", "def initialize(self):\n    self.log.debug(\"creating OCFL storage root\")\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info(\"creating a new OCFL storage root\")\n    self.open_root_fs = self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.debug(\"Initializing OCFL storage root at '%s'\", self.root)\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.debug(\"initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log.info(\"Initializing OCFL storage root '%s'.\", self.root)\n    self.open_root_fs(create=True)\n", "def initialize(self):\n    self.log = logging.getLogger('ocfl.storage')\n    self.log.debug('initializing')\n    self.root_fs = None\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths_index = {}\n    self.open_root_fs(create=True)\n    self.dispositor()\n", "def initialize(self):\n    self.log.info(\"creating new OCFL storage root\")\n    self.open_root_fs(create=True)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def initialize(self):\n    self.log.debug(\"initialize\")\n    self.spec_file = None\n    self.log.debug(\"finalize\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log = logging.getLogger('ocfl')\n\n    # initialize the storage root\n    self.root_fs = self.open_root_fs(create=False)\n\n    # keep track of the number of objects in the storage root\n    self.num_objects = 0\n\n    # keep track of the number of files that have been created\n    self.num_files = 0\n\n    # keep track of the number of extensions that have been registered\n    self.num_extensions = 0\n\n    # keep track of the number of valid extensions\n    self.num_valid_extensions = 0\n\n    # keep track of the number of extensions that have been loaded\n    self.num_loaded_extensions = 0\n\n    # keep track of the number of object paths that have been loaded\n    self.num_object_paths = 0\n\n    # keep track of the number of extensions that have been loaded\n    self.num_loaded_extensions = 0\n\n    # keep track of the number of layout files that have been loaded\n    self.num_layout_files = 0\n\n    # keep track of the number of valid layout files\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info('initializing')\n\n    self.root_fs = OCFLFSession(self.root, self.log)\n    self.num_objects = self.root_fs.num_objects\n\n    self.spec_file = None\n    self.dispositor = None\n    self.log.debug('initialized with %d objects', self.num_objects)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"creating OCFL storage root\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"creating a new OCFL storage root\")\n    self.open_root_fs = self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"Initializing OCFL storage root at '%s'\", self.root)\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.debug(\"initializing OCFL storage root\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"Initializing OCFL storage root '%s'.\", self.root)\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log = logging.getLogger('ocfl.storage')\n    self.log.debug('initializing')\n    self.root_fs = None\n    self.num_objects = 0\n    self.num_traversal_errors = 0\n    self.object_paths = []\n    self.object_paths_index = {}\n    self.open_root_fs(create=True)\n    self.dispositor()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def initialize(self):\n    self.log.info(\"creating new OCFL storage root\")\n    self.open_root_fs(create=True)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "next_version", "docstring": "Next version identifier following existing pattern.\n\nMust deal with both zero-prefixed and non-zero prefixed versions.", "ques_id": "62b45e2eb89c9fd354170232", "code": ["def next_version(version):\n    if len(version) < 4:\n        raise ValueError(\"next_version: version string must have at least 4 characters: major, minor, patch\")\n\n    # split version string into three parts\n    major = version[0:2]\n    minor = version[2:4]\n    patch = version[4:]\n\n    # make sure version string is valid\n    check_shared_args([major, minor, patch])\n\n    # convert version string to integers\n    major = int(major)\n    minor = int(minor)\n    patch = int(patch)\n\n    # calculate next version\n    next_major = major + 1\n    next_minor = minor + 1\n    next_patch = patch + 1\n\n    while next_major <= MAX_MAJOR and next_minor <= MAX_MINOR and next_patch <= MAX_PATCH:\n        if next_major < MAX_MAJOR:\n            if next_minor < MAX_MINOR:\n                if next_patch < MAX_PATCH:\n                    yield (major,", "def next_version(version):\n    if version == \"latest\":\n        version = find_path_type(os.path.dirname(os.path.abspath(__file__)))\n        if not version:\n            raise ValueError(\"Couldn't find a suitable version for next \"\n                             \"pattern in PATH.  Try installing with \"\n                             \"`pip install fsharp==0.1`\")\n    return version + 1\n", "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    if not version:\n        raise ValueError(\"version must not be empty\")\n\n    if version == 'latest':\n        version = find_latest_version(version)\n\n    while True:\n        try:\n            int(version)\n        except ValueError:\n            version = find_next_version(version)\n        else:\n            break\n\n    return version\n", "def next_version(version):\n    (prev_dir, tail) = os.path.split(version)\n    (next_dir, rest) = os.path.split(tail)\n    if next_dir == '':\n        next_dir = prev_dir\n    if prev_dir == '' and next_dir == '':\n        return version\n    return '.'.join((next_dir, version))\n", "def next_version(version):\n    i = version\n    while True:\n        yield str(i)\n        i += 1\n", "def next_version(version):\n    m = re.match(r\"^v(\\d+)$\", version)\n    if m:\n        number = int(m.group(1))\n        while True:\n            new_version = \"v{0}\".format(number + 1)\n            if check_shared_args([\"--version\", new_version]):\n                return new_version\n            number += 1\n", "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    if len(version) <= 2:\n        raise ValueError(\"Not a valid next version identifier\")\n    if version[2] in NOMALIZATIONS:\n        return version\n    m = re.match(\"^v([0-9]+)$\", version[2])\n    if not m:\n        raise ValueError(\"Not a valid next version identifier\")\n    number = int(m.group(1))\n    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number >= len(NOMALIZATIONS):\n        raise ValueError(\"Non-existing version not supported\")\n    return \"v{0}\".format(number + 1)\n", "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    (prev, version) = (version, None)\n    while prev!= version:\n        prev = version\n        version = find_path_type(version)\n    return prev\n", "def next_version(version):\n    version += 1\n    if version > MAX_VERSION:\n        raise ValueError(\"Non-maximum version identifier: %d\" % version)\n    return version\n", "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    (prev_dir, tail) = os.path.split(version)\n    (next_dir, sep) = find_path_type(prev_dir)\n    if next_dir == '':\n        next_dir = prev_dir\n    return next_dir + sep\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def next_version(version):\n    if len(version) < 4:\n        raise ValueError(\"next_version: version string must have at least 4 characters: major, minor, patch\")\n\n    # split version string into three parts\n    major = version[0:2]\n    minor = version[2:4]\n    patch = version[4:]\n\n    # make sure version string is valid\n    check_shared_args([major, minor, patch])\n\n    # convert version string to integers\n    major = int(major)\n    minor = int(minor)\n    patch = int(patch)\n\n    # calculate next version\n    next_major = major + 1\n    next_minor = minor + 1\n    next_patch = patch + 1\n\n    while next_major <= MAX_MAJOR and next_minor <= MAX_MINOR and next_patch <= MAX_PATCH:\n        if next_major < MAX_MAJOR:\n            if next_minor < MAX_MINOR:\n                if next_patch < MAX_PATCH:\n                    yield (major,", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    if version == \"latest\":\n        version = find_path_type(os.path.dirname(os.path.abspath(__file__)))\n        if not version:\n            raise ValueError(\"Couldn't find a suitable version for next \"\n                             \"pattern in PATH.  Try installing with \"\n                             \"`pip install fsharp==0.1`\")\n    return version + 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    if not version:\n        raise ValueError(\"version must not be empty\")\n\n    if version == 'latest':\n        version = find_latest_version(version)\n\n    while True:\n        try:\n            int(version)\n        except ValueError:\n            version = find_next_version(version)\n        else:\n            break\n\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    (prev_dir, tail) = os.path.split(version)\n    (next_dir, rest) = os.path.split(tail)\n    if next_dir == '':\n        next_dir = prev_dir\n    if prev_dir == '' and next_dir == '':\n        return version\n    return '.'.join((next_dir, version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    i = version\n    while True:\n        yield str(i)\n        i += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    m = re.match(r\"^v(\\d+)$\", version)\n    if m:\n        number = int(m.group(1))\n        while True:\n            new_version = \"v{0}\".format(number + 1)\n            if check_shared_args([\"--version\", new_version]):\n                return new_version\n            number += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    if len(version) <= 2:\n        raise ValueError(\"Not a valid next version identifier\")\n    if version[2] in NOMALIZATIONS:\n        return version\n    m = re.match(\"^v([0-9]+)$\", version[2])\n    if not m:\n        raise ValueError(\"Not a valid next version identifier\")\n    number = int(m.group(1))\n    if number < 0:\n        raise ValueError(\"Negative numbers not supported\")\n    if number >= len(NOMALIZATIONS):\n        raise ValueError(\"Non-existing version not supported\")\n    return \"v{0}\".format(number + 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    (prev, version) = (version, None)\n    while prev!= version:\n        prev = version\n        version = find_path_type(version)\n    return prev\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    version += 1\n    if version > MAX_VERSION:\n        raise ValueError(\"Non-maximum version identifier: %d\" % version)\n    return version\n", "is_pass": false, "return_code": 1}, {"generate_code": "def next_version(version):\n    \"Given next version identifier following existing pattern\"\n    (prev_dir, tail) = os.path.split(version)\n    (next_dir, sep) = find_path_type(prev_dir)\n    if next_dir == '':\n        next_dir = prev_dir\n    return next_dir + sep\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/validator.py", "project": "zimeon/ocfl-py", "name": "validate_version_inventories", "docstring": "Each version SHOULD have an inventory up to that point.\n\nAlso keep a record of any content digests different from those in the root inventory\nso that we can also check them when validating the content.\n\nversion_dirs is an array of version directory names and is assumed to be in\nversion sequence (1, 2, 3...).", "ques_id": "62b45e23e0d4551b0392c90a", "code": ["def validate_version_inventories(self, version_dirs):\n    if version_dirs is None:\n        version_dirs = {}\n\n    for version_dir in version_dirs:\n        self.check_version_inventories(version_dir)\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.__validate_version_inventories_dir(version_dir)\n", "def validate_version_inventories(self, version_dirs):\n\n    for version_dir in version_dirs:\n        version_path = os.path.join(version_dir, self.version_fs.name)\n\n        # TODO: Check if the version is a digest file\n        # TODO: Check if the digest file is already in the inventory\n        # TODO: Remove this line after implementation add check_digests\n\n        self.log.info(\"checking inventory for %s\", version_path)\n\n        for f in self.spec_version:\n            self.status_str(f)\n            self.check_digests(f, version_path, f.digest_algorithm)\n", "def validate_version_inventories(self, version_dirs):\n    version_inventories = self.obj_fs.get_version_inventories(version_dirs)\n    self.log.info(\"Found %d inventories\", len(version_inventories))\n\n    if not version_inventories:\n        raise Failure(\"Inventory missing from %s\" % version_dirs)\n\n    for inv_path in version_inventories:\n        self.read_inventory_digest(inv_path)\n        self.check_digests(inv_path)\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        version_path = os.path.join(self.content_directory, version_dir)\n        for dirpath, _, filenames in os.walk(version_path):\n            for filename in filenames:\n                self.check_digests(os.path.join(dirpath, filename),\n                                    self.spec_version)\n", "def validate_version_inventories(self, version_dirs):\n    if len(version_dirs) > 1:\n        self.log.error(\"More than one version dir specified in the inventory. Using first version\")\n    if len(version_dirs) == 1:\n        version_dir = version_dirs.keys()[0]\n        self.check_digests(version_dirs[version_dir], version_dirs)\n", "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.check_version_inventories(version_dir)\n", "def validate_version_inventories(self, version_dirs):\n    self.spec_version = self.content_directory.get_version()\n    self.log.info(\"Version inventory digest validated using spec version: {}\".format(self.spec_version))\n", "def validate_version_inventories(self, version_dirs):\n    self.check_digests(version_dirs)\n", "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    validate_paths = []\n    for version_dir in version_dirs:\n        validate_path = self.validate_inventory(version_dir,\n                                                where='version_inventories')\n        validate_paths.append(validate_path)\n    return validate_paths\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_version_inventories(self, version_dirs):\n    if version_dirs is None:\n        version_dirs = {}\n\n    for version_dir in version_dirs:\n        self.check_version_inventories(version_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.__validate_version_inventories_dir(version_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n\n    for version_dir in version_dirs:\n        version_path = os.path.join(version_dir, self.version_fs.name)\n\n        # TODO: Check if the version is a digest file\n        # TODO: Check if the digest file is already in the inventory\n        # TODO: Remove this line after implementation add check_digests\n\n        self.log.info(\"checking inventory for %s\", version_path)\n\n        for f in self.spec_version:\n            self.status_str(f)\n            self.check_digests(f, version_path, f.digest_algorithm)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    version_inventories = self.obj_fs.get_version_inventories(version_dirs)\n    self.log.info(\"Found %d inventories\", len(version_inventories))\n\n    if not version_inventories:\n        raise Failure(\"Inventory missing from %s\" % version_dirs)\n\n    for inv_path in version_inventories:\n        self.read_inventory_digest(inv_path)\n        self.check_digests(inv_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        version_path = os.path.join(self.content_directory, version_dir)\n        for dirpath, _, filenames in os.walk(version_path):\n            for filename in filenames:\n                self.check_digests(os.path.join(dirpath, filename),\n                                    self.spec_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    if len(version_dirs) > 1:\n        self.log.error(\"More than one version dir specified in the inventory. Using first version\")\n    if len(version_dirs) == 1:\n        version_dir = version_dirs.keys()[0]\n        self.check_digests(version_dirs[version_dir], version_dirs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    for version_dir in version_dirs:\n        self.check_version_inventories(version_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.spec_version = self.content_directory.get_version()\n    self.log.info(\"Version inventory digest validated using spec version: {}\".format(self.spec_version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.check_digests(version_dirs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_version_inventories(self, version_dirs):\n    self.log.debug(\"validate_version_inventories(%s)\", version_dirs)\n    validate_paths = []\n    for version_dir in version_dirs:\n        validate_path = self.validate_inventory(version_dir,\n                                                where='version_inventories')\n        validate_paths.append(validate_path)\n    return validate_paths\n", "is_pass": false, "return_code": 1}]}
{"file_path": "ocfl/object_utils.py", "project": "zimeon/ocfl-py", "name": "find_path_type", "docstring": "Return a string indicating the type of thing at the given path.\n\nReturn values:\n    'root' - looks like an OCFL Storage Root\n    'object' - looks like an OCFL Object\n    'file' - a file, might be an inventory\n    other string explains error description\n\nLooks only at \"0=*\" Namaste files to determine the directory type.", "ques_id": "62b45e21e0d4551b0392c8ed", "code": ["def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    else:\n        return 'unknown'\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        fs = FileSystem(root=path)\n        return fs.type(path)\n", "def find_path_type(path):\n    if not os.path.exists(path):\n        return None\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'directory'\n    raise FileNotFoundError(path)\n", "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'dir'\n    if os.path.islink(path):\n        return 'link'\n    if os.path.isdir(path):\n        return 'dir'\n    raise FileNotFoundError(path)\n", "def find_path_type(path):\n    statinfo = os.stat(path)\n    return statinfo.st_type\n", "def find_path_type(path):\n    for name, (_, contents) in sys.path.items():\n        if path in contents:\n            return name\n\n    return None\n", "def find_path_type(path):\n    if path is None:\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        return 'file'\n", "def find_path_type(path):\n    if not os.path.isabs(path):\n        path = os.path.normpath(os.path.abspath(os.path.join(os.getcwd(),\n                                                             path)))\n    for root, _, files in os.walk(path):\n        if files:\n            return 'file'\n        elif os.path.isfile(root):\n            return 'file'\n        elif os.path.isdir(root):\n            return 'directory'\n    raise FileNotFoundError(\n        'Could not find a file or directory at {0}'.format(path))\n", "def find_path_type(path):\n    fs = fs_from_path(path)\n    return fs.file_type\n", "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        raise ValueError('invalid path')\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.ismount(path):\n        return'mount'\n    else:\n        return 'unknown'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.isfile(path):\n        return 'file'\n    else:\n        fs = FileSystem(root=path)\n        return fs.type(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.exists(path):\n        return None\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'directory'\n    raise FileNotFoundError(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if os.path.isfile(path):\n        return 'file'\n    if os.path.isdir(path):\n        return 'dir'\n    if os.path.islink(path):\n        return 'link'\n    if os.path.isdir(path):\n        return 'dir'\n    raise FileNotFoundError(path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    statinfo = os.stat(path)\n    return statinfo.st_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    for name, (_, contents) in sys.path.items():\n        if path in contents:\n            return name\n\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if path is None:\n        return 'file'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        return 'file'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isabs(path):\n        path = os.path.normpath(os.path.abspath(os.path.join(os.getcwd(),\n                                                             path)))\n    for root, _, files in os.walk(path):\n        if files:\n            return 'file'\n        elif os.path.isfile(root):\n            return 'file'\n        elif os.path.isdir(root):\n            return 'directory'\n    raise FileNotFoundError(\n        'Could not find a file or directory at {0}'.format(path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    fs = fs_from_path(path)\n    return fs.file_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_path_type(path):\n    if not os.path.isdir(path):\n        return 'file'\n    elif os.path.isfile(path):\n        return 'file'\n    elif os.path.islink(path):\n        return 'link'\n    elif os.path.isdir(path):\n        return 'directory'\n    else:\n        raise ValueError('invalid path')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "auto_nag/bzcleaner.py", "project": "mozilla/relman-auto-nag", "name": "amend_bzparams", "docstring": "Amend the Bugzilla params", "ques_id": "62b45b396decaeff903e1001", "code": ["def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, list):\n        params = [params]\n\n    amended_bugs = []\n    for param in params:\n        amended_bugs.extend(self.amend_bzparams_once(param, bug_ids))\n\n    return amended_bugs\n", "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_params' in params:\n        amended_bugs = self.get_bugs(params['amend_bz_params'])\n        for bug in amended_bugs:\n            bug_id = str(bug['id'])\n            if bug_id not in bug_ids:\n                bug_ids.append(bug_id)\n    return True\n", "def amend_bzparams(self, params, bug_ids):\n    if not bug_ids:\n        bug_ids = self.get_bugs()\n\n    if self.amend_bzparams.lower() == \"n\":\n        return False\n    elif self.amend_bzparams.lower() == \"y\":\n        return True\n    else:\n        return False\n", "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict):\n        raise TypeError(\"amend_bzparams requires params to be a dict\")\n\n    for key, value in params.items():\n        if key in ['amend_to', 'comment', 'amend_status']:\n            if value == 'no':\n                params[key] = False\n            elif value == 'yes':\n                params[key] = True\n\n    if 'amend_to' in params and not params['amend_to']:\n        params.pop('amend_to')\n    if 'comment' in params and not params['comment']:\n        params.pop('comment')\n    if 'amend_status' in params and not params['amend_status']:\n        params.pop('amend_status')\n\n    for bug_id in bug_ids:\n        params['bugzilla_id'] = bug_id\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict):\n        raise TypeError(\"amend_bzparams requires a parameter dictionary\")\n\n    if params.get('amend'):\n        for bz in bug_ids:\n            params['amend_status'] = 'MAYBE_CHANGED'\n\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    param_list = []\n    for key in params:\n        if key == 'ni':\n            param_list.append('<bz:ni>%s</bz:ni>' % params[key])\n        else:\n            param_list.append('<bz:param>%s</bz:param>' % params[key])\n    return param_list\n", "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_params' in params:\n        amended_bug_ids = self.get_bug_ids_from_bz_params(params['amend_bz_params'])\n        bug_ids = bug_ids | amended_bug_ids\n\n    return bug_ids\n", "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_product_ids' in params:\n        if isinstance(params['amend_bz_product_ids'], list):\n            params['amend_bz_product_ids'] = ','.join(str(i) for i in params['amend_bz_product_ids'])\n    return params\n", "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_bzparams.should_run():\n        return\n\n    if self.dryrun:\n        return\n\n    if self.verbose:\n        print(\"AMENDING BZ PARAMS (NOT NEEDINFO)\")\n\n    params = self.get_bzparams(params, bug_ids)\n\n    for key in params:\n        if key not in self.ignore_meta:\n            self.cache[key] = params[key]\n", "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict) or not isinstance(bug_ids, list):\n        raise TypeError(\"params and/or bug_ids must be type dict and/or list\")\n\n    if self.amend_bzparams.lower() not in ['true', 'false']:\n        raise ValueError(\"amend_bzparams must be either 'true' or 'false'\")\n\n    params = dict((k.lower(), v) for k, v in params.items())\n\n    for bug in bug_ids:\n        if not isinstance(bug, int):\n            raise TypeError(\"bug_ids must be ints\")\n        params['bug_id'] = bug\n\n    return params\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, list):\n        params = [params]\n\n    amended_bugs = []\n    for param in params:\n        amended_bugs.extend(self.amend_bzparams_once(param, bug_ids))\n\n    return amended_bugs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_params' in params:\n        amended_bugs = self.get_bugs(params['amend_bz_params'])\n        for bug in amended_bugs:\n            bug_id = str(bug['id'])\n            if bug_id not in bug_ids:\n                bug_ids.append(bug_id)\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not bug_ids:\n        bug_ids = self.get_bugs()\n\n    if self.amend_bzparams.lower() == \"n\":\n        return False\n    elif self.amend_bzparams.lower() == \"y\":\n        return True\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict):\n        raise TypeError(\"amend_bzparams requires params to be a dict\")\n\n    for key, value in params.items():\n        if key in ['amend_to', 'comment', 'amend_status']:\n            if value == 'no':\n                params[key] = False\n            elif value == 'yes':\n                params[key] = True\n\n    if 'amend_to' in params and not params['amend_to']:\n        params.pop('amend_to')\n    if 'comment' in params and not params['comment']:\n        params.pop('comment')\n    if 'amend_status' in params and not params['amend_status']:\n        params.pop('amend_status')\n\n    for bug_id in bug_ids:\n        params['bugzilla_id'] = bug_id\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict):\n        raise TypeError(\"amend_bzparams requires a parameter dictionary\")\n\n    if params.get('amend'):\n        for bz in bug_ids:\n            params['amend_status'] = 'MAYBE_CHANGED'\n\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    param_list = []\n    for key in params:\n        if key == 'ni':\n            param_list.append('<bz:ni>%s</bz:ni>' % params[key])\n        else:\n            param_list.append('<bz:param>%s</bz:param>' % params[key])\n    return param_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_params' in params:\n        amended_bug_ids = self.get_bug_ids_from_bz_params(params['amend_bz_params'])\n        bug_ids = bug_ids | amended_bug_ids\n\n    return bug_ids\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if 'amend_bz_product_ids' in params:\n        if isinstance(params['amend_bz_product_ids'], list):\n            params['amend_bz_product_ids'] = ','.join(str(i) for i in params['amend_bz_product_ids'])\n    return params\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not self.amend_bzparams.should_run():\n        return\n\n    if self.dryrun:\n        return\n\n    if self.verbose:\n        print(\"AMENDING BZ PARAMS (NOT NEEDINFO)\")\n\n    params = self.get_bzparams(params, bug_ids)\n\n    for key in params:\n        if key not in self.ignore_meta:\n            self.cache[key] = params[key]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def amend_bzparams(self, params, bug_ids):\n    if not isinstance(params, dict) or not isinstance(bug_ids, list):\n        raise TypeError(\"params and/or bug_ids must be type dict and/or list\")\n\n    if self.amend_bzparams.lower() not in ['true', 'false']:\n        raise ValueError(\"amend_bzparams must be either 'true' or 'false'\")\n\n    params = dict((k.lower(), v) for k, v in params.items())\n\n    for bug in bug_ids:\n        if not isinstance(bug, int):\n            raise TypeError(\"bug_ids must be ints\")\n        params['bug_id'] = bug\n\n    return params\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/atticmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b4567ed7d32e5b55cc83d9", "code": ["def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            values = node.values()\n        elif isinstance(node, DELETED_NODE):\n            values = [DELETED_NODE]\n        else:\n            values = [node]\n\n        for value in values:\n            if isinstance(value, MappingNode):\n                next_node = deep_merge_nodes(value)\n                if next_node is not DELETED_NODE:\n                    node.merge(next_node)\n            else:\n                node.value = value\n        result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    merged = {}\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in merged:\n                if node.value == DELETED_NODE:\n                    logger.debug('Removing duplicate value for node {}'.format(node.value))\n                    node.value = node.duplicate_value()\n                else:\n                    logger.debug('Adding node {} to last value in node {}'.format(node.value, merged[node.value]))\n                    node.value = merged[node.value]\n            else:\n                merged[node.value] = node.value\n        else:\n            logger.debug('Adding node {} to last value in node {}'.format(node, node.value))\n            node.value = node.value\n    return merged\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.key not in result:\n                result.append(node.key)\n            if node.value not in result:\n                result.append(node.value)\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                result.append(node.values()[0])\n            else:\n                logger.debug('Key %s contains multiple values, last one remains', node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if node.type == DELETED_NODE:\n            continue\n\n        for key, value in node.items():\n            if key in node:\n                if isinstance(value, MappingNode) and value.type == DELETED_NODE:\n                    continue\n                else:\n                    node[key] = deep_merge_nodes(value)\n            else:\n                node[key] = value\n\n        result.append(node)\n\n    return result\n", "def deep_merge_nodes(nodes):\n    logger.info('Deep merging nodes')\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            # Deep merge the values corresponding to duplicate keys.\n            values = node.values()\n            if DELETED_NODE in values:\n                values.remove(DELETED_NODE)\n            if len(values) == 0:\n                continue\n            # Get last node value from node.\n            last_node_value = node.values()[-1]\n            if isinstance(last_node_value, MappingNode):\n                # Recursively get last node value from node.\n                result.append(deep_merge_nodes(last_node_value))\n            else:\n                # If value is not MappingNode but last node value is\n                # MappingNode, recursively", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                result.append(node.values()[0])\n            else:\n                logger.warning(\n                    \"Recursive merge of mapping nodes found values for node %s\",\n                    node,\n                )\n                result.extend(deep_merge_nodes(node.values()))\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) > 1:\n                last = result[-1]\n                for k, v in node.items():\n                    if k not in last:\n                        last[k] = v\n                    else:\n                        last[k] = max(last[k], v)\n            else:\n                for k, v in node.items():\n                    if k not in result[-1]:\n                        result[-1][k] = v\n        else:\n            if node not in result[-1]:\n                result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    logger.debug('Deep merging nodes %s', nodes)\n    dupes = []\n    for node in nodes:\n        dupe = None\n        for k, v in iteritems(node):\n            if isinstance(v, MappingNode):\n                # this is an old node, merge the values\n                if dupe is None:\n                    dupe = v\n                else:\n                    # this is a new node, merge the values\n                    dupe.update(v)\n            else:\n                if k!= DELETED_NODE:\n                    # this is not a duplicate key, merge it\n                    dupe = v\n                    break\n        if dupe is None:\n            # if the new nod", "def deep_merge_nodes(nodes):\n    duplicates = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                duplicates.append(node)\n            else:\n                node.values = deep_merge_nodes(node.values)\n        else:\n            duplicates.append(node)\n    return duplicates\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            values = node.values()\n        elif isinstance(node, DELETED_NODE):\n            values = [DELETED_NODE]\n        else:\n            values = [node]\n\n        for value in values:\n            if isinstance(value, MappingNode):\n                next_node = deep_merge_nodes(value)\n                if next_node is not DELETED_NODE:\n                    node.merge(next_node)\n            else:\n                node.value = value\n        result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merged = {}\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in merged:\n                if node.value == DELETED_NODE:\n                    logger.debug('Removing duplicate value for node {}'.format(node.value))\n                    node.value = node.duplicate_value()\n                else:\n                    logger.debug('Adding node {} to last value in node {}'.format(node.value, merged[node.value]))\n                    node.value = merged[node.value]\n            else:\n                merged[node.value] = node.value\n        else:\n            logger.debug('Adding node {} to last value in node {}'.format(node, node.value))\n            node.value = node.value\n    return merged\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.key not in result:\n                result.append(node.key)\n            if node.value not in result:\n                result.append(node.value)\n        else:\n            if node not in result:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                result.append(node.values()[0])\n            else:\n                logger.debug('Key %s contains multiple values, last one remains', node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if node.type == DELETED_NODE:\n            continue\n\n        for key, value in node.items():\n            if key in node:\n                if isinstance(value, MappingNode) and value.type == DELETED_NODE:\n                    continue\n                else:\n                    node[key] = deep_merge_nodes(value)\n            else:\n                node[key] = value\n\n        result.append(node)\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    logger.info('Deep merging nodes')\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            # Deep merge the values corresponding to duplicate keys.\n            values = node.values()\n            if DELETED_NODE in values:\n                values.remove(DELETED_NODE)\n            if len(values) == 0:\n                continue\n            # Get last node value from node.\n            last_node_value = node.values()[-1]\n            if isinstance(last_node_value, MappingNode):\n                # Recursively get last node value from node.\n                result.append(deep_merge_nodes(last_node_value))\n            else:\n                # If value is not MappingNode but last node value is\n                # MappingNode, recursively", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                result.append(node.values()[0])\n            else:\n                logger.warning(\n                    \"Recursive merge of mapping nodes found values for node %s\",\n                    node,\n                )\n                result.extend(deep_merge_nodes(node.values()))\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) > 1:\n                last = result[-1]\n                for k, v in node.items():\n                    if k not in last:\n                        last[k] = v\n                    else:\n                        last[k] = max(last[k], v)\n            else:\n                for k, v in node.items():\n                    if k not in result[-1]:\n                        result[-1][k] = v\n        else:\n            if node not in result[-1]:\n                result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    logger.debug('Deep merging nodes %s', nodes)\n    dupes = []\n    for node in nodes:\n        dupe = None\n        for k, v in iteritems(node):\n            if isinstance(v, MappingNode):\n                # this is an old node, merge the values\n                if dupe is None:\n                    dupe = v\n                else:\n                    # this is a new node, merge the values\n                    dupe.update(v)\n            else:\n                if k!= DELETED_NODE:\n                    # this is not a duplicate key, merge it\n                    dupe = v\n                    break\n        if dupe is None:\n            # if the new nod", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    duplicates = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) == 1:\n                duplicates.append(node)\n            else:\n                node.values = deep_merge_nodes(node.values)\n        else:\n            duplicates.append(node)\n    return duplicates\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b4567ad7d32e5b55cc83af", "code": ["def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--config',\n        help='Path to a file with a default destination config file.',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME\n    )\n    parser.add_argument(\n        '--remote',\n        help='URL of the remote service to use.',\n        default='https://github.com/adamshal/s3'\n    )\n    parser.add_argument(\n        '--bucket',\n        help='The name of the bucket in the config file (as a string)',\n        default='adamshal'\n    )\n    parser.add_argument(\n        '--key',\n        help='The AWS S3 key to use in the destination bucket.',\n        default='adamshal'\n    )\n    parser.add_argument(\n        '--object-name',\n        help='The name of the object in the destination bucket.',\n        default='adamshal_object'\n    ", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Script to remove existing directories or files from the source directory.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Parse the content of the previous commit log '\n                    'and return the resulting arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--config',\n        help='The path to a configuration file to use.',\n        required=False\n    )\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a new data source with a new project.'\n    )\n    parser.add_argument(\n        '--config', '-c',\n        type=str,\n        required=True,\n        help='Path to a config file to load. Defaults to {}.'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        )\n    )\n    parser.add_argument(\n        '--destination-config', '-d',\n        type=str,\n        required=True,\n        help='Path to a destination configuration file.'\n    )\n    parser.add_argument(\n        '--update', '-u',\n        action='store_true',\n        help='Update the data source to match the configuration.'\n    )\n    parser.add_argument(\n        '--output', '-o',\n        type=str,\n        required=False,\n        help='Output directory. Defaults to {", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Provide default destination configuration file.\")\n    parser.add_argument(\n        \"-d\", \"--destination-config-file\",\n        help=\"Configuration file to use.\")\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\",\n        version=\"%(prog)s {}\".format(__version__))\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file')\n    return parser.parse_args(arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', '-c', default=DEFAULT_DESTINATION_CONFIG_FILENAME, required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('--verbose', '-v', action='store_true', help='Be more verbose.')\n    parser.add_argument('--dry-run', '-n', action='store_true', help='Dry run.')\n    parser.add_argument('--overwrite', '-y', action='store_true', help='Overwrite existing files.')\n    parser.add_argument('--dest-dir', '-d', default=None, help='Destination directory.')\n    parser.add_argument('--output', '-o', default=None, help='Output directory.')\n    parser.add_argument('--include-config', '-i', action='store_true', help='Include the default config file in the output directory.')\n    parser.add_argument('--debug', action='store_true', help='Debug mode.')\n    parser.add_argument('--debug", "def parse_arguments(*arguments):\n    return create_argument_parser().parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Project Borgmatic deployment.')\n    parser.add_argument('--config', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--verbose', action='store_true')\n    parser.add_argument('--dry-run', action='store_true')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Convert CSV files to MongoDB database.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument(\n        '--destination-config',\n        required=False,\n        help='Path to destination configuration file.')\n\n    parser.add_argument(\n        '--source-config',\n        required=False,\n        help='Path to source configuration file.')\n\n    parser.add_argument(\n        '--source-collection',\n        required=False,\n        help='Collection name for the source database.')\n\n    parser.add_argument(\n        '--destination-collection',\n        required=False,\n        help='Collection name for the destination database.')\n\n    parser.add_argument(\n        '--source-username',\n        required=False,\n        help='Username for the source database.')\n\n    parser.add_argument(\n    "], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        '--config',\n        help='Path to a file with a default destination config file.',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME\n    )\n    parser.add_argument(\n        '--remote',\n        help='URL of the remote service to use.',\n        default='https://github.com/adamshal/s3'\n    )\n    parser.add_argument(\n        '--bucket',\n        help='The name of the bucket in the config file (as a string)',\n        default='adamshal'\n    )\n    parser.add_argument(\n        '--key',\n        help='The AWS S3 key to use in the destination bucket.',\n        default='adamshal'\n    )\n    parser.add_argument(\n        '--object-name',\n        help='The name of the object in the destination bucket.',\n        default='adamshal_object'\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Script to remove existing directories or files from the source directory.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Parse the content of the previous commit log '\n                    'and return the resulting arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\n        '--config',\n        help='The path to a configuration file to use.',\n        required=False\n    )\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate a new data source with a new project.'\n    )\n    parser.add_argument(\n        '--config', '-c',\n        type=str,\n        required=True,\n        help='Path to a config file to load. Defaults to {}.'.format(\n            DEFAULT_DESTINATION_CONFIG_FILENAME\n        )\n    )\n    parser.add_argument(\n        '--destination-config', '-d',\n        type=str,\n        required=True,\n        help='Path to a destination configuration file.'\n    )\n    parser.add_argument(\n        '--update', '-u',\n        action='store_true',\n        help='Update the data source to match the configuration.'\n    )\n    parser.add_argument(\n        '--output', '-o',\n        type=str,\n        required=False,\n        help='Output directory. Defaults to {", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Provide default destination configuration file.\")\n    parser.add_argument(\n        \"-d\", \"--destination-config-file\",\n        help=\"Configuration file to use.\")\n    parser.add_argument(\n        \"-v\", \"--version\", action=\"version\",\n        version=\"%(prog)s {}\".format(__version__))\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config-file')\n    return parser.parse_args(arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', '-c', default=DEFAULT_DESTINATION_CONFIG_FILENAME, required=False,\n                        help='Configuration file to use.')\n    parser.add_argument('--verbose', '-v', action='store_true', help='Be more verbose.')\n    parser.add_argument('--dry-run', '-n', action='store_true', help='Dry run.')\n    parser.add_argument('--overwrite', '-y', action='store_true', help='Overwrite existing files.')\n    parser.add_argument('--dest-dir', '-d', default=None, help='Destination directory.')\n    parser.add_argument('--output', '-o', default=None, help='Output directory.')\n    parser.add_argument('--include-config', '-i', action='store_true', help='Include the default config file in the output directory.')\n    parser.add_argument('--debug', action='store_true', help='Debug mode.')\n    parser.add_argument('--debug", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return create_argument_parser().parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='Project Borgmatic deployment.')\n    parser.add_argument('--config', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    parser.add_argument('--verbose', action='store_true')\n    parser.add_argument('--dry-run', action='store_true')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Convert CSV files to MongoDB database.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument(\n        '--destination-config',\n        required=False,\n        help='Path to destination configuration file.')\n\n    parser.add_argument(\n        '--source-config',\n        required=False,\n        help='Path to source configuration file.')\n\n    parser.add_argument(\n        '--source-collection',\n        required=False,\n        help='Collection name for the source database.')\n\n    parser.add_argument(\n        '--destination-collection',\n        required=False,\n        help='Collection name for the destination database.')\n\n    parser.add_argument(\n        '--source-username',\n        required=False,\n        help='Username for the source database.')\n\n    parser.add_argument(\n    ", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/atticmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b45679d7d32e5b55cc83a9", "code": ["def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    \"None\"\n", "def parser_flags(parser):\n    return parser.add_argument_group(\n        title='Flags',\n        description='A description for this command.',\n        parents=[parser])\n", "def parser_flags(parser):\n    \"None\"\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.add_argument_group(\n        title='Flags',\n        description='A description for this command.',\n        parents=[parser])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b45665d7d32e5b55cc8365", "code": ["def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser.add_argument(SUBPARSER_ALIASES[argument])\n        elif argument in COMPARABLE_ARGUMENTS:\n            parser.add_argument(COMPARABLE_ARGUMENTS[argument])\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            name = argument[2:]\n            parser.add_argument(name, help=argument[2:])\n        elif argument.startswith('-'):\n            parser.add_argument(argument[1:])\n        else:\n            parser.add_argument(*parser.parse_known_args(argument), help=argument)\n    return vars(parser.parse_args())\n", "def parse_arguments(*unparsed_arguments):\n    return dict(parse_subparser_arguments(unparsed_arguments, subparsers=SUBPARSER_ALIASES))\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    arguments = vars(parser.parse_args(unparsed_arguments))\n    return arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    results = {}\n    for argument in unparsed_arguments:\n        argument_name, argument_value = parser.parse_known_args(argument)\n        if argument_name in SUBPARSER_ALIASES:\n            results[SUBPARSER_ALIASES[argument_name]] = argument_value\n        else:\n            results[argument_name] = argument_value\n    return results\n", "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        arguments[argument] = parse_subparser_arguments(argument.split('='))\n    return arguments\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        try:\n            name, value = argument.split('=')\n        except ValueError:\n            parser.print_help()\n            sys.exit(1)\n        else:\n            parser.add_argument(name, value=value)\n\n    return vars(parser.parse_args())\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    return dict(parser.parse_args(unparsed_arguments))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser.add_argument(SUBPARSER_ALIASES[argument])\n        elif argument in COMPARABLE_ARGUMENTS:\n            parser.add_argument(COMPARABLE_ARGUMENTS[argument])\n        else:\n            parser.add_argument(argument)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument.startswith('--'):\n            name = argument[2:]\n            parser.add_argument(name, help=argument[2:])\n        elif argument.startswith('-'):\n            parser.add_argument(argument[1:])\n        else:\n            parser.add_argument(*parser.parse_known_args(argument), help=argument)\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict(parse_subparser_arguments(unparsed_arguments, subparsers=SUBPARSER_ALIASES))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    arguments = vars(parser.parse_args(unparsed_arguments))\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    results = {}\n    for argument in unparsed_arguments:\n        argument_name, argument_value = parser.parse_known_args(argument)\n        if argument_name in SUBPARSER_ALIASES:\n            results[SUBPARSER_ALIASES[argument_name]] = argument_value\n        else:\n            results[argument_name] = argument_value\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    arguments = dict()\n    for argument in unparsed_arguments:\n        arguments[argument] = parse_subparser_arguments(argument.split('='))\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    args = parser.parse_args(unparsed_arguments)\n    return vars(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parser()\n    for argument in unparsed_arguments:\n        try:\n            name, value = argument.split('=')\n        except ValueError:\n            parser.print_help()\n            sys.exit(1)\n        else:\n            parser.add_argument(name, value=value)\n\n    return vars(parser.parse_args())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b45665d7d32e5b55cc8364", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if subparsers is None:\n        parser = argparse.ArgumentParser(prog=\"aws-ec2 %(prog)s %(subcommand)s %(arguments)s\")\n        for argument in SUBPARSER_ALIASES:\n            parser.add_argument(argument)\n    else:\n        parser = argparse.ArgumentParser(prog=\"aws-ec2 %(prog)s %(subcommand)s %(arguments)s %(subparser_arguments)s\")\n        for argument, subparser_arguments in zip(SUBPARSER_ALIASES, subparsers):\n            parser.add_argument(argument, **subparser_arguments)\n    return parser.parse_args(unparsed_arguments)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.dest == 'archive':\n            parser = subparsers.add_parser(argument.dest, help=argument.description, description=argument.help)\n            parser.add_argument('--archive', type=str, required=True)\n            parser.add_argument('--dest', type=str, required=True)\n            parser.add_argument('--template', type=str, required=False)\n            parser.add_argument('--output', type=str, required=False)\n        elif argument.dest == 'decrypt':\n            parser = subparsers.add_parser(argument.dest, help=argument.description, description=argument.help)\n            parser.add_argument('--key', type=str, required=True)\n            parser.add_argument('--ciphertext', type=str, required=True)\n            parser.add_argument('--output', type=str, required=False)\n     ", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.type in SUBPARSER_ALIASES:\n            argument_class = SUBPARSER_ALIASES[argument.type]\n        else:\n            raise Exception('Unrecognized argument type: %s' % argument.type)\n        parser = argument_class(argument, subparsers)\n        parser.run()\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        unparsed_arguments.get('<command>'),\n        description=unparsed_arguments.get('--help'),\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument(\n        '--version', action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-v', '--verbose', action='store_true',\n        help='Show more informational messages')\n    parser.add_argument(\n        '-d', '--debug', action='store_true',\n        help='Show debugging messages')\n    parser.add_argument(\n        '--test', action='store_true',\n        help='Run tests on the command line')\n    parser.add_argument(\n        '--bzr-path', default=None,\n        help='The bzr path to run the tests on')\n    parser.add_argument(\n        '--hide-stderr', action='store_true", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if len(unparsed_arguments) < 2:\n        raise ParseError(\"Unexpected number of arguments.\")\n    elif unparsed_arguments[0] in SUBPARSER_ALIASES:\n        return SUBPARSER_ALIASES[unparsed_arguments[0]](unparsed_arguments[1:], subparsers)\n    else:\n        raise ParseError(\"Unknown subcommand: {}\".format(unparsed_arguments[0]))\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.dest in SUBPARSER_ALIASES:\n            subparser = SUBPARSER_ALIASES[argument.dest](argument.help, argument.choices)\n        else:\n            subparser = ArgumentParser(description=argument.help, prog=argument.prog, add_help=False)\n            for alias in SUBPARSER_ALIASES:\n                subparser.add_argument(alias)\n        subparser.add_argument('--' + argument.dest, action='store_true', help=argument.help)\n        subparsers.add_parser(subparser)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument not in SUBPARSER_ALIASES:\n            raise BorgmaticError(\"Unknown argument: %s\" % argument)\n        subparser = subparsers.add_parser(\n            SUBPARSER_ALIASES[argument],\n            description=argument.replace('_','').capitalize(),\n            formatter_class=ArgumentDefaultsHelpFormatter\n        )\n        for k, v in vars(argument).items():\n            if v is None:\n                continue\n            subparser.add_argument(k, v)\n    return subparsers\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if len(unparsed_arguments) == 0:\n        parser.print_help()\n        return\n\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parser.set_defaults(**{argument: subparser})\n        elif argument == '--version':\n            print('{} v{}'.format(subparser.prog, __version__))\n            return\n        else:\n            parser.print_help()\n            return\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser_name = SUBPARSER_ALIASES[argument]\n        else:\n            parser = subparsers.add_parser(subparser_name, help=argument)\n            parser.set_defaults(func=argument)\n            parser.add_argument('--help', action='store_true')\n            parser.add_argument('--version', action='store_true')\n            parser.add_argument('--debug', action='store_true')\n            parser.add_argument('--config', help='Configuration file path')\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return [\n        subparser\n        for subparser in subparsers._subparsers._actions\n        if subparser.help == unparsed_arguments.pop(0)\n    ]\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if subparsers is None:\n        parser = argparse.ArgumentParser(prog=\"aws-ec2 %(prog)s %(subcommand)s %(arguments)s\")\n        for argument in SUBPARSER_ALIASES:\n            parser.add_argument(argument)\n    else:\n        parser = argparse.ArgumentParser(prog=\"aws-ec2 %(prog)s %(subcommand)s %(arguments)s %(subparser_arguments)s\")\n        for argument, subparser_arguments in zip(SUBPARSER_ALIASES, subparsers):\n            parser.add_argument(argument, **subparser_arguments)\n    return parser.parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.dest == 'archive':\n            parser = subparsers.add_parser(argument.dest, help=argument.description, description=argument.help)\n            parser.add_argument('--archive', type=str, required=True)\n            parser.add_argument('--dest', type=str, required=True)\n            parser.add_argument('--template', type=str, required=False)\n            parser.add_argument('--output', type=str, required=False)\n        elif argument.dest == 'decrypt':\n            parser = subparsers.add_parser(argument.dest, help=argument.description, description=argument.help)\n            parser.add_argument('--key', type=str, required=True)\n            parser.add_argument('--ciphertext', type=str, required=True)\n            parser.add_argument('--output', type=str, required=False)\n     ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.type in SUBPARSER_ALIASES:\n            argument_class = SUBPARSER_ALIASES[argument.type]\n        else:\n            raise Exception('Unrecognized argument type: %s' % argument.type)\n        parser = argument_class(argument, subparsers)\n        parser.run()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        unparsed_arguments.get('<command>'),\n        description=unparsed_arguments.get('--help'),\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument(\n        '--version', action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-v', '--verbose', action='store_true',\n        help='Show more informational messages')\n    parser.add_argument(\n        '-d', '--debug', action='store_true',\n        help='Show debugging messages')\n    parser.add_argument(\n        '--test', action='store_true',\n        help='Run tests on the command line')\n    parser.add_argument(\n        '--bzr-path', default=None,\n        help='The bzr path to run the tests on')\n    parser.add_argument(\n        '--hide-stderr', action='store_true", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if len(unparsed_arguments) < 2:\n        raise ParseError(\"Unexpected number of arguments.\")\n    elif unparsed_arguments[0] in SUBPARSER_ALIASES:\n        return SUBPARSER_ALIASES[unparsed_arguments[0]](unparsed_arguments[1:], subparsers)\n    else:\n        raise ParseError(\"Unknown subcommand: {}\".format(unparsed_arguments[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument.dest in SUBPARSER_ALIASES:\n            subparser = SUBPARSER_ALIASES[argument.dest](argument.help, argument.choices)\n        else:\n            subparser = ArgumentParser(description=argument.help, prog=argument.prog, add_help=False)\n            for alias in SUBPARSER_ALIASES:\n                subparser.add_argument(alias)\n        subparser.add_argument('--' + argument.dest, action='store_true', help=argument.help)\n        subparsers.add_parser(subparser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument not in SUBPARSER_ALIASES:\n            raise BorgmaticError(\"Unknown argument: %s\" % argument)\n        subparser = subparsers.add_parser(\n            SUBPARSER_ALIASES[argument],\n            description=argument.replace('_','').capitalize(),\n            formatter_class=ArgumentDefaultsHelpFormatter\n        )\n        for k, v in vars(argument).items():\n            if v is None:\n                continue\n            subparser.add_argument(k, v)\n    return subparsers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    if len(unparsed_arguments) == 0:\n        parser.print_help()\n        return\n\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parser.set_defaults(**{argument: subparser})\n        elif argument == '--version':\n            print('{} v{}'.format(subparser.prog, __version__))\n            return\n        else:\n            parser.print_help()\n            return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser_name = SUBPARSER_ALIASES[argument]\n        else:\n            parser = subparsers.add_parser(subparser_name, help=argument)\n            parser.set_defaults(func=argument)\n            parser.add_argument('--help', action='store_true')\n            parser.add_argument('--version', action='store_true')\n            parser.add_argument('--debug', action='store_true')\n            parser.add_argument('--config', help='Configuration file path')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    return [\n        subparser\n        for subparser in subparsers._subparsers._actions\n        if subparser.help == unparsed_arguments.pop(0)\n    ]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/atticmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b45665d7d32e5b55cc8363", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test that a package is installed and can be installed.\")\n    for parser_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(parser_name),\n            action='store_true',\n            help='Test that a package is installed and can be installed.',\n        )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--' + alias, action='store_true', help='Show details of a specific subcommand.')\n\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parser for arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for subparser in SUBPARSER_ALIASES.values():\n        parser.add_subparsers(dest=subparser.dest, title=subparser.title)\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for alias, parse_fn in SUBPARSER_ALIASES.items():\n        parser.add_argument('--%s' % alias, default=None, type=str, help=alias)\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test Borgmatic parser that returns results from a list of files.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for parse_action in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(parse_action.replace('_', '-')),\n            nargs='+',\n            type=parse_action,\n            help='Test command line arguments.'\n        )\n\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Install packages with given names.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name.replace('-', '_')),\n            dest=name,\n            action='store_true',\n            help='Install {}'.format(name)\n        )\n    return parser.parse_known_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Record a flight path to a stop detection and merge them to a single destination stop.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for stop_detection in SUBPARSER_ALIASES.values():\n        parser.add_argument(\n            '--stop-detection',\n            dest=stop_detection.stop_detection,\n            help=stop_detection.help,\n            required=False,\n            metavar=stop_detection.metavar,\n            default=stop_detection.default,\n            choices=stop_detection.choices,\n            type=stop_detection.type,\n            help=stop_detection.help_text\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test subcommand parser.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(command_name),\n            action='store_true',\n            help='Show help for {}'.format(command_name)\n        )\n\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the installation of the Git repository.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(argument),\n            help='A description for the {} argument.'.format(argument)\n        )\n    return parser.parse_args()\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Run the test suite.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for parse_argument in SUBPARSER_ALIASES:\n        parser.add_argument(*parse_argument[0], **parse_argument[1])\n\n    return parser.parse_known_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description=\"Test that a package is installed and can be installed.\")\n    for parser_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(parser_name),\n            action='store_true',\n            help='Test that a package is installed and can be installed.',\n        )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--' + alias, action='store_true', help='Show details of a specific subcommand.')\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test parser for arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for subparser in SUBPARSER_ALIASES.values():\n        parser.add_subparsers(dest=subparser.dest, title=subparser.title)\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser()\n    for alias, parse_fn in SUBPARSER_ALIASES.items():\n        parser.add_argument('--%s' % alias, default=None, type=str, help=alias)\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test Borgmatic parser that returns results from a list of files.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for parse_action in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(parse_action.replace('_', '-')),\n            nargs='+',\n            type=parse_action,\n            help='Test command line arguments.'\n        )\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Install packages with given names.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(name.replace('-', '_')),\n            dest=name,\n            action='store_true',\n            help='Install {}'.format(name)\n        )\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Record a flight path to a stop detection and merge them to a single destination stop.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for stop_detection in SUBPARSER_ALIASES.values():\n        parser.add_argument(\n            '--stop-detection',\n            dest=stop_detection.stop_detection,\n            help=stop_detection.help,\n            required=False,\n            metavar=stop_detection.metavar,\n            default=stop_detection.default,\n            choices=stop_detection.choices,\n            type=stop_detection.type,\n            help=stop_detection.help_text\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test subcommand parser.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for command_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(command_name),\n            action='store_true',\n            help='Show help for {}'.format(command_name)\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Test the installation of the Git repository.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(argument),\n            help='A description for the {} argument.'.format(argument)\n        )\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Run the test suite.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for parse_argument in SUBPARSER_ALIASES:\n        parser.add_argument(*parse_argument[0], **parse_argument[1])\n\n    return parser.parse_known_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/config/load.py", "project": "witten/borgmatic", "name": "deep_merge_nodes", "docstring": "Given a nested borgmatic configuration data structure as a list of tuples in the form of:\n\n    (\n        ruamel.yaml.nodes.ScalarNode as a key,\n        ruamel.yaml.nodes.MappingNode or other Node as a value,\n    ),\n\n... deep merge any node values corresponding to duplicate keys and return the result. If\nthere are colliding keys with non-MappingNode values (e.g., integers or strings), the last\nof the values wins.\n\nFor instance, given node values of:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='7')\n                ),\n            ]),\n        ),\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\n... the returned result would be:\n\n    [\n        (\n            ScalarNode(tag='tag:yaml.org,2002:str', value='retention'),\n            MappingNode(tag='tag:yaml.org,2002:map', value=[\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_hourly'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='24')\n                ),\n                (\n                    ScalarNode(tag='tag:yaml.org,2002:str', value='keep_daily'),\n                    ScalarNode(tag='tag:yaml.org,2002:int', value='5')\n                ),\n            ]),\n        ),\n    ]\n\nThe purpose of deep merging like this is to support, for instance, merging one borgmatic\nconfiguration file into another for reuse, such that a configuration section (\"retention\",\netc.) does not completely replace the corresponding section in a merged file.", "ques_id": "62b438ba66fea644fe22cca2", "code": ["def deep_merge_nodes(nodes):\n    result = deep_merge_nodes_recurse(nodes, DELETED_NODE)\n    if isinstance(result, MappingNode):\n        logger.debug('Returning duplicate values')\n        return result\n    else:\n        return result[-1]\n", "def deep_merge_nodes(nodes):\n    merged_nodes = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if not node.value:\n                continue\n            last_value = merged_nodes[-1] if len(merged_nodes) > 0 else DELETED_NODE\n            if node.value!= last_value:\n                logger.warning('duplicate configuration of node %s', node)\n                merged_nodes[-1] = node.value\n                continue\n            merged_nodes.append(node.value)\n        else:\n            merged_nodes.append(node)\n    return merged_nodes\n", "def deep_merge_nodes(nodes):\n    def _deep_merge_nodes(node):\n        if isinstance(node, MappingNode):\n            dupe_keys = set(node.keys()) & set(node.values())\n            if len(dupe_keys) > 0:\n                logger.warning('Duplicate keys found in node \"%s\": %s', node.__class__.__name__, dupe_keys)\n            for k in node:\n                if k not in node:\n                    node[k] = node[k]\n                elif isinstance(node[k], MappingNode):\n                    _deep_merge_nodes(node[k])\n        return node\n\n    return list(map(_deep_merge_nodes, nodes))\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if any(node.value.get(key) == node.value.get(DELETED_NODE)\n                   for key in node.value):\n                continue\n            result.append(node)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    def _merge_nodes(nodes):\n        nodes_copy = deepcopy(nodes)\n        for k, v in nodes_copy.items():\n            if isinstance(v, MappingNode):\n                _merge_nodes(v.value)\n            else:\n                if k!= DELETED_NODE:\n                    nodes[k] = v\n        return nodes\n\n    return _merge_nodes(nodes)\n", "def deep_merge_nodes(nodes):\n    logger.debug('deep_merge_nodes(%s)', nodes)\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in DELETED_NODE:\n                continue\n            result.append(node.value)\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    logger.debug('deep_merge_nodes(%s)', nodes)\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if not node.value:\n                continue\n            if isinstance(node.value, dict):\n                next_node = deep_merge_nodes(node.value)\n                if next_node is None:\n                    continue\n                node.value = next_node\n                logger.debug('updating node %s', node)\n            else:\n                logger.warning(\n                    'DeepMergeDict node values are not dictionaries')\n        elif isinstance(node, ValueNode):\n            logger.debug('updating node %s', node)\n            node.value = node.default_value\n            nod", "def deep_merge_nodes(nodes):\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            n = deep_merge_nodes(v)\n            if n is not None:\n                n.update(k)\n                nodes[k] = n\n        else:\n            if k!= DELETED_NODE:\n                yield k, v\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) > 1:\n                logger.warning(\n                    'Deep merging node values from multiple '\n                    'configuration nodes is not supported. Please '\n                    'ensure node values are consistent.'\n                )\n            for key in node.keys():\n                if key not in result[-1]:\n                    result[-1][key] = node[key]\n                else:\n                    result[-1][key] = deep_merge_nodes(result[-1][key], node[key])\n        else:\n            result.append(node)\n    return result\n", "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            key = node.key\n            if key not in result:\n                result.append(key)\n            if isinstance(node.value, MappingNode):\n                result.extend(deep_merge_nodes(node.value.values()))\n            else:\n                result.append(key)\n        else:\n            result.append(node)\n    return result\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def deep_merge_nodes(nodes):\n    result = deep_merge_nodes_recurse(nodes, DELETED_NODE)\n    if isinstance(result, MappingNode):\n        logger.debug('Returning duplicate values')\n        return result\n    else:\n        return result[-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    merged_nodes = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if not node.value:\n                continue\n            last_value = merged_nodes[-1] if len(merged_nodes) > 0 else DELETED_NODE\n            if node.value!= last_value:\n                logger.warning('duplicate configuration of node %s', node)\n                merged_nodes[-1] = node.value\n                continue\n            merged_nodes.append(node.value)\n        else:\n            merged_nodes.append(node)\n    return merged_nodes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    def _deep_merge_nodes(node):\n        if isinstance(node, MappingNode):\n            dupe_keys = set(node.keys()) & set(node.values())\n            if len(dupe_keys) > 0:\n                logger.warning('Duplicate keys found in node \"%s\": %s', node.__class__.__name__, dupe_keys)\n            for k in node:\n                if k not in node:\n                    node[k] = node[k]\n                elif isinstance(node[k], MappingNode):\n                    _deep_merge_nodes(node[k])\n        return node\n\n    return list(map(_deep_merge_nodes, nodes))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if any(node.value.get(key) == node.value.get(DELETED_NODE)\n                   for key in node.value):\n                continue\n            result.append(node)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    def _merge_nodes(nodes):\n        nodes_copy = deepcopy(nodes)\n        for k, v in nodes_copy.items():\n            if isinstance(v, MappingNode):\n                _merge_nodes(v.value)\n            else:\n                if k!= DELETED_NODE:\n                    nodes[k] = v\n        return nodes\n\n    return _merge_nodes(nodes)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    logger.debug('deep_merge_nodes(%s)', nodes)\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if node.value in DELETED_NODE:\n                continue\n            result.append(node.value)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    logger.debug('deep_merge_nodes(%s)', nodes)\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if not node.value:\n                continue\n            if isinstance(node.value, dict):\n                next_node = deep_merge_nodes(node.value)\n                if next_node is None:\n                    continue\n                node.value = next_node\n                logger.debug('updating node %s', node)\n            else:\n                logger.warning(\n                    'DeepMergeDict node values are not dictionaries')\n        elif isinstance(node, ValueNode):\n            logger.debug('updating node %s', node)\n            node.value = node.default_value\n            nod", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    for k, v in nodes.items():\n        if isinstance(v, MappingNode):\n            n = deep_merge_nodes(v)\n            if n is not None:\n                n.update(k)\n                nodes[k] = n\n        else:\n            if k!= DELETED_NODE:\n                yield k, v\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            if len(node.values()) > 1:\n                logger.warning(\n                    'Deep merging node values from multiple '\n                    'configuration nodes is not supported. Please '\n                    'ensure node values are consistent.'\n                )\n            for key in node.keys():\n                if key not in result[-1]:\n                    result[-1][key] = node[key]\n                else:\n                    result[-1][key] = deep_merge_nodes(result[-1][key], node[key])\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def deep_merge_nodes(nodes):\n    result = []\n    for node in nodes:\n        if isinstance(node, MappingNode):\n            key = node.key\n            if key not in result:\n                result.append(key)\n            if isinstance(node.value, MappingNode):\n                result.extend(deep_merge_nodes(node.value.values()))\n            else:\n                result.append(key)\n        else:\n            result.append(node)\n    return result\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/generate_config.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as an ArgumentParser instance.", "ques_id": "62b438b666fea644fe22cc78", "code": ["def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config_file')\n    parser.add_argument('destination')\n    parser.add_argument('-v', '--version', action='store_true')\n\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='A script to remove nodes from a graph.')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (even nodes from graph do not lead to any effect).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages (even nodes from graph do not lead to any effect).')\n    parser.add_argument('-n', '--dry-run', action='store_true',\n                        help='Dry run (i.e. no changes to graph data).')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='Force graph to be removed without erasing any nodes.')\n    parser.add_argument('-s', '--silent', action='store_true',\n                 ", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_file')\n    parser.add_argument('--output_file')\n    parser.add_argument('--overwrite', action='store_true')\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate shapefiles from a single csv file.')\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-d', '--destination-config',\n        help='Path to destination config file.')\n    parser.add_argument(\n        '-i', '--intermediate-output',\n        help='Path to save intermediate results to.')\n    parser.add_argument(\n        '-o', '--output-file',\n        help='Output file to save the results.')\n    parser.add_argument(\n        '-s', '--shapefile-input',\n        help='Input shapefile to save.')\n    parser.add_argument(\n        '-sc', '--shapefile-output',\n        help='Output shapefile to save.')", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', '-c', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Check if a file exists on the local system.')\n\n    parser.add_argument(\n        '-d',\n        '--destination-config',\n        required=False,\n        help='Path to a config file to use.',\n        dest='destination_config',\n        metavar='FILE',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n    )\n\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__,\n    )\n\n    args = parser.parse_args(*arguments)\n\n    return args\n", "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Take actions related to archive metadata.'\n    )\n\n    parser.add_argument(\n        '--src',\n        help='Path to a source folder to the source archive.',\n        required=True\n    )\n\n    parser.add_argument(\n        '--dest',\n        help='Path to a destination folder to the destination metadata.',\n        required=True\n    )\n\n    parser.add_argument(\n        '--skip',\n        help='Skip the archive if a file is empty.',\n        action='store_true',\n        dest='skip'\n    )\n\n    parser.add_argument(\n        '--dry-run',\n        help='Dry run actions.',\n        action='store_true',\n        dest='dry_run'\n    )\n\n    parser.add_argument(\n        '--debug',\n        help='Print debugging messages to stde", "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI tools',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'destination',\n        metavar='DEST',\n        type=str,\n        nargs='?',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='File to store the destination configuration in. Defaults to '\n        'the default destination config file in the current directory.'\n    )\n    parser.add_argument(\n        '--update',\n        action='store_true',\n        help='Update the destination configuration after running this script. '\n        'Defaults to the destination config file in the current directory.'\n    )\n    return parser.parse_args(*arguments)\n", "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test installation of a source package.\"\n    )\n    parser.add_argument(\n        \"-i\", \"--install-source-package\",\n        help=\"The source package to install to.\",\n        required=False,\n        metavar=\"SOURCE_PACKAGE\"\n    )\n    parser.add_argument(\n        \"-v\", \"--version\",\n        action=\"store_true\",\n        help=\"Print the version of this program.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging information.\"\n    )\n    parser.add_argument(\n        \"-n\", \"--dry-run\",\n        action=\"store_true\",\n        help=\"Print dry run output.\"\n    )\n    parser.add_argument(\n        \"-l\", \"--log\",\n        default=\"\",\n        help=\"Set a logger for this script.\"\n    )\n    parser.add_argument(\n        \"--d"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('config_file')\n    parser.add_argument('destination')\n    parser.add_argument('-v', '--version', action='store_true')\n\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(description='A script to remove nodes from a graph.')\n    parser.add_argument('-v', '--verbose', action='store_true',\n                        help='Show debug messages (even nodes from graph do not lead to any effect).')\n    parser.add_argument('-d', '--debug', action='store_true',\n                        help='Show debug messages (even nodes from graph do not lead to any effect).')\n    parser.add_argument('-n', '--dry-run', action='store_true',\n                        help='Dry run (i.e. no changes to graph data).')\n    parser.add_argument('-f', '--force', action='store_true',\n                        help='Force graph to be removed without erasing any nodes.')\n    parser.add_argument('-s', '--silent', action='store_true',\n                 ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('destination_config_file')\n    parser.add_argument('--output_file')\n    parser.add_argument('--overwrite', action='store_true')\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description='Generate shapefiles from a single csv file.')\n    parser.add_argument(\n        '-v', '--version',\n        action='version',\n        version='%(prog)s {}'.format(__version__))\n    parser.add_argument(\n        '-d', '--destination-config',\n        help='Path to destination config file.')\n    parser.add_argument(\n        '-i', '--intermediate-output',\n        help='Path to save intermediate results to.')\n    parser.add_argument(\n        '-o', '--output-file',\n        help='Output file to save the results.')\n    parser.add_argument(\n        '-s', '--shapefile-input',\n        help='Input shapefile to save.')\n    parser.add_argument(\n        '-sc', '--shapefile-output',\n        help='Output shapefile to save.')", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--config', '-c', default=DEFAULT_DESTINATION_CONFIG_FILENAME)\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Check if a file exists on the local system.')\n\n    parser.add_argument(\n        '-d',\n        '--destination-config',\n        required=False,\n        help='Path to a config file to use.',\n        dest='destination_config',\n        metavar='FILE',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n    )\n\n    parser.add_argument(\n        '-v',\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__,\n    )\n\n    args = parser.parse_args(*arguments)\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n\n    parser = argparse.ArgumentParser(\n        description='Take actions related to archive metadata.'\n    )\n\n    parser.add_argument(\n        '--src',\n        help='Path to a source folder to the source archive.',\n        required=True\n    )\n\n    parser.add_argument(\n        '--dest',\n        help='Path to a destination folder to the destination metadata.',\n        required=True\n    )\n\n    parser.add_argument(\n        '--skip',\n        help='Skip the archive if a file is empty.',\n        action='store_true',\n        dest='skip'\n    )\n\n    parser.add_argument(\n        '--dry-run',\n        help='Dry run actions.',\n        action='store_true',\n        dest='dry_run'\n    )\n\n    parser.add_argument(\n        '--debug',\n        help='Print debugging messages to stde", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    return argparse.ArgumentParser(\n        description='Borgmatic CLI tools',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'destination',\n        metavar='DEST',\n        type=str,\n        nargs='?',\n        default=DEFAULT_DESTINATION_CONFIG_FILENAME,\n        help='File to store the destination configuration in. Defaults to '\n        'the default destination config file in the current directory.'\n    )\n    parser.add_argument(\n        '--update',\n        action='store_true',\n        help='Update the destination configuration after running this script. '\n        'Defaults to the destination config file in the current directory.'\n    )\n    return parser.parse_args(*arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*arguments):\n    parser = argparse.ArgumentParser(\n        description=\"Test installation of a source package.\"\n    )\n    parser.add_argument(\n        \"-i\", \"--install-source-package\",\n        help=\"The source package to install to.\",\n        required=False,\n        metavar=\"SOURCE_PACKAGE\"\n    )\n    parser.add_argument(\n        \"-v\", \"--version\",\n        action=\"store_true\",\n        help=\"Print the version of this program.\"\n    )\n    parser.add_argument(\n        \"-d\", \"--debug\",\n        action=\"store_true\",\n        help=\"Print debugging information.\"\n    )\n    parser.add_argument(\n        \"-n\", \"--dry-run\",\n        action=\"store_true\",\n        help=\"Print dry run output.\"\n    )\n    parser.add_argument(\n        \"-l\", \"--log\",\n        default=\"\",\n        help=\"Set a logger for this script.\"\n    )\n    parser.add_argument(\n        \"--d", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62b438b666fea644fe22cc72", "code": ["def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    \"None\"\n", "def parser_flags(parser):\n    return parser\n", "def parser_flags(parser):\n    return None\n", "def parser_flags(parser):\n    return parser.add_argument(\n        '--no-color',\n        action='store_false',\n        dest='use_color',\n        default=True,\n        help='Disable coloring of output.',\n    )\n", "def parser_flags(parser):\n    return None\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    \"None\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return parser.add_argument(\n        '--no-color',\n        action='store_false',\n        dest='use_color',\n        default=True,\n        help='Disable coloring of output.',\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return None\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/completion.py", "project": "witten/borgmatic", "name": "bash_completion", "docstring": "Return a bash completion script for the borgmatic command. Produce this by introspecting\nborgmatic's command-line argument parsers.", "ques_id": "62b438b566fea644fe22cc70", "code": ["def bash_completion():\n    parser = argparse.ArgumentParser(\n        prog='bash-completion',\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    for parser_flag in parser_flags:\n        parser.add_argument(*parser_flag.args, **parser_flag.kwargs)\n    return parser.parse_args()\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser_flags(parser)\n\n    return parser.parse_args()\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for key, value in bash_completion_flags.items():\n        parser.add_argument(\n            '--{}'.format(key.replace('_', '-')),\n            type=str,\n            action='store_true',\n            help='Enable {} bash completion.'.format(key),\n        )\n\n        parser.add_argument(\n            '--{}-flag'.format(key.replace('_', '-')),\n            type=str,\n            default=value,\n            help='Enable {} bash completion with flags.'.format(key),\n        )\n\n    return parser.parse_args()\n", "def bash_completion():\n    arguments = vars(parser.parse_args())\n    arguments.pop('root', None)\n    return arguments\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        prog='bash-completion',\n        description=UPGRADE_MESSAGE,\n        add_help=False\n    )\n    for parser_flag in parser_flags(parser):\n        parser_flag.add_to_parser(parser)\n    return parser.parse_args()\n", "def bash_completion():\n    commands = {}\n    for command_name in ['install', 'upgrade','remove']:\n        commands[command_name] = parser_flags(command_name)\n    return commands\n", "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__\n    )\n\n    parser.add_argument(\n        '--config',\n        default='~/.bashrc',\n        help='Configuration file for the server'\n    )\n\n    parser.add_argument(\n        '--update',\n        action='store_true',\n        help='Update remote repositories on the server.'\n    )\n\n    parser.add_argument(\n        '--delete',\n        action='store_true',\n        help='Delete remote repositories on the server.'\n    )\n\n    parser.add_argument(\n        '--dry-run',\n        action='store_true',\n        help='Dry run but skip the action.'\n    )\n\n   ", "def bash_completion():\n    arguments = []\n    for argument in sys.argv[1:]:\n        # Skip the optional argument '--'\n        if argument[0] == '-':\n            continue\n\n        # Ignore any non-optional arguments\n        if argument[0]!= '-':\n            arguments.append(argument)\n\n    return arguments\n", "def bash_completion():\n    bash_completion = dict(\n        create=bash_completion_create,\n        destroy=bash_completion_destroy,\n        list=bash_completion_list,\n        update=bash_completion_update,\n        delete=bash_completion_delete)\n\n    for (k, v) in bash_completion_flags.items():\n        bash_completion[k] = bash_completion_flags[k]\n    return bash_completion\n", "def bash_completion():\n    parser = ArgumentParser(prog=\"bash-completion\")\n    for flag in sorted(bash_completion.COMMANDS):\n        parser.add_argument(flag)\n    return parser.parse_args()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        prog='bash-completion',\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n    for parser_flag in parser_flags:\n        parser.add_argument(*parser_flag.args, **parser_flag.kwargs)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser_flags(parser)\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for key, value in bash_completion_flags.items():\n        parser.add_argument(\n            '--{}'.format(key.replace('_', '-')),\n            type=str,\n            action='store_true',\n            help='Enable {} bash completion.'.format(key),\n        )\n\n        parser.add_argument(\n            '--{}-flag'.format(key.replace('_', '-')),\n            type=str,\n            default=value,\n            help='Enable {} bash completion with flags.'.format(key),\n        )\n\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    arguments = vars(parser.parse_args())\n    arguments.pop('root', None)\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        prog='bash-completion',\n        description=UPGRADE_MESSAGE,\n        add_help=False\n    )\n    for parser_flag in parser_flags(parser):\n        parser_flag.add_to_parser(parser)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    commands = {}\n    for command_name in ['install', 'upgrade','remove']:\n        commands[command_name] = parser_flags(command_name)\n    return commands\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = argparse.ArgumentParser(\n        description=UPGRADE_MESSAGE,\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\n        '--version',\n        action='version',\n        version='%(prog)s'+ __version__\n    )\n\n    parser.add_argument(\n        '--config',\n        default='~/.bashrc',\n        help='Configuration file for the server'\n    )\n\n    parser.add_argument(\n        '--update',\n        action='store_true',\n        help='Update remote repositories on the server.'\n    )\n\n    parser.add_argument(\n        '--delete',\n        action='store_true',\n        help='Delete remote repositories on the server.'\n    )\n\n    parser.add_argument(\n        '--dry-run',\n        action='store_true',\n        help='Dry run but skip the action.'\n    )\n\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    arguments = []\n    for argument in sys.argv[1:]:\n        # Skip the optional argument '--'\n        if argument[0] == '-':\n            continue\n\n        # Ignore any non-optional arguments\n        if argument[0]!= '-':\n            arguments.append(argument)\n\n    return arguments\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    bash_completion = dict(\n        create=bash_completion_create,\n        destroy=bash_completion_destroy,\n        list=bash_completion_list,\n        update=bash_completion_update,\n        delete=bash_completion_delete)\n\n    for (k, v) in bash_completion_flags.items():\n        bash_completion[k] = bash_completion_flags[k]\n    return bash_completion\n", "is_pass": false, "return_code": 1}, {"generate_code": "def bash_completion():\n    parser = ArgumentParser(prog=\"bash-completion\")\n    for flag in sorted(bash_completion.COMMANDS):\n        parser.add_argument(flag)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_arguments", "docstring": "Given command-line arguments with which this script was invoked, parse the arguments and return\nthem as a dict mapping from subparser name (or \"global\") to an argparse.Namespace instance.", "ques_id": "62b438a266fea644fe22cc2e", "code": ["def parse_arguments(*unparsed_arguments):\n    return list(chain(*[parse_subparser_arguments(unparsed_argument, subparsers) for unparsed_argument, subparsers in SUBPARSER_ALIASES.items()]))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for parser_alias in SUBPARSER_ALIASES:\n        parser = parser_alias(parser)\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return parser\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = SUBPARSER_ALIASES[subparser_name]\n        parser.add_argument('--{}'.format(subparser_name.replace('-', '_')),\n                            action='store_true',\n                            help='Show {} help'.format(subparser_name))\n        parser.add_argument('--{}-help'.format(subparser_name.replace('-', '_')),\n                            action='store_true',\n                            help='Show {} help'.format(subparser_name))\n        parser.add_argument('--{}-config'.format(subparser_name.replace('-', '_')),\n                            metavar='FILE',\n                            help='Show {} config'.format(subparser_name))\n   ", "def parse_arguments(*unparsed_arguments):\n    return dict(parse_subparser_arguments(unparsed_arguments, SUBPARSER_ALIASES))\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser.add_argument(SUBPARSER_ALIASES[argument])\n        else:\n            parser.add_argument(argument)\n    return parser.parse_args()\n", "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    for argument in unparsed_arguments:\n        argument = parser.parse_args(argument.split())\n    return argument\n", "def parse_arguments(*unparsed_arguments):\n    return argparse.ArgumentParser(\n        description='Generate a single PDF from a Github repository.',\n        parents=[make_parser()],\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "def parse_arguments(*unparsed_arguments):\n    return argparse.ArgumentParser(\n        prog='mbrainz',\n        description='A simple tool to parse and validate a mbrainz archive.',\n        formatter_class=ArgparseFormatter\n    )\n", "def parse_arguments(*unparsed_arguments):\n    return make_parsers().parse_args(unparsed_arguments)\n", "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name, arguments in SUBPARSER_ALIASES.items():\n        if arguments:\n            parser.add_argument(name, **arguments)\n    return parser.parse_known_args(unparsed_arguments)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_arguments(*unparsed_arguments):\n    return list(chain(*[parse_subparser_arguments(unparsed_argument, subparsers) for unparsed_argument, subparsers in SUBPARSER_ALIASES.items()]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for parser_alias in SUBPARSER_ALIASES:\n        parser = parser_alias(parser)\n    for arg in unparsed_arguments:\n        parser.add_argument(*arg.args, **arg.kwargs)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for subparser_name in SUBPARSER_ALIASES:\n        subparser = SUBPARSER_ALIASES[subparser_name]\n        parser.add_argument('--{}'.format(subparser_name.replace('-', '_')),\n                            action='store_true',\n                            help='Show {} help'.format(subparser_name))\n        parser.add_argument('--{}-help'.format(subparser_name.replace('-', '_')),\n                            action='store_true',\n                            help='Show {} help'.format(subparser_name))\n        parser.add_argument('--{}-config'.format(subparser_name.replace('-', '_')),\n                            metavar='FILE',\n                            help='Show {} config'.format(subparser_name))\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return dict(parse_subparser_arguments(unparsed_arguments, SUBPARSER_ALIASES))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser.add_argument(SUBPARSER_ALIASES[argument])\n        else:\n            parser.add_argument(argument)\n    return parser.parse_args()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = make_parsers()\n    for argument in unparsed_arguments:\n        argument = parser.parse_args(argument.split())\n    return argument\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return argparse.ArgumentParser(\n        description='Generate a single PDF from a Github repository.',\n        parents=[make_parser()],\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return argparse.ArgumentParser(\n        prog='mbrainz',\n        description='A simple tool to parse and validate a mbrainz archive.',\n        formatter_class=ArgparseFormatter\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    return make_parsers().parse_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_arguments(*unparsed_arguments):\n    parser = argparse.ArgumentParser()\n    for name, arguments in SUBPARSER_ALIASES.items():\n        if arguments:\n            parser.add_argument(name, **arguments)\n    return parser.parse_known_args(unparsed_arguments)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "parse_subparser_arguments", "docstring": "Given a sequence of arguments and a dict from subparser name to argparse.ArgumentParser\ninstance, give each requested action's subparser a shot at parsing all arguments. This allows\ncommon arguments like \"--repository\" to be shared across multiple subparsers.\n\nReturn the result as a tuple of (a dict mapping from subparser name to a parsed namespace of\narguments, a list of remaining arguments not claimed by any subparser).", "ques_id": "62b438a266fea644fe22cc2d", "code": ["def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = argparse.ArgumentParser(\n        prog='tx-env',\n        description='tx environment management tools',\n        add_help=False\n    )\n    for subparser in subparsers._subparserss:\n        parser.add_subparsers(dest=subparser.title)\n\n    for argument in unparsed_arguments:\n        argument_parser = parser.add_argument_group(title=argument.title)\n        argument_parser.add_argument(\n            *argument.args, **argument.kwargs\n        )\n    return parser\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser('create', help='create a new schema')\n    parser.add_argument('name', help='name of the schema')\n    parser.add_argument('--version', action='store_true', help='print version number')\n    parser.add_argument('--required', action='store_true', help='set the schema to required')\n    parser.add_argument('--no-cache', action='store_true', help='disable caching of the schema')\n    parser.add_argument('--no-schema-update', action='store_true', help='disable schema updating (no schema update)')\n    parser.add_argument('--no-db', action='store_true', help='disable database access (no tables)')\n    parser.add_argument('--no-tests', action='store_true', help='disable tests (no migrations)')\n    parser.add_argument('--no-database-update', action='store_true', help='disable database update (no migrations)')\n    parser.add_argument('--no-tests-database-update',", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parse_arguments(argument, subparser)\n        else:\n            parse_arguments(argument)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument], help=argument.replace('_',''))\n        else:\n            subparser = parse_arguments(argument, subparsers)\n\n        if argument == '-v':\n            subparser.set_defaults(verbosity=True)\n        elif argument == '-h':\n            subparser.set_defaults(verbosity=False)\n        elif argument == '--version':\n            print('{0}'.format(__version__))\n            sys.exit(0)\n\n        if isinstance(subparser, argparse.ArgumentDefaultsHelpFormatter):\n            subparser.add_argument('--help', action='store_true')\n        elif isinstance(subparser, argparse.Argument):\n            subparser.add_argument('--help')\n\n       ", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for parser_name in SUBPARSER_ALIASES:\n        parser = parsers[parser_name]\n        subparser = parser(unparsed_arguments)\n        subparsers.add_parser(subparser.name, help=subparser.description)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        getattr(SUBPARSER_ALIASES, unparsed_arguments.pop(0)))\n    for argument in unparsed_arguments:\n        parser.add_argument(argument)\n    return parser\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parse_arguments(unparsed_arguments=subparser.parse_args(), subparser=subparser)\n        else:\n            parser = subparsers.add_parser(argument)\n            parse_arguments(unparsed_arguments=parser.parse_args(), subparser=parser)\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        name=unparsed_arguments.get(\"<command>\"),\n        description=\"Execute a command using the '{}' subcommand\".format(\n            unparsed_arguments.get(\"<command>\")\n        )\n    )\n    parse_arguments(parser.add_argument, unparsed_arguments[\"<arguments>\"])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for subparser_name, subparser in SUBPARSER_ALIASES.items():\n        if subparser_name in unparsed_arguments:\n            setattr(subparsers, subparser_name, unparsed_arguments[subparser_name])\n", "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser_method = SUBPARSER_ALIASES[argument]\n        else:\n            parser_method = getattr(subparsers, argument)\n        parser_method(argument)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = argparse.ArgumentParser(\n        prog='tx-env',\n        description='tx environment management tools',\n        add_help=False\n    )\n    for subparser in subparsers._subparserss:\n        parser.add_subparsers(dest=subparser.title)\n\n    for argument in unparsed_arguments:\n        argument_parser = parser.add_argument_group(title=argument.title)\n        argument_parser.add_argument(\n            *argument.args, **argument.kwargs\n        )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser('create', help='create a new schema')\n    parser.add_argument('name', help='name of the schema')\n    parser.add_argument('--version', action='store_true', help='print version number')\n    parser.add_argument('--required', action='store_true', help='set the schema to required')\n    parser.add_argument('--no-cache', action='store_true', help='disable caching of the schema')\n    parser.add_argument('--no-schema-update', action='store_true', help='disable schema updating (no schema update)')\n    parser.add_argument('--no-db', action='store_true', help='disable database access (no tables)')\n    parser.add_argument('--no-tests', action='store_true', help='disable tests (no migrations)')\n    parser.add_argument('--no-database-update', action='store_true', help='disable database update (no migrations)')\n    parser.add_argument('--no-tests-database-update',", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parse_arguments(argument, subparser)\n        else:\n            parse_arguments(argument)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument], help=argument.replace('_',''))\n        else:\n            subparser = parse_arguments(argument, subparsers)\n\n        if argument == '-v':\n            subparser.set_defaults(verbosity=True)\n        elif argument == '-h':\n            subparser.set_defaults(verbosity=False)\n        elif argument == '--version':\n            print('{0}'.format(__version__))\n            sys.exit(0)\n\n        if isinstance(subparser, argparse.ArgumentDefaultsHelpFormatter):\n            subparser.add_argument('--help', action='store_true')\n        elif isinstance(subparser, argparse.Argument):\n            subparser.add_argument('--help')\n\n       ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for parser_name in SUBPARSER_ALIASES:\n        parser = parsers[parser_name]\n        subparser = parser(unparsed_arguments)\n        subparsers.add_parser(subparser.name, help=subparser.description)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        getattr(SUBPARSER_ALIASES, unparsed_arguments.pop(0)))\n    for argument in unparsed_arguments:\n        parser.add_argument(argument)\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            subparser = subparsers.add_parser(SUBPARSER_ALIASES[argument])\n            parse_arguments(unparsed_arguments=subparser.parse_args(), subparser=subparser)\n        else:\n            parser = subparsers.add_parser(argument)\n            parse_arguments(unparsed_arguments=parser.parse_args(), subparser=parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    parser = subparsers.add_parser(\n        name=unparsed_arguments.get(\"<command>\"),\n        description=\"Execute a command using the '{}' subcommand\".format(\n            unparsed_arguments.get(\"<command>\")\n        )\n    )\n    parse_arguments(parser.add_argument, unparsed_arguments[\"<arguments>\"])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for subparser_name, subparser in SUBPARSER_ALIASES.items():\n        if subparser_name in unparsed_arguments:\n            setattr(subparsers, subparser_name, unparsed_arguments[subparser_name])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_subparser_arguments(unparsed_arguments, subparsers):\n    for argument in unparsed_arguments:\n        if argument in SUBPARSER_ALIASES:\n            parser_method = SUBPARSER_ALIASES[argument]\n        else:\n            parser_method = getattr(subparsers, argument)\n        parser_method(argument)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "borgmatic/commands/arguments.py", "project": "witten/borgmatic", "name": "make_parsers", "docstring": "Build a top-level parser and its subparsers and return them as a tuple.", "ques_id": "62b438a266fea644fe22cc2c", "code": ["def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool that can be run on a single '\n                    'container', formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(argument), required=False,\n                            help='The argument that should be passed to {}'.format(argument))\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Borgmatic command line tool.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(alias), action='store_true',\n                            help='Enable the {} subcommand.'.format(alias))\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Compute the difference between two sets of arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--' + argument_name,\n            metavar='PATTERN',\n            choices=list(PATTERNS.keys()),\n            required=True,\n            help='The pattern to compare the arguments against.'\n        )\n    parser.add_argument(\n       'set1',\n        metavar='PATTERN',\n        nargs='+',\n        help='The pattern to compare the arguments against.'\n    )\n    parser.add_argument(\n       'set2',\n        metavar='PATTERN',\n        nargs='+',\n        help='The pattern to compare the arguments against.'\n    )\n    retur", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all known versions of the package.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--' + alias, '--' + alias.replace('_', '-'),\n                            help='The version of the package that is being shown.',\n                            choices=[version for version in SUPPORTED_VERSIONS],\n                            default=SUPPORTED_VERSIONS[0],\n                            metavar='VERSION')\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(description='Python package tests')\n    for plugin in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % plugin, action='store_true', help=plugin)\n\n    return parser\n", "def make_parsers():\n    return { v: { 'choices': CHOICES } for v in SUBPARSER_ALIASES }\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Common Client Side Functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for subparser in SUBPARSER_ALIASES.values():\n        subparser.add_argument('--help', action='store_true')\n        parser.add_subparsers(dest=subparser.dest, **subparser.parser_kwargs)\n\n    return parser\n", "def make_parsers():\n    return {\n        'create': create,\n        'update': update,\n        'delete': delete,\n        'list': list_repo,\n       'show': show,\n        'check': check,\n        'add': add,\n       'remove': remove,\n        'update_repo': update_repo,\n        'update_conf': update_conf,\n        'check_repo': check_repo,\n       'remove_conf': remove_conf,\n       'sync': sync,\n       'merge': merge,\n        'check_conf': check_conf,\n       'repo': repo,\n        'update_conf': update_conf,\n       'remove_conf': remove_conf,\n        'update_status': update_status,\n        'check_status': check_status,\n        'update_check': update_check,\n        'check_status': check_status,\n        'update_status_conf': update_status_conf,\n       'remove_status'", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse arguments for the REST API.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for alias, description in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--{}'.format(alias),\n            help=description,\n            default=None\n        )\n    return parser\n", "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Process data from disk.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(argument_name.replace('_', '-')),\n            metavar='PATH',\n            default=None,\n            help='The path to the data file.'\n        )\n    return parser\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Simple command line tool that can be run on a single '\n                    'container', formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(argument), required=False,\n                            help='The argument that should be passed to {}'.format(argument))\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Borgmatic command line tool.')\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--{}'.format(alias), action='store_true',\n                            help='Enable the {} subcommand.'.format(alias))\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Compute the difference between two sets of arguments.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--' + argument_name,\n            metavar='PATTERN',\n            choices=list(PATTERNS.keys()),\n            required=True,\n            help='The pattern to compare the arguments against.'\n        )\n    parser.add_argument(\n       'set1',\n        metavar='PATTERN',\n        nargs='+',\n        help='The pattern to compare the arguments against.'\n    )\n    parser.add_argument(\n       'set2',\n        metavar='PATTERN',\n        nargs='+',\n        help='The pattern to compare the arguments against.'\n    )\n    retur", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Show a list of all known versions of the package.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for alias in SUBPARSER_ALIASES:\n        parser.add_argument('--' + alias, '--' + alias.replace('_', '-'),\n                            help='The version of the package that is being shown.',\n                            choices=[version for version in SUPPORTED_VERSIONS],\n                            default=SUPPORTED_VERSIONS[0],\n                            metavar='VERSION')\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(description='Python package tests')\n    for plugin in SUBPARSER_ALIASES:\n        parser.add_argument('--%s' % plugin, action='store_true', help=plugin)\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return { v: { 'choices': CHOICES } for v in SUBPARSER_ALIASES }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Common Client Side Functions',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    for subparser in SUBPARSER_ALIASES.values():\n        subparser.add_argument('--help', action='store_true')\n        parser.add_subparsers(dest=subparser.dest, **subparser.parser_kwargs)\n\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    return {\n        'create': create,\n        'update': update,\n        'delete': delete,\n        'list': list_repo,\n       'show': show,\n        'check': check,\n        'add': add,\n       'remove': remove,\n        'update_repo': update_repo,\n        'update_conf': update_conf,\n        'check_repo': check_repo,\n       'remove_conf': remove_conf,\n       'sync': sync,\n       'merge': merge,\n        'check_conf': check_conf,\n       'repo': repo,\n        'update_conf': update_conf,\n       'remove_conf': remove_conf,\n        'update_status': update_status,\n        'check_status': check_status,\n        'update_check': update_check,\n        'check_status': check_status,\n        'update_status_conf': update_status_conf,\n       'remove_status'", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Parse arguments for the REST API.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for alias, description in SUBPARSER_ALIASES.items():\n        parser.add_argument(\n            '--{}'.format(alias),\n            help=description,\n            default=None\n        )\n    return parser\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_parsers():\n    parser = argparse.ArgumentParser(\n        description='Process data from disk.',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    for argument_name in SUBPARSER_ALIASES:\n        parser.add_argument(\n            '--{}'.format(argument_name.replace('_', '-')),\n            metavar='PATH',\n            default=None,\n            help='The path to the data file.'\n        )\n    return parser\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_10.py", "name": "paging", "docstring": "Returns WAPI response page by page\n\nArgs:\n    response (list): WAPI response.\n    max_results (int): Maximum number of objects to be returned in one page.\nReturns:\n    Generator object with WAPI response split page by page.", "ques_id": "62ece4982e6aefcf4aabbd5f", "code": ["def paging(response, max_results):\n    for item in response:\n        if item[\"meta\"][\"total_items\"] >= max_results:\n            yield item\n\n        for page in range(1, item[\"meta\"][\"page\"] + 1):\n            yield item\n", "def paging(response, max_results):\n    for response_page in response:\n        if len(response_page) > max_results:\n            for response_page_dict in response_page:\n                yield response_page_dict\n        else:\n            yield response_page\n", "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(0, len(response), max_results):\n            yield response[i:i + max_results]\n    else:\n        yield response\n", "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        for response_object in response:\n            yield response_object\n        page += 1\n", "def paging(response, max_results):\n    if max_results <= 0:\n        raise ValueError('Maximum number of objects to be returned must be greater than zero')\n\n    for item in response:\n        if len(item) <= max_results:\n            yield item\n", "def paging(response, max_results):\n    for item in response:\n        if item['meta']['total_items'] >= max_results:\n            yield item['content']\n            break\n\n        for page in range(1, item['meta']['page'] + 1):\n            yield item['content'].get(page=page)\n", "def paging(response, max_results):\n    if len(response) < max_results:\n        for page in range(0, len(response), max_results):\n            yield response[page:page + max_results]\n    else:\n        yield response\n", "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        if page < 1:\n            continue\n        for response_item in response:\n            yield response_item\n\n        if page > max_results:\n            break\n", "def paging(response, max_results):\n    response_len = len(response)\n    if response_len > max_results:\n        page_size = int(response_len / max_results) + 1\n        response = response[max_results * page_size:]\n    else:\n        page_size = 1\n\n    for i in range(response_len):\n        yield response[i * page_size: (i + 1) * page_size]\n", "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def paging(response, max_results):\n    for item in response:\n        if item[\"meta\"][\"total_items\"] >= max_results:\n            yield item\n\n        for page in range(1, item[\"meta\"][\"page\"] + 1):\n            yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for response_page in response:\n        if len(response_page) > max_results:\n            for response_page_dict in response_page:\n                yield response_page_dict\n        else:\n            yield response_page\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if len(response) > max_results:\n        for i in range(0, len(response), max_results):\n            yield response[i:i + max_results]\n    else:\n        yield response\n", "is_pass": true, "return_code": 0}, {"generate_code": "def paging(response, max_results):\n\n    page = 1\n    while page <= max_results:\n        for response_object in response:\n            yield response_object\n        page += 1\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if max_results <= 0:\n        raise ValueError('Maximum number of objects to be returned must be greater than zero')\n\n    for item in response:\n        if len(item) <= max_results:\n            yield item\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for item in response:\n        if item['meta']['total_items'] >= max_results:\n            yield item['content']\n            break\n\n        for page in range(1, item['meta']['page'] + 1):\n            yield item['content'].get(page=page)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    if len(response) < max_results:\n        for page in range(0, len(response), max_results):\n            yield response[page:page + max_results]\n    else:\n        yield response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for page in range(1, max_results + 1):\n        if page < 1:\n            continue\n        for response_item in response:\n            yield response_item\n\n        if page > max_results:\n            break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    response_len = len(response)\n    if response_len > max_results:\n        page_size = int(response_len / max_results) + 1\n        response = response[max_results * page_size:]\n    else:\n        page_size = 1\n\n    for i in range(response_len):\n        yield response[i * page_size: (i + 1) * page_size]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def paging(response, max_results):\n    for i in range(0, len(response), max_results):\n        yield response[i:i + max_results]\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_20.py", "name": "size_to_bytes", "docstring": "Convert human readable file size to bytes.\n\nResulting value is an approximation as input value is in most case rounded.\n\nArgs:\n    size: A string representing a human readable file size (eg: '500K')\n\nReturns:\n    A decimal representation of file size\n\n    Examples::\n\n        >>> size_to_bytes(\"500\")\n        500\n        >>> size_to_bytes(\"1K\")\n        1000", "ques_id": "62ece4982e6aefcf4aabbd60", "code": ["def size_to_bytes(size: str):\n    size = size.replace(\"B\", \"\")\n    size = int(size)\n    for x in ['KiB', 'MiB', 'GiB', 'TiB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            return int(float(size.strip(x)) * 1024)\n    raise ValueError('Unknown file size {}'.format(size))\n", "def size_to_bytes(size: str) -> int:\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    return 0\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size.endswith(x):\n            return int(float(size.replace(x, '')))\n    raise ValueError(f'Could not convert size {size} to bytes')\n", "def size_to_bytes(size: str) -> int:\n    if size is None or not isinstance(size, str):\n        return None\n\n    # convert bytes to human\n    size = size.strip()\n    size = size.replace('B', '')\n    try:\n        size = int(size)\n    except ValueError:\n        return None\n\n    # convert KB to MB\n    if size > 1024:\n        size /= 1024\n        size += 1\n\n    return size\n", "def size_to_bytes(size: str) -> int:\n    units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    index = units.index(size.lower()[0])\n    return int(float(size[:-1]) * pow(1024, index))\n", "def size_to_bytes(size: str) -> int:\n    # https://stackoverflow.com/questions/3694835/convert-human-readable-file-size-to-bytes\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(float(size)) < 1024:\n            return int(abs(float(size)))\n        size /= 1024\n    return int(round(size))\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n\n    for x in ['kB', 'MB', 'GB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n\n    return int(size)\n", "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n    return int(size)\n", "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        return 0\n"], "level": "self_contained", "generate_results": [{"generate_code": "def size_to_bytes(size: str):\n    size = size.replace(\"B\", \"\")\n    size = int(size)\n    for x in ['KiB', 'MiB', 'GiB', 'TiB']:\n        if size < 1024.0:\n            return size\n        size /= 1024.0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            return int(float(size.strip(x)) * 1024)\n    raise ValueError('Unknown file size {}'.format(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:\n        if unit in size:\n            return int(size.replace(unit, ''))\n    return 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB']:\n        if size.endswith(x):\n            return int(float(size.replace(x, '')))\n    raise ValueError(f'Could not convert size {size} to bytes')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    if size is None or not isinstance(size, str):\n        return None\n\n    # convert bytes to human\n    size = size.strip()\n    size = size.replace('B', '')\n    try:\n        size = int(size)\n    except ValueError:\n        return None\n\n    # convert KB to MB\n    if size > 1024:\n        size /= 1024\n        size += 1\n\n    return size\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    index = units.index(size.lower()[0])\n    return int(float(size[:-1]) * pow(1024, index))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    # https://stackoverflow.com/questions/3694835/convert-human-readable-file-size-to-bytes\n    for unit in ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z']:\n        if abs(float(size)) < 1024:\n            return int(abs(float(size)))\n        size /= 1024\n    return int(round(size))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n\n    for x in ['kB', 'MB', 'GB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n\n    return int(size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if size.endswith(x):\n            size = size[:-len(x)]\n            return int(size)\n    return int(size)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def size_to_bytes(size: str) -> int:\n    try:\n        return int(size)\n    except ValueError:\n        return 0\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_14.py", "name": "_dictsum", "docstring": "Combine values of the dictionaries supplied by iterable dicts.\n\n>>> _dictsum([{'a': 1, 'b': 2}, {'a': 5, 'b': 0}])\n{'a': 6, 'b': 2}", "ques_id": "62ece4982e6aefcf4aabbd61", "code": ["def _dictsum(dicts):\n    result = {}\n    for key, value in dicts.items():\n        result[key] = value\n    return result\n", "def _dictsum(dicts):\n\n    result = dicts[0]\n    for d in dicts[1:]:\n        result = dict_sum(result, d)\n    return result\n", "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result\n", "def _dictsum(dicts):\n    result = {}\n    for key, value in dicts.items():\n        result[key] = value\n\n    return result\n", "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result\n", "def _dictsum(dicts):\n    dict = dicts[0]\n    for i in range(1, len(dicts)):\n        dict = dict.update(dicts[i])\n    return dict\n", "def _dictsum(dicts):\n    result = dicts[0]\n    for d in dicts[1:]:\n        result = dict({result: d[result] + result})\n    return result\n", "def _dictsum(dicts):\n    return {key: dicts[key] for key in dicts.keys()}\n", "def _dictsum(dicts):\n    res = {}\n    for d in dicts:\n        res.update(d)\n    return res\n", "def _dictsum(dicts):\n    new_dict = {}\n    for key in dicts:\n        new_dict[key] = dicts[key]\n    return new_dict\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _dictsum(dicts):\n    result = {}\n    for key, value in dicts.items():\n        result[key] = value\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n\n    result = dicts[0]\n    for d in dicts[1:]:\n        result = dict_sum(result, d)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for key, value in dicts.items():\n        result[key] = value\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    dict = dicts[0]\n    for i in range(1, len(dicts)):\n        dict = dict.update(dicts[i])\n    return dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    result = dicts[0]\n    for d in dicts[1:]:\n        result = dict({result: d[result] + result})\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    return {key: dicts[key] for key in dicts.keys()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    res = {}\n    for d in dicts:\n        res.update(d)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dictsum(dicts):\n    new_dict = {}\n    for key in dicts:\n        new_dict[key] = dicts[key]\n    return new_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_15.py", "name": "_replace_url_args", "docstring": "Replace any custom string URL items with values in args", "ques_id": "62ece4982e6aefcf4aabbd62", "code": ["def _replace_url_args(url, url_args):\n\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{' + key + '}}', value)\n\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace(\"{{{}}}\".format(key), value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if url.get(key):\n            url[key] = value\n    return url\n", "def _replace_url_args(url, url_args):\n    if url is None:\n        return None\n\n    if url_args is None:\n        return url\n\n    for k, v in url_args.items():\n        url = url.replace('{{{}}}'.format(k), v)\n\n    return url\n", "def _replace_url_args(url, url_args):\n    url = url.replace('{{' + url_args[0] + '}}', url_args[1])\n    return url\n", "def _replace_url_args(url, url_args):\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{' + key + '}}', value)\n    return url\n", "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "def _replace_url_args(url, url_args):\n    for item in url_args:\n        if item in url:\n            url = url.replace(item, url_args[item])\n    return url\n", "def _replace_url_args(url, url_args):\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{{}}}'.format(key), value)\n    return url\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_url_args(url, url_args):\n\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{' + key + '}}', value)\n\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if value:\n            url = url.replace(\"{{{}}}\".format(key), value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for key, value in url_args.items():\n        if url.get(key):\n            url[key] = value\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if url is None:\n        return None\n\n    if url_args is None:\n        return url\n\n    for k, v in url_args.items():\n        url = url.replace('{{{}}}'.format(k), v)\n\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    url = url.replace('{{' + url_args[0] + '}}', url_args[1])\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{' + key + '}}', value)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for k, v in url_args.items():\n        if v is not None:\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    if url_args:\n        for k, v in url_args.items():\n            url = url.replace('{{' + k + '}}', v)\n    return url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_url_args(url, url_args):\n    for item in url_args:\n        if item in url:\n            url = url.replace(item, url_args[item])\n    return url\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _replace_url_args(url, url_args):\n    if url_args:\n        for key, value in url_args.items():\n            url = url.replace('{{{}}}'.format(key), value)\n    return url\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_5.py", "name": "is_none_string", "docstring": "Check if a string represents a None value.", "ques_id": "62ece4982e6aefcf4aabbd63", "code": ["def is_none_string(val: Any) -> bool:\n    return type(val) == str and val.lower() == 'none'\n", "def is_none_string(val: Any) -> bool:\n    return type(val) == str and val.lower() == 'none'\n", "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "def is_none_string(val: str) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "def is_none_string(val: str) -> bool:\n    return (type(val) == str and val.lower() == 'none')\n", "def is_none_string(val: Any) -> bool:\n    return (\n        isinstance(val, str)\n        and val.lower() == \"none\"\n        and val.startswith(\"none(\")\n    )\n", "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none' and type(val) is str\n", "def is_none_string(val: Any) -> bool:\n    return (type(val) is str and val.lower() == 'none')\n"], "level": "self_contained", "generate_results": [{"generate_code": "def is_none_string(val: Any) -> bool:\n    return type(val) == str and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return type(val) == str and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return (isinstance(val, str) and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return (type(val) == str and val.lower() == 'none')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return (\n        isinstance(val, str)\n        and val.lower() == \"none\"\n        and val.startswith(\"none(\")\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return isinstance(val, str) and val.lower() == 'none'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: str) -> bool:\n    return val.lower() == 'none' and type(val) is str\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_none_string(val: Any) -> bool:\n    return (type(val) is str and val.lower() == 'none')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_1.py", "name": "strip_root", "docstring": "Remove root from path, throw exception on failure.", "ques_id": "62ece4982e6aefcf4aabbd64", "code": ["def strip_root(path, root):\n    if root and path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError('Path does not start with root: %s' % path)\n", "def strip_root(path, root):\n    try:\n        return path.replace(root, '')\n    except ValueError:\n        raise ValueError('{} is not in {}'.format(root, path))\n", "def strip_root(path, root):\n    if not root:\n        raise Exception('Cannot strip root from path \"%s\".' % path)\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "def strip_root(path, root):\n    if not root:\n        return path\n\n    if path.startswith(root):\n        return path[len(root):]\n\n    return path\n", "def strip_root(path, root):\n    try:\n        return path[len(root):]\n    except IndexError:\n        raise Exception('Invalid path: {}'.format(path))\n", "def strip_root(path, root):\n    if root and path.startswith(root):\n        return path[len(root):]\n    else:\n        raise Exception('Not root')\n", "def strip_root(path, root):\n    if not path.startswith(root):\n        raise Exception(\"{} does not start with {}\".format(path, root))\n    return path[len(root):]\n", "def strip_root(path, root):\n    if not root:\n        raise Exception(\"Cannot remove root from path\")\n    return path.replace(root, \"\")\n", "def strip_root(path, root):\n    try:\n        return path[len(root):]\n    except IndexError:\n        raise Exception(\"Failed to strip root from path: '{}'\".format(path))\n", "def strip_root(path, root):\n\n    try:\n        path = path[len(root):]\n    except IndexError:\n        pass\n\n    return path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def strip_root(path, root):\n    if root and path.startswith(root):\n        return path[len(root):]\n    else:\n        raise ValueError('Path does not start with root: %s' % path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    try:\n        return path.replace(root, '')\n    except ValueError:\n        raise ValueError('{} is not in {}'.format(root, path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        raise Exception('Cannot strip root from path \"%s\".' % path)\n    if path.startswith(root):\n        return path[len(root):]\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        return path\n\n    if path.startswith(root):\n        return path[len(root):]\n\n    return path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    try:\n        return path[len(root):]\n    except IndexError:\n        raise Exception('Invalid path: {}'.format(path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if root and path.startswith(root):\n        return path[len(root):]\n    else:\n        raise Exception('Not root')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not path.startswith(root):\n        raise Exception(\"{} does not start with {}\".format(path, root))\n    return path[len(root):]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    if not root:\n        raise Exception(\"Cannot remove root from path\")\n    return path.replace(root, \"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n    try:\n        return path[len(root):]\n    except IndexError:\n        raise Exception(\"Failed to strip root from path: '{}'\".format(path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def strip_root(path, root):\n\n    try:\n        path = path[len(root):]\n    except IndexError:\n        pass\n\n    return path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_8.py", "name": "parser_flags", "docstring": "Given an argparse.ArgumentParser instance, return its argument flags in a space-separated\nstring.", "ques_id": "62ece4982e6aefcf4aabbd65", "code": ["def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.nargs == argparse.REMAINDER:\n            flags.extend([flag.arg for flag in arg])\n        else:\n            flags.append(arg.arg)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default is not None and arg.default!= argparse.SUPPRESS:\n            flags +='' + str(arg.default)\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='' + str(arg.default)\n    return flags\n", "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "def parser_flags(parser):\n    flags = []\n    for action in parser._actions:\n        if isinstance(action, argparse._StoreTrueAction):\n            flags.append('--{}'.format(action.dest))\n        elif isinstance(action, argparse._StoreFalseAction):\n            flags.append('--false')\n        else:\n            flags.append(action.default)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join(\n        flag.decode() if isinstance(flag, bytes) else flag\n        for flag in parser._actions\n    )\n", "def parser_flags(parser):\n    return''.join(parser._flags)\n", "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.nargs == 0:\n            flags.append(argument.dest)\n        else:\n            flags.append('--' + argument.dest)\n    return''.join(flags)\n", "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.nargs == argparse.REMAINDER:\n            flags.append('-')\n        else:\n            flags.append(arg.default)\n    return''.join(flags)\n", "def parser_flags(parser):\n    return''.join([flag.__name__ for flag in parser._option_classes])\n", "def parser_flags(parser):\n    return''.join(['--' + a.action for a in parser._actions])\n"], "level": "self_contained", "generate_results": [{"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.nargs == argparse.REMAINDER:\n            flags.extend([flag.arg for flag in arg])\n        else:\n            flags.append(arg.arg)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = ''\n    for arg in parser._actions:\n        if arg.default is not None and arg.default!= argparse.SUPPRESS:\n            flags +='' + str(arg.default)\n        if arg.nargs == argparse.ZERO_OR_MORE:\n            flags +='' + str(arg.default)\n    return flags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([str(flag) for flag in parser.flags])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for action in parser._actions:\n        if isinstance(action, argparse._StoreTrueAction):\n            flags.append('--{}'.format(action.dest))\n        elif isinstance(action, argparse._StoreFalseAction):\n            flags.append('--false')\n        else:\n            flags.append(action.default)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(\n        flag.decode() if isinstance(flag, bytes) else flag\n        for flag in parser._actions\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(parser._flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for argument in parser._actions:\n        if argument.nargs == 0:\n            flags.append(argument.dest)\n        else:\n            flags.append('--' + argument.dest)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    flags = []\n    for arg in parser._actions:\n        if arg.nargs == argparse.REMAINDER:\n            flags.append('-')\n        else:\n            flags.append(arg.default)\n    return''.join(flags)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join([flag.__name__ for flag in parser._option_classes])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parser_flags(parser):\n    return''.join(['--' + a.action for a in parser._actions])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_19.py", "name": "was_processed", "docstring": "Check if a file or directory has already been processed.\n\nTo prevent recursion, expand the path name to an absolution path\ncall this function with a set that will store all the entries and\nthe entry to test. If the entry is already in the set, report the issue\nand return ``True``. Otherwise, add the entry to the set and return\n``False`` to allow the path to be processed.\n\nArgs:\n    processed: Set to store processed pathnames\n    path_name: Path to a directory or file\n    verbose: True if verbose output is requested\n\nReturns:\n    True if it's already in the set. False if not.", "ques_id": "62ece4982e6aefcf4aabbd66", "code": ["def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print('Issue in recursion in {}'.format(path_name))\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print('Added {} to the set'.format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"[!] Issue processing pathname: {}\".format(path_name))\n        return False\n    processed.add(path_name)\n    if verbose:\n        print(\"[+] Entry processed pathname: {}\".format(path_name))\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in recursive expansion on {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path '{}' in set '{}'.\".format(path_name, processed))\n        return False\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added '{}' to set '{}'.\".format(path_name, processed))\n    return True\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"[!] Already processed: {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"[+] Adding {} to set\".format(path_name))\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected. Entry already processed: '{}'\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Path '{}' already processed.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding '{}' to processed set.\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in processing: {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added: {}\".format(path_name))\n\n    return False\n", "def was_processed(processed, path_name, verbose):\n\n    if verbose:\n        print(\"Checking if path {} already processed\".format(path_name))\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue report for path {} already processed.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added path {} to processed set.\".format(path_name))\n        return False\n", "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {} already processed.'\n                 .format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n"], "level": "self_contained", "generate_results": [{"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print('Issue in recursion in {}'.format(path_name))\n        return True\n\n    processed.add(path_name)\n    if verbose:\n        print('Added {} to the set'.format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"[!] Issue processing pathname: {}\".format(path_name))\n        return False\n    processed.add(path_name)\n    if verbose:\n        print(\"[+] Entry processed pathname: {}\".format(path_name))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in recursive expansion on {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding {} to processed set\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Issue processing path '{}' in set '{}'.\".format(path_name, processed))\n        return False\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added '{}' to set '{}'.\".format(path_name, processed))\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"[!] Already processed: {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"[+] Adding {} to set\".format(path_name))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Recursion detected. Entry already processed: '{}'\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n    if path_name in processed:\n        if verbose:\n            print(\"Path '{}' already processed.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Adding '{}' to processed set.\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue in processing: {}\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added: {}\".format(path_name))\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if verbose:\n        print(\"Checking if path {} already processed\".format(path_name))\n\n    if path_name in processed:\n        if verbose:\n            print(\"Issue report for path {} already processed.\".format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n        if verbose:\n            print(\"Added path {} to processed set.\".format(path_name))\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def was_processed(processed, path_name, verbose):\n\n    if path_name in processed:\n        if verbose:\n            print('Issue processing path {} already processed.'\n                 .format(path_name))\n        return True\n    else:\n        processed.add(path_name)\n\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_9.py", "name": "vertex3tuple", "docstring": "return 3 points for each vertex of the polygon. This will include the vertex and the 2 points on both sides of the vertex::\n\npolygon with vertices ABCD\nWill return\nDAB, ABC, BCD, CDA -> returns 3tuples\n#A    B    C    D  -> of vertices", "ques_id": "62ece4982e6aefcf4aabbd67", "code": ["def vertex3tuple(vertices):\n\n    vertices_len = len(vertices)\n    vertices_tuple = []\n\n    if vertices_len < 3:\n        vertices_tuple.append(vertices[0])\n        vertices_tuple.append(vertices[-1])\n    else:\n        for i in range(vertices_len - 2):\n            vertices_tuple.append(vertices[i])\n            vertices_tuple.append(vertices[i + 1])\n\n    return vertices_tuple\n", "def vertex3tuple(vertices):\n    vertices = np.array(vertices)\n    vertices[:, 0] = vertices[:, 0] - vertices[:, 2] / 2\n    vertices[:, 1] = vertices[:, 1] - vertices[:, 3] / 2\n    vertices[:, 2] = vertices[:, 2] + vertices[:, 3] / 2\n    return vertices\n", "def vertex3tuple(vertices):\n    vertices = vertices.T\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(0, 3)]\n", "def vertex3tuple(vertices):\n\n    vertices = [tuple(v) for v in vertices]\n    vertices.sort()\n    if len(vertices) < 3:\n        return vertices\n\n    p1 = vertices[0]\n    p2 = vertices[1]\n    p3 = vertices[2]\n\n    if p1.x > vertices[-1].x:\n        p1 = vertices[-1]\n    if p2.x < vertices[0].x:\n        p2 = vertices[0]\n    if p3.x > vertices[-2].x:\n        p3 = vertices[-2]\n    if p3.x < vertices[-1].x:\n        p1 = vertices[-1]\n\n    return [p1, p2, p3]\n", "def vertex3tuple(vertices):\n\n    vertices = vertices[:]\n    if len(vertices) < 3:\n        return vertices\n\n    vertices.sort()\n    points = []\n    for i in range(0, len(vertices), 2):\n        points.append((vertices[i], vertices[i+1], 0))\n\n    return points\n", "def vertex3tuple(vertices):\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(3)]\n", "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n    vertices.sort()\n    out = []\n    i = 0\n    while i < len(vertices) - 2:\n        out.append(tuple(vertices[i:i+3]))\n        i += 3\n    return out\n", "def vertex3tuple(vertices):\n\n    vertices = [vertices[0], vertices[1], vertices[2]]\n\n    return vertices\n", "def vertex3tuple(vertices):\n    vertices = [(p[0], p[1], p[2]) for p in vertices]\n    vertices.sort(key=lambda v: v[0])\n    if len(vertices) < 3:\n        return [vertices[0]]\n    return [vertices[0], vertices[1], vertices[2]]\n", "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n\n    if len(vertices) < 3:\n        return vertices\n\n    if vertices[0][0] < vertices[2][0]:\n        return vertices\n\n    return vertices[0:2] + [vertices[2][0]]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def vertex3tuple(vertices):\n\n    vertices_len = len(vertices)\n    vertices_tuple = []\n\n    if vertices_len < 3:\n        vertices_tuple.append(vertices[0])\n        vertices_tuple.append(vertices[-1])\n    else:\n        for i in range(vertices_len - 2):\n            vertices_tuple.append(vertices[i])\n            vertices_tuple.append(vertices[i + 1])\n\n    return vertices_tuple\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    vertices = np.array(vertices)\n    vertices[:, 0] = vertices[:, 0] - vertices[:, 2] / 2\n    vertices[:, 1] = vertices[:, 1] - vertices[:, 3] / 2\n    vertices[:, 2] = vertices[:, 2] + vertices[:, 3] / 2\n    return vertices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    vertices = vertices.T\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(0, 3)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = [tuple(v) for v in vertices]\n    vertices.sort()\n    if len(vertices) < 3:\n        return vertices\n\n    p1 = vertices[0]\n    p2 = vertices[1]\n    p3 = vertices[2]\n\n    if p1.x > vertices[-1].x:\n        p1 = vertices[-1]\n    if p2.x < vertices[0].x:\n        p2 = vertices[0]\n    if p3.x > vertices[-2].x:\n        p3 = vertices[-2]\n    if p3.x < vertices[-1].x:\n        p1 = vertices[-1]\n\n    return [p1, p2, p3]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = vertices[:]\n    if len(vertices) < 3:\n        return vertices\n\n    vertices.sort()\n    points = []\n    for i in range(0, len(vertices), 2):\n        points.append((vertices[i], vertices[i+1], 0))\n\n    return points\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    return [(vertices[0][i], vertices[1][i], vertices[2][i]) for i in range(3)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n    vertices.sort()\n    out = []\n    i = 0\n    while i < len(vertices) - 2:\n        out.append(tuple(vertices[i:i+3]))\n        i += 3\n    return out\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = [vertices[0], vertices[1], vertices[2]]\n\n    return vertices\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n    vertices = [(p[0], p[1], p[2]) for p in vertices]\n    vertices.sort(key=lambda v: v[0])\n    if len(vertices) < 3:\n        return [vertices[0]]\n    return [vertices[0], vertices[1], vertices[2]]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def vertex3tuple(vertices):\n\n    vertices = list(vertices)\n\n    if len(vertices) < 3:\n        return vertices\n\n    if vertices[0][0] < vertices[2][0]:\n        return vertices\n\n    return vertices[0:2] + [vertices[2][0]]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_6.py", "name": "int_to_string", "docstring": "Convert a number to a string, using the given alphabet.\n\nThe output has the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd68", "code": ["def int_to_string(number: int, alphabet: List[str], padding: int = 0) -> str:\n    str_number = ''.join([alphabet[number % len(alphabet)]] * padding)\n    return str_number\n", "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    return ''.join([alphabet[number % len(alphabet)]] * (padding - (number % len(alphabet))))\n", "def int_to_string(number: int, alphabet: List[str], padding=0) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    if padding > 0:\n        result = '0' * (padding - len(result)) + result\n    return result\n", "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    padding = padding if padding > 0 else 0\n    string = \"\"\n    for i in range(padding):\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    return string[::-1]\n", "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    result = []\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    result = result[::-1]\n    if padding > 0:\n        result.append(str(padding))\n    result = ''.join(result)\n    return result\n", "def int_to_string(number: int, alphabet: List[str], padding=0) -> str:\n    if number == 0:\n        return \"0\"\n    s = \"\"\n    while number:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return str(padding) + s\n", "def int_to_string(number: int, alphabet: list, padding: int = 0) -> str:\n    result = \"\"\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        result = alphabet[mod] + result\n    if padding > 0:\n        result = \"0\" * padding + result\n    return result\n", "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    s = ''\n    while number!= 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    if padding:\n        for i in range(len(s)):\n            s[i] = ('0' if s[i] == '.' else s[i])\n    return s\n", "def int_to_string(number: int, alphabet: List[str], padding: int = 10) -> str:\n    number_string = str(number)\n    for i in range(len(number_string) + 1):\n        padding_string = \"0\" * padding\n        number_string = number_string[:i] + padding_string + number_string[i:]\n    return number_string\n", "def int_to_string(number: int, alphabet: list = string.ascii_letters, padding=0) -> str:\n    if padding == 0:\n        padding = len(alphabet) - 1\n    return ''.join([alphabet[number % len(alphabet)]] * padding)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: int = 0) -> str:\n    str_number = ''.join([alphabet[number % len(alphabet)]] * padding)\n    return str_number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    return ''.join([alphabet[number % len(alphabet)]] * (padding - (number % len(alphabet))))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding=0) -> str:\n    result = ''\n    while number > 0:\n        result = alphabet[number % len(alphabet)] + result\n        number //= len(alphabet)\n    if padding > 0:\n        result = '0' * (padding - len(result)) + result\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    padding = padding if padding > 0 else 0\n    string = \"\"\n    for i in range(padding):\n        string += alphabet[number % len(alphabet)]\n        number //= len(alphabet)\n    return string[::-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    result = []\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        result.append(alphabet[mod])\n    result = result[::-1]\n    if padding > 0:\n        result.append(str(padding))\n    result = ''.join(result)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding=0) -> str:\n    if number == 0:\n        return \"0\"\n    s = \"\"\n    while number:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    return str(padding) + s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list, padding: int = 0) -> str:\n    result = \"\"\n    while number > 0:\n        number, mod = divmod(number, len(alphabet))\n        result = alphabet[mod] + result\n    if padding > 0:\n        result = \"0\" * padding + result\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list, padding=0) -> str:\n    s = ''\n    while number!= 0:\n        s = alphabet[number % len(alphabet)] + s\n        number //= len(alphabet)\n    if padding:\n        for i in range(len(s)):\n            s[i] = ('0' if s[i] == '.' else s[i])\n    return s\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: List[str], padding: int = 10) -> str:\n    number_string = str(number)\n    for i in range(len(number_string) + 1):\n        padding_string = \"0\" * padding\n        number_string = number_string[:i] + padding_string + number_string[i:]\n    return number_string\n", "is_pass": false, "return_code": 1}, {"generate_code": "def int_to_string(number: int, alphabet: list = string.ascii_letters, padding=0) -> str:\n    if padding == 0:\n        padding = len(alphabet) - 1\n    return ''.join([alphabet[number % len(alphabet)]] * padding)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_12.py", "name": "_replace_register", "docstring": "Replace value from flows to given register number\n\n'register_value' key in dictionary will be replaced by register number\ngiven by 'register_number'\n\n:param flow_params: Dictionary containing defined flows\n:param register_number: The number of register where value will be stored\n:param register_value: Key to be replaced by register number", "ques_id": "62ece4982e6aefcf4aabbd69", "code": ["def _replace_register(flow_params, register_number, register_value):\n    try:\n        del flow_params[register_number]\n    except KeyError:\n        pass\n    flow_params[register_value] = flow_params.pop(register_number)\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    try:\n        del flow_params[register_number]\n        flow_params[register_value] = None\n    except KeyError:\n        pass\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[register_number]:\n        flow_params[register_number] = flow_params[register_number].replace(\n            register_value, '')\n        del flow_params[register_number]\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value not in flow_params:\n        raise ValueError(\"register_value {} not found in flow_params\".format(register_value))\n    flow_params[register_value] = flow_params.pop(register_number)\n", "def _replace_register(flow_params, register_number, register_value):\n    if register_value not in flow_params:\n        raise ValueError(\"register value %d not found\" % register_value)\n    flow_params[register_value] = flow_params.pop(register_number)\n", "def _replace_register(flow_params, register_number, register_value):\n    flow_params[register_number] = flow_params[register_value]\n    del flow_params[register_value]\n", "def _replace_register(flow_params, register_number, register_value):\n    del flow_params[register_number]\n    flow_params[register_value] = flow_params.pop(register_number)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    try:\n        del flow_params[register_number]\n    except KeyError:\n        pass\n    flow_params[register_value] = flow_params.pop(register_number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    try:\n        del flow_params[register_number]\n        flow_params[register_value] = None\n    except KeyError:\n        pass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params:\n        flow_params[register_value] = flow_params[register_number]\n        del flow_params[register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value in flow_params[register_number]:\n        flow_params[register_number] = flow_params[register_number].replace(\n            register_value, '')\n        del flow_params[register_number]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value not in flow_params:\n        raise ValueError(\"register_value {} not found in flow_params\".format(register_value))\n    flow_params[register_value] = flow_params.pop(register_number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    if register_value not in flow_params:\n        raise ValueError(\"register value %d not found\" % register_value)\n    flow_params[register_value] = flow_params.pop(register_number)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    flow_params[register_number] = flow_params[register_value]\n    del flow_params[register_value]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _replace_register(flow_params, register_number, register_value):\n    del flow_params[register_number]\n    flow_params[register_value] = flow_params.pop(register_number)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_2.py", "name": "replace_dots", "docstring": "Replaces all values of '.' to arg from the given string", "ques_id": "62ece4982e6aefcf4aabbd6a", "code": ["def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "def replace_dots(value, arg):\n    return value.replace('.', arg)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def replace_dots(value, arg):\n    return value.replace('.', arg)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "self_contained/test_3.py", "name": "subclasses", "docstring": "Return all subclasses of a class, recursively", "ques_id": "62ece4982e6aefcf4aabbd6b", "code": ["def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n", "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if issubclass(subcls, cls)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if issubclass(cls, subclass)]\n", "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if issubclass(cls, subclass)]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    return [\n        x for x in cls.__subclasses__()\n        if issubclass(x, cls)\n    ]\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "def subclasses(cls):\n    all_subclasses = []\n    for subclass in cls.__subclasses__():\n        all_subclasses.append(subclass)\n        all_subclasses.extend(subclass.subclasses())\n    return all_subclasses\n", "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n"], "level": "self_contained", "generate_results": [{"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__()\n                                   for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subcls for subcls in cls.__subclasses__()\n            if issubclass(subcls, cls)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if issubclass(cls, subclass)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [subclass for subclass in cls.__subclasses__() if issubclass(cls, subclass)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return [\n        x for x in cls.__subclasses__()\n        if issubclass(x, cls)\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    all_subclasses = []\n    for subclass in cls.__subclasses__():\n        all_subclasses.append(subclass)\n        all_subclasses.extend(subclass.subclasses())\n    return all_subclasses\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subclasses(cls):\n    return cls.__subclasses__() + [g for s in cls.__subclasses__() for g in subclasses(s)]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "self_contained/test_7.py", "name": "string_to_int", "docstring": "Convert a string to a number, using the given alphabet.\n\nThe input is assumed to have the most significant digit first.", "ques_id": "62ece4982e6aefcf4aabbd6d", "code": ["def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for i, char in enumerate(string):\n        result += alphabet.index(char) * (len(alphabet) ** i)\n    return result\n", "def string_to_int(string: str, alphabet: list):\n    return sum([alphabet.index(letter) for letter in string])\n", "def string_to_int(string: str, alphabet: list) -> int:\n    return sum([alphabet.index(x) for x in string])\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum([alphabet.index(x) for x in string])\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for letter in string:\n        if letter in alphabet:\n            number += alphabet.index(letter)\n    return number\n", "def string_to_int(string: str, alphabet: list) -> int:\n    result = 0\n    for i in range(len(string)):\n        result += alphabet.index(string[i]) * (len(alphabet) ** i)\n    return result\n", "def string_to_int(string: str, alphabet: list) -> int:\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return alphabet.index(string[0])\n    result = []\n    for char in string:\n        if char not in alphabet:\n            raise ValueError(\"Invalid character in string {}\".format(string))\n        result.append(alphabet.index(char))\n    return sum(result)\n", "def string_to_int(string: str, alphabet: list) -> int:\n    int_value = 0\n    for letter in string:\n        int_value += alphabet.index(letter)\n    return int_value\n", "def string_to_int(string: str, alphabet: List[str]) -> int:\n    if not string:\n        return 0\n    result = 0\n    for i, c in enumerate(string):\n        result += alphabet.index(c) * (len(alphabet) ** i)\n    return result\n", "def string_to_int(string: str, alphabet: list) -> int:\n    number = 0\n    for i, letter in enumerate(string):\n        if letter not in alphabet:\n            raise ValueError(\"The given string is not a valid character in the alphabet\")\n        number += alphabet.index(letter) * (len(string) ** i)\n    return number\n"], "level": "self_contained", "generate_results": [{"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    result = 0\n    for i, char in enumerate(string):\n        result += alphabet.index(char) * (len(alphabet) ** i)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: list):\n    return sum([alphabet.index(letter) for letter in string])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: list) -> int:\n    return sum([alphabet.index(x) for x in string])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    return sum([alphabet.index(x) for x in string])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    number = 0\n    for letter in string:\n        if letter in alphabet:\n            number += alphabet.index(letter)\n    return number\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: list) -> int:\n    result = 0\n    for i in range(len(string)):\n        result += alphabet.index(string[i]) * (len(alphabet) ** i)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: list) -> int:\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return alphabet.index(string[0])\n    result = []\n    for char in string:\n        if char not in alphabet:\n            raise ValueError(\"Invalid character in string {}\".format(string))\n        result.append(alphabet.index(char))\n    return sum(result)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: list) -> int:\n    int_value = 0\n    for letter in string:\n        int_value += alphabet.index(letter)\n    return int_value\n", "is_pass": true, "return_code": 0}, {"generate_code": "def string_to_int(string: str, alphabet: List[str]) -> int:\n    if not string:\n        return 0\n    result = 0\n    for i, c in enumerate(string):\n        result += alphabet.index(c) * (len(alphabet) ** i)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def string_to_int(string: str, alphabet: list) -> int:\n    number = 0\n    for i, letter in enumerate(string):\n        if letter not in alphabet:\n            raise ValueError(\"The given string is not a valid character in the alphabet\")\n        number += alphabet.index(letter) * (len(string) ** i)\n    return number\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_24.py", "name": "get_repo_archive", "docstring": "Given an url and a destination path, retrieve and extract .tar.gz archive\nwhich contains 'desc' file for each package.\nEach .tar.gz archive corresponds to an Arch Linux repo ('core', 'extra', 'community').\n\nArgs:\n    url: url of the .tar.gz archive to download\n    destination_path: the path on disk where to extract archive\n\nReturns:\n    a directory Path where the archive has been extracted to.", "ques_id": "62ece4982e6aefcf4aabbd6f", "code": ["def get_repo_archive(url: str, destination_path: str) -> str:\n    try:\n        response = requests.get(url, stream=True)\n    except requests.exceptions.RequestException as e:\n        raise e\n\n    if response.status_code!= 200:\n        raise DownloaderException(\n            'Unable to download repo archive (status code: {})'.format(\n                response.status_code))\n\n    with tarfile.open(fileobj=response.raw, mode='r|*') as archive:\n        archive.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str):\n    r = requests.get(url)\n    with open(destination_path, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url)\n    with tarfile.open(fileobj=io.BytesIO(response.content)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n\n    response = requests.get(url, stream=True)\n\n    if response.status_code!= 200:\n        raise Exception('Request to {} failed.'.format(url))\n\n    with tarfile.open(fileobj=response.raw, mode='r|gz') as tar:\n        tar.extractall(path=destination_path)\n\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-snappy\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-snappy\n    # https://github.com/ronaldoussoren/flask-s3\n    response = requests.get(url, allow_redirects=False)\n    if response.status_code == 200:\n        for item in response.links.get('content-disposition', []):\n            if 'filename' in item.headers:\n                filename = item.headers['filename']\n                if filename.endswith('.tar.gz'):\n                    tar_file = tarfile.open(filename)\n                    with open(destination_path, 'wb') as f:\n                        for member in tar_file.getmembe", "def get_repo_archive(url: str, destination_path: str):\n    response = requests.get(url, stream=True)\n    with tarfile.open(mode='r|gz', fileobj=response.raw) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url, allow_redirects=True)\n    if response.status_code!= 200:\n        raise Exception(f'Error downloading {url} to {destination_path}')\n    with tarfile.open(fileobj=io.BytesIO(response.content)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    r = requests.get(url, stream=True)\n\n    if r.status_code == 200:\n        for i in r.iter_content(chunk_size=1024):\n            if i:\n                destination_path = os.path.join(destination_path, os.path.basename(i.decode()))\n                if not os.path.exists(destination_path):\n                    with open(destination_path, 'wb') as f:\n                        f.write(i)\n        return destination_path\n    else:\n        return None\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    # Decode the URL to get the file path\n    url_decoded = requests.get(url).text.encode('utf-8')\n    file_path = destination_path + '/' + url.split('/')[-1]\n\n    with tarfile.open(fileobj=io.BytesIO(url_decoded)) as tar:\n        tar.extractall(destination_path)\n\n    return file_path\n", "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url, allow_redirects=False, stream=True)\n    if response.status_code!= 200:\n        raise Exception('Unable to download repo archive')\n    for filename in response.iter_content(1024):\n        if filename:\n            destination_path = os.path.join(destination_path, filename.decode('utf-8'))\n            with open(destination_path, 'wb') as f:\n                f.write(filename)\n    return destination_path\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    try:\n        response = requests.get(url, stream=True)\n    except requests.exceptions.RequestException as e:\n        raise e\n\n    if response.status_code!= 200:\n        raise DownloaderException(\n            'Unable to download repo archive (status code: {})'.format(\n                response.status_code))\n\n    with tarfile.open(fileobj=response.raw, mode='r|*') as archive:\n        archive.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str):\n    r = requests.get(url)\n    with open(destination_path, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:\n                f.write(chunk)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url)\n    with tarfile.open(fileobj=io.BytesIO(response.content)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n\n    response = requests.get(url, stream=True)\n\n    if response.status_code!= 200:\n        raise Exception('Request to {} failed.'.format(url))\n\n    with tarfile.open(fileobj=response.raw, mode='r|gz') as tar:\n        tar.extractall(path=destination_path)\n\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-snappy\n    # https://github.com/ronaldoussoren/flask-s3\n    # https://github.com/ronaldoussoren/flask-snappy\n    # https://github.com/ronaldoussoren/flask-s3\n    response = requests.get(url, allow_redirects=False)\n    if response.status_code == 200:\n        for item in response.links.get('content-disposition', []):\n            if 'filename' in item.headers:\n                filename = item.headers['filename']\n                if filename.endswith('.tar.gz'):\n                    tar_file = tarfile.open(filename)\n                    with open(destination_path, 'wb') as f:\n                        for member in tar_file.getmembe", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str):\n    response = requests.get(url, stream=True)\n    with tarfile.open(mode='r|gz', fileobj=response.raw) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url, allow_redirects=True)\n    if response.status_code!= 200:\n        raise Exception(f'Error downloading {url} to {destination_path}')\n    with tarfile.open(fileobj=io.BytesIO(response.content)) as tar:\n        tar.extractall(destination_path)\n    return destination_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    r = requests.get(url, stream=True)\n\n    if r.status_code == 200:\n        for i in r.iter_content(chunk_size=1024):\n            if i:\n                destination_path = os.path.join(destination_path, os.path.basename(i.decode()))\n                if not os.path.exists(destination_path):\n                    with open(destination_path, 'wb') as f:\n                        f.write(i)\n        return destination_path\n    else:\n        return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    # Decode the URL to get the file path\n    url_decoded = requests.get(url).text.encode('utf-8')\n    file_path = destination_path + '/' + url.split('/')[-1]\n\n    with tarfile.open(fileobj=io.BytesIO(url_decoded)) as tar:\n        tar.extractall(destination_path)\n\n    return file_path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_repo_archive(url: str, destination_path: str) -> str:\n    response = requests.get(url, allow_redirects=False, stream=True)\n    if response.status_code!= 200:\n        raise Exception('Unable to download repo archive')\n    for filename in response.iter_content(1024):\n        if filename:\n            destination_path = os.path.join(destination_path, filename.decode('utf-8'))\n            with open(destination_path, 'wb') as f:\n                f.write(filename)\n    return destination_path\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_20.py", "name": "os_is_mac", "docstring": "Checks if the os is macOS\n\n:return: True is macOS\n:rtype: bool", "ques_id": "62ece4982e6aefcf4aabbd70", "code": ["def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == 'Darwin'\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "def os_is_mac():\n    return sys.platform.startswith('darwin')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == 'Darwin'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def os_is_mac():\n    return platform.system() == \"Darwin\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def os_is_mac():\n    return sys.platform.startswith('darwin')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_14.py", "name": "regex_dict", "docstring": "Convert *.cpp keys to regex keys\n\nGiven a dict where the keys are all filenames with wildcards, convert only\nthe keys into equivalent regexes and leave the values intact.\n\nExample:\n\nrules = {\n    '*.cpp':\n        {'a': 'arf', 'b': 'bark', 'c': 'coo'},\n    '*.h':\n        {'h': 'help'}\n}\nregex_keys = regex_dict(rules)\n\nArgs:\n    item: dict to convert\nReturns:\n    dict with keys converted to regexes", "ques_id": "62ece4982e6aefcf4aabbd71", "code": ["def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "def regex_dict(item):\n    return {k.replace('*.cpp', '(?P<' + k + '>[^/]*)'): v for k, v in item.items()}\n", "def regex_dict(item):\n    converted = {}\n    for key, value in item.items():\n        if key.endswith('.cpp'):\n            converted[key] = re.compile(value)\n    return converted\n", "def regex_dict(item):\n    return {\n        wildcard_key: re.compile(value)\n        for wildcard_key, value in item.items()\n    }\n", "def regex_dict(item):\n    result = {}\n    for key in item:\n        if key.endswith(('.cpp', '.c')):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        elif key.endswith(('.h', '.hpp', '.h', '.cpp')):\n            key = re.sub(r'\\.h\\s*', '.h', key)\n        elif key.endswith('.cpp.*'):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        elif key.endswith('.cpp.*.*'):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        result[key] = item[key]\n    return result\n", "def regex_dict(item):\n    return {\n        wildcard_key: re.compile(value)\n        for wildcard_key, value in item.items()\n    }\n", "def regex_dict(item):\n    return {k.replace(\".\", \"\\\\.\"): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {k.replace('*.cpp', '(?P<' + k + '>.*)'): v for k, v in item.items()}\n", "def regex_dict(item):\n    return {k.replace('*.cpp', '(?i)'): v for k, v in item.items()}\n", "def regex_dict(item):\n    for k in item:\n        if k.endswith('.cpp'):\n            item[k] = re.compile(item[k])\n    return item\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def regex_dict(item):\n    return {\n        key: re.compile(value) if isinstance(value, str) else value\n        for key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.cpp', '(?P<' + k + '>[^/]*)'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    converted = {}\n    for key, value in item.items():\n        if key.endswith('.cpp'):\n            converted[key] = re.compile(value)\n    return converted\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        wildcard_key: re.compile(value)\n        for wildcard_key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    result = {}\n    for key in item:\n        if key.endswith(('.cpp', '.c')):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        elif key.endswith(('.h', '.hpp', '.h', '.cpp')):\n            key = re.sub(r'\\.h\\s*', '.h', key)\n        elif key.endswith('.cpp.*'):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        elif key.endswith('.cpp.*.*'):\n            key = re.sub(r'\\.cpp\\s*', '.cpp', key)\n        result[key] = item[key]\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {\n        wildcard_key: re.compile(value)\n        for wildcard_key, value in item.items()\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace(\".\", \"\\\\.\"): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.cpp', '(?P<' + k + '>.*)'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    return {k.replace('*.cpp', '(?i)'): v for k, v in item.items()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def regex_dict(item):\n    for k in item:\n        if k.endswith('.cpp'):\n            item[k] = re.compile(item[k])\n    return item\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_4.py", "name": "unquote", "docstring": "Remove quote from the given name.", "ques_id": "62ece4982e6aefcf4aabbd72", "code": ["def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:]\n    else:\n        return name[1:-1]\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', name)\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', name)\n", "def unquote(name):\n    return re.sub(r'^[^a-zA-Z0-9]', '', name)\n", "def unquote(name):\n    return re.sub(r'[^a-zA-Z0-9]', '', name)\n", "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "def unquote(name):\n    if name == '\"':\n        return ''\n    if name == '':\n        return ''\n    return re.sub(r'^\"|\\\\', '', name)\n", "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s\\.]', '', name)\n", "def unquote(name):\n    if name[0] == name[-1] == \"'\" and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:]\n    return re.sub(r'[^a-zA-Z0-9]', '', name)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def unquote(name):\n    if name[0] in \"'\\\"\":\n        return name[1:]\n    else:\n        return name[1:-1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'^[^a-zA-Z0-9]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'[^a-zA-Z0-9]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    return re.sub(r'\"', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name == '\"':\n        return ''\n    if name == '':\n        return ''\n    return re.sub(r'^\"|\\\\', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == '\"':\n        name = name[1:-1]\n    return re.sub(r'[^a-zA-Z0-9\\s\\.]', '', name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] == name[-1] == \"'\" and name[1:2]!= '\"':\n        return name[1:-1]\n    return name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def unquote(name):\n    if name[0] in '\"\\'':\n        name = name[1:]\n    return re.sub(r'[^a-zA-Z0-9]', '', name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_21.py", "name": "split", "docstring": "Multi-platform variant of shlex.split() for command-line splitting.\nFor use with subprocess, for argv injection etc. Using fast REGEX.\n\nplatform: 'this' = auto from current platform;\n          1 = POSIX;\n          0 = Windows/CMD\n          (other values reserved)", "ques_id": "62ece4982e6aefcf4aabbd73", "code": ["def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common']\n        elif sys.platform == 'cygwin':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c']\n        else:\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common']\n    else:\n        if sys.platform == 'win32':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c']\n        elif sys.platform == 'cygwin':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\cygwin']\n      ", "def split(s, platform='this'):\n    if platform == 'this':\n        if s == '.':\n            return ['.']\n        return [s]\n    elif platform == 1:\n        if s == '.':\n            return ['.']\n        return [s]\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['.']\n        return ['.', sys.platform]\n    else:\n        raise ValueError(\"unknown platform {}\".format(platform))\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd']\n        else:\n            return ['cmd', '/c']\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return ['c']\n        else:\n            return ['c', '/c']\n    elif platform == 0:\n        return ['cmd', '/c']\n\n    return s.split('/')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if WINDOWS_PLATFORM == 0:\n            return ['cmd']\n        return ['exe']\n    if platform == 1:\n        if POSIX_PLATFORM == 0:\n            return ['py']\n        return ['py']\n    if platform == 0:\n        if WINDOWS_PLATFORM == 0:\n            return ['cmd']\n        return ['exe']\n    return s.split('/')\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','stop']\n    else:\n        return ['cmd', '/c','start']\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        else:\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'darwin':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'linux':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'cmd':\n            return ['\"' + s + '\"']\n        else:\n            return []\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'darwin':\n            return ['\"' + s + '\"']\n        elif sys.platform == 0:\n            return ['\"' + s + '\"']\n        elif sys.platform == 'linux':\n            r", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c','start']\n        else:\n            return ['cmd', '/c','start', '/f', '/c']\n    else:\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c','start', '/f', '/c']\n        else:\n            return ['cmd', '/c','start', '/f', ", "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 1:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows']\n        elif sys.platform == 'darwin':\n            return ['/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/bin']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows']\n        elif sys.platform == 'darwin':\n            return ['/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/bin']\n    else:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows', '/usr/local/bin']\n        elif sys.platform == 'darwin':\n            return ['/us", "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['/bin/foo', '/usr/bin/foo']\n        elif sys.platform == 'darwin':\n            return ['/usr/bin', '/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/local/bin', '/usr/bin']\n        elif sys.platform == 'linux':\n            return ['/bin', '/usr/bin']\n        elif sys.platform =='sunos5':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'gnu0':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'bsd':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'openbsd':\n            return ['/u"], "level": "slib_runnable", "generate_results": [{"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common']\n        elif sys.platform == 'cygwin':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c']\n        else:\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common']\n    else:\n        if sys.platform == 'win32':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\common',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c']\n        elif sys.platform == 'cygwin':\n            return ['C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\mingw32c',\n                    'C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\cygwin']\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if s == '.':\n            return ['.']\n        return [s]\n    elif platform == 1:\n        if s == '.':\n            return ['.']\n        return [s]\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['.']\n        return ['.', sys.platform]\n    else:\n        raise ValueError(\"unknown platform {}\".format(platform))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd']\n        else:\n            return ['cmd', '/c']\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return ['c']\n        else:\n            return ['c', '/c']\n    elif platform == 0:\n        return ['cmd', '/c']\n\n    return s.split('/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if WINDOWS_PLATFORM == 0:\n            return ['cmd']\n        return ['exe']\n    if platform == 1:\n        if POSIX_PLATFORM == 0:\n            return ['py']\n        return ['py']\n    if platform == 0:\n        if WINDOWS_PLATFORM == 0:\n            return ['cmd']\n        return ['exe']\n    return s.split('/')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','stop']\n    else:\n        return ['cmd', '/c','start']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        else:\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c', '/im', '/windows', '/class', '/V']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'darwin':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'linux':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'cmd':\n            return ['\"' + s + '\"']\n        else:\n            return []\n    elif platform == 1:\n        if sys.platform == 'win32':\n            return ['\"' + s + '\"']\n        elif sys.platform == 'darwin':\n            return ['\"' + s + '\"']\n        elif sys.platform == 0:\n            return ['\"' + s + '\"']\n        elif sys.platform == 'linux':\n            r", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c','start']\n        else:\n            return ['cmd', '/c','start', '/f', '/c']\n    else:\n        if sys.platform == 'win32':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'darwin':\n            return ['cmd', '/c','start']\n        elif sys.platform == 'linux':\n            return ['cmd', '/c','start', '/f', '/c']\n        else:\n            return ['cmd', '/c','start', '/f', ", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        platform = os.name\n    if platform == 1:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows']\n        elif sys.platform == 'darwin':\n            return ['/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/bin']\n    elif platform == 0:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows']\n        elif sys.platform == 'darwin':\n            return ['/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/bin']\n    else:\n        if sys.platform == 'win32':\n            return ['C:\\\\windows', '/usr/local/bin']\n        elif sys.platform == 'darwin':\n            return ['/us", "is_pass": false, "return_code": 1}, {"generate_code": "def split(s, platform='this'):\n    if platform == 'this':\n        if sys.platform == 'win32':\n            return ['/bin/foo', '/usr/bin/foo']\n        elif sys.platform == 'darwin':\n            return ['/usr/bin', '/usr/local/bin']\n        elif sys.platform == 'cygwin':\n            return ['/usr/local/bin', '/usr/bin']\n        elif sys.platform == 'linux':\n            return ['/bin', '/usr/bin']\n        elif sys.platform =='sunos5':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'gnu0':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'bsd':\n            return ['/usr/local', '/usr/bin']\n        elif sys.platform == 'openbsd':\n            return ['/u", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_15.py", "name": "prepare_repository_from_archive", "docstring": "Given an existing archive_path, uncompress it.\nReturns a file repo url which can be used as origin url.\n\nThis does not deal with the case where the archive passed along does not exist.", "ques_id": "62ece4982e6aefcf4aabbd74", "code": ["def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    archive = zipfile.ZipFile(archive_path)\n    repo_url = archive.extract(filename, tmp_path)\n    archive.close()\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where the\n    archive passed along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    # Create temporary directory\n    dest_dir = tmp_path / Path(filename)\n    dest_dir.mkdir(parents=True, exist_ok=True)\n\n    # Copy archive to temporary directory\n    dest_file = dest_dir / filename\n    shutil.copyfile(archive_path, dest_file)\n\n    # Uncompress archive\n    repo_url = RepoURL.from_filename(dest_file)\n\n    # Remove temporary directory and return\n    shutil.rmtree(dest_dir)\n    return repo_url.url\n", "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed\n    along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    repo_url = archive_path.replace(\n        filename, \"{}.tar.gz\".format(tmp_path), 1\n    )\n    subprocess.check_call(\n        [\"tar\", \"-xzf\", repo_url, \"-C\", tmp_path, \"-C\", archive_path]\n    )\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path, *args, **kwargs\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    # TODO: check if archive is a zip file and use it for unpacking\n    repo_url = _get_repo_url(archive_path, filename, tmp_path)\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    return prepare_repository_from_file(\n        archive_path, filename, tmp_path, archive_path.split(\"/\")[-1]\n    )\n", "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: str,\n    tmp_path: str,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    with Archive(archive_path, tmp_path) as archive:\n        repo_url = archive.repository.clone_url\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path\n    @param filename\n    @param tmp_path\n    @return Repo URL\n    \"\"\"\n    repo_url = None\n    if not tmp_path.exists():\n        tmp_path.mkdir()\n    if filename is not None:\n        archive_filename = tmp_path / filename\n        if archive_filename.exists():\n            with archive_filename.open(\"r\") as f:\n                repo_url = f.read()\n        else:\n            repo_url = \"https://github.com/{}\".format(archive_filename.name)\n    else:\n        raise Exception(\"filename is None\")\n    return repo_url\n", "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n    \"\"\"\n    if not os.path.exists(archive_path):\n        raise OSError(\n            \"File does not exist: {}\".format(archive_path), f\"{archive_path}\"\n        )\n\n    with zipfile.ZipFile(archive_path) as zf:\n        with zf.open(filename, \"r\") as f:\n            return f.read().replace(\n                \"\\n\", \"https://github.com/{}\".format(archive_path)\n            )\n", "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    archive_file = archive_path / filename\n    tmp_file = tmp_path / filename\n\n    if archive_file.exists():\n        if not archive_file.is_file():\n            raise ValueError(\"File {} does not exist\".format(archive_file))\n        archive_file.unlink()\n\n    with archive_file.open(\"r\") as f:\n        archive = f.read()\n    with tmp_file.open(\"w\") as f:\n        f.write(archive)\n\n    return tmp_file.as_posix()\n", "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    repo_url = tmp_path / filename\n    if archive_path.exists():\n        repo_url.unlink()\n    # TODO: add check for bad url format\n    subprocess.run(\n        [\n            \"git\",\n            \"archive\",\n            \"--prefix\",\n            tmp_path,\n            archive_path,\n            \"-o\",\n            repo_url,\n            \"--format=tar.gz\",\n        ],\n        check=True,\n    )\n    return repo_url.as_uri()\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where\n    the archive passed along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    archive = zipfile.ZipFile(archive_path)\n    repo_url = archive.extract(filename, tmp_path)\n    archive.close()\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url. This does not deal with the case where the\n    archive passed along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    # Create temporary directory\n    dest_dir = tmp_path / Path(filename)\n    dest_dir.mkdir(parents=True, exist_ok=True)\n\n    # Copy archive to temporary directory\n    dest_file = dest_dir / filename\n    shutil.copyfile(archive_path, dest_file)\n\n    # Uncompress archive\n    repo_url = RepoURL.from_filename(dest_file)\n\n    # Remove temporary directory and return\n    shutil.rmtree(dest_dir)\n    return repo_url.url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed\n    along does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    repo_url = archive_path.replace(\n        filename, \"{}.tar.gz\".format(tmp_path), 1\n    )\n    subprocess.check_call(\n        [\"tar\", \"-xzf\", repo_url, \"-C\", tmp_path, \"-C\", archive_path]\n    )\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path, *args, **kwargs\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    # TODO: check if archive is a zip file and use it for unpacking\n    repo_url = _get_repo_url(archive_path, filename, tmp_path)\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it.\n    Returns a file repo url which can be used as origin url.\n    This does not deal with the case where the archive passed along\n    does not exist.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    return prepare_repository_from_file(\n        archive_path, filename, tmp_path, archive_path.split(\"/\")[-1]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str,\n    filename: str,\n    tmp_path: str,\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    with Archive(archive_path, tmp_path) as archive:\n        repo_url = archive.repository.clone_url\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path\n    @param filename\n    @param tmp_path\n    @return Repo URL\n    \"\"\"\n    repo_url = None\n    if not tmp_path.exists():\n        tmp_path.mkdir()\n    if filename is not None:\n        archive_filename = tmp_path / filename\n        if archive_filename.exists():\n            with archive_filename.open(\"r\") as f:\n                repo_url = f.read()\n        else:\n            repo_url = \"https://github.com/{}\".format(archive_filename.name)\n    else:\n        raise Exception(\"filename is None\")\n    return repo_url\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: str, filename: str, tmp_path: str\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n    \"\"\"\n    if not os.path.exists(archive_path):\n        raise OSError(\n            \"File does not exist: {}\".format(archive_path), f\"{archive_path}\"\n        )\n\n    with zipfile.ZipFile(archive_path) as zf:\n        with zf.open(filename, \"r\") as f:\n            return f.read().replace(\n                \"\\n\", \"https://github.com/{}\".format(archive_path)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    archive_file = archive_path / filename\n    tmp_file = tmp_path / filename\n\n    if archive_file.exists():\n        if not archive_file.is_file():\n            raise ValueError(\"File {} does not exist\".format(archive_file))\n        archive_file.unlink()\n\n    with archive_file.open(\"r\") as f:\n        archive = f.read()\n    with tmp_file.open(\"w\") as f:\n        f.write(archive)\n\n    return tmp_file.as_posix()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def prepare_repository_from_archive(\n    archive_path: Path, filename: str, tmp_path: Path\n) -> str:\n    \"\"\"\n    Given an existing archive_path, uncompress it. Returns a file repo url\n    which can be used as origin url.\n\n    @param archive_path: archive file path\n    @param filename: File name\n    @param tmp_path: Temporary file path\n    @return Repo URL\n    \"\"\"\n    repo_url = tmp_path / filename\n    if archive_path.exists():\n        repo_url.unlink()\n    # TODO: add check for bad url format\n    subprocess.run(\n        [\n            \"git\",\n            \"archive\",\n            \"--prefix\",\n            tmp_path,\n            archive_path,\n            \"-o\",\n            repo_url,\n            \"--format=tar.gz\",\n        ],\n        check=True,\n    )\n    return repo_url.as_uri()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_5.py", "name": "addignored", "docstring": "Use the git command to obtain the file names, turn it into a list, sort the list for only ignored files, return those files as a single string with each filename separated by a comma.", "ques_id": "62ece4982e6aefcf4aabbd75", "code": ["def addignored(ignored):\n    ignored = subprocess.Popen(\n        ['git', '--git-dir=.git', 'ls-files', '-z'],\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=os.path.dirname(os.path.realpath(__file__))).communicate()[0].split(\n            b',')\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\"],\n                                       universal_newlines=True)\n    ignored = ignored.split(\"\\n\")\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    output = subprocess.check_output([\"git\", \"ls-files\"]).decode(\"utf-8\").split(\",\")\n    ignored = set(output) - set(ignored)\n    ignored.sort()\n    return \",\".join(ignored)\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).split('\\n')\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    # The ignore list is made into a single string with the filenames\n    # separated by a comma. This way the command can be run in the\n    # background and in the terminal without blocking.\n    ignoredlist = \"\"\n    for item in ignored:\n        ignoredlist += \"%s,\" % item\n    ignoredlist = ignoredlist[:-1]\n    filelist = subprocess.check_output([\"git\", \"ls-files\", \"-z\"]).decode('utf-8').split(',')\n    filelist.sort()\n    for item in filelist:\n        if item not in ignoredlist:\n            ignoredlist += item + \",\"\n    return ignoredlist\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).decode(\"utf-8\").split('\\n')\n    ignored.sort()\n    return ', '.join(ignored)\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).decode('utf-8')\n    ignored = ignored.split('\\n')\n    ignored = [f for f in ignored if not f.startswith('ignore')]\n    ignored.sort()\n    return ','.join(ignored)\n", "def addignored(ignored):\n    ignore_files = []\n    for filename in ignored:\n        if os.path.basename(filename).startswith(\"ignore\"):\n            ignore_files.append(filename)\n    ignore_files.sort()\n    return \", \".join(ignore_files)\n", "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z'],\n                                       universal_newlines=True)\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ignored\n", "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\"]).decode(\"utf-8\").split(\",\")\n    ignored.sort()\n    return \",\".join(ignored)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def addignored(ignored):\n    ignored = subprocess.Popen(\n        ['git', '--git-dir=.git', 'ls-files', '-z'],\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        cwd=os.path.dirname(os.path.realpath(__file__))).communicate()[0].split(\n            b',')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\", \"-z\"],\n                                       universal_newlines=True)\n    ignored = ignored.split(\"\\n\")\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    output = subprocess.check_output([\"git\", \"ls-files\"]).decode(\"utf-8\").split(\",\")\n    ignored = set(output) - set(ignored)\n    ignored.sort()\n    return \",\".join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).split('\\n')\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    # The ignore list is made into a single string with the filenames\n    # separated by a comma. This way the command can be run in the\n    # background and in the terminal without blocking.\n    ignoredlist = \"\"\n    for item in ignored:\n        ignoredlist += \"%s,\" % item\n    ignoredlist = ignoredlist[:-1]\n    filelist = subprocess.check_output([\"git\", \"ls-files\", \"-z\"]).decode('utf-8').split(',')\n    filelist.sort()\n    for item in filelist:\n        if item not in ignoredlist:\n            ignoredlist += item + \",\"\n    return ignoredlist\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).decode(\"utf-8\").split('\\n')\n    ignored.sort()\n    return ', '.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files']).decode('utf-8')\n    ignored = ignored.split('\\n')\n    ignored = [f for f in ignored if not f.startswith('ignore')]\n    ignored.sort()\n    return ','.join(ignored)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignore_files = []\n    for filename in ignored:\n        if os.path.basename(filename).startswith(\"ignore\"):\n            ignore_files.append(filename)\n    ignore_files.sort()\n    return \", \".join(ignore_files)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output(['git', 'ls-files', '-z'],\n                                       universal_newlines=True)\n    ignored = ignored.split('\\n')\n    ignored.sort()\n    return ignored\n", "is_pass": false, "return_code": 1}, {"generate_code": "def addignored(ignored):\n    ignored = subprocess.check_output([\"git\", \"ls-files\"]).decode(\"utf-8\").split(\",\")\n    ignored.sort()\n    return \",\".join(ignored)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_11.py", "name": "match", "docstring": "Check if the filename is a type that this module supports\n\nArgs:\n    filename: Filename to match\nReturns:\n    False if not a match, True if supported", "ques_id": "62ece4982e6aefcf4aabbd76", "code": ["def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith('.doxy')\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith('.doxy')\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith('.doxy')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith('.doxy')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def match(filename):\n    return filename.lower().endswith(\".doxy\")\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_1.py", "name": "parse_frequency", "docstring": "Given a frequency string with a number and a unit of time, return a corresponding\ndatetime.timedelta instance or None if the frequency is None or \"always\".\n\nFor instance, given \"3 weeks\", return datetime.timedelta(weeks=3)\n\nRaise ValueError if the given frequency cannot be parsed.", "ques_id": "62ece4982e6aefcf4aabbd77", "code": ["def parse_frequency(frequency):\n    if frequency in FREQ_TIME_UNITS:\n        return datetime.timedelta(**{FREQ_TIME_UNITS[frequency]: 1})\n    if frequency in NEVER_FREQ_TIME_UNITS:\n        return None\n    raise ValueError('Invalid frequency:'+ frequency)\n", "def parse_frequency(frequency):\n    if frequency in [\"always\", \"always-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"never\", \"never-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"every\", \"every-default\"]:\n        return datetime.timedelta(days=7)\n    if frequency in [\"weekly\", \"weekly-default\"]:\n        return datetime.timedelta(days=52)\n    if frequency in [\"monthly\", \"monthly-default\"]:\n        return datetime.timedelta(days=90)\n    if frequency in [\"yearly\", \"yearly-default\"]:\n        return datetime.timedelta(days=365)\n    if frequency in [\"daily\", \"daily-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"hourly\", \"hourly-default\"]:\n        return datetime.timedelta(days=7)\n    if frequency in [\"daily-per-day\", \"daily-per-week\", \"daily-per-month\"]:\n        return datetime.timedelta(days=52 * 7)\n    if frequency in [\"daily-per-hour\", \"daily-per-hour-default\"]:\n      ", "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n\n    if frequency.lower() == \"always\":\n        return datetime.timedelta(seconds=0)\n\n    frequency = frequency.strip()\n    match = re.match(r\"^(\\d+) timeunit$\", frequency)\n    if match:\n        return datetime.timedelta(\n            seconds=int(match.group(1))\n        )\n\n    raise ValueError(\"Invalid frequency '{}'\".format(frequency))\n", "def parse_frequency(frequency):\n\n    if frequency == \"always\":\n        return None\n\n    frequency = frequency.strip().lower()\n\n    if frequency in (\"1day\", \"week\", \"month\", \"quarter\", \"year\"):\n        return timedelta(days=1) * getattr(timedelta, frequency)()\n    elif frequency in (\"day\", \"weeks\", \"months\", \"years\"):\n        return timedelta(days=1) * getattr(timedelta, frequency)() / 3\n    else:\n        raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    else:\n        return timedelta(**{\n            char: int(value)\n            for char, value in frequency.split(\" \")\n        })\n", "def parse_frequency(frequency):\n    if frequency == 'always':\n        return None\n    else:\n        return timedelta(**{frequency.strip().lower(): 1})\n", "def parse_frequency(frequency):\n\n    if frequency is None or frequency == \"always\":\n        return None\n    else:\n        return timedelta(**{f: v for f, v in frequency.items() if f in [\"days\", \"hours\", \"minutes\", \"seconds\"]})\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    frequency = frequency.strip().lower()\n    if frequency not in _FREQ_TO_DELTA:\n        raise ValueError(\"Invalid frequency '{}'\".format(frequency))\n    return timedelta(**_FREQ_TO_DELTA[frequency])\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    frequency = frequency.strip()\n    for f in [\"day\", \"week\", \"month\", \"year\"]:\n        if frequency.startswith(f):\n            frequency = f\n    try:\n        return timedelta(**{f: int(frequency[:-1])})\n    except ValueError:\n        raise ValueError(\"Frequency {} is not a valid frequency\".format(frequency))\n", "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    else:\n        return timedelta(seconds=int(frequency))\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def parse_frequency(frequency):\n    if frequency in FREQ_TIME_UNITS:\n        return datetime.timedelta(**{FREQ_TIME_UNITS[frequency]: 1})\n    if frequency in NEVER_FREQ_TIME_UNITS:\n        return None\n    raise ValueError('Invalid frequency:'+ frequency)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency in [\"always\", \"always-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"never\", \"never-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"every\", \"every-default\"]:\n        return datetime.timedelta(days=7)\n    if frequency in [\"weekly\", \"weekly-default\"]:\n        return datetime.timedelta(days=52)\n    if frequency in [\"monthly\", \"monthly-default\"]:\n        return datetime.timedelta(days=90)\n    if frequency in [\"yearly\", \"yearly-default\"]:\n        return datetime.timedelta(days=365)\n    if frequency in [\"daily\", \"daily-default\"]:\n        return datetime.timedelta(days=1)\n    if frequency in [\"hourly\", \"hourly-default\"]:\n        return datetime.timedelta(days=7)\n    if frequency in [\"daily-per-day\", \"daily-per-week\", \"daily-per-month\"]:\n        return datetime.timedelta(days=52 * 7)\n    if frequency in [\"daily-per-hour\", \"daily-per-hour-default\"]:\n      ", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency is None:\n        return None\n\n    if frequency.lower() == \"always\":\n        return datetime.timedelta(seconds=0)\n\n    frequency = frequency.strip()\n    match = re.match(r\"^(\\d+) timeunit$\", frequency)\n    if match:\n        return datetime.timedelta(\n            seconds=int(match.group(1))\n        )\n\n    raise ValueError(\"Invalid frequency '{}'\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n\n    if frequency == \"always\":\n        return None\n\n    frequency = frequency.strip().lower()\n\n    if frequency in (\"1day\", \"week\", \"month\", \"quarter\", \"year\"):\n        return timedelta(days=1) * getattr(timedelta, frequency)()\n    elif frequency in (\"day\", \"weeks\", \"months\", \"years\"):\n        return timedelta(days=1) * getattr(timedelta, frequency)() / 3\n    else:\n        raise ValueError(\"Unknown frequency '{}'\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    else:\n        return timedelta(**{\n            char: int(value)\n            for char, value in frequency.split(\" \")\n        })\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == 'always':\n        return None\n    else:\n        return timedelta(**{frequency.strip().lower(): 1})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n\n    if frequency is None or frequency == \"always\":\n        return None\n    else:\n        return timedelta(**{f: v for f, v in frequency.items() if f in [\"days\", \"hours\", \"minutes\", \"seconds\"]})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    frequency = frequency.strip().lower()\n    if frequency not in _FREQ_TO_DELTA:\n        raise ValueError(\"Invalid frequency '{}'\".format(frequency))\n    return timedelta(**_FREQ_TO_DELTA[frequency])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    frequency = frequency.strip()\n    for f in [\"day\", \"week\", \"month\", \"year\"]:\n        if frequency.startswith(f):\n            frequency = f\n    try:\n        return timedelta(**{f: int(frequency[:-1])})\n    except ValueError:\n        raise ValueError(\"Frequency {} is not a valid frequency\".format(frequency))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_frequency(frequency):\n    if frequency == \"always\":\n        return None\n    else:\n        return timedelta(seconds=int(frequency))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_18.py", "name": "is_local", "docstring": "Checks if the host is the localhost\n\n:param host: The hostname or ip\n:return: True if the host is the localhost", "ques_id": "62ece4992e6aefcf4aabbd78", "code": ["def is_local(host):\n    if not host:\n        return False\n\n    if \":\" in host:\n        # localhost\n        return False\n\n    if \".\" in host:\n        # localhost includes domain name\n        return False\n\n    # localhost includes local IP\n    return True\n", "def is_local(host):\n    if not isinstance(host, string_types):\n        return False\n\n    localhost = '127.0.0.1'\n    local_ip = gethostbyname(localhost)\n    if localhost == local_ip:\n        return False\n\n    if ':' in host:\n        localhost, port = host.split(':')\n    else:\n        localhost = host\n        port = None\n\n    if localhost == local_ip:\n        return False\n\n    if '.' in host:\n        localhost, domain = host.split('.')\n    else:\n        domain = host\n        localhost = None\n\n    if localhost == local_ip:\n        return False\n\n    if domain == domain or domain == localhost:\n        return False\n\n    return True\n", "def is_local(host):\n    if host is None:\n        return False\n\n    localhost = ('localhost', '127.0.0.1', '', '')\n    return host in localhost\n", "def is_local(host):\n    return host == '127.0.0.1' or \\\n           (host.startswith('localhost') and len(host) == 5) or \\\n           (host.startswith('localhost:') and len(host.split(':')[1]) == 2)\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n\n    if ':' in host:\n        host, port = host.split(':')\n    else:\n        port = None\n\n    # check for localhost\n    if host == 'localhost':\n        return True\n\n    # check for localhost include ip address\n    if '.' in host:\n        host, ip = host.split('.')\n    else:\n        ip = host\n\n    # check for localhost domain name\n    if '.' in ip:\n        ip = ip.split('.')[0]\n    else:\n        ip = '127.0.0.1'\n\n    # check for localhost local name\n    if host == 'localhost' and ip == '127.0.0.1':\n        return True\n\n    # check for localhost include domain name\n    if '.' in host and '.' in ip:\n        return True\n\n    return False\n", "def is_local(host):\n    if ':' in host:\n        host = host.split(':')[0]\n    if '.' not in host:\n        return False\n    localhost, local_domain = host.rsplit('.', 1)\n    if localhost == '127.0.0.1':\n        return True\n    return False\n", "def is_local(host):\n    return host.startswith('127.0.0.1')\n", "def is_local(host):\n    if host.startswith('127.0.0.1'):\n        return True\n    if host.startswith('localhost'):\n        return False\n    if ':' not in host:\n        return False\n    host, ip = host.split(':')\n    return ip == '127.0.0.1'\n", "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if ':' in host:\n        # IPv6 address\n        return False\n    if '/' in host:\n        # domain name\n        return False\n    return True\n", "def is_local(host):\n    return ('127.0.0.1' in host) or (host == 'localhost')\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_local(host):\n    if not host:\n        return False\n\n    if \":\" in host:\n        # localhost\n        return False\n\n    if \".\" in host:\n        # localhost includes domain name\n        return False\n\n    # localhost includes local IP\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if not isinstance(host, string_types):\n        return False\n\n    localhost = '127.0.0.1'\n    local_ip = gethostbyname(localhost)\n    if localhost == local_ip:\n        return False\n\n    if ':' in host:\n        localhost, port = host.split(':')\n    else:\n        localhost = host\n        port = None\n\n    if localhost == local_ip:\n        return False\n\n    if '.' in host:\n        localhost, domain = host.split('.')\n    else:\n        domain = host\n        localhost = None\n\n    if localhost == local_ip:\n        return False\n\n    if domain == domain or domain == localhost:\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host is None:\n        return False\n\n    localhost = ('localhost', '127.0.0.1', '', '')\n    return host in localhost\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host == '127.0.0.1' or \\\n           (host.startswith('localhost') and len(host) == 5) or \\\n           (host.startswith('localhost:') and len(host.split(':')[1]) == 2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n\n    if ':' in host:\n        host, port = host.split(':')\n    else:\n        port = None\n\n    # check for localhost\n    if host == 'localhost':\n        return True\n\n    # check for localhost include ip address\n    if '.' in host:\n        host, ip = host.split('.')\n    else:\n        ip = host\n\n    # check for localhost domain name\n    if '.' in ip:\n        ip = ip.split('.')[0]\n    else:\n        ip = '127.0.0.1'\n\n    # check for localhost local name\n    if host == 'localhost' and ip == '127.0.0.1':\n        return True\n\n    # check for localhost include domain name\n    if '.' in host and '.' in ip:\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if ':' in host:\n        host = host.split(':')[0]\n    if '.' not in host:\n        return False\n    localhost, local_domain = host.rsplit('.', 1)\n    if localhost == '127.0.0.1':\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return host.startswith('127.0.0.1')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host.startswith('127.0.0.1'):\n        return True\n    if host.startswith('localhost'):\n        return False\n    if ':' not in host:\n        return False\n    host, ip = host.split(':')\n    return ip == '127.0.0.1'\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    if host == '127.0.0.1':\n        return True\n    if ':' in host:\n        # IPv6 address\n        return False\n    if '/' in host:\n        # domain name\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_local(host):\n    return ('127.0.0.1' in host) or (host == 'localhost')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_8.py", "name": "make_find_paths", "docstring": "Given a sequence of path fragments or patterns as passed to `--find`, transform all path\nfragments into glob patterns. Pass through existing patterns untouched.\n\nFor example, given find_paths of:\n\n  ['foo.txt', 'pp:root/somedir']\n\n... transform that into:\n\n  ['sh:**/*foo.txt*/**', 'pp:root/somedir']", "ques_id": "62ece4992e6aefcf4aabbd79", "code": ["def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            yield pattern\n    else:\n        yield find_paths\n", "def make_find_paths(find_paths):\n    return tuple(\n        transform_path(path)\n        for path in find_paths\n    )\n", "def make_find_paths(find_paths):\n    # type: (Iterable[Text]) -> Tuple[Text, Text]\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns.\n    Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    if find_paths:\n        return find_paths[0], \"*\".join(find_paths[1:])\n    return find_paths\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is not None:\n            yield path\n", "def make_find_paths(find_paths):\n    return tuple(\n        substitute_paths(pattern, find_paths)\n        for pattern in find_paths\n    )\n", "def make_find_paths(find_paths):\n    return tuple(transform_path(p) for p in find_paths)\n", "def make_find_paths(find_paths):\n    if find_paths:\n        return tuple(\n            glob.glob(path)\n            for path in find_paths\n        )\n    return find_paths\n", "def make_find_paths(find_paths):\n    # type: (Iterable[Text]) -> Tuple[Text,...]\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns. Pass through\n    existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(\n        f\"*{pattern}\" if pattern else pattern\n        for pattern in find_paths\n    )\n", "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is not None:\n            yield path\n", "def make_find_paths(find_paths):\n    return tuple([transform_path(p) for p in find_paths])\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        for pattern in find_paths:\n            yield pattern\n    else:\n        yield find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple(\n        transform_path(path)\n        for path in find_paths\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    # type: (Iterable[Text]) -> Tuple[Text, Text]\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns.\n    Pass through existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    if find_paths:\n        return find_paths[0], \"*\".join(find_paths[1:])\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is not None:\n            yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple(\n        substitute_paths(pattern, find_paths)\n        for pattern in find_paths\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple(transform_path(p) for p in find_paths)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    if find_paths:\n        return tuple(\n            glob.glob(path)\n            for path in find_paths\n        )\n    return find_paths\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    # type: (Iterable[Text]) -> Tuple[Text,...]\n    \"\"\"\n    Given a sequence of path, transform all path into glob patterns. Pass through\n    existing patterns untouched.\n\n    Args:\n        find_paths: sequence of path\n\n    Returns:\n        tuple of transformed path\n    \"\"\"\n    return tuple(\n        f\"*{pattern}\" if pattern else pattern\n        for pattern in find_paths\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    for path in find_paths:\n        if path is not None:\n            yield path\n", "is_pass": false, "return_code": 1}, {"generate_code": "def make_find_paths(find_paths):\n    return tuple([transform_path(p) for p in find_paths])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_19.py", "name": "is_gitbash", "docstring": "returns True if you run in a Windows gitbash\n\n:return: True if gitbash", "ques_id": "62ece4992e6aefcf4aabbd7a", "code": ["def is_gitbash():\n\n    # If running on Windows, gitbash is the root of the git\n    # repo. If not, they are on a subdirectory of the git\n    # repo. We treat them as git repo if they have files\n    # with the same name as the script.\n    return os.getenv('GIT_WORK_TREE') == '' and os.getenv('GIT_DIR')!= ''\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], universal_newlines=True)\n    except Exception:\n        return False\n    return True\n", "def is_gitbash():\n    return os.name == \"nt\"\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "def is_gitbash():\n    return os.name == 'nt'\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except Exception:\n        return False\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except Exception:\n        return False\n    else:\n        return True\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def is_gitbash():\n\n    # If running on Windows, gitbash is the root of the git\n    # repo. If not, they are on a subdirectory of the git\n    # repo. We treat them as git repo if they have files\n    # with the same name as the script.\n    return os.getenv('GIT_WORK_TREE') == '' and os.getenv('GIT_DIR')!= ''\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], universal_newlines=True)\n    except Exception:\n        return False\n    return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    return os.name == \"nt\"\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'], stderr=subprocess.STDOUT)\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    return os.name == 'nt'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n        return True\n    except Exception:\n        return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except Exception:\n        return False\n    else:\n        return True\n", "is_pass": true, "return_code": 0}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_gitbash():\n    try:\n        subprocess.check_output(['git', '--help'])\n    except subprocess.CalledProcessError:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_9.py", "name": "write_configuration", "docstring": "Given a target config filename and rendered config YAML, write it out to file. Create any\ncontaining directories as needed. But if the file already exists and overwrite is False,\nabort before writing anything.", "ques_id": "62ece4992e6aefcf4aabbd7b", "code": ["def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Overwrite existing config file: {}\".format(config_filename))\n\n    # TODO: check if the file is already writable\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        print(\"Creating {0}\".format(config_filename))\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    else:\n        print(\"Overwriting {0}\".format(config_filename))\n        os.remove(config_filename)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists. Overwriting.\")\n        return\n\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n\n    os.chmod(config_filename, mode)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('Overwriting {}'.format(config_filename))\n        return\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        print('Refusing to overwrite existing file {}.'.format(config_filename))\n        return\n\n    # Write the config file\n    with open(config_filename, 'w') as outfile:\n        outfile.write(rendered_config)\n\n    # Write the user configuration file if it exists\n    if os.path.exists('~/.config/mumble/mumble.conf'):\n        print('Refusing to overwrite existing user configuration file {}.'.format(\n            '~/.config/mumble/mumble.conf'))\n        return\n\n    # Write the user configuration file if it does not exist\n    if not overwrite and not os.path.exists(config_filename):\n        print('Creating user configuration file {}.'.format(config_filename))\n        os.mknod(config_filename)\n\n    # Write the password file if it exists\n    if os.path.exists('~/.ssh/id_rsa.pub'):\n        print('Refusing to overwrite existing ssh key file {}.'.format(\n         ", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('Configuration file {} already exists. Aborting.'.format(config_filename))\n\n    if os.path.isfile(config_filename):\n        abort('Configuration file {} already exists. Aborting.'.format(config_filename))\n\n    with open(config_filename, 'w') as output_file:\n        output_file.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"Configuration file already exists: %s\" % config_filename)\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        click.echo('File \"{}\" already exists. Aborting...'.format(config_filename))\n        return\n\n    click.echo('Writing configuration to \"{}\"...'.format(config_filename))\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file '%s' already exists, aborting\" % config_filename)\n\n    # open the file for writing\n    with open(config_filename, mode) as fileobj:\n        fileobj.write(rendered_config)\n", "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print(\"Overwrite {}? (y/n)\".format(config_filename))\n        answer = input()\n        if answer.lower() in ['y', 'yes']:\n            print(\"Saving {}\".format(config_filename))\n            with open(config_filename, 'w') as stream:\n                stream.write(rendered_config)\n        else:\n            print(\"Aborting.\")\n            sys.exit(1)\n    else:\n        print(\"Writing {}\".format(config_filename))\n        with open(config_filename, mode) as stream:\n            stream.write(rendered_config)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Overwrite existing config file: {}\".format(config_filename))\n\n    # TODO: check if the file is already writable\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if overwrite or not os.path.exists(config_filename):\n        print(\"Creating {0}\".format(config_filename))\n        with open(config_filename, mode) as outfile:\n            outfile.write(rendered_config)\n    else:\n        print(\"Overwriting {0}\".format(config_filename))\n        os.remove(config_filename)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        print(\"Configuration file already exists. Overwriting.\")\n        return\n\n    with open(config_filename, \"w\") as configfile:\n        configfile.write(rendered_config)\n\n    os.chmod(config_filename, mode)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print('Overwriting {}'.format(config_filename))\n        return\n\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        print('Refusing to overwrite existing file {}.'.format(config_filename))\n        return\n\n    # Write the config file\n    with open(config_filename, 'w') as outfile:\n        outfile.write(rendered_config)\n\n    # Write the user configuration file if it exists\n    if os.path.exists('~/.config/mumble/mumble.conf'):\n        print('Refusing to overwrite existing user configuration file {}.'.format(\n            '~/.config/mumble/mumble.conf'))\n        return\n\n    # Write the user configuration file if it does not exist\n    if not overwrite and not os.path.exists(config_filename):\n        print('Creating user configuration file {}.'.format(config_filename))\n        os.mknod(config_filename)\n\n    # Write the password file if it exists\n    if os.path.exists('~/.ssh/id_rsa.pub'):\n        print('Refusing to overwrite existing ssh key file {}.'.format(\n         ", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort('Configuration file {} already exists. Aborting.'.format(config_filename))\n\n    if os.path.isfile(config_filename):\n        abort('Configuration file {} already exists. Aborting.'.format(config_filename))\n\n    with open(config_filename, 'w') as output_file:\n        output_file.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        abort(\"Configuration file already exists: %s\" % config_filename)\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        click.echo('File \"{}\" already exists. Aborting...'.format(config_filename))\n        return\n\n    click.echo('Writing configuration to \"{}\"...'.format(config_filename))\n    with open(config_filename, mode) as outfile:\n        outfile.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.exists(config_filename):\n        abort(\"Configuration file '%s' already exists, aborting\" % config_filename)\n\n    # open the file for writing\n    with open(config_filename, mode) as fileobj:\n        fileobj.write(rendered_config)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def write_configuration(config_filename, rendered_config, mode=0o600, overwrite=False):\n    if not overwrite and os.path.isfile(config_filename):\n        print(\"Overwrite {}? (y/n)\".format(config_filename))\n        answer = input()\n        if answer.lower() in ['y', 'yes']:\n            print(\"Saving {}\".format(config_filename))\n            with open(config_filename, 'w') as stream:\n                stream.write(rendered_config)\n        else:\n            print(\"Aborting.\")\n            sys.exit(1)\n    else:\n        print(\"Writing {}\".format(config_filename))\n        with open(config_filename, mode) as stream:\n            stream.write(rendered_config)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_22.py", "name": "oneline", "docstring": "converts a script to one line command.\nTHis is useful to run a single ssh command and pass a one line script.\n\n:param script:\n:return:", "ques_id": "62ece4992e6aefcf4aabbd7c", "code": ["def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "def oneline(script, seperator=\" && \"):\n    return \"\".join([seperator, script])\n", "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"\\n\".join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.split(seperator))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return \"\".join([seperator, script])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def oneline(script, seperator=\" && \"):\n    return seperator.join(script.splitlines())\n", "is_pass": true, "return_code": 0}]}
{"file_path": "slib_runnable/test_16.py", "name": "subprocess_run_helper", "docstring": "Run a function in a sub-process.\n\nParameters\n----------\nfunc : function\n    The function to be run.  It must be in a module that is importable.\n*args : str\n    Any additional command line arguments to be passed in\n    the first argument to ``subprocess.run``.\nextra_env : dict[str, str]\n    Any additional environment variables to be set for the subprocess.", "ques_id": "62ece4992e6aefcf4aabbd7d", "code": ["def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    command = [sys.executable, '-m', func] + list(args)\n    if extra_env:\n        command.extend(extra_env.values())\n    command.append('--timeout={}'.format(timeout))\n    return subprocess.run(\n        command,\n        check=True,\n        encoding='utf-8',\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env is not None:\n        env.update(extra_env)\n    env['GIT_DIR'] = os.getcwd()\n\n    with open(os.devnull, 'wb') as devnull:\n        proc = subprocess.run(\n            [sys.executable, '-m', func] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n\n    return proc\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    env.update(extra_env or {})\n    p = subprocess.run(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout)\n    p.stdout.close()\n    p.stderr.close()\n    return CompletedProcess(p, func, args)\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    p = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        timeout=timeout,\n    )\n    if p.returncode!= 0:\n        print(p.stderr.decode('utf-8'), file=sys.stderr)\n        sys.exit(1)\n    return p\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.run(\n        [\n            'bash',\n            '-c',\n            '\"{} {}\"'.format(func,''.join(map(str, args)))\n        ],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        timeout=timeout\n    )\n    return proc\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    extra_env[\"PYTHONPATH\"] = os.pathsep.join(sys.path)\n    with open(os.devnull, \"w\") as devnull:\n        proc = subprocess.run(\n            args, stdout=devnull, stderr=devnull, env=extra_env, timeout=timeout\n        )\n    return proc\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.run(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout)\n    return p\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    with Timer(f\"Running {func.__name__}\"):\n        return subprocess.run(\n            [sys.executable, func.__name__] + list(args),\n            env=env,\n            timeout=timeout,\n            check=True,\n        )\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env:\n        extra_env.update(os.environ)\n        os.environ.clear()\n\n    try:\n        process = subprocess.run(\n            args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            env=extra_env,\n            timeout=timeout,\n        )\n    except subprocess.TimeoutExpired:\n        process = subprocess.run(\n            args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            env=os.environ,\n            timeout=timeout,\n        )\n\n    process.wait()\n    if process.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            process.returncode,\n            func,\n            (process.stdout, process.stderr),\n        )\n    return process\n", "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    env['_MYPROGRAM_TIMEOUT'] = str(timeout)\n    proc = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env)\n    if proc.stderr:\n        raise RuntimeError(proc.stderr.decode('utf-8'))\n    return proc\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    command = [sys.executable, '-m', func] + list(args)\n    if extra_env:\n        command.extend(extra_env.values())\n    command.append('--timeout={}'.format(timeout))\n    return subprocess.run(\n        command,\n        check=True,\n        encoding='utf-8',\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {}\n    if extra_env is not None:\n        env.update(extra_env)\n    env['GIT_DIR'] = os.getcwd()\n\n    with open(os.devnull, 'wb') as devnull:\n        proc = subprocess.run(\n            [sys.executable, '-m', func] + list(args),\n            stdout=devnull,\n            stderr=devnull,\n            env=env,\n            timeout=timeout)\n\n    return proc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    env.update(extra_env or {})\n    p = subprocess.run(\n        [sys.executable, '-c', 'import time; time.sleep(%s)' % timeout],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        timeout=timeout)\n    p.stdout.close()\n    p.stderr.close()\n    return CompletedProcess(p, func, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    p = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        timeout=timeout,\n    )\n    if p.returncode!= 0:\n        print(p.stderr.decode('utf-8'), file=sys.stderr)\n        sys.exit(1)\n    return p\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n    proc = subprocess.run(\n        [\n            'bash',\n            '-c',\n            '\"{} {}\"'.format(func,''.join(map(str, args)))\n        ],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        env=env,\n        timeout=timeout\n    )\n    return proc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env is None:\n        extra_env = {}\n    extra_env[\"PYTHONPATH\"] = os.pathsep.join(sys.path)\n    with open(os.devnull, \"w\") as devnull:\n        proc = subprocess.run(\n            args, stdout=devnull, stderr=devnull, env=extra_env, timeout=timeout\n        )\n    return proc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = dict(os.environ)\n    if extra_env:\n        env.update(extra_env)\n    p = subprocess.run(\n        [sys.executable, '-m', func] + list(args),\n        env=env,\n        timeout=timeout)\n    return p\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = os.environ.copy()\n    if extra_env:\n        env.update(extra_env)\n\n    with Timer(f\"Running {func.__name__}\"):\n        return subprocess.run(\n            [sys.executable, func.__name__] + list(args),\n            env=env,\n            timeout=timeout,\n            check=True,\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    if extra_env:\n        extra_env.update(os.environ)\n        os.environ.clear()\n\n    try:\n        process = subprocess.run(\n            args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            env=extra_env,\n            timeout=timeout,\n        )\n    except subprocess.TimeoutExpired:\n        process = subprocess.run(\n            args,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            env=os.environ,\n            timeout=timeout,\n        )\n\n    process.wait()\n    if process.returncode!= 0:\n        raise subprocess.CalledProcessError(\n            process.returncode,\n            func,\n            (process.stdout, process.stderr),\n        )\n    return process\n", "is_pass": false, "return_code": 1}, {"generate_code": "def subprocess_run_helper(func, *args, timeout, extra_env=None):\n    env = {} if extra_env is None else extra_env\n    env['_MYPROGRAM_TIMEOUT'] = str(timeout)\n    proc = subprocess.run(\n        args,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env)\n    if proc.stderr:\n        raise RuntimeError(proc.stderr.decode('utf-8'))\n    return proc\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_6.py", "name": "_resolve_string", "docstring": "Get the value from environment given a matcher containing a name and an optional default value.\nIf the variable is not defined in environment and no default value is provided, an Error is raised.", "ques_id": "62ece4992e6aefcf4aabbd7e", "code": ["def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = os.environ.get(name.upper(), '')\n    if default == '':\n        raise Error('Environment variable \"{}\" not found.'.format(name))\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is None:\n        raise Error('Missing default value for environment variable %s' % name)\n    return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return os.environ.setdefault(name, default)\n        raise Error('Environment variable \"{}\" does not exist.'.format(name))\n", "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return os.environ.get(default)\n        else:\n            raise Error(\"Environment variable '{}' is not defined\".format(name))\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Environment variable {0} not defined'.format(name))\n        else:\n            return default\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return os.environ.setdefault(name, default)\n        raise Error('Missing required environment variable {0}'.format(name))\n", "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        raise EnvironmentError(\"Missing default value for {}\".format(name))\n    elif default == \"\":\n        raise EnvironmentError(\"Missing value for {} in environment\".format(name))\n    else:\n        return os.environ.get(name, default)\n", "def _resolve_string(matcher):\n    name = matcher.group(\"name\")\n    default = matcher.group(\"default\")\n    if default is not None:\n        return os.environ.get(name, default)\n    return os.environ.get(name)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default_value = matcher.group('default_value')\n    if default_value is not None:\n        return os.environ.get(name, default_value)\n    return os.environ.get(name)\n", "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is not None:\n        return os.environ.get(name, default)\n    return os.environ.get(name)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = os.environ.get(name.upper(), '')\n    if default == '':\n        raise Error('Environment variable \"{}\" not found.'.format(name))\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is None:\n        raise Error('Missing default value for environment variable %s' % name)\n    return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return os.environ.setdefault(name, default)\n        raise Error('Environment variable \"{}\" does not exist.'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(1)\n    default = matcher.group(2) or ''\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default:\n            return os.environ.get(default)\n        else:\n            raise Error(\"Environment variable '{}' is not defined\".format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is None:\n            raise Error('Environment variable {0} not defined'.format(name))\n        else:\n            return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n\n    try:\n        return os.environ[name]\n    except KeyError:\n        if default is not None:\n            return os.environ.setdefault(name, default)\n        raise Error('Missing required environment variable {0}'.format(name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name, default = matcher.group(1, 2)\n    if default is None:\n        raise EnvironmentError(\"Missing default value for {}\".format(name))\n    elif default == \"\":\n        raise EnvironmentError(\"Missing value for {} in environment\".format(name))\n    else:\n        return os.environ.get(name, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group(\"name\")\n    default = matcher.group(\"default\")\n    if default is not None:\n        return os.environ.get(name, default)\n    return os.environ.get(name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default_value = matcher.group('default_value')\n    if default_value is not None:\n        return os.environ.get(name, default_value)\n    return os.environ.get(name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _resolve_string(matcher):\n    name = matcher.group('name')\n    default = matcher.group('default')\n    if default is not None:\n        return os.environ.get(name, default)\n    return os.environ.get(name)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_2.py", "name": "_parse_image_ref", "docstring": "Parse an image href into composite parts.\n\n:param image_href: href of an image\n:returns: a tuple of the form (image_id, netloc, use_ssl)\n:raises ValueError:", "ques_id": "62ece4992e6aefcf4aabbd7f", "code": ["def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    try:\n        netloc = parsed.netloc\n    except AttributeError:\n        netloc = parsed.path\n    image_id = parsed.path.lstrip('/')\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split(\"/\")[-1]\n    netloc = image_href.split(\":\")[0]\n    use_ssl = image_href.split(\":\")[1] == \"on\"\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is required\")\n\n    url_components = urlparse(image_href)\n    image_id = url_components.path.split(\"/\")[-1]\n    netloc = url_components.netloc.split(\":\")[0]\n    use_ssl = bool(url_components.scheme == \"https\")\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip()\n    if not image_href:\n        raise ValueError('image_href is empty')\n\n    # parse the href as a netloc\n    parsed_url = urlparse(image_href)\n    netloc = parsed_url.netloc\n\n    # parse the href as a use_ssl (True/False)\n    use_ssl = bool(parsed_url.scheme == 'https')\n\n    # parse the href as an image id\n    image_id = image_href.replace('/', '_')\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    netloc = parsed.netloc\n    use_ssl = parsed.scheme!= \"\"\n\n    if not use_ssl:\n        netloc, image_id = netloc.rsplit(\":\", 1)\n\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('image_href cannot be empty')\n    image_href = image_href.strip()\n    m = re.match(r'(.*?)/(.*)$', image_href)\n    if m:\n        return m.group(1), m.group(2), m.group(3)\n    image_id = image_href.strip('/')\n    return image_id, None, False\n", "def _parse_image_ref(image_href: str) -> tuple:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is required\")\n\n    image_id = image_href.split(\"/\")[-1]\n    netloc = image_href.split(\":\")[0]\n    use_ssl = \"on\" if \"https://\" in image_href else \"off\"\n    return image_id, netloc, use_ssl\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Invalid image href: {}\".format(image_href))\n    return parsed.path.rsplit('/', 2)[-2:]\n", "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('URL {} does not include a netloc'.format(image_href))\n    netloc = parsed.netloc\n    if not parsed.path:\n        raise ValueError('URL {} does not include a path'.format(image_href))\n    image_id = parsed.path.lstrip('/')\n    return image_id, netloc, False\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    try:\n        netloc = parsed.netloc\n    except AttributeError:\n        netloc = parsed.path\n    image_id = parsed.path.lstrip('/')\n    use_ssl = False\n    if parsed.scheme == 'https':\n        use_ssl = True\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_id = image_href.split(\"/\")[-1]\n    netloc = image_href.split(\":\")[0]\n    use_ssl = image_href.split(\":\")[1] == \"on\"\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is required\")\n\n    url_components = urlparse(image_href)\n    image_id = url_components.path.split(\"/\")[-1]\n    netloc = url_components.netloc.split(\":\")[0]\n    use_ssl = bool(url_components.scheme == \"https\")\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    image_href = image_href.strip()\n    if not image_href:\n        raise ValueError('image_href is empty')\n\n    # parse the href as a netloc\n    parsed_url = urlparse(image_href)\n    netloc = parsed_url.netloc\n\n    # parse the href as a use_ssl (True/False)\n    use_ssl = bool(parsed_url.scheme == 'https')\n\n    # parse the href as an image id\n    image_id = image_href.replace('/', '_')\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    netloc = parsed.netloc\n    use_ssl = parsed.scheme!= \"\"\n\n    if not use_ssl:\n        netloc, image_id = netloc.rsplit(\":\", 1)\n\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError('image_href cannot be empty')\n    image_href = image_href.strip()\n    m = re.match(r'(.*?)/(.*)$', image_href)\n    if m:\n        return m.group(1), m.group(2), m.group(3)\n    image_id = image_href.strip('/')\n    return image_id, None, False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> tuple:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('Invalid image reference: {}'.format(image_href))\n    return parsed.path.split('/')[-1], parsed.netloc, parsed.use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    if not image_href:\n        raise ValueError(\"Image href is required\")\n\n    image_id = image_href.split(\"/\")[-1]\n    netloc = image_href.split(\":\")[0]\n    use_ssl = \"on\" if \"https://\" in image_href else \"off\"\n    return image_id, netloc, use_ssl\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError(\"Invalid image href: {}\".format(image_href))\n    return parsed.path.rsplit('/', 2)[-2:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _parse_image_ref(image_href: str) -> Tuple[str, str, bool]:\n    parsed = urlparse(image_href)\n    if not parsed.netloc:\n        raise ValueError('URL {} does not include a netloc'.format(image_href))\n    netloc = parsed.netloc\n    if not parsed.path:\n        raise ValueError('URL {} does not include a path'.format(image_href))\n    image_id = parsed.path.lstrip('/')\n    return image_id, netloc, False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_13.py", "name": "remove_ending_os_sep", "docstring": "Iterate over a string list and remove trailing os seperator characters.\n\nEach string is tested if its length is greater than one and if the last\ncharacter is the pathname seperator. If so, the pathname seperator character\nis removed.\n\nArgs:\n    input_list: list of strings\n\nReturns:\n    Processed list of strings\n\nRaises:\n    TypeError", "ques_id": "62ece4992e6aefcf4aabbd80", "code": ["def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[-1]) > 1:\n        return remove_ending_os_sep(input_list[:-1])\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    if len(input_list) == 1:\n        return input_list\n    if len(input_list[-1])!= 1 and input_list[-1][-1]!= os.sep:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [\n        item[:item.rfind(os.sep) + 1]\n        for item in input_list\n    ]\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return remove_ending_os_sep(input_list[:-1])\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[0]) > 1 and input_list[0][-1] == os.sep:\n        return remove_ending_os_sep(input_list[1:])\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list) == 2:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n", "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == '/':\n        return input_list[0:-1]\n\n    return input_list\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[-1]) > 1:\n        return remove_ending_os_sep(input_list[:-1])\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) == 0:\n        return []\n    if len(input_list) == 1:\n        return input_list\n    if len(input_list[-1])!= 1 and input_list[-1][-1]!= os.sep:\n        input_list[-1] = input_list[-1][:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [\n        item[:item.rfind(os.sep) + 1]\n        for item in input_list\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n    if len(input_list) <= 1:\n        return input_list\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == os.sep:\n        return remove_ending_os_sep(input_list[:-1])\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list[0]) > 1 and input_list[0][-1] == os.sep:\n        return remove_ending_os_sep(input_list[1:])\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if len(input_list) == 2:\n        return input_list\n\n    if input_list[-1]!= os.sep:\n        return input_list[:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    return [input_list[0]] + remove_ending_os_sep(input_list[1:])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def remove_ending_os_sep(input_list):\n    if input_list is None:\n        return []\n\n    if len(input_list) == 0:\n        return []\n\n    if len(input_list) == 1:\n        return input_list\n\n    if input_list[-1] == '/':\n        return input_list[0:-1]\n\n    return input_list\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_17.py", "name": "get_pattern", "docstring": "This method converts the given string to regex pattern", "ques_id": "62ece4992e6aefcf4aabbd82", "code": ["def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip()\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    else:\n        raise TypeError('pattern must be str or re._pattern_type')\n\n    if strip:\n        pattern = re.sub(' ', '', pattern)\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif not isinstance(pattern, re._pattern_type):\n        raise TypeError(\"pattern must be a string or regex pattern object\")\n\n    if strip:\n        pattern.strip()\n\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.UNICODE if strip else re.MULTILINE)\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if isinstance(pattern, re._pattern_type):\n        return pattern\n\n    if isinstance(pattern, regex._pattern_type):\n        return pattern\n\n    raise TypeError('pattern must be a string or regex pattern')\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip()\n    else:\n        return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    if not isinstance(pattern, re._pattern_type):\n        raise ValueError('Expected regex pattern, got {}'.format(type(pattern)))\n    if strip:\n        pattern = pattern.strip()\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern, re.I)\n\n    if isinstance(pattern, re._pattern_type):\n        return pattern\n    elif isinstance(pattern, regex.Pattern):\n        return regex.compile(pattern, strip=strip)\n    else:\n        raise TypeError(\"Unsupported type for pattern: {}\".format(type(pattern)))\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif not isinstance(pattern, re._pattern_type):\n        raise TypeError('pattern must be a string or regex pattern object')\n    if strip:\n        pattern = pattern.strip()\n    return pattern\n", "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip(' ')\n    return pattern\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip()\n    else:\n        return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif isinstance(pattern, re._pattern_type):\n        pass\n    else:\n        raise TypeError('pattern must be str or re._pattern_type')\n\n    if strip:\n        pattern = re.sub(' ', '', pattern)\n\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif not isinstance(pattern, re._pattern_type):\n        raise TypeError(\"pattern must be a string or regex pattern object\")\n\n    if strip:\n        pattern.strip()\n\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        return re.compile(pattern, re.UNICODE if strip else re.MULTILINE)\n    else:\n        return pattern\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if isinstance(pattern, re._pattern_type):\n        return pattern\n\n    if isinstance(pattern, regex._pattern_type):\n        return pattern\n\n    raise TypeError('pattern must be a string or regex pattern')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip()\n    else:\n        return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    if not isinstance(pattern, re._pattern_type):\n        raise ValueError('Expected regex pattern, got {}'.format(type(pattern)))\n    if strip:\n        pattern = pattern.strip()\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern, re.I)\n\n    if isinstance(pattern, re._pattern_type):\n        return pattern\n    elif isinstance(pattern, regex.Pattern):\n        return regex.compile(pattern, strip=strip)\n    else:\n        raise TypeError(\"Unsupported type for pattern: {}\".format(type(pattern)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    elif not isinstance(pattern, re._pattern_type):\n        raise TypeError('pattern must be a string or regex pattern object')\n    if strip:\n        pattern = pattern.strip()\n    return pattern\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_pattern(pattern, strip=True):\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n\n    if strip:\n        return pattern.strip(' ')\n    return pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "slib_runnable/test_7.py", "name": "run_command", "docstring": "Call the given command(s).", "ques_id": "62ece4992e6aefcf4aabbd83", "code": ["def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n                print(e", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = None\n    for c in commands:\n        if verbose:\n            print(\"Running command:\", c)\n        p = subprocess.Popen(\n            c, shell=True, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)\n        )\n        stdout, stderr = p.communicate()\n        if p.returncode:\n            if verbose:\n                print(\"Command failed:\", c)\n            return None, p.returncode\n\n    if verbose:\n        print(\"Command succeeded\")\n    return stdout, p.returncode\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n"], "level": "slib_runnable", "generate_results": [{"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n                print(e", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    p = None\n    for c in commands:\n        if verbose:\n            print(\"Running command:\", c)\n        p = subprocess.Popen(\n            c, shell=True, stdout=subprocess.PIPE, stderr=(subprocess.PIPE if hide_stderr else None)\n        )\n        stdout, stderr = p.communicate()\n        if p.returncode:\n            if verbose:\n                print(\"Command failed:\", c)\n            return None, p.returncode\n\n    if verbose:\n        print(\"Command succeeded\")\n    return stdout, p.returncode\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def run_command(commands, args, cwd=None, verbose=False, hide_stderr=False, env=None):\n    assert isinstance(commands, list)\n    p = None\n    for c in commands:\n        try:\n            dispcmd = str([c] + args)\n            # remember shell=False, so use git.cmd on windows, not just git\n            p = subprocess.Popen([c] + args, cwd=cwd, env=env,\n                                 stdout=subprocess.PIPE,\n                                 stderr=(subprocess.PIPE if hide_stderr\n                                         else None))\n            break\n        except EnvironmentError:\n            e = sys.exc_info()[1]\n            if e.errno == errno.ENOENT:\n                continue\n            if verbose:\n                print(\"unable to run %s\" % dispcmd)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_4.py", "name": "is_ipv4", "docstring": "Test if IPv4 address or not\n    ", "ques_id": "62ece4992e6aefcf4aabbd84", "code": ["def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def is_ipv4(target):\n    try:\n        socket.inet_aton(target)\n    except socket.error:\n        return False\n    return True\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_11.py", "name": "find_roots", "docstring": "Find the roots in some sort of transitive hierarchy.\n\nfind_roots(graph, rdflib.RDFS.subClassOf)\nwill return a set of all roots of the sub-class hierarchy\n\nAssumes triple of the form (child, prop, parent), i.e. the direction of\nRDFS.subClassOf or SKOS.broader", "ques_id": "62ece4992e6aefcf4aabbd85", "code": ["def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    if roots is None:\n        roots = set()\n    if prop not in graph:\n        return roots\n    if isinstance(graph[prop], BNode):\n        return roots\n    for triple in graph[prop]:\n        if triple[0] in roots:\n            continue\n        roots.add(triple[0])\n        find_roots(graph, triple[0], roots)\n        find_roots(graph, triple[1], roots)\n        find_roots(graph, triple[2], roots)\n    return roots\n", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef\n        roots: Optional[List[URIRef]] = None\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    if prop not in graph:\n        return roots\n    for triple in graph[prop]:\n        child = triple[0]\n        parent = triple[1]\n        if isinstance(parent, URIRef) and isinstance(child, URIRef):\n            if child in graph:\n           ", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[Set[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n\n    \"\"\"\n    if roots is None:\n        roots = set()\n        for cls in graph.objects(\n                subject=prop,\n                predicate=RDFS.subClassOf):\n            roots.update(find_roots(graph, cls))\n    if roots:\n        return roots\n    else:\n        return roots.", "def find_roots(\n    graph: Graph, prop: URIRef, roots: Optional[List[URIRef]] = None\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    for triple in graph.triples((prop, None, None)):\n        child, prop, parent = triple\n        if parent in roots:\n            continue\n        roots.add(parent)\n        if child in roots:\n            continue\n        roots.discard(child)\n    return roots\n", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    # use the parent to avoid duplicating reference check\n    for triple in graph.triples((prop, None, None)):\n        if triple[2] not in roots:\n            roots.add(triple[2])\n            roots |= find_roots(graph, triple[2], roots)\n\n    return roots\n", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    for triple in graph.triples((prop, None, None)):\n        # If the triple is a sub-class of SKOS.subClassOf then add the roots\n        if triple[2] == SKOS.subClassOf:\n            roots.add(triple[0])\n        # Otherwise keep it\n        else:\n    ", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[SetType]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.hasProperty(prop)):\n        return roots\n    for x in graph.objects(graph.hasProperty(prop)):\n        p = graph.value(x, prop)\n        if isinstance(p, URIRef):\n            roots.add(p)\n        elif isinstance(", "def find_roots(\n    graph: Graph, prop: str, roots: Optional[List[str]] = None\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    for triple in graph.triples((prop, None, None)):\n        if triple[0] in roots:\n            continue\n        roots.add(triple[0])\n        if triple[1] in roots:\n            continue\n        roots.add(triple[1])\n    return roots\n", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    for triple in graph.triples((prop, None, None)):\n        child = triple[2]\n        parent = triple[1]\n        if isinstance(parent, URIRef):\n            if child not in roots:\n                roots.add(child)\n                roo", "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[Set[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n        for child, prop, parent in graph.triples((prop, None, None)):\n            roots.add(child)\n            roots.add(parent)\n\n    return roots\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    if roots is None:\n        roots = set()\n    if prop not in graph:\n        return roots\n    if isinstance(graph[prop], BNode):\n        return roots\n    for triple in graph[prop]:\n        if triple[0] in roots:\n            continue\n        roots.add(triple[0])\n        find_roots(graph, triple[0], roots)\n        find_roots(graph, triple[1], roots)\n        find_roots(graph, triple[2], roots)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef\n        roots: Optional[List[URIRef]] = None\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    if prop not in graph:\n        return roots\n    for triple in graph[prop]:\n        child = triple[0]\n        parent = triple[1]\n        if isinstance(parent, URIRef) and isinstance(child, URIRef):\n            if child in graph:\n           ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[Set[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n\n    \"\"\"\n    if roots is None:\n        roots = set()\n        for cls in graph.objects(\n                subject=prop,\n                predicate=RDFS.subClassOf):\n            roots.update(find_roots(graph, cls))\n    if roots:\n        return roots\n    else:\n        return roots.", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, prop: URIRef, roots: Optional[List[URIRef]] = None\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    for triple in graph.triples((prop, None, None)):\n        child, prop, parent = triple\n        if parent in roots:\n            continue\n        roots.add(parent)\n        if child in roots:\n            continue\n        roots.discard(child)\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    # use the parent to avoid duplicating reference check\n    for triple in graph.triples((prop, None, None)):\n        if triple[2] not in roots:\n            roots.add(triple[2])\n            roots |= find_roots(graph, triple[2], roots)\n\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    for triple in graph.triples((prop, None, None)):\n        # If the triple is a sub-class of SKOS.subClassOf then add the roots\n        if triple[2] == SKOS.subClassOf:\n            roots.add(triple[0])\n        # Otherwise keep it\n        else:\n    ", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[SetType]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots of\n    the sub-class hierarchy\n\n    Assumes triple of the form\n\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    if prop not in graph.objects(graph.hasProperty(prop)):\n        return roots\n    for x in graph.objects(graph.hasProperty(prop)):\n        p = graph.value(x, prop)\n        if isinstance(p, URIRef):\n            roots.add(p)\n        elif isinstance(", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph, prop: str, roots: Optional[List[str]] = None\n) -> Set[str]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction\n    of RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n    for triple in graph.triples((prop, None, None)):\n        if triple[0] in roots:\n            continue\n        roots.add(triple[0])\n        if triple[1] in roots:\n            continue\n        roots.add(triple[1])\n    return roots\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[List[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form (child, prop, parent), i.e. the direction of\n    RDFS.subClassOf or SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n\n    for triple in graph.triples((prop, None, None)):\n        child = triple[2]\n        parent = triple[1]\n        if isinstance(parent, URIRef):\n            if child not in roots:\n                roots.add(child)\n                roo", "is_pass": false, "return_code": 1}, {"generate_code": "def find_roots(\n    graph: Graph,\n    prop: URIRef,\n    roots: Optional[Set[URIRef]] = None,\n) -> Set[URIRef]:\n    \"\"\"\n    Find the roots in some sort of transitive hierarchy.\n    find_roots(graph, rdflib.RDFS.subClassOf) will return a set of all roots\n    of the sub-class hierarchy\n\n    Assumes triple of the form\n    (child, prop, parent), i.e. the direction of RDFS.subClassOf or\n    SKOS.broader\n\n    Args:\n        graph: Graph Class Object\n        prop: URIRef Class\n        roots: Optional list with set type\n\n    Return:\n        roots: a set with nodes\n    \"\"\"\n    if roots is None:\n        roots = set()\n        for child, prop, parent in graph.triples((prop, None, None)):\n            roots.add(child)\n            roots.add(parent)\n\n    return roots\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_1.py", "name": "_dump_string", "docstring": "Dump to a py2-unicode or py3-string", "ques_id": "62ece4992e6aefcf4aabbd86", "code": ["def _dump_string(obj, dumper=None):\n    return dumper.represent_scalar(u'!str', text_type(obj))\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.SafeDumper\n", "def _dump_string(obj, dumper=None):\n\n    return yaml.dump(obj, Dumper=dumper, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.SafeDumper\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if not dumper:\n        dumper = yaml.SafeDumper\n\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.represent_scalar(u'!str', text_type(obj))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.SafeDumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n\n    return yaml.dump(obj, Dumper=dumper, default_flow_style=False)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.SafeDumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if not dumper:\n        dumper = yaml.SafeDumper\n\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    if dumper is None:\n        dumper = yaml.SafeDumper\n    return dumper.dump(obj, default_flow_style=False)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper or yaml.Dumper\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _dump_string(obj, dumper=None):\n    return dumper.dump(obj) if dumper else yaml.dump(obj)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_8.py", "name": "build_app_logger", "docstring": "General purpose application logger. Useful mainly for debugging", "ques_id": "62ece4992e6aefcf4aabbd87", "code": ["def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, 'w')\n        handler.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n    logger.addHandler(ch)\n\n    # create formatter\n    formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    logger.addHandler(ch)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, mode='w')\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n\n    # create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    app_logger.addHandler(ch)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    # Configuration\n    logging.config.fileConfig('logging.conf')\n\n    # Initiate logger\n    logger = logging.getLogger(name)\n\n    # Log to file\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n\n    # Log to console\n    fh = logging.FileHandler(logfile)\n    fh.setLevel(logging.DEBUG)\n\n    # Format formatter\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add formatter to logger\n    logger.addHandler(fh)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    # Create logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Log to file\n    fh = logging.FileHandler(logfile)\n    fmt = '%(asctime)s %(levelname)s:%(name)s:%(message)s'\n    formatter = logging.Formatter(fmt)\n    fh.setFormatter(formatter)\n\n    # Add handler to logger\n    logger.addHandler(fh)\n\n    # Add debug log\n    if debug:\n        logger.debug('DEBUG mode enabled')\n        logger.debug('Debug level: %s', logging.DEBUG)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, mode='w')\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n\n        logger.addHandler(handler)\n\n    if os.path.exists(logfile):\n        if os.path.isfile(logfile):\n            logger.info('Log file already exists')\n            logger.info('Use the --debug flag to enable debugging')\n        else:\n            logger.info('Log file does not exist')\n            logger.info('Use the --debug flag to enable debugging')\n\n    logger.debug('Log file path: %s', logfile)\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Setup logging\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Filter out non-existent loggers\n    logger.filters[:] = []\n\n    # Log to console\n    handler = logging.StreamHandler()\n    handler.setLevel(logging.DEBUG)\n\n    # Format log message\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    # Add handler to logger\n    logger.addHandler(handler)\n\n    # Log to file\n    if debug:\n        logger.addHandler(logging.FileHandler(logfile))\n    else:\n        logger.addHandler(logging.StreamHandler())\n\n    return logger\n", "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Instantiate logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Log file handler\n    fh = logging.FileHandler(logfile, 'w')\n    fh.setLevel(logging.INFO)\n\n    # Format format\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add handler\n    logger.addHandler(fh)\n\n    # Debug message\n    if debug:\n        logger.debug('Logger is created')\n\n    return logger\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, 'w')\n        handler.setLevel(logging.DEBUG)\n        logger.addHandler(handler)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n    logger.addHandler(ch)\n\n    # create formatter\n    formatter = logging.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    logger.addHandler(ch)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, mode='w')\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    app_logger = logging.getLogger(name)\n    app_logger.setLevel(logging.INFO)\n\n    # create console handler and set level to debug\n    ch = logging.StreamHandler()\n    ch.setLevel(logging.DEBUG)\n\n    # create formatter\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\n    # add formatter to ch\n    ch.setFormatter(formatter)\n\n    # add ch to logger\n    app_logger.addHandler(ch)\n\n    if debug:\n        app_logger.setLevel(logging.DEBUG)\n\n    return app_logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    # Configuration\n    logging.config.fileConfig('logging.conf')\n\n    # Initiate logger\n    logger = logging.getLogger(name)\n\n    # Log to file\n    if debug:\n        logger.setLevel(logging.DEBUG)\n    else:\n        logger.setLevel(logging.INFO)\n\n    # Log to console\n    fh = logging.FileHandler(logfile)\n    fh.setLevel(logging.DEBUG)\n\n    # Format formatter\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add formatter to logger\n    logger.addHandler(fh)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    # Create logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Log to file\n    fh = logging.FileHandler(logfile)\n    fmt = '%(asctime)s %(levelname)s:%(name)s:%(message)s'\n    formatter = logging.Formatter(fmt)\n    fh.setFormatter(formatter)\n\n    # Add handler to logger\n    logger.addHandler(fh)\n\n    # Add debug log\n    if debug:\n        logger.debug('DEBUG mode enabled')\n        logger.debug('Debug level: %s', logging.DEBUG)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.FileHandler(logfile, mode='w')\n        handler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    if debug:\n        handler = logging.StreamHandler()\n        handler.setLevel(logging.DEBUG)\n\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n\n        logger.addHandler(handler)\n\n    if os.path.exists(logfile):\n        if os.path.isfile(logfile):\n            logger.info('Log file already exists')\n            logger.info('Use the --debug flag to enable debugging')\n        else:\n            logger.info('Log file does not exist')\n            logger.info('Use the --debug flag to enable debugging')\n\n    logger.debug('Log file path: %s', logfile)\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    handler = logging.FileHandler(logfile)\n    handler.setLevel(logging.DEBUG if debug else logging.INFO)\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Setup logging\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Filter out non-existent loggers\n    logger.filters[:] = []\n\n    # Log to console\n    handler = logging.StreamHandler()\n    handler.setLevel(logging.DEBUG)\n\n    # Format log message\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    handler.setFormatter(formatter)\n\n    # Add handler to logger\n    logger.addHandler(handler)\n\n    # Log to file\n    if debug:\n        logger.addHandler(logging.FileHandler(logfile))\n    else:\n        logger.addHandler(logging.StreamHandler())\n\n    return logger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def build_app_logger(name='app', logfile='app.log', debug=True):\n    # Instantiate logger\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n\n    # Log file handler\n    fh = logging.FileHandler(logfile, 'w')\n    fh.setLevel(logging.INFO)\n\n    # Format format\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    # Add handler\n    logger.addHandler(fh)\n\n    # Debug message\n    if debug:\n        logger.debug('Logger is created')\n\n    return logger\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_6.py", "name": "make_array", "docstring": "Function to create an array with shape and dtype.\n\nParameters\n----------\nshape : tuple\n    shape of the array to create\ndtype : `numpy.dtype`\n    data-type of the array to create", "ques_id": "62ece4992e6aefcf4aabbd88", "code": ["def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.zeros(shape, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def make_array(shape, dtype=np.dtype(\"float32\")):\n    return np.full(shape, 0.0, dtype)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "plib_runnable/test_2.py", "name": "gaussian", "docstring": "Gaussian centered around 0.2 with a sigma of 0.1.", "ques_id": "62ece4992e6aefcf4aabbd89", "code": ["def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))/(np.sqrt(2*np.pi)*0.2**2)\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*(0.2**2)))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "def gaussian(x):\n    return np.exp(-(x**2)/(2*(0.2**2)))\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))/(np.sqrt(2*np.pi)*0.2**2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*(0.2**2)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2)) / (2*0.2**2)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*0.2**2))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def gaussian(x):\n    return np.exp(-(x**2)/(2*(0.2**2)))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_13.py", "name": "load_configurations", "docstring": "Given a sequence of configuration filenames, load and validate each configuration file. Return\nthe results as a tuple of: dict of configuration filename to corresponding parsed configuration,\nand sequence of logging.LogRecord instances containing any parse errors.", "ques_id": "62ece4992e6aefcf4aabbd8a", "code": ["def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = defaultdict(list)\n    results = {}\n\n    for config_filename in config_filenames:\n        try:\n            config = load_configuration(config_filename, resolve_env=resolve_env)\n            parse_errors[config_filename].append(config)\n        except IOError as e:\n            parse_errors[config_filename].append(e)\n            logging.getLogger(__name__).error(\n                \"Could not load configuration file %s: %s\",\n                config_filename,\n                e,\n            )\n            results[config_filename] = []\n\n    if overrides:\n        for config_filename in overrides:\n            if config_filename in parse_errors:\n                for parse_error in parse_errors[config_filename]:\n                    parse_error.log_message(\"Error reading configuration file %s: %s\", config_filename, ", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for filename in config_filenames:\n        try:\n            result = load_configuration(filename, resolve_env=resolve_env)\n        except ConfigurationError as error:\n            results[filename] = error\n        else:\n            results[filename] = result\n\n        if overrides:\n            for key in overrides:\n                if key not in result:\n                    results[filename].add_failure_info(\n                        \"Missing configuration item '{}'\".format(key))\n                    results[filename].log_message(\n                        \"Adding missing configuration item '{}'\".format(key))\n                    results[filename].record_missing_config_item(\n                        key)\n\n    return results, config", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(\n        config_filenames,\n        resolve_env=resolve_env,\n        overrides=overrides)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = {}\n    logging.basicConfig()\n    for config_filename in config_filenames:\n        config = load_configuration(\n            config_filename,\n            overrides=overrides,\n            resolve_env=resolve_env,\n        )\n        logging.debug('Loaded configuration {0}'.format(config_filename))\n        parse_errors[config_filename] = config.parse_errors\n        yield config, config.parse_errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename) as f:\n                configs[filename] = load_config(f, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append((filename, e))\n            continue\n\n        if not overrides:\n            # Successfully read the configuration, record the parsed configuration.\n            configs[filename] = configs[filename][0]\n        else:\n            # Override the existing configuration.\n            configs[filename] = overrides[filename]\n\n    if errors:\n        msg = \"Failed to parse any configuration files (%s).\"\n        error_log = logging.getLogger(\"configuration.errors\")\n        error_log.error(msg % \", \".join(errors))\n        return (\n            configs,\n            [\n  ", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    return _load_configurations(\n        config_filenames, overrides=overrides,\n        resolve_env=resolve_env, parser=parser)\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validate_config_files(config_filenames, resolve_env=resolve_env)\n\n    errors = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides)\n        validate_config(config, errors)\n        yield config, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            configs[filename] = _load_config(filename, resolve_env=resolve_env)\n        except ConfigFormatError as error:\n            errors.append(error)\n            continue\n\n    if overrides is not None:\n        configs.update(overrides)\n\n    if len(errors) > 0:\n        logging.warning('Errors while parsing %s', ', '.join(errors))\n\n    return configs, errors\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return load_config_files(\n        config_filenames,\n        defaults_filenames=['defaults.ini'],\n        overrides=overrides,\n        resolve_env=resolve_env,\n    )\n", "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, \"yaml\", overrides, resolve_env)\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = defaultdict(list)\n    results = {}\n\n    for config_filename in config_filenames:\n        try:\n            config = load_configuration(config_filename, resolve_env=resolve_env)\n            parse_errors[config_filename].append(config)\n        except IOError as e:\n            parse_errors[config_filename].append(e)\n            logging.getLogger(__name__).error(\n                \"Could not load configuration file %s: %s\",\n                config_filename,\n                e,\n            )\n            results[config_filename] = []\n\n    if overrides:\n        for config_filename in overrides:\n            if config_filename in parse_errors:\n                for parse_error in parse_errors[config_filename]:\n                    parse_error.log_message(\"Error reading configuration file %s: %s\", config_filename, ", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    results = {}\n    for filename in config_filenames:\n        try:\n            result = load_configuration(filename, resolve_env=resolve_env)\n        except ConfigurationError as error:\n            results[filename] = error\n        else:\n            results[filename] = result\n\n        if overrides:\n            for key in overrides:\n                if key not in result:\n                    results[filename].add_failure_info(\n                        \"Missing configuration item '{}'\".format(key))\n                    results[filename].log_message(\n                        \"Adding missing configuration item '{}'\".format(key))\n                    results[filename].record_missing_config_item(\n                        key)\n\n    return results, config", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(\n        config_filenames,\n        resolve_env=resolve_env,\n        overrides=overrides)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parse_errors = {}\n    logging.basicConfig()\n    for config_filename in config_filenames:\n        config = load_configuration(\n            config_filename,\n            overrides=overrides,\n            resolve_env=resolve_env,\n        )\n        logging.debug('Loaded configuration {0}'.format(config_filename))\n        parse_errors[config_filename] = config.parse_errors\n        yield config, config.parse_errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            with open(filename) as f:\n                configs[filename] = load_config(f, resolve_env=resolve_env)\n        except IOError as e:\n            errors.append((filename, e))\n            continue\n\n        if not overrides:\n            # Successfully read the configuration, record the parsed configuration.\n            configs[filename] = configs[filename][0]\n        else:\n            # Override the existing configuration.\n            configs[filename] = overrides[filename]\n\n    if errors:\n        msg = \"Failed to parse any configuration files (%s).\"\n        error_log = logging.getLogger(\"configuration.errors\")\n        error_log.error(msg % \", \".join(errors))\n        return (\n            configs,\n            [\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    parser = create_parser()\n    return _load_configurations(\n        config_filenames, overrides=overrides,\n        resolve_env=resolve_env, parser=parser)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    validate_config_files(config_filenames, resolve_env=resolve_env)\n\n    errors = {}\n    for config_filename in config_filenames:\n        config = load_configuration(config_filename, overrides)\n        validate_config(config, errors)\n        yield config, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    configs = {}\n    errors = []\n    for filename in config_filenames:\n        try:\n            configs[filename] = _load_config(filename, resolve_env=resolve_env)\n        except ConfigFormatError as error:\n            errors.append(error)\n            continue\n\n    if overrides is not None:\n        configs.update(overrides)\n\n    if len(errors) > 0:\n        logging.warning('Errors while parsing %s', ', '.join(errors))\n\n    return configs, errors\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return load_config_files(\n        config_filenames,\n        defaults_filenames=['defaults.ini'],\n        overrides=overrides,\n        resolve_env=resolve_env,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def load_configurations(config_filenames, overrides=None, resolve_env=True):\n    return _load_configurations(config_filenames, \"yaml\", overrides, resolve_env)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "plib_runnable/test_3.py", "name": "force_string", "docstring": "This function returns the bytes object corresponding to ``obj``\nin case it is a string using UTF-8. ", "ques_id": "62ece4992e6aefcf4aabbd8b", "code": ["def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, str):\n        return obj.encode('utf-8')\n    return obj\n", "is_pass": false, "return_code": 1}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode('utf-8')\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "is_pass": true, "return_code": 0}, {"generate_code": "def force_string(obj):\n    if isinstance(obj, bytes):\n        return obj.decode(\"utf-8\")\n    return obj\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/time/__init__.py", "project": "neo4j/neo4j-python-driver", "name": "from_ticks", "docstring": "Create a time from ticks (nanoseconds since midnight).\n\n:param ticks: nanoseconds since midnight\n:type ticks: int\n:param tz: optional timezone\n:type tz: datetime.tzinfo\n\n:rtype: Time\n\n:raises ValueError: if ticks is out of bounds\n    (0 <= ticks < 86400000000000)", "ques_id": "62e60723d76274f8a4026b76", "code": ["def from_ticks(cls, ticks, tz=None):\n    if isinstance(ticks, datetime):\n        ticks = [ticks]\n    return super(Date, cls).__new__(cls, *(int(x) for x in ticks))\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        ticks, tz=tz, normalize=True, strict=False\n    )\n", "def from_ticks(cls, ticks, tz=None):\n    if isinstance(ticks, datetime.datetime):\n        ticks = Timestamp(ticks)\n\n    if ticks.tzinfo and ticks.tzinfo!= tz:\n        ticks = ticks.astimezone(tz)\n\n    return cls.from_datetime(ticks)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        cls.from_iso_format(ticks, tz=tz), tz=tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks is None:\n        return cls()\n    if isinstance(ticks, datetime.timedelta):\n        ticks = TimeDelta.from_timedelta(ticks)\n    return super(Timezone, cls).from_ticks(ticks, tz)\n", "def from_ticks(cls, ticks, tz=None):\n    if ticks == 0:\n        return Date(0)\n\n    return DateTime(\n        year=int(ticks / NANO_SECONDS),\n        month=int((ticks % NANO_SECONDS) / 12),\n        day=int(ticks % NANO_SECONDS / 14),\n        hour=int((ticks % NANO_SECONDS) / 14),\n        minute=int((ticks % NANO_SECONDS) % 14),\n        second=int((ticks % NANO_SECONDS) % 14),\n        tzinfo=tz or get_default_timezone(),\n    )\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        ticks, strict=False, tzinfo=tz or get_default_timezone())\n", "def from_ticks(cls, ticks, tz=None):\n\n    if not HAS_NUMPY:\n        raise NumpyUnsupported()\n\n    if isinstance(ticks, datetime.timedelta):\n        ticks = timedelta_to_nanos(ticks)\n\n    if isinstance(ticks, datetime.datetime):\n        ticks = time.mktime(ticks.timetuple())\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        cls._get_both_normalized_ticks(ticks, strict=False), tz=tz\n    )\n", "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(ticks, strict=False)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if isinstance(ticks, datetime):\n        ticks = [ticks]\n    return super(Date, cls).__new__(cls, *(int(x) for x in ticks))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        ticks, tz=tz, normalize=True, strict=False\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if isinstance(ticks, datetime.datetime):\n        ticks = Timestamp(ticks)\n\n    if ticks.tzinfo and ticks.tzinfo!= tz:\n        ticks = ticks.astimezone(tz)\n\n    return cls.from_datetime(ticks)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        cls.from_iso_format(ticks, tz=tz), tz=tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks is None:\n        return cls()\n    if isinstance(ticks, datetime.timedelta):\n        ticks = TimeDelta.from_timedelta(ticks)\n    return super(Timezone, cls).from_ticks(ticks, tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    if ticks == 0:\n        return Date(0)\n\n    return DateTime(\n        year=int(ticks / NANO_SECONDS),\n        month=int((ticks % NANO_SECONDS) / 12),\n        day=int(ticks % NANO_SECONDS / 14),\n        hour=int((ticks % NANO_SECONDS) / 14),\n        minute=int((ticks % NANO_SECONDS) % 14),\n        second=int((ticks % NANO_SECONDS) % 14),\n        tzinfo=tz or get_default_timezone(),\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        ticks, strict=False, tzinfo=tz or get_default_timezone())\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n\n    if not HAS_NUMPY:\n        raise NumpyUnsupported()\n\n    if isinstance(ticks, datetime.timedelta):\n        ticks = timedelta_to_nanos(ticks)\n\n    if isinstance(ticks, datetime.datetime):\n        ticks = time.mktime(ticks.timetuple())\n\n    if tz is None:\n        tz = get_current_timezone()\n\n    return cls.from_datetime(datetime.datetime.utcfromtimestamp(ticks), tz)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(\n        cls._get_both_normalized_ticks(ticks, strict=False), tz=tz\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_ticks(cls, ticks, tz=None):\n    return cls.from_iso_format(ticks, strict=False)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "neo4j/_async/io/_bolt.py", "project": "neo4j/neo4j-python-driver", "name": "protocol_handlers", "docstring": "Return a dictionary of available Bolt protocol handlers,\nkeyed by version tuple. If an explicit protocol version is\nprovided, the dictionary will contain either zero or one items,\ndepending on whether that version is supported. If no protocol\nversion is provided, all available versions will be returned.\n\n:param protocol_version: tuple identifying a specific protocol\n    version (e.g. (3, 5)) or None\n:return: dictionary of version tuple to handler class for all\n    relevant and supported protocol versions\n:raise TypeError: if protocol version is not passed in a tuple", "ques_id": "62e60873d76274f8a4026bd8", "code": ["def protocol_handlers(cls, protocol_version=None):\n    return cls._protocol_handlers.get(protocol_version, [])\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_HANDLERS_CLS.get(\n        (protocol_version or cls.PROTOCOL_VERSION),\n        (None, cls.PROTOCOL_HANDLERS_CLS[(protocol_version or cls.PROTOCOL_VERSION)])\n    )\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, [])\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls.PROTOCOL_VERSION, protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = API_VERSION\n    if protocol_version == 1:\n        return (\n            (neo4j.Protocol.USER_AGENT, neo4j.Protocol.USER_METHOD),\n            neo4j.Protocol.SERVICE_METHOD,\n            neo4j.Protocol.CLIENT_METHOD,\n        )\n    else:\n        raise ValueError('unsupported protocol version {}'.format(protocol_version))\n", "def protocol_handlers(cls, protocol_version=None):\n    \"Protocol handlers\"\n    return cls._protocol_handlers.get(protocol_version, [])\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        version = cls.PROTOCOL_VERSION\n    else:\n        version = protocol_version\n    return cls.HANDLER_CLS.get(version, Handler)\n", "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return cls.HANDLER_CLS.get(protocol_version, None)\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "def protocol_handlers(cls, protocol_version=None):\n    return cls.UNPACKER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls._protocol_handlers.get(protocol_version, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.PROTOCOL_HANDLERS_CLS.get(\n        (protocol_version or cls.PROTOCOL_VERSION),\n        (None, cls.PROTOCOL_HANDLERS_CLS[(protocol_version or cls.PROTOCOL_VERSION)])\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return cls._protocol_handlers.get(protocol_version, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls.PROTOCOL_VERSION, protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = API_VERSION\n    if protocol_version == 1:\n        return (\n            (neo4j.Protocol.USER_AGENT, neo4j.Protocol.USER_METHOD),\n            neo4j.Protocol.SERVICE_METHOD,\n            neo4j.Protocol.CLIENT_METHOD,\n        )\n    else:\n        raise ValueError('unsupported protocol version {}'.format(protocol_version))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    \"Protocol handlers\"\n    return cls._protocol_handlers.get(protocol_version, [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        version = cls.PROTOCOL_VERSION\n    else:\n        version = protocol_version\n    return cls.HANDLER_CLS.get(version, Handler)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    if protocol_version is None:\n        protocol_version = cls.PROTOCOL_VERSION\n    return cls.HANDLER_CLS.get(protocol_version, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.HANDLER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def protocol_handlers(cls, protocol_version=None):\n    return cls.UNPACKER_CLS.protocol_handlers(\n        cls, protocol_version=protocol_version)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "neo4j/api.py", "project": "neo4j/neo4j-python-driver", "name": "from_raw_values", "docstring": "Create a Bookmarks object from a list of raw bookmark string values.\n\nYou should not need to use this method unless you want to deserialize\nbookmarks.\n\n:param values: ASCII string values (raw bookmarks)\n:type values: Iterable[str]", "ques_id": "62e60e3bd76274f8a4026d1a", "code": ["def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4],\n               values[5], values[6], values[7])\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4],\n               values[5], values[6], values[7], values[8], values[9])\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "def from_raw_values(cls, values):\n    return cls(values)\n", "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "def from_raw_values(cls, values):\n    return cls(values)\n"], "level": "self_contained", "generate_results": [{"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4],\n               values[5], values[6], values[7])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3], values[4],\n               values[5], values[6], values[7], values[8], values[9])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values[0], values[1], values[2], values[3])\n", "is_pass": true, "return_code": 0}, {"generate_code": "def from_raw_values(cls, values):\n    return cls(values)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/core/split.py", "project": "ynikitenko/lena", "name": "_get_seq_with_type", "docstring": "Return a (sequence, type) pair.\nSequence is derived from *seq*\n(or is *seq*, if that is of a sequence type).", "ques_id": "62b87b199a0c4fa8b80b354c", "code": ["def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = -1\n    for i, x in enumerate(seq):\n        yield x\n        if i % bufsize == 0:\n            yield None\n", "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, collections.Iterable):\n        if bufsize is None:\n            for item in seq:\n                yield item\n        else:\n            for item in seq:\n                yield from copy(item)\n    else:\n        if bufsize is None:\n            yield seq\n        else:\n            buf = BytesIO()\n            yield buf\n            yield buf.getvalue()\n            buf.seek(0)\n            yield buf\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    for i, s in enumerate(seq):\n        yield s\n        if i % bufsize == 0:\n            yield seq[i:]\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    iterator = iter(seq)\n    buf = None\n    try:\n        buf = yield buf\n    except StopIteration:\n        buf = None\n    if buf is not None:\n        buf = buf[:bufsize]\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() or 1\n    for i, x in enumerate(seq):\n        yield x\n        if i % bufsize == 0:\n            yield x\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() // 4\n    it = iter(seq)\n    buf = []\n    try:\n        for i in it:\n            buf.append(i)\n            if len(buf) >= bufsize:\n                yield buf\n                buf = []\n    except StopIteration:\n        if buf:\n            yield buf\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.maxsize\n    return islice(seq, bufsize)\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getdefaultsdb()[1]\n    return itertools.chain.from_iterable(\n        itertools.repeat(seq, bufsize)\n    )\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    for element in seq:\n        yield element\n        bufsize -= 1\n        if bufsize == 0:\n            break\n", "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() or 1\n    for i in itertools.islice(seq, bufsize):\n        yield i\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = -1\n    for i, x in enumerate(seq):\n        yield x\n        if i % bufsize == 0:\n            yield None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if isinstance(seq, collections.Iterable):\n        if bufsize is None:\n            for item in seq:\n                yield item\n        else:\n            for item in seq:\n                yield from copy(item)\n    else:\n        if bufsize is None:\n            yield seq\n        else:\n            buf = BytesIO()\n            yield buf\n            yield buf.getvalue()\n            buf.seek(0)\n            yield buf\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    for i, s in enumerate(seq):\n        yield s\n        if i % bufsize == 0:\n            yield seq[i:]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    iterator = iter(seq)\n    buf = None\n    try:\n        buf = yield buf\n    except StopIteration:\n        buf = None\n    if buf is not None:\n        buf = buf[:bufsize]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() or 1\n    for i, x in enumerate(seq):\n        yield x\n        if i % bufsize == 0:\n            yield x\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() // 4\n    it = iter(seq)\n    buf = []\n    try:\n        for i in it:\n            buf.append(i)\n            if len(buf) >= bufsize:\n                yield buf\n                buf = []\n    except StopIteration:\n        if buf:\n            yield buf\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.maxsize\n    return islice(seq, bufsize)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getdefaultsdb()[1]\n    return itertools.chain.from_iterable(\n        itertools.repeat(seq, bufsize)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getsizeof(seq)\n    for element in seq:\n        yield element\n        bufsize -= 1\n        if bufsize == 0:\n            break\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_seq_with_type(seq, bufsize=None):\n    if bufsize is None:\n        bufsize = sys.getrecursionlimit() or 1\n    for i in itertools.islice(seq, bufsize):\n        yield i\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/histogram.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Compute or set scale (integral of the histogram).\n\nIf *other* is ``None``, return scale of this histogram.\nIf its scale was not computed before,\nit is computed and stored for subsequent use\n(unless explicitly asked to *recompute*).\nNote that after changing (filling) the histogram\none must explicitly recompute the scale\nif it was computed before.\n\nIf a float *other* is provided, rescale self to *other*.\n\nHistograms with scale equal to zero can't be rescaled.\n:exc:`.LenaValueError` is raised if one tries to do that.", "ques_id": "62b87b4f9a0c4fa8b80b3581", "code": ["def scale(self, other=None, recompute=False):\n    if other is not None:\n        if self.nbins!= other.nbins:\n            raise ValueError(\"Can only scale with the same number of bins\")\n        self._scale = other._scale\n        self.ranges = other.ranges\n        self.bins = other.bins\n        self.nbins = other.nbins\n        self._update_context(context=other._context)\n    else:\n        self._scale = self.scale\n        self.ranges = self.ranges\n        self.bins = self.bins\n        self.nbins = self.nbins\n        self._update_context(context=self._context)\n\n    if recompute:\n        self._update_context()\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges\n\n    self.ranges = (self.edges[:-1], self.edges[1:])\n    self.bins = self.edges\n    self.nbins = len(self.edges) - 1\n\n    self._update_context(\n        Context([(i, other[i]) for i in range(self.nbins)]))\n\n    if recompute:\n        self._update_context(\n            Context([(self.edges[i], other[self.edges[i]])\n                      for i in range(self.nbins)]))\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges[-1]\n    self._update_context({'bins': self.bins * other})\n    self.ranges = self.edges * (1 - other / self.edges[-1])\n    if recompute:\n        self._update_context({'edges': self.edges})\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges[0]\n    elif not isinstance(other, float):\n        raise TypeError('Expected float or int, got {}.'.format(type(other)))\n    else:\n        if not self.edges.shape == other.edges.shape:\n            raise ValueError('edges arrays must be the same shape.')\n\n    self._update_context({'scale': other})\n\n    if recompute:\n        self.ranges = None\n        self.bins = None\n        self.ranges, self.bins = np.histogram(self.edges, bins=self.bins,\n                                              normed=True)\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.ranges[0]\n    self.bins = [(b[0] + other[0]) / self.scale for b in self.bins]\n    self.ranges = [(b[1] + other[1]) / self.scale for b in self.ranges]\n    if recompute:\n        self._update_context()\n", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        if self.dim!= other.dim:\n            raise ValueError(\n                \"Cannot scale with different dimensions. Expected \"\n                \"dimensions are {}, but found dimensions are {}.\"\n               .format(self.dim, other.dim))\n        else:\n            self._scale = other.scale\n            self._update_context(other.context)\n            if recompute:\n                self.ranges = other.ranges\n                self.bins = other.bins\n    else:\n        self._scale = self._scale\n        self._update_context({})\n    return self\n", "def scale(self, other=None, recompute=False):\n    if other is not None and not isinstance(other, Bins):\n        raise TypeError(\"'other' must be of type 'Bins'\")\n\n    if self.dim!= 2 or other is None:\n        raise ValueError(\"'other' cannot be None if 'dim' is 2\")\n\n    if self.edges.size!= self.bins.size:\n        raise ValueError(\"'edges' and 'bins' must have the same size\")\n\n    if self.edges.min() < 0:\n        raise ValueError(\"'edges' must be a positive number\")\n\n    if other is not None and self.edges.min() < other.edges.min():\n        raise ValueError(\"'edges' must be a positive number\")\n\n    self._update_context({\"scale\": other, \"bins\": self.bins})\n\n    if recompute:\n        self._recompute_context()\n", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        if len(self.edges)!= len(other.edges):\n            raise ValueError(\"edges length mismatch\")\n        else:\n            self._update_context(other.context)\n\n    if self.nbins is not None:\n        if self.bins is not None:\n            if self.nbins!= other.nbins:\n                raise ValueError(\"bins length mismatch\")\n        else:\n            self._update_context(None)\n\n    self.bins = np.linspace(self.edges[0], self.edges[-1], self.nbins + 1)\n    self.ranges = self.edges[:-1] - self.edges[1:]\n    if recompute:\n        self._update_context()\n", "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.bins = other.bins\n        self.edges = other.edges\n        self._update_context(context=other._context)\n        self._update_ranges(recompute=recompute)\n    elif self.bins is not None and self.ranges is not None:\n        self._update_context(context=self._context)\n        self._update_ranges(recompute=recompute)\n    else:\n        self._update_context(context=self._context)\n        self._update_ranges(recompute=recompute)\n    self._update_scale()\n    return\n", "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.__class__(edges=self.edges, bins=self.bins,\n                               initial_value=self.initial_value)\n    self._update_context(other)\n    if recompute:\n        self.ranges = other.ranges\n        self.scale = other.scale\n        self._update_context(other.context)\n    return self\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        if self.nbins!= other.nbins:\n            raise ValueError(\"Can only scale with the same number of bins\")\n        self._scale = other._scale\n        self.ranges = other.ranges\n        self.bins = other.bins\n        self.nbins = other.nbins\n        self._update_context(context=other._context)\n    else:\n        self._scale = self.scale\n        self.ranges = self.ranges\n        self.bins = self.bins\n        self.nbins = self.nbins\n        self._update_context(context=self._context)\n\n    if recompute:\n        self._update_context()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges\n\n    self.ranges = (self.edges[:-1], self.edges[1:])\n    self.bins = self.edges\n    self.nbins = len(self.edges) - 1\n\n    self._update_context(\n        Context([(i, other[i]) for i in range(self.nbins)]))\n\n    if recompute:\n        self._update_context(\n            Context([(self.edges[i], other[self.edges[i]])\n                      for i in range(self.nbins)]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges[-1]\n    self._update_context({'bins': self.bins * other})\n    self.ranges = self.edges * (1 - other / self.edges[-1])\n    if recompute:\n        self._update_context({'edges': self.edges})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.edges[0]\n    elif not isinstance(other, float):\n        raise TypeError('Expected float or int, got {}.'.format(type(other)))\n    else:\n        if not self.edges.shape == other.edges.shape:\n            raise ValueError('edges arrays must be the same shape.')\n\n    self._update_context({'scale': other})\n\n    if recompute:\n        self.ranges = None\n        self.bins = None\n        self.ranges, self.bins = np.histogram(self.edges, bins=self.bins,\n                                              normed=True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.ranges[0]\n    self.bins = [(b[0] + other[0]) / self.scale for b in self.bins]\n    self.ranges = [(b[1] + other[1]) / self.scale for b in self.ranges]\n    if recompute:\n        self._update_context()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        if self.dim!= other.dim:\n            raise ValueError(\n                \"Cannot scale with different dimensions. Expected \"\n                \"dimensions are {}, but found dimensions are {}.\"\n               .format(self.dim, other.dim))\n        else:\n            self._scale = other.scale\n            self._update_context(other.context)\n            if recompute:\n                self.ranges = other.ranges\n                self.bins = other.bins\n    else:\n        self._scale = self._scale\n        self._update_context({})\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None and not isinstance(other, Bins):\n        raise TypeError(\"'other' must be of type 'Bins'\")\n\n    if self.dim!= 2 or other is None:\n        raise ValueError(\"'other' cannot be None if 'dim' is 2\")\n\n    if self.edges.size!= self.bins.size:\n        raise ValueError(\"'edges' and 'bins' must have the same size\")\n\n    if self.edges.min() < 0:\n        raise ValueError(\"'edges' must be a positive number\")\n\n    if other is not None and self.edges.min() < other.edges.min():\n        raise ValueError(\"'edges' must be a positive number\")\n\n    self._update_context({\"scale\": other, \"bins\": self.bins})\n\n    if recompute:\n        self._recompute_context()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        if len(self.edges)!= len(other.edges):\n            raise ValueError(\"edges length mismatch\")\n        else:\n            self._update_context(other.context)\n\n    if self.nbins is not None:\n        if self.bins is not None:\n            if self.nbins!= other.nbins:\n                raise ValueError(\"bins length mismatch\")\n        else:\n            self._update_context(None)\n\n    self.bins = np.linspace(self.edges[0], self.edges[-1], self.nbins + 1)\n    self.ranges = self.edges[:-1] - self.edges[1:]\n    if recompute:\n        self._update_context()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is not None:\n        self.bins = other.bins\n        self.edges = other.edges\n        self._update_context(context=other._context)\n        self._update_ranges(recompute=recompute)\n    elif self.bins is not None and self.ranges is not None:\n        self._update_context(context=self._context)\n        self._update_ranges(recompute=recompute)\n    else:\n        self._update_context(context=self._context)\n        self._update_ranges(recompute=recompute)\n    self._update_scale()\n    return\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None, recompute=False):\n    if other is None:\n        other = self.__class__(edges=self.edges, bins=self.bins,\n                               initial_value=self.initial_value)\n    self._update_context(other)\n    if recompute:\n        self.ranges = other.ranges\n        self.scale = other.scale\n        self._update_context(other.context)\n    return self\n", "is_pass": false, "return_code": 1}]}
{"file_path": "lena/structures/graph.py", "project": "ynikitenko/lena", "name": "scale", "docstring": "Get or set the scale of the graph.\n\nIf *other* is ``None``, return the scale of this graph.\n\nIf a numeric *other* is provided, rescale to that value.\nIf the graph has unknown or zero scale,\nrescaling that will raise :exc:`~.LenaValueError`.\n\nTo get meaningful results, graph's fields are used.\nOnly the last coordinate is rescaled.\nFor example, if the graph has *x* and *y* coordinates,\nthen *y* will be rescaled, and for a 3-dimensional graph\n*z* will be rescaled.\nAll errors are rescaled together with their coordinate.", "ques_id": "62b87b519a0c4fa8b80b3583", "code": ["def scale(self, other=None):\n    if other is None:\n        other = 1\n    if self.dim!= other.dim:\n        raise ValueError(\n            \"Scaling matrix must have dimensions {} x {}\".format(\n                self.dim, other.dim\n            )\n        )\n    if self._scale!= other._scale:\n        raise ValueError(\n            \"Scaling matrix must have dimensions {} x {}\".format(\n                self._scale, other._scale\n            )\n        )\n    self.coords = [\n        x * (other / x) for x in self.coords\n    ]\n", "def scale(self, other=None):\n    if self._scale!= other:\n        self._scale = other\n        self._update_context(self._context)\n", "def scale(self, other=None):\n    if isinstance(other, SkyCoord):\n        self._scale = other.scale\n    elif isinstance(other, tuple):\n        self._scale = other[0] / other[1]\n    else:\n        self._scale = 1.\n", "def scale(self, other=None):\n    if other is not None:\n        self._scale = other\n        self._update_context({'scale': other})\n    else:\n        try:\n            self._scale = self._coord_names['scale']\n        except KeyError:\n            raise ValueError(\n                'coordinate names must be given in the same order as '\n                'field_names when creating a new coordinate system')\n    return self\n", "def scale(self, other=None):\n    if isinstance(other, Coordinates):\n        for name in self.field_names:\n            self._parsed_error_names[name] = other._parsed_error_names[name]\n        return self\n\n    if isinstance(other, (list, tuple)):\n        for i, name in enumerate(self.field_names):\n            self._parsed_error_names[name] = other[i]\n        return self\n\n    if isinstance(other, dict):\n        for name in self.field_names:\n            self._parsed_error_names[name] = other[name]\n        return self\n\n    raise TypeError(\"'{}' object is not a Coordinates object\".format(\n        type(other).__name__))\n", "def scale(self, other=None):\n    if isinstance(other, Field):\n        self._scale = other._scale\n        self._update_context(other._context)\n    else:\n        self._scale = other\n    return self\n", "def scale(self, other=None):\n    if isinstance(other, Variable):\n        self._scale = other._scale\n    elif isinstance(other, (float, int)):\n        self._scale = other\n    else:\n        err = 'Expected Variable or float instance, got {}.'.format(type(other))\n        raise TypeError(err)\n\n    return self\n", "def scale(self, other=None):\n    if other is not None:\n        self._scale = other\n    else:\n        try:\n            self._scale = float(self._scale)\n        except ValueError:\n            raise ValueError(\n                \"scale must be a number or None (got {})\".format(repr(other))\n            )\n", "def scale(self, other=None):\n    if isinstance(other, Coordinates):\n        self._scale = other._scale\n    elif isinstance(other, tuple):\n        self._scale = other\n    else:\n        raise TypeError(\"Unsupported type to scale with\")\n    return self\n", "def scale(self, other=None):\n    if other is None:\n        other = 1.0\n    self._scale = other\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def scale(self, other=None):\n    if other is None:\n        other = 1\n    if self.dim!= other.dim:\n        raise ValueError(\n            \"Scaling matrix must have dimensions {} x {}\".format(\n                self.dim, other.dim\n            )\n        )\n    if self._scale!= other._scale:\n        raise ValueError(\n            \"Scaling matrix must have dimensions {} x {}\".format(\n                self._scale, other._scale\n            )\n        )\n    self.coords = [\n        x * (other / x) for x in self.coords\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if self._scale!= other:\n        self._scale = other\n        self._update_context(self._context)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if isinstance(other, SkyCoord):\n        self._scale = other.scale\n    elif isinstance(other, tuple):\n        self._scale = other[0] / other[1]\n    else:\n        self._scale = 1.\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._scale = other\n        self._update_context({'scale': other})\n    else:\n        try:\n            self._scale = self._coord_names['scale']\n        except KeyError:\n            raise ValueError(\n                'coordinate names must be given in the same order as '\n                'field_names when creating a new coordinate system')\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if isinstance(other, Coordinates):\n        for name in self.field_names:\n            self._parsed_error_names[name] = other._parsed_error_names[name]\n        return self\n\n    if isinstance(other, (list, tuple)):\n        for i, name in enumerate(self.field_names):\n            self._parsed_error_names[name] = other[i]\n        return self\n\n    if isinstance(other, dict):\n        for name in self.field_names:\n            self._parsed_error_names[name] = other[name]\n        return self\n\n    raise TypeError(\"'{}' object is not a Coordinates object\".format(\n        type(other).__name__))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if isinstance(other, Field):\n        self._scale = other._scale\n        self._update_context(other._context)\n    else:\n        self._scale = other\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if isinstance(other, Variable):\n        self._scale = other._scale\n    elif isinstance(other, (float, int)):\n        self._scale = other\n    else:\n        err = 'Expected Variable or float instance, got {}.'.format(type(other))\n        raise TypeError(err)\n\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is not None:\n        self._scale = other\n    else:\n        try:\n            self._scale = float(self._scale)\n        except ValueError:\n            raise ValueError(\n                \"scale must be a number or None (got {})\".format(repr(other))\n            )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def scale(self, other=None):\n    if isinstance(other, Coordinates):\n        self._scale = other._scale\n    elif isinstance(other, tuple):\n        self._scale = other\n    else:\n        raise TypeError(\"Unsupported type to scale with\")\n    return self\n", "is_pass": false, "return_code": 1}, {"generate_code": "def scale(self, other=None):\n    if other is None:\n        other = 1.0\n    self._scale = other\n", "is_pass": true, "return_code": 0}]}
{"file_path": "lena/structures/hist_functions.py", "project": "ynikitenko/lena", "name": "hist_to_graph", "docstring": "Convert a :class:`.histogram` to a :class:`.graph`.\n\n*make_value* is a function to set the value of a graph's point.\nBy default it is bin content.\n*make_value* accepts a single value (bin content) without context.\n\nThis option could be used to create graph's error bars.\nFor example, to create a graph with errors\nfrom a histogram where bins contain\na named tuple with fields *mean*, *mean_error* and a context\none could use\n\n>>> make_value = lambda bin_: (bin_.mean, bin_.mean_error)\n\n*get_coordinate* defines what the coordinate\nof a graph point created from a histogram bin will be.\nIt can be \"left\" (default), \"right\" and \"middle\".\n\n*field_names* set field names of the graph. Their number\nmust be the same as the dimension of the result.\nFor a *make_value* above they would be\n*(\"x\", \"y_mean\", \"y_mean_error\")*.\n\n*scale* becomes the graph's scale (unknown by default).\nIf it is ``True``, it uses the histogram scale.\n\n*hist* must contain only numeric bins (without context)\nor *make_value* must remove context when creating a numeric graph.\n\nReturn the resulting graph.", "ques_id": "62b87b869a0c4fa8b80b35e1", "code": ["def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    def get_coordinate(point):\n        if make_value is None:\n            return point\n        else:\n            return make_value(point)\n\n    def get_label(point):\n        if make_value is None:\n            return point\n        else:\n            return make_value(point)\n\n    def get_value(point):\n        if make_value is None:\n            return point\n        else:\n            return point\n\n    def get_color(point):\n        if make_value is None:\n            return \"#ffffff\"\n        else:\n            return \"#%0.2x\" % make_value(point)\n\n    return Graph(field_names=field_names, scale=scale, color=get_color,\n                                                                                           ", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n    values = [\n        (make_value(x), y)\n        for x, y in hist\n    ]\n    if scale:\n        values = [(scale * x, y) for x, y in values]\n    return nx.Graph(values)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        def make_value(x):\n            return x\n\n    if scale is None:\n        scale = hist.GetField(get_coordinate).GetScale()\n\n    def get_value(x):\n        return scale * hist.GetBinContent(x)\n\n    return Graph([(get_value(x), y) for x, y in hist.Items()], field_names)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        def make_value(x):\n            return x\n    if scale is None:\n        scale = hist.get_scale()\n    hist.make_graph(make_value, get_coordinate, field_names, scale)\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    graph = {}\n    for key, values in hist.items():\n        if get_coordinate == \"left\":\n            graph[key] = [value * scale for value in values]\n        else:\n            graph[key] = [value + (scale * 0.5) for value in values]\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    def _get_coordinate(x, y):\n        if make_value:\n            return make_value(x, y)\n        else:\n            return x, y\n\n    def _scale(x, y):\n        return x / y\n\n    if scale:\n        hist = scale(hist)\n\n    x, y = _get_coordinate(hist.GetXaxis().GetBinLowEdge(),\n                           hist.GetYaxis().GetBinHighEdge())\n    graph = {}\n    for field in field_names:\n        graph[field] = hist.GetBinContent(x, y)\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n    graph = {}\n    for i, coord in enumerate(field_names):\n        graph[coord] = {}\n        for x in range(hist.GetNbinsX()):\n            graph[coord][x] = make_value(hist.GetBinContent(x))\n        if scale is not None:\n            graph[coord] = [\n                (x * scale[i]) for x in graph[coord]\n            ]\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if scale is None:\n        scale = get_coordinate(hist)\n    graph = {}\n    for field in field_names:\n        graph[field] = {}\n        for coordinate in (\"left\", \"right\"):\n            val = make_value(hist, coordinate)\n            if val is not None:\n                graph[field][coordinate] = val\n            graph[field][coordinate] = val\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    graph = {}\n    for name, (x, y) in hist.items():\n        if make_value is not None:\n            if get_coordinate == \"left\":\n                x = make_value(x)\n            if get_coordinate == \"right\":\n                y = make_value(y)\n        graph[name] = (x, y)\n    if scale:\n        for name in field_names:\n            if name in graph:\n                graph[name] = (graph[name][0], graph[name][1] * scale)\n    return graph\n", "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\" \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n\n    def _inner(xy):\n        return make_value(xy[0]), make_value(xy[1])\n\n    graph = Graph(field_names, scale=scale)\n    for xy in hist:\n        graph.add(_inner(xy))\n    return graph\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    def get_coordinate(point):\n        if make_value is None:\n            return point\n        else:\n            return make_value(point)\n\n    def get_label(point):\n        if make_value is None:\n            return point\n        else:\n            return make_value(point)\n\n    def get_value(point):\n        if make_value is None:\n            return point\n        else:\n            return point\n\n    def get_color(point):\n        if make_value is None:\n            return \"#ffffff\"\n        else:\n            return \"#%0.2x\" % make_value(point)\n\n    return Graph(field_names=field_names, scale=scale, color=get_color,\n                                                                                           ", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n    values = [\n        (make_value(x), y)\n        for x, y in hist\n    ]\n    if scale:\n        values = [(scale * x, y) for x, y in values]\n    return nx.Graph(values)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        def make_value(x):\n            return x\n\n    if scale is None:\n        scale = hist.GetField(get_coordinate).GetScale()\n\n    def get_value(x):\n        return scale * hist.GetBinContent(x)\n\n    return Graph([(get_value(x), y) for x, y in hist.Items()], field_names)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        def make_value(x):\n            return x\n    if scale is None:\n        scale = hist.get_scale()\n    hist.make_graph(make_value, get_coordinate, field_names, scale)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    graph = {}\n    for key, values in hist.items():\n        if get_coordinate == \"left\":\n            graph[key] = [value * scale for value in values]\n        else:\n            graph[key] = [value + (scale * 0.5) for value in values]\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    def _get_coordinate(x, y):\n        if make_value:\n            return make_value(x, y)\n        else:\n            return x, y\n\n    def _scale(x, y):\n        return x / y\n\n    if scale:\n        hist = scale(hist)\n\n    x, y = _get_coordinate(hist.GetXaxis().GetBinLowEdge(),\n                           hist.GetYaxis().GetBinHighEdge())\n    graph = {}\n    for field in field_names:\n        graph[field] = hist.GetBinContent(x, y)\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n    graph = {}\n    for i, coord in enumerate(field_names):\n        graph[coord] = {}\n        for x in range(hist.GetNbinsX()):\n            graph[coord][x] = make_value(hist.GetBinContent(x))\n        if scale is not None:\n            graph[coord] = [\n                (x * scale[i]) for x in graph[coord]\n            ]\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    if scale is None:\n        scale = get_coordinate(hist)\n    graph = {}\n    for field in field_names:\n        graph[field] = {}\n        for coordinate in (\"left\", \"right\"):\n            val = make_value(hist, coordinate)\n            if val is not None:\n                graph[field][coordinate] = val\n            graph[field][coordinate] = val\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\"\n    \"\"\"\n    graph = {}\n    for name, (x, y) in hist.items():\n        if make_value is not None:\n            if get_coordinate == \"left\":\n                x = make_value(x)\n            if get_coordinate == \"right\":\n                y = make_value(y)\n        graph[name] = (x, y)\n    if scale:\n        for name in field_names:\n            if name in graph:\n                graph[name] = (graph[name][0], graph[name][1] * scale)\n    return graph\n", "is_pass": false, "return_code": 1}, {"generate_code": "def hist_to_graph(hist, make_value=None, get_coordinate=\"left\",\n                  field_names=(\"x\", \"y\"), scale=None):\n    \"\"\" \"\"\"\n    if make_value is None:\n        make_value = lambda x: x\n\n    def _inner(xy):\n        return make_value(xy[0]), make_value(xy[1])\n\n    graph = Graph(field_names, scale=scale)\n    for xy in hist:\n        graph.add(_inner(xy))\n    return graph\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "_verify", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1136", "code": ["def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    if vtype is not None:\n        verifyType(vtype, candidate)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.vtype\n    if vtype =='method' and not tentative:\n        verifyObject(iface, candidate, candidate)\n    elif vtype == 'attribute' and not candidate.implemented:\n        verifyObject(iface, candidate, None)\n    elif vtype == 'attribute' and candidate.implemented:\n        verifyObject(iface, candidate, candidate)\n    elif vtype!= 'implementation' and not tentative:\n        verifyObject(iface, candidate, None)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        return\n\n    if not candidate or not tentative:\n        return\n\n    if not _verify_element(iface, candidate, vtype):\n        return False\n\n    if not _verify_element(iface, candidate, vtype):\n        return False\n\n    return True\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is not None:\n        verifyObject(iface, candidate, vtype)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, 'candidate', 'tentative', tentative)\n    _verify_element(iface, candidate, 'vtype', vtype, bool)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        raise TypeError('Candidate must be an instance of Candidate')\n    if not isinstance(iface, Interface):\n        raise TypeError('Interface must be an instance of Interface')\n    if not isinstance(candidate, CandidateFactory):\n        raise TypeError('Candidate must be a candidate factory instance')\n    if not isinstance(tentative, bool):\n        raise TypeError('Tentative must be a boolean')\n    if vtype is not None and not isinstance(vtype, Type):\n        raise TypeError('vtype must be an instance of Type')\n    if not isinstance(candidate, CandidateFactory):\n        raise TypeError('Candidate must be a candidate factory instance')\n    if not candidate.isCandidateType(iface):\n        raise TypeError('Candidate must be an instance of Candidate')\n    if not tentative and not candidate.isTentative(iface):\n        raise TypeError('Tentative must be a boolea", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.vtype\n    if candidate.vtype!= vtype:\n        raise TypeError(\n            '%s %s can not be %s (got %s)' % (\n                iface.__name__, vtype.__name__, candidate.vtype, vtype))\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, vtype)\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    if vtype and not verify_type(vtype, candidate):\n        raise TypeError(\n            _MSG_TOO_MANY,\n            _verify.__doc__,\n            ('%r is not a valid %s type' % (candidate, vtype.__name__)),\n        )\n", "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.__class__\n    if vtype not in MethodTypes:\n        raise TypeError(\n            'Unknown type %s for %s, must be one of %s' %\n            (vtype, candidate.__name__, MethodTypes))\n    if not candidate.implemented:\n        raise ValueError(\n            'Candidate %s is not implemented in %s' %\n            (candidate.__name__, iface.__name__))\n    if tentative:\n        if candidate.__name__ not in _TESTED_METHODS:\n            raise ValueError(\n                'Candidate %s is not a method of %s' %\n                (candidate.__name__, iface.__name__))\n        return True\n    if not candidate.valid:\n        raise ValueError(\n            'Candidate %s is not vali"], "level": "file_runnable", "generate_results": [{"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    if vtype is not None:\n        verifyType(vtype, candidate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.vtype\n    if vtype =='method' and not tentative:\n        verifyObject(iface, candidate, candidate)\n    elif vtype == 'attribute' and not candidate.implemented:\n        verifyObject(iface, candidate, None)\n    elif vtype == 'attribute' and candidate.implemented:\n        verifyObject(iface, candidate, candidate)\n    elif vtype!= 'implementation' and not tentative:\n        verifyObject(iface, candidate, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if vtype is None:\n        vtype = iface.providedBy(candidate)\n\n    if not vtype:\n        return\n\n    if not candidate or not tentative:\n        return\n\n    if not _verify_element(iface, candidate, vtype):\n        return False\n\n    if not _verify_element(iface, candidate, vtype):\n        return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is not None:\n        verifyObject(iface, candidate, vtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    _verify_element(iface, candidate, 'candidate', 'tentative', tentative)\n    _verify_element(iface, candidate, 'vtype', vtype, bool)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    if not isinstance(candidate, Candidate):\n        raise TypeError('Candidate must be an instance of Candidate')\n    if not isinstance(iface, Interface):\n        raise TypeError('Interface must be an instance of Interface')\n    if not isinstance(candidate, CandidateFactory):\n        raise TypeError('Candidate must be a candidate factory instance')\n    if not isinstance(tentative, bool):\n        raise TypeError('Tentative must be a boolean')\n    if vtype is not None and not isinstance(vtype, Type):\n        raise TypeError('vtype must be an instance of Type')\n    if not isinstance(candidate, CandidateFactory):\n        raise TypeError('Candidate must be a candidate factory instance')\n    if not candidate.isCandidateType(iface):\n        raise TypeError('Candidate must be an instance of Candidate')\n    if not tentative and not candidate.isTentative(iface):\n        raise TypeError('Tentative must be a boolea", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.vtype\n    if candidate.vtype!= vtype:\n        raise TypeError(\n            '%s %s can not be %s (got %s)' % (\n                iface.__name__, vtype.__name__, candidate.vtype, vtype))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate, vtype)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n    if vtype and not verify_type(vtype, candidate):\n        raise TypeError(\n            _MSG_TOO_MANY,\n            _verify.__doc__,\n            ('%r is not a valid %s type' % (candidate, vtype.__name__)),\n        )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _verify(iface, candidate, tentative=False, vtype=None):\n    verifyClass(iface, candidate, tentative)\n    if vtype is None:\n        vtype = candidate.__class__\n    if vtype not in MethodTypes:\n        raise TypeError(\n            'Unknown type %s for %s, must be one of %s' %\n            (vtype, candidate.__name__, MethodTypes))\n    if not candidate.implemented:\n        raise ValueError(\n            'Candidate %s is not implemented in %s' %\n            (candidate.__name__, iface.__name__))\n    if tentative:\n        if candidate.__name__ not in _TESTED_METHODS:\n            raise ValueError(\n                'Candidate %s is not a method of %s' %\n                (candidate.__name__, iface.__name__))\n        return True\n    if not candidate.valid:\n        raise ValueError(\n            'Candidate %s is not vali", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyObject", "docstring": "Verify that *candidate* might correctly provide *iface*.\n\nThis involves:\n\n- Making sure the candidate claims that it provides the\n  interface using ``iface.providedBy`` (unless *tentative* is `True`,\n  in which case this step is skipped). This means that the candidate's class\n  declares that it `implements <zope.interface.implementer>` the interface,\n  or the candidate itself declares that it `provides <zope.interface.provider>`\n  the interface\n\n- Making sure the candidate defines all the necessary methods\n\n- Making sure the methods have the correct signature (to the\n  extent possible)\n\n- Making sure the candidate defines all the necessary attributes\n\n:return bool: Returns a true value if everything that could be\n   checked passed.\n:raises zope.interface.Invalid: If any of the previous\n   conditions does not hold.\n\n.. versionchanged:: 5.0\n    If multiple methods or attributes are invalid, all such errors\n    are collected and reported. Previously, only the first error was reported.\n    As a special case, if only one such error is present, it is raised\n    alone, like before.", "ques_id": "62b8b4baeb7e40a82d2d1137", "code": ["def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    if not candidate.implementedBy(iface):\n        raise TypeError(\n            '%r not implemented by %r' % (candidate, iface))\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    if not candidate.implementedBy(iface):\n        raise TypeError(\n            '%r not implemented by %r' % (candidate, iface))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyType(iface, candidate)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyObject(iface, candidate, tentative=False):\n    verifyClass(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/verify.py", "project": "pexip/os-zope", "name": "verifyClass", "docstring": "Verify that the *candidate* might correctly provide *iface*.", "ques_id": "62b8b4c1eb7e40a82d2d1139", "code": ["def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verifyClass(iface, candidate, tentative=False):\n    verifyObject(iface, candidate, tentative)\n    verifyObject(iface, candidate, tentative)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/zope/interface/advice.py", "project": "pexip/os-zope", "name": "determineMetaclass", "docstring": "Determine metaclass from 1+ bases and optional explicit __metaclass__", "ques_id": "62b8b559eb7e40a82d2d11f6", "code": ["def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type):\n            yield base\n            continue\n        for subclass in base.__subclasses__():\n            if issubclass(subclass, type):\n                yield subclass\n                break\n        else:\n            if hasattr(subclass, '__module__'):\n                if subclass.__module__ == __name__:\n                    yield subclass\n                    continue\n            explicit_mc.append(subclass)\n            continue\n    for subclass in minimalBases(explicit_mc):\n        yield subclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    cls = type\n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if issubclass(base, type):\n            cls = base\n            break\n    if cls not in explicit_mc:\n        explicit_mc[cls] = {}\n    return explicit_mc[cls]\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    if isinstance(bases, types.ModuleType):\n        return type('Meta', (type('Meta', (type,), {'__module__': bases.__module__}),), {})\n    elif not issubclass(bases, type):\n        raise TypeError(\"bases must be a type subclass\")\n\n    frame = sys._getframe(1)\n\n    while frame:\n        frame = frame.f_back\n\n        if issubclass(frame.__class__, type) and \\\n                frame.f_code.co_filename == '<builtin>':\n            break\n\n        if issubclass(frame.__class__, types.FrameType) and \\\n                frame.f_code.co_filename == '<builtin>':\n            break\n\n        frame = frame.f_back\n\n    explicit_mc.append(frame)\n    return type('Meta', (type,), {'__module__': bases.__module__,\n                    ", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frame = sys._getframe(1)\n    while frame:\n        frame = frame.f_back\n\n        if isClassAdvisor(frame):\n            return frame.f_locals\n\n        if issubclass(frame.__class__, type):\n            break\n\n        frame = frame.f_back\n\n    for base in bases:\n        if issubclass(base, type):\n            if issubclass(base, abc.ABCMeta):\n                explicit_mc.append(base)\n                continue\n            else:\n                break\n\n        frame = frame.f_back\n\n    return explicit_mc\n", "def determineMetaclass(bases, explicit_mc=None):\n    advisory_types = set()\n    if explicit_mc is not None:\n        advisory_types = advisory_types.union(explicit_mc)\n    for base in bases:\n        if not issubclass(base, ClassAdvisor):\n            continue\n        if not issubclass(base, Advisor):\n            continue\n        if base not in advisory_types:\n            advisory_types.add(base)\n            continue\n        return base\n    return Advisor\n", "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = None\n    for base in bases:\n        if (issubclass(base, MetaClass) and\n                (metaclass is None or\n                    issubclass(metaclass, base))):\n            metaclass = base\n            break\n    if metaclass is None:\n        if explicit_mc is not None:\n            if issubclass(explicit_mc, type):\n                return explicit_mc\n            else:\n                return type\n    return metaclass\n", "def determineMetaclass(bases, explicit_mc=None):\n    \"determineMetaclass(bases, explicit_mc=None) determines whether this is a metaclass\"\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type):\n            yield base\n            continue\n        for subclass in determineMetaclass(base.__subclasses__(), explicit_mc):\n            yield subclass\n    if not explicit_mc:\n        yield type\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    if not isinstance(bases, types.ModuleType):\n        return type('Meta', bases, {})\n\n    new_mc = []\n\n    for base in bases.__mro__:\n        if issubclass(base, type):\n            new_mc.append(base)\n        elif issubclass(base, types.ModuleType):\n            new_mc.extend(determineMetaclass(new_mc, base))\n\n    if explicit_mc:\n        if not new_mc:\n            # class is abstract, and no metaclass was found\n            return type('Meta', bases, {})\n\n        if new_mc == explicit_mc:\n            # same class, but different metaclass\n            return type('Meta', bases, {'__module__': explicit_mc[0].__module__, '__qualname__': explicit_mc[0].__qualname__})\n\n        # class is abstract and", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    mc = type\n    if not issubclass(mc, type):\n        if any(issubclass(b, mc) for b in bases):\n            return False\n        mc = type\n    return type in explicit_mc + [mc]\n", "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = {}\n    classes = []\n    for base in bases:\n        if issubclass(base, Advisor):\n            classes.append(base)\n        elif issubclass(base, MetaAdvisor):\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n        elif issubclass(base, BaseAdvisor):\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n        else:\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n "], "level": "file_runnable", "generate_results": [{"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type):\n            yield base\n            continue\n        for subclass in base.__subclasses__():\n            if issubclass(subclass, type):\n                yield subclass\n                break\n        else:\n            if hasattr(subclass, '__module__'):\n                if subclass.__module__ == __name__:\n                    yield subclass\n                    continue\n            explicit_mc.append(subclass)\n            continue\n    for subclass in minimalBases(explicit_mc):\n        yield subclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    cls = type\n    if explicit_mc is None:\n        explicit_mc = {}\n    for base in bases:\n        if issubclass(base, type):\n            cls = base\n            break\n    if cls not in explicit_mc:\n        explicit_mc[cls] = {}\n    return explicit_mc[cls]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    if isinstance(bases, types.ModuleType):\n        return type('Meta', (type('Meta', (type,), {'__module__': bases.__module__}),), {})\n    elif not issubclass(bases, type):\n        raise TypeError(\"bases must be a type subclass\")\n\n    frame = sys._getframe(1)\n\n    while frame:\n        frame = frame.f_back\n\n        if issubclass(frame.__class__, type) and \\\n                frame.f_code.co_filename == '<builtin>':\n            break\n\n        if issubclass(frame.__class__, types.FrameType) and \\\n                frame.f_code.co_filename == '<builtin>':\n            break\n\n        frame = frame.f_back\n\n    explicit_mc.append(frame)\n    return type('Meta', (type,), {'__module__': bases.__module__,\n                    ", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    frame = sys._getframe(1)\n    while frame:\n        frame = frame.f_back\n\n        if isClassAdvisor(frame):\n            return frame.f_locals\n\n        if issubclass(frame.__class__, type):\n            break\n\n        frame = frame.f_back\n\n    for base in bases:\n        if issubclass(base, type):\n            if issubclass(base, abc.ABCMeta):\n                explicit_mc.append(base)\n                continue\n            else:\n                break\n\n        frame = frame.f_back\n\n    return explicit_mc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    advisory_types = set()\n    if explicit_mc is not None:\n        advisory_types = advisory_types.union(explicit_mc)\n    for base in bases:\n        if not issubclass(base, ClassAdvisor):\n            continue\n        if not issubclass(base, Advisor):\n            continue\n        if base not in advisory_types:\n            advisory_types.add(base)\n            continue\n        return base\n    return Advisor\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    metaclass = None\n    for base in bases:\n        if (issubclass(base, MetaClass) and\n                (metaclass is None or\n                    issubclass(metaclass, base))):\n            metaclass = base\n            break\n    if metaclass is None:\n        if explicit_mc is not None:\n            if issubclass(explicit_mc, type):\n                return explicit_mc\n            else:\n                return type\n    return metaclass\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    \"determineMetaclass(bases, explicit_mc=None) determines whether this is a metaclass\"\n    if explicit_mc is None:\n        explicit_mc = []\n    for base in bases:\n        if issubclass(base, type):\n            yield base\n            continue\n        for subclass in determineMetaclass(base.__subclasses__(), explicit_mc):\n            yield subclass\n    if not explicit_mc:\n        yield type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n\n    if not isinstance(bases, types.ModuleType):\n        return type('Meta', bases, {})\n\n    new_mc = []\n\n    for base in bases.__mro__:\n        if issubclass(base, type):\n            new_mc.append(base)\n        elif issubclass(base, types.ModuleType):\n            new_mc.extend(determineMetaclass(new_mc, base))\n\n    if explicit_mc:\n        if not new_mc:\n            # class is abstract, and no metaclass was found\n            return type('Meta', bases, {})\n\n        if new_mc == explicit_mc:\n            # same class, but different metaclass\n            return type('Meta', bases, {'__module__': explicit_mc[0].__module__, '__qualname__': explicit_mc[0].__qualname__})\n\n        # class is abstract and", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = []\n    mc = type\n    if not issubclass(mc, type):\n        if any(issubclass(b, mc) for b in bases):\n            return False\n        mc = type\n    return type in explicit_mc + [mc]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def determineMetaclass(bases, explicit_mc=None):\n    if explicit_mc is None:\n        explicit_mc = {}\n    classes = []\n    for base in bases:\n        if issubclass(base, Advisor):\n            classes.append(base)\n        elif issubclass(base, MetaAdvisor):\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n        elif issubclass(base, BaseAdvisor):\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n        else:\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n            addClassAdvisor(classes, base.__name__)\n ", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/cache.py", "project": "pexip/os-python-cachetools", "name": "pop", "docstring": "D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised.", "ques_id": "62b8d22a48ba5a41d1c3f47d", "code": ["def pop(self, key, default=__marker):\n    if default is __marker:\n        result = dict.pop(self, key)\n        if result is not default:\n            self.changed()\n        return result\n    else:\n        return dict.pop(self, key)\n", "def pop(self, key, default=__marker):\n    try:\n        return dict.pop(self, key)\n    except KeyError as exc:\n        if default is self.__marker:\n            raise exceptions.BadArgumentError(\n                'pop on an empty container') from exc\n        return default\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key]\n    return super(OrderedDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = next(iter(self))\n    return super(OrderedDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    else:\n        self[key] = default\n    return super(DefaultGetDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = self[key].default\n    return super(DefaultGetDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self.pop(key)\n    return default\n", "def pop(self, key, default=__marker):\n    try:\n        value = dict.pop(self, key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n    else:\n        dict.__delitem__(self, key)\n        return value\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key].next()\n    return super(OrderedDict, self).pop(key, default)\n", "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key].next()\n    return super(OrderedDict, self).pop(key, default)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        result = dict.pop(self, key)\n        if result is not default:\n            self.changed()\n        return result\n    else:\n        return dict.pop(self, key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        return dict.pop(self, key)\n    except KeyError as exc:\n        if default is self.__marker:\n            raise exceptions.BadArgumentError(\n                'pop on an empty container') from exc\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key]\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = next(iter(self))\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = None\n    else:\n        self[key] = default\n    return super(DefaultGetDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is self.__marker:\n        default = self[key] = self[key].default\n    return super(DefaultGetDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self.pop(key)\n    return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    try:\n        value = dict.pop(self, key)\n    except KeyError:\n        if default is self.__marker:\n            raise\n        return default\n    else:\n        dict.__delitem__(self, key)\n        return value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key].next()\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def pop(self, key, default=__marker):\n    if default is __marker:\n        default = self[key] = self[key].next()\n    return super(OrderedDict, self).pop(key, default)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lfu.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least frequently used.", "ques_id": "62b8d23748ba5a41d1c3f497", "code": ["def popitem(self):\n    try:\n        return self.__counter.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    if self.__counter > 0:\n        result = self.pop()\n        self.__counter -= 1\n        return result\n    raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    return self.pop()\n", "def popitem(self):\n    return self.pop()\n", "def popitem(self):\n    return self.__counter.popitem()\n", "def popitem(self):\n    try:\n        return self.__counter.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.pop()\n", "def popitem(self):\n    return self.__counter.popitem()\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__counter.pop()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    if self.__counter > 0:\n        result = self.pop()\n        self.__counter -= 1\n        return result\n    raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__counter.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__counter.popitem()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/lru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair least recently used.", "ques_id": "62b8d23a48ba5a41d1c3f499", "code": ["def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    return self.__popitem()\n", "def popitem(self):\n    return self.__popitem()\n", "def popitem(self):\n    return self.__popitem()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError(\"popitem(): cache is empty\")\n", "def popitem(self):\n    return self.__update(None)\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return self.__order.popitem()\n", "def popitem(self):\n    return dict.popitem(self)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError(\"popitem(): cache is empty\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__update(None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.popitem()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return dict.popitem(self)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/mru.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return the `(key, value)` pair most recently used.", "ques_id": "62b8d23c48ba5a41d1c3f49b", "code": ["def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    return self.__pop()\n", "def popitem(self):\n    return self.__order.pop()\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    return self.__order.pop()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is already empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__order.pop()\n    except IndexError:\n        raise KeyError('popitem(): cache is empty')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "cachetools/rr.py", "project": "pexip/os-python-cachetools", "name": "popitem", "docstring": "Remove and return a random `(key, value)` pair.", "ques_id": "62b8d23e48ba5a41d1c3f49e", "code": ["def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty set')\n    else:\n        return (key, self.pop(key))\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty heap.')\n    else:\n        return dict.popitem(self)[0], dict.popitem(self)[1]\n", "def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty set')\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty dictionary')\n    else:\n        return (key, self.pop(key))\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty cache')\n    else:\n        return key, self.pop(key)\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError\n    else:\n        return key, self.pop(key)\n", "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('popitem(): There is nothing to remove.')\n    else:\n        return (key, self.pop(key))\n", "def popitem(self):\n    try:\n        key = self.__choice()\n        return key, self.pop(key)\n    except IndexError:\n        raise KeyError('Cannot remove from an empty heap.')\n", "def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty set')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('popitem(): dictionary is empty')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty set')\n    else:\n        return (key, self.pop(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty heap.')\n    else:\n        return dict.popitem(self)[0], dict.popitem(self)[1]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('Cannot remove from an empty set')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty dictionary')\n    else:\n        return (key, self.pop(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty cache')\n    else:\n        return key, self.pop(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError\n    else:\n        return key, self.pop(key)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n    except IndexError:\n        raise KeyError('popitem(): There is nothing to remove.')\n    else:\n        return (key, self.pop(key))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        key = self.__choice()\n        return key, self.pop(key)\n    except IndexError:\n        raise KeyError('Cannot remove from an empty heap.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def popitem(self):\n    try:\n        return self.__choice.popitem()\n    except IndexError:\n        raise KeyError('Cannot pop from an empty set')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_in_regex", "docstring": "Create the in-style parameter regular expression.\n\nReturns the in-style parameter regular expression (:class:`re.Pattern`).", "ques_id": "62b43425903eeb48555d3ea1", "code": ["def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, self._in_style)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        r'''\n        (?P<{regex_style}>{regex_pattern})\n        \\Z\n        '''.format(\n            regex_style=self._in_regex,\n            regex_pattern=self._in_regex_pattern,\n        )\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.pattern\n    return re.compile(in_regex, re.UNICODE | re.DOTALL)\n", "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        r\"\"\"\n        (?P<regex>[^{expand}]+)\n        \\s*\n        (?P<options>{options})\n        \\s*\n        (?P<params>{params})\n        \"\"\".format(\n            expand=self._expand_tuples,\n            options=self._in_regex.pattern,\n            params=self._in_regex.group('params'),\n        ),\n        flags=re.IGNORECASE,\n    )\n", "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, re.I)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(self._in_regex, self._in_style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        r'''\n        (?P<{regex_style}>{regex_pattern})\n        \\Z\n        '''.format(\n            regex_style=self._in_regex,\n            regex_pattern=self._in_regex_pattern,\n        )\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_regex\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    in_regex = self._in_obj.pattern\n    return re.compile(in_regex, re.UNICODE | re.DOTALL)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return re.compile(\n        r\"\"\"\n        (?P<regex>[^{expand}]+)\n        \\s*\n        (?P<options>{options})\n        \\s*\n        (?P<params>{params})\n        \"\"\".format(\n            expand=self._expand_tuples,\n            options=self._in_regex.pattern,\n            params=self._in_regex.group('params'),\n        ),\n        flags=re.IGNORECASE,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_in_regex(self) -> Pattern:\n    return self._in_obj.pattern\n", "is_pass": false, "return_code": 1}]}
{"file_path": "sqlparams/__init__.py", "project": "cpburnz/python-sql-parameters", "name": "_create_converter", "docstring": "Create the parameter style converter.\n\nReturns the parameter style converter (:class:`._converting._Converter`).", "ques_id": "62b43426903eeb48555d3ea2", "code": ["def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_style)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj,\n                                 self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(\n        self._in_obj,\n        self._out_obj,\n        self._escape_char,\n        self._in_regex,\n        self._out_regex,\n        self._in_style,\n        self._out_style,\n    )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._in_regex, self._out_style)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj,\n                                 self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converting._Converter(self._in_obj, self._out_obj, self._escape_char)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _create_converter(self) -> _converting._Converter:\n    return _converter._Converter(\n        self._in_obj,\n        self._out_obj,\n        self._escape_char,\n        self._in_regex,\n        self._out_regex,\n        self._in_style,\n        self._out_style,\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/isoparser.py", "project": "pexip/os-python-dateutil", "name": "isoparse", "docstring": "Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.\n\nAn ISO-8601 datetime string consists of a date portion, followed\noptionally by a time portion - the date and time portions are separated\nby a single character separator, which is ``T`` in the official\nstandard. Incomplete date formats (such as ``YYYY-MM``) may *not* be\ncombined with a time portion.\n\nSupported date formats are:\n\nCommon:\n\n- ``YYYY``\n- ``YYYY-MM`` or ``YYYYMM``\n- ``YYYY-MM-DD`` or ``YYYYMMDD``\n\nUncommon:\n\n- ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)\n- ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day\n\nThe ISO week and day numbering follows the same logic as\n:func:`datetime.date.isocalendar`.\n\nSupported time formats are:\n\n- ``hh``\n- ``hh:mm`` or ``hhmm``\n- ``hh:mm:ss`` or ``hhmmss``\n- ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)\n\nMidnight is a special case for `hh`, as the standard supports both\n00:00 and 24:00 as a representation. The decimal separator can be\neither a dot or a comma.\n\n\n.. caution::\n\n    Support for fractional components other than seconds is part of the\n    ISO-8601 standard, but is not currently implemented in this parser.\n\nSupported time zone offset formats are:\n\n- `Z` (UTC)\n- `\u00b1HH:MM`\n- `\u00b1HHMM`\n- `\u00b1HH`\n\nOffsets will be represented as :class:`dateutil.tz.tzoffset` objects,\nwith the exception of UTC, which will be represented as\n:class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such\nas `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.\n\n:param dt_str:\n    A string or stream containing only an ISO-8601 datetime string\n\n:return:\n    Returns a :class:`datetime.datetime` representing the string.\n    Unspecified components default to their lowest value.\n\n.. warning::\n\n    As of version 2.7.0, the strictness of the parser should not be\n    considered a stable part of the contract. Any valid ISO-8601 string\n    that parses correctly with the default settings will continue to\n    parse correctly in future versions, but invalid strings that\n    currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not\n    guaranteed to continue failing in future versions if they encode\n    a valid date.\n\n.. versionadded:: 2.7.0", "ques_id": "62b8966c755ee91dce50a154", "code": ["def isoparse(self, dt_str):\n    dt = self._parse_isodate(dt_str)\n    if dt is not None:\n        return self._parse_isodate_common(dt)\n", "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "def isoparse(self, dt_str):\n    if self._DATE_SEP not in dt_str:\n        raise ValueError('date string has no date separator')\n    return self._parse_isodate(dt_str)\n", "def isoparse(self, dt_str):\n    return self._parse_isodate_common(dt_str)\n", "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is None:\n        parsed = self._parse_tzstr(dt_str)\n    if parsed is None:\n        parsed = self._parse_tzstr(dt_str)\n    return parsed\n", "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "def isoparse(self, dt_str):\n    if self._DATE_SEP not in dt_str:\n        raise ValueError('isoparse: dt_str has no %s separator' % self._DATE_SEP)\n    date_parts = self._DATE_SEP.split(self._sep)\n    dt_parts = dt_str.split(self._sep)\n    if len(date_parts)!= len(dt_parts):\n        raise ValueError('isoparse: date_parts %s does not match dt_parts %s' % (date_parts, dt_parts))\n    dt_tz = self._parse_isodate_common(dt_parts)\n    if not dt_tz:\n        dt_tz = self._parse_isodate_uncommon(dt_parts)\n    return self._parse_isodate(dt_str, dt_tz)\n", "def isoparse(self, dt_str):\n    dt_parsed = self._parse_isodate(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isotime(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isodate_common(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isodate_uncommon(dt_str)\n    if dt_parsed is not None:\n        week, day = dt_parsed\n        return self._DATE_SEP.join((week, day))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def isoparse(self, dt_str):\n    dt = self._parse_isodate(dt_str)\n    if dt is not None:\n        return self._parse_isodate_common(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if self._DATE_SEP not in dt_str:\n        raise ValueError('date string has no date separator')\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate_common(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    parsed = self._parse_isodate(dt_str)\n    if parsed is None:\n        parsed = self._parse_isotime(dt_str)\n    if parsed is None:\n        parsed = self._parse_tzstr(dt_str)\n    if parsed is None:\n        parsed = self._parse_tzstr(dt_str)\n    return parsed\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    return self._parse_isodate(dt_str)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    if self._DATE_SEP not in dt_str:\n        raise ValueError('isoparse: dt_str has no %s separator' % self._DATE_SEP)\n    date_parts = self._DATE_SEP.split(self._sep)\n    dt_parts = dt_str.split(self._sep)\n    if len(date_parts)!= len(dt_parts):\n        raise ValueError('isoparse: date_parts %s does not match dt_parts %s' % (date_parts, dt_parts))\n    dt_tz = self._parse_isodate_common(dt_parts)\n    if not dt_tz:\n        dt_tz = self._parse_isodate_uncommon(dt_parts)\n    return self._parse_isodate(dt_str, dt_tz)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def isoparse(self, dt_str):\n    dt_parsed = self._parse_isodate(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isotime(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isodate_common(dt_str)\n    if dt_parsed is None:\n        dt_parsed = self._parse_isodate_uncommon(dt_str)\n    if dt_parsed is not None:\n        week, day = dt_parsed\n        return self._DATE_SEP.join((week, day))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/parser/_parser.py", "project": "pexip/os-python-dateutil", "name": "parse", "docstring": "Parse the date/time string into a :class:`datetime.datetime` object.\n\n:param timestr:\n    Any date/time string using the supported formats.\n\n:param default:\n    The default datetime object, if this is a datetime object and not\n    ``None``, elements specified in ``timestr`` replace elements in the\n    default object.\n\n:param ignoretz:\n    If set ``True``, time zones in parsed strings are ignored and a\n    naive :class:`datetime.datetime` object is returned.\n\n:param tzinfos:\n    Additional time zone names / aliases which may be present in the\n    string. This argument maps time zone names (and optionally offsets\n    from those time zones) to time zones. This parameter can be a\n    dictionary with timezone aliases mapping time zone names to time\n    zones or a function taking two parameters (``tzname`` and\n    ``tzoffset``) and returning a time zone.\n\n    The timezones to which the names are mapped can be an integer\n    offset from UTC in seconds or a :class:`tzinfo` object.\n\n    .. doctest::\n       :options: +NORMALIZE_WHITESPACE\n\n        >>> from dateutil.parser import parse\n        >>> from dateutil.tz import gettz\n        >>> tzinfos = {\"BRST\": -7200, \"CST\": gettz(\"America/Chicago\")}\n        >>> parse(\"2012-01-19 17:21:00 BRST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21, tzinfo=tzoffset(u'BRST', -7200))\n        >>> parse(\"2012-01-19 17:21:00 CST\", tzinfos=tzinfos)\n        datetime.datetime(2012, 1, 19, 17, 21,\n                          tzinfo=tzfile('/usr/share/zoneinfo/America/Chicago'))\n\n    This parameter is ignored if ``ignoretz`` is set.\n\n:param \\*\\*kwargs:\n    Keyword arguments as passed to ``_parse()``.\n\n:return:\n    Returns a :class:`datetime.datetime` object or, if the\n    ``fuzzy_with_tokens`` option is ``True``, returns a tuple, the\n    first element being a :class:`datetime.datetime` object, the second\n    a tuple containing the fuzzy tokens.\n\n:raises ParserError:\n    Raised for invalid or unknown string format, if the provided\n    :class:`tzinfo` is not in a valid format, or if an invalid date\n    would be created.\n\n:raises TypeError:\n    Raised for non-string or character stream input.\n\n:raises OverflowError:\n    Raised if the parsed date exceeds the largest valid C integer on\n    your system.", "ques_id": "62b896de755ee91dce50a183", "code": ["def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string time values\n    \"\"\"\n    if ignoretz and timestr.endswith('Z'):\n        timestr = timestr[:-1]\n        tzinfos = ()\n\n    if tzinfos is None:\n        tzinfos = self._ampm_valid\n\n    res = self._parse(timestr, **kwargs)\n    if self._could_be_tzname(res):\n        return res\n\n    if res is None:\n        return default\n\n    return self._assign_tzname(res, tzinfos, tzinfos)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string with time information.\n    \"\"\"\n    if not timestr:\n        return default\n    return self._parse(timestr, ignoretz, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string `timestr` according to rules defined in the `rules`\n    attribute of this class.\n    \"\"\"\n    if self._ampm_valid and ignoretz and timestr.count('+') == 1:\n        # No tzinfo means no timezone information\n        timestr = timestr.replace('+', '')\n    if not tzinfos:\n        tzinfos = self.info.get('timezone', None)\n    res = self._parse(timestr, **kwargs)\n    if tzinfos:\n        res = res.tzinfo if res else None\n    return res\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string using the current locale context.\n    \"\"\"\n    return self._parse(timestr, ignoretz, **kwargs).replace(\n        tzinfo=self.info.get('tzinfo', None) or default)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string and return a :class:`datetime.datetime` object\n    or ``None`` if the parse fails.\n    \"\"\"\n    try:\n        return self._parse(timestr, ignoretz, tzinfos)\n    except ValueError:\n        return default\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string\n    \"\"\"\n    tokens = self._parse_numeric(timestr)\n    if tokens is None:\n        return default\n\n    hms = self._assign_hms(tokens, default)\n    if hms is None:\n        return default\n\n    if ignoretz and hms.tzname() == 'UTC':\n        hms = hms.replace(tzinfo=None)\n\n    res = self._ampm_valid(hms, **kwargs)\n    if res is None:\n        return self._parse_numeric(timestr)\n    else:\n        return res\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string using local time\n    \"\"\"\n    if not tzinfos:\n        tzinfos = self.info.get('tzinfos', {})\n    if ignoretz and not timestr.endswith('Z'):\n        timestr += 'Z'\n    result = self._parse(timestr, default, **kwargs)\n    if result is None:\n        return default\n    elif tzinfos and self._assign_tzname:\n        result = self._assign_tzname(result, tzinfos)\n    return result\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"parse(timestr, default=None,\n                   ignoretz=False, tzinfos=None, **kwargs)\n    \n    parse(timestr, default=None,\n               ignoretz=False, tzinfos=None, **kwargs)\n        -> object\n\n    Parse a string and return a datetime object.\n\n    This function assumes that the input string is valid and\n    could be parsed by any of the 3 grammars:\n\n        - parse('%H:%M', '12:34', 'h:mm')\n        - parse('%H:%M', '12:34', 'h:mm', tzinfo='US/Eastern')\n        - parse('%H:%M', '12:34', 'h:mm', tzinfo='US/Eastern', tzinfos='US/Eastern')\n    \"\"\"\n    if ignoretz:\n        self._build_tzaware(naive=False, **kwargs)\n    else:\n        self._build_tzinfo(tzinfos, kwargs)\n\n    return self._parse(timestr, **kwargs)\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string and return a datetime object.\n    \"\"\"\n    if tzinfos is None:\n        tzinfos = []\n    if self._ampm_valid(**kwargs):\n        hms = self._parse_hms(idx=None, tokens=timestr.split(),\n                               info=self.info,\n                               hms_idx=self._ampm_idx)\n        res = self._parse_numeric(val=hms, tokens=timestr.split(),\n                                  info=self.info,\n                                  hms_idx=self._ampm_idx)\n    else:\n        res = super(AMPMixin, self).parse(timestr, default,\n                                          ignoretz, tzinfos, **kwargs)\n    return res\n", "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the given time string.  Default is to assume UTC if no\n    timezone is given.\n    \"\"\"\n    if not timestr:\n        return default\n\n    if self._ampm_valid:\n        res = self._parse_hms(idx=0, tokens=self._parse_hms(idx=0,\n                                                             tokens=timestr,\n                                                             info=self.info,\n                                                             hms_idx=0),\n                               info=self.info,\n                               hms_idx=0)\n    else:\n        res = self._parse_numeric(timestr, **kwargs)\n    return"], "level": "project_runnable", "generate_results": [{"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string time values\n    \"\"\"\n    if ignoretz and timestr.endswith('Z'):\n        timestr = timestr[:-1]\n        tzinfos = ()\n\n    if tzinfos is None:\n        tzinfos = self._ampm_valid\n\n    res = self._parse(timestr, **kwargs)\n    if self._could_be_tzname(res):\n        return res\n\n    if res is None:\n        return default\n\n    return self._assign_tzname(res, tzinfos, tzinfos)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string with time information.\n    \"\"\"\n    if not timestr:\n        return default\n    return self._parse(timestr, ignoretz, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string `timestr` according to rules defined in the `rules`\n    attribute of this class.\n    \"\"\"\n    if self._ampm_valid and ignoretz and timestr.count('+') == 1:\n        # No tzinfo means no timezone information\n        timestr = timestr.replace('+', '')\n    if not tzinfos:\n        tzinfos = self.info.get('timezone', None)\n    res = self._parse(timestr, **kwargs)\n    if tzinfos:\n        res = res.tzinfo if res else None\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string using the current locale context.\n    \"\"\"\n    return self._parse(timestr, ignoretz, **kwargs).replace(\n        tzinfo=self.info.get('tzinfo', None) or default)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string and return a :class:`datetime.datetime` object\n    or ``None`` if the parse fails.\n    \"\"\"\n    try:\n        return self._parse(timestr, ignoretz, tzinfos)\n    except ValueError:\n        return default\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string\n    \"\"\"\n    tokens = self._parse_numeric(timestr)\n    if tokens is None:\n        return default\n\n    hms = self._assign_hms(tokens, default)\n    if hms is None:\n        return default\n\n    if ignoretz and hms.tzname() == 'UTC':\n        hms = hms.replace(tzinfo=None)\n\n    res = self._ampm_valid(hms, **kwargs)\n    if res is None:\n        return self._parse_numeric(timestr)\n    else:\n        return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse string using local time\n    \"\"\"\n    if not tzinfos:\n        tzinfos = self.info.get('tzinfos', {})\n    if ignoretz and not timestr.endswith('Z'):\n        timestr += 'Z'\n    result = self._parse(timestr, default, **kwargs)\n    if result is None:\n        return default\n    elif tzinfos and self._assign_tzname:\n        result = self._assign_tzname(result, tzinfos)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"parse(timestr, default=None,\n                   ignoretz=False, tzinfos=None, **kwargs)\n    \n    parse(timestr, default=None,\n               ignoretz=False, tzinfos=None, **kwargs)\n        -> object\n\n    Parse a string and return a datetime object.\n\n    This function assumes that the input string is valid and\n    could be parsed by any of the 3 grammars:\n\n        - parse('%H:%M', '12:34', 'h:mm')\n        - parse('%H:%M', '12:34', 'h:mm', tzinfo='US/Eastern')\n        - parse('%H:%M', '12:34', 'h:mm', tzinfo='US/Eastern', tzinfos='US/Eastern')\n    \"\"\"\n    if ignoretz:\n        self._build_tzaware(naive=False, **kwargs)\n    else:\n        self._build_tzinfo(tzinfos, kwargs)\n\n    return self._parse(timestr, **kwargs)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse a string and return a datetime object.\n    \"\"\"\n    if tzinfos is None:\n        tzinfos = []\n    if self._ampm_valid(**kwargs):\n        hms = self._parse_hms(idx=None, tokens=timestr.split(),\n                               info=self.info,\n                               hms_idx=self._ampm_idx)\n        res = self._parse_numeric(val=hms, tokens=timestr.split(),\n                                  info=self.info,\n                                  hms_idx=self._ampm_idx)\n    else:\n        res = super(AMPMixin, self).parse(timestr, default,\n                                          ignoretz, tzinfos, **kwargs)\n    return res\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse(self, timestr, default=None,\n              ignoretz=False, tzinfos=None, **kwargs):\n    \"\"\"\n    Parse the given time string.  Default is to assume UTC if no\n    timezone is given.\n    \"\"\"\n    if not timestr:\n        return default\n\n    if self._ampm_valid:\n        res = self._parse_hms(idx=0, tokens=self._parse_hms(idx=0,\n                                                             tokens=timestr,\n                                                             info=self.info,\n                                                             hms_idx=0),\n                               info=self.info,\n                               hms_idx=0)\n    else:\n        res = self._parse_numeric(timestr, **kwargs)\n    return", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/tz/_common.py", "project": "pexip/os-python-dateutil", "name": "fromutc", "docstring": "Given a timezone-aware datetime in a given timezone, calculates a\ntimezone-aware datetime in a new timezone.\n\nSince this is the one time that we *know* we have an unambiguous\ndatetime object, we take this opportunity to determine whether the\ndatetime is ambiguous and in a \"fold\" state (e.g. if it's the first\noccurrence, chronologically, of the ambiguous datetime).\n\n:param dt:\n    A timezone-aware :class:`datetime.datetime` object.", "ques_id": "62b8a4a4755ee91dce50a3d3", "code": ["def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fold(dt)\n", "def fromutc(self, dt):\n    return self._fromutc(dt)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fold(dt)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fromutc(self, dt):\n    return self._fromutc(dt)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "dateutil/utils.py", "project": "pexip/os-python-dateutil", "name": "default_tzinfo", "docstring": "Sets the ``tzinfo`` parameter on naive datetimes only\n\nThis is useful for example when you are provided a datetime that may have\neither an implicit or explicit time zone, such as when parsing a time zone\nstring.\n\n.. doctest::\n\n    >>> from dateutil.tz import tzoffset\n    >>> from dateutil.parser import parse\n    >>> from dateutil.utils import default_tzinfo\n    >>> dflt_tz = tzoffset(\"EST\", -18000)\n    >>> print(default_tzinfo(parse('2014-01-01 12:30 UTC'), dflt_tz))\n    2014-01-01 12:30:00+00:00\n    >>> print(default_tzinfo(parse('2014-01-01 12:30'), dflt_tz))\n    2014-01-01 12:30:00-05:00\n\n:param dt:\n    The datetime on which to replace the time zone\n\n:param tzinfo:\n    The :py:class:`datetime.tzinfo` subclass instance to assign to\n    ``dt`` if (and only if) it is naive.\n\n:return:\n    Returns an aware :py:class:`datetime.datetime`.", "ques_id": "62b8a7b2755ee91dce50a4a7", "code": ["def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    return dt.tzinfo.localize(tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is not None:\n        return dt.tzinfo\n    return tzinfo\n", "def default_tzinfo(dt, tzinfo):\n    \"\\x00\"\n", "def default_tzinfo(dt, tzinfo):\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    '''\n    '''\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    \" in\"\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    return dt\n", "def default_tzinfo(dt, tzinfo):\n    \"\\x00\"\n    if hasattr(dt, 'tzinfo'):\n        return dt.tzinfo\n    if tzinfo is not None:\n        return tzinfo\n    return dt.tzinfo\n", "def default_tzinfo(dt, tzinfo):\n    '''\n    @todo: tzinfo should be a FixedOffset instance\n    '''\n    return FixedOffset(tzinfo.offset(dt).seconds * 3600, tzinfo)\n", "def default_tzinfo(dt, tzinfo):\n    return dt\n"], "level": "self_contained", "generate_results": [{"generate_code": "def default_tzinfo(dt, tzinfo):\n    if tzinfo is None:\n        return dt\n    return dt.tzinfo.localize(tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    if dt.tzinfo is not None:\n        return dt.tzinfo\n    return tzinfo\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    \"\\x00\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    '''\n    '''\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    \" in\"\n    if isinstance(dt, datetime.datetime):\n        return dt.replace(tzinfo=tzinfo)\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    \"\\x00\"\n    if hasattr(dt, 'tzinfo'):\n        return dt.tzinfo\n    if tzinfo is not None:\n        return tzinfo\n    return dt.tzinfo\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    '''\n    @todo: tzinfo should be a FixedOffset instance\n    '''\n    return FixedOffset(tzinfo.offset(dt).seconds * 3600, tzinfo)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def default_tzinfo(dt, tzinfo):\n    return dt\n", "is_pass": false, "return_code": 1}]}
{"file_path": "src/lithium/testcases.py", "project": "MozillaSecurity/lithium", "name": "set_cut_chars", "docstring": "Set the bytes used to delimit slice points.\n\nArgs:\n    before: Split file before these delimiters.\n    after: Split file after these delimiters.", "ques_id": "6305f9991d275c6667163c50", "code": ["def set_cut_chars(self, before: str, after: str) -> None:\n    if before is None:\n        before = ''\n    if after is None:\n        after = ''\n    self.cut_before = before\n    self.cut_after = after\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter.set_delimiter(before)\n    self._cutter.set_delimiter(after)\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_before = before\n    self.cut_after = after\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = f'{before}{after}'\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "def set_cut_chars(self, before: str ='', after: str ='') -> None:\n    self.cut_chars = before + ',' + after + ','\n", "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = slice(*[int(c) for c in before.split(self.parts)])\n    self._cutter.stop = slice(*[int(c) for c in after.split(self.parts)])\n", "def set_cut_chars(self, before: str, after: str):\n    self.cut_before = before\n    self.cut_after = after\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    if before is None:\n        before = ''\n    if after is None:\n        after = ''\n    self.cut_before = before\n    self.cut_after = after\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter.set_delimiter(before)\n    self._cutter.set_delimiter(after)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_before = before\n    self.cut_after = after\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = f'{before}{after}'\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self.cut_chars = (before, after)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def set_cut_chars(self, before: str ='', after: str ='') -> None:\n    self.cut_chars = before + ',' + after + ','\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str) -> None:\n    self._cutter = slice(*[int(c) for c in before.split(self.parts)])\n    self._cutter.stop = slice(*[int(c) for c in after.split(self.parts)])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def set_cut_chars(self, before: str, after: str):\n    self.cut_before = before\n    self.cut_after = after\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/protocols/diaspora/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Diaspora request.\n\nTry first public message. Then private message. The check if this is a legacy payload.", "ques_id": "6306292052e177c0ba469f09", "code": ["def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return bool(request['XML'].tag)\n    except KeyError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identifying request body\")\n    return request.body and request.body.tag == MAGIC_ENV_TAG\n", "def identify_request(request: Request) -> bool:\n    try:\n        return request.json and len(request.json) > 0 and \\\n               identify_id(request.json.get(MAGIC_ENV_TAG))\n    except Exception:\n        return False\n", "def identify_request(request: dict) -> bool:\n    if request.get(\"xml\"):\n        return True\n    elif \"request\" in request and request[\"request\"].get(\"tag\") == MAGIC_ENV_TAG:\n        return True\n    return False\n", "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identify request\")\n    if request.body:\n        logger.debug(\"Request body is {}\".format(request.body))\n        return request.body == MAGIC_ENV_TAG\n    else:\n        return False\n", "def identify_request(request: Request) -> bool:\n    try:\n        return request.json() is not None and \\\n               len(request.json()) > 0 and \\\n               IDENTIFY_TAG in request.json()[0]\n    except Exception:\n        logger.exception(\"Request body not loaded.\")\n        return False\n", "def identify_request(request: Request) -> bool:\n    logger.info(\"Identifying events from request body.\")\n    return (\n        \"events\" in request.json and\n        \"magic_env\" not in request.json and\n        \"event_type\" not in request.json and\n        \"event_id\" not in request.json and\n        \"event_payload\" not in request.json\n    )\n", "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identifying events from request\")\n    return (\"events\" in request.json and\n            \"magic\" in request.json and\n            \"service\" in request.json and\n            identify_id(request.json[\"events\"][0][\"id\"]) is not None)\n", "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request.body, dict)\n        and request.body.get(\"events\")\n        and identify_id(request.body.get(\"events\"))\n    )\n", "def identify_request(request: Request) -> bool:\n    try:\n        events = json.loads(request.data)\n    except Exception as ex:\n        logger.error('Error parsing request body %s', ex)\n        return False\n\n    return (\n        'events' in events and\n        len(events['events']) > 0 and\n        identify_id(events['events'][0]['id'])\n    )\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    try:\n        return bool(request['XML'].tag)\n    except KeyError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identifying request body\")\n    return request.body and request.body.tag == MAGIC_ENV_TAG\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        return request.json and len(request.json) > 0 and \\\n               identify_id(request.json.get(MAGIC_ENV_TAG))\n    except Exception:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: dict) -> bool:\n    if request.get(\"xml\"):\n        return True\n    elif \"request\" in request and request[\"request\"].get(\"tag\") == MAGIC_ENV_TAG:\n        return True\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identify request\")\n    if request.body:\n        logger.debug(\"Request body is {}\".format(request.body))\n        return request.body == MAGIC_ENV_TAG\n    else:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        return request.json() is not None and \\\n               len(request.json()) > 0 and \\\n               IDENTIFY_TAG in request.json()[0]\n    except Exception:\n        logger.exception(\"Request body not loaded.\")\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    logger.info(\"Identifying events from request body.\")\n    return (\n        \"events\" in request.json and\n        \"magic_env\" not in request.json and\n        \"event_type\" not in request.json and\n        \"event_id\" not in request.json and\n        \"event_payload\" not in request.json\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    logger.debug(\"Identifying events from request\")\n    return (\"events\" in request.json and\n            \"magic\" in request.json and\n            \"service\" in request.json and\n            identify_id(request.json[\"events\"][0][\"id\"]) is not None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return (\n        isinstance(request.body, dict)\n        and request.body.get(\"events\")\n        and identify_id(request.body.get(\"events\"))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        events = json.loads(request.data)\n    except Exception as ex:\n        logger.error('Error parsing request body %s', ex)\n        return False\n\n    return (\n        'events' in events and\n        len(events['events']) > 0 and\n        identify_id(events['events'][0]['id'])\n    )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/matrix/protocol.py", "project": "jaywink/federation", "name": "identify_request", "docstring": "Try to identify whether this is a Matrix request", "ques_id": "6306292152e177c0ba469f0d", "code": ["def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and request.content_length is not None\n", "def identify_request(request: Request) -> bool:\n    return isinstance(request.json, list) and len(request.json) > 0\n", "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('events') is not None\n", "def identify_request(request: Request) -> bool:\n    return request.content.decode('utf-8')!= ''\n", "def identify_request(request: Request) -> bool:\n    return 'events' in request.json and request.json['events'] is not None\n", "def identify_request(request: Request) -> bool:\n    try:\n        request_body = request.json()\n    except json.decoder.JSONDecodeError:\n        return False\n    return request_body is not None\n", "def identify_request(request: Request) -> bool:\n    try:\n        request.json()\n        return True\n    except ValueError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    try:\n        request_body = request.json()\n        return request_body is not None\n    except ValueError:\n        return False\n", "def identify_request(request: Request) -> bool:\n    try:\n        request_json = request.json()\n    except ValueError:\n        return False\n\n    return 'events' in request_json\n", "def identify_request(request: Request) -> bool:\n    try:\n        request.json\n        return True\n    except ValueError:\n        return False\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def identify_request(request: Request) -> bool:\n    return request.method == \"POST\" and request.content_length is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return isinstance(request.json, list) and len(request.json) > 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Dict[str, Any]) -> bool:\n    return request.get('events') is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return request.content.decode('utf-8')!= ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    return 'events' in request.json and request.json['events'] is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        request_body = request.json()\n    except json.decoder.JSONDecodeError:\n        return False\n    return request_body is not None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        request.json()\n        return True\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        request_body = request.json()\n        return request_body is not None\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        request_json = request.json()\n    except ValueError:\n        return False\n\n    return 'events' in request_json\n", "is_pass": false, "return_code": 1}, {"generate_code": "def identify_request(request: Request) -> bool:\n    try:\n        request.json\n        return True\n    except ValueError:\n        return False\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/utils.py", "project": "jaywink/federation", "name": "format_dt", "docstring": "Format a datetime in the way that D* nodes expect.", "ques_id": "6306292252e177c0ba469f11", "code": ["def format_dt(dt):\n    return ensure_timezone(dt.astimezone(get_current_timezone()))\n", "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%Y-%m-%d %H:%M:%S')\n", "def format_dt(dt):\n    if dt.tzinfo:\n        dt = ensure_timezone(dt)\n    return dt.strftime('%Y-%m-%d %H:%M %z')\n", "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(get_localzone())).isoformat()\n", "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%Y-%m-%dT%H:%M:%SZ')\n", "def format_dt(dt):\n    return ensure_timezone(dt).strftime(\"%H:%M\")\n", "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%H:%M')\n", "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(pytz.utc)).strftime('%Y-%m-%d %H:%M')\n", "def format_dt(dt):\n    if dt.tzinfo:\n        return ensure_timezone(dt).strftime('%H:%M:%S %z')\n    else:\n        return ensure_timezone(dt).strftime('%H:%M:%S')\n", "def format_dt(dt):\n    return ensure_timezone(dt.astimezone())\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(get_current_timezone()))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%Y-%m-%d %H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo:\n        dt = ensure_timezone(dt)\n    return dt.strftime('%Y-%m-%d %H:%M %z')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(get_localzone())).isoformat()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%Y-%m-%dT%H:%M:%SZ')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt).strftime(\"%H:%M\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt).strftime('%H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt.astimezone(pytz.utc)).strftime('%Y-%m-%d %H:%M')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    if dt.tzinfo:\n        return ensure_timezone(dt).strftime('%H:%M:%S %z')\n    else:\n        return ensure_timezone(dt).strftime('%H:%M:%S')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def format_dt(dt):\n    return ensure_timezone(dt.astimezone())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "find_tags", "docstring": "Find tags in text.\n\nTries to ignore tags inside code blocks.\n\nOptionally, if passed a \"replacer\", will also replace the tag word with the result\nof the replacer function called with the tag word.\n\nReturns a set of tags and the original or replaced text.", "ques_id": "6306292352e177c0ba469f1d", "code": ["def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        decode_if_bytes(tag)\n        for tag in find_tags_iter(text)\n        if (replacer is None or replacer(tag))\n    )\n", "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags(), replacer(finder.get_body())\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if not text:\n        return set()\n\n    def replacer_or_str(match: Match) -> str:\n        return replacer(match.group(0))\n\n    def encode_if_text(match: Match) -> str:\n        return encode_if_bytes(match.group(0))\n\n    pattern = r'(?<!\\\\)(?P<tag>(?:(?:(?:\\\\[^\\\\])|(?:(?:(?:\\\\(?:\\\\(?:)|(?:(?:[^\\\\])|(?:[^\\\\])))\\\\)))\\\\(?:(?:[^\\\\])|(?:[^\\\\]))))?))'\n    replacer_pattern = re.compile(pattern, re.UNICODE | re.MULTILINE)\n    found_tags = replacer_pattern.findall(text)\n\n    if replacer_or_str is not None:\n        found_tags = set(replacer_or_str(match) for match in found_tags)\n\n    return found_tags\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    handle = find_tags(text, replacer)\n    try:\n        text = handle.read()\n    except AttributeError:\n        pass\n    return process_text_links(text), handle.name\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    url = get_path_from_url(text)\n\n    if url is None:\n        return set()\n\n    tags = set()\n    for match in re.finditer(r\"(?i)(\\[\\[(.*?)\\]\\])\", text, flags=re.UNICODE):\n        tag = match.group(1)\n        if replacer is not None:\n            tag = replacer(tag)\n        tags.add(tag)\n\n    return tags\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    if text is None:\n        return {}, \"\"\n\n    def ignore_code(match):\n        return match.group(1) not in ILLEGAL_TAG_CHARS\n\n    def replacer(match):\n        return replacer(match.group(0))\n\n    ignore_code_matches = find_tags(text, ignore_code)\n    return {match.group(0) for match in ignore_code_matches}, text.replace(\"</code>\", \"</code><pre>\").replace(\"</pre>\", \"</pre><code>\")\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        decode_if_bytes(tag) if isinstance(tag, bytes) else tag\n        for tag in find_tags_iter(text, replacer)\n    )\n", "def find_tags(text: str, replacer=None) -> Set[str]:\n    if replacer is None:\n        return set([])\n\n    def repl(match):\n        return replacer(match.group(1))\n\n    return re.sub(ILLEGAL_TAG_CHARS, repl, text)\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    # Try to find all code blocks\n    try:\n        text = re.sub(r\"<!--[\\s\\S]*-->\", \"\", text)\n    except TypeError:\n        pass\n\n    # Try to find all tags inside code\n    try:\n        text = re.sub(r\"<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\", \"\", text)\n    except TypeError:\n        pass\n\n    # Try to find all tags with regex\n    try:\n        text = re.sub(r\"<!\\[\\[(.*?)\\]\\]>\", replacer, text)\n    except TypeError:\n        pass\n\n    return find_tags(text, replacer)\n", "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    text = decode_if_bytes(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags()\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        decode_if_bytes(tag)\n        for tag in find_tags_iter(text)\n        if (replacer is None or replacer(tag))\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags(), replacer(finder.get_body())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    if not text:\n        return set()\n\n    def replacer_or_str(match: Match) -> str:\n        return replacer(match.group(0))\n\n    def encode_if_text(match: Match) -> str:\n        return encode_if_bytes(match.group(0))\n\n    pattern = r'(?<!\\\\)(?P<tag>(?:(?:(?:\\\\[^\\\\])|(?:(?:(?:\\\\(?:\\\\(?:)|(?:(?:[^\\\\])|(?:[^\\\\])))\\\\)))\\\\(?:(?:[^\\\\])|(?:[^\\\\]))))?))'\n    replacer_pattern = re.compile(pattern, re.UNICODE | re.MULTILINE)\n    found_tags = replacer_pattern.findall(text)\n\n    if replacer_or_str is not None:\n        found_tags = set(replacer_or_str(match) for match in found_tags)\n\n    return found_tags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    handle = find_tags(text, replacer)\n    try:\n        text = handle.read()\n    except AttributeError:\n        pass\n    return process_text_links(text), handle.name\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    url = get_path_from_url(text)\n\n    if url is None:\n        return set()\n\n    tags = set()\n    for match in re.finditer(r\"(?i)(\\[\\[(.*?)\\]\\])\", text, flags=re.UNICODE):\n        tag = match.group(1)\n        if replacer is not None:\n            tag = replacer(tag)\n        tags.add(tag)\n\n    return tags\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    text = decode_if_bytes(text)\n    if text is None:\n        return {}, \"\"\n\n    def ignore_code(match):\n        return match.group(1) not in ILLEGAL_TAG_CHARS\n\n    def replacer(match):\n        return replacer(match.group(0))\n\n    ignore_code_matches = find_tags(text, ignore_code)\n    return {match.group(0) for match in ignore_code_matches}, text.replace(\"</code>\", \"</code><pre>\").replace(\"</pre>\", \"</pre><code>\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    return set(\n        decode_if_bytes(tag) if isinstance(tag, bytes) else tag\n        for tag in find_tags_iter(text, replacer)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer=None) -> Set[str]:\n    if replacer is None:\n        return set([])\n\n    def repl(match):\n        return replacer(match.group(1))\n\n    return re.sub(ILLEGAL_TAG_CHARS, repl, text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Tuple[Set[str], str]:\n    # Try to find all code blocks\n    try:\n        text = re.sub(r\"<!--[\\s\\S]*-->\", \"\", text)\n    except TypeError:\n        pass\n\n    # Try to find all tags inside code\n    try:\n        text = re.sub(r\"<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\", \"\", text)\n    except TypeError:\n        pass\n\n    # Try to find all tags with regex\n    try:\n        text = re.sub(r\"<!\\[\\[(.*?)\\]\\]>\", replacer, text)\n    except TypeError:\n        pass\n\n    return find_tags(text, replacer)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def find_tags(text: str, replacer: Callable[[str], str] = None) -> Set[str]:\n    text = decode_if_bytes(text)\n    finder = TagFinder()\n    finder.feed(text)\n    return finder.get_tags()\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "process_text_links", "docstring": "Process links in text, adding some attributes and linkifying textual links.", "ques_id": "6306292352e177c0ba469f1e", "code": ["def process_text_links(text):\n    text = linkify(text)\n    text = remove_html_links(text)\n    return text\n", "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=True,\n        strip_comments=True,\n    )\n\n    return text\n", "def process_text_links(text):\n    linkify_text = bleach.linkify(text, **linkify_options)\n\n    return linkify_text\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    text = linkify(text)\n    text = add_images(text)\n    text = remove_html(text)\n    return text\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "def process_text_links(text):\n    linkified = bleach.linkify(text,\n                                output_format='html',\n                                quote=True,\n                                strip_comments=True,\n                                remove_anchors=True,\n                                encoding='utf8',\n                                allow_images=True,\n                                allow_emails=True,\n                                allow_favicon=True,\n                                extra_params={'rel':'stylesheet'})\n\n    return linkified\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = remove_html_links(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = bleach.clean(\n        text,\n        tags=ALLOWED_TAGS,\n        attributes=ALLOWED_ATTRIBUTES,\n        linkify=True,\n        strip_comments=True,\n    )\n\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkify_text = bleach.linkify(text, **linkify_options)\n\n    return linkify_text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    text = linkify(text)\n    text = add_images(text)\n    text = remove_html(text)\n    return text\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linker = Linker()\n    return linker.linkify(text)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def process_text_links(text):\n    linkified = bleach.linkify(text,\n                                output_format='html',\n                                quote=True,\n                                strip_comments=True,\n                                remove_anchors=True,\n                                encoding='utf8',\n                                allow_images=True,\n                                allow_emails=True,\n                                allow_favicon=True,\n                                extra_params={'rel':'stylesheet'})\n\n    return linkified\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "fetch_content_type", "docstring": "Fetch the HEAD of the remote url to determine the content type.", "ques_id": "6306292652e177c0ba469f34", "code": ["def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url=url, headers={'User-Agent': USER_AGENT})\n    except RequestException as e:\n        raise RequestFailure(str(e))\n\n    return response.headers.get('content-type')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    except (requests.ConnectionError, requests.Timeout):\n        logger.error(\"ConnectionError or Timeout\")\n        return None\n    if response.status_code!= 200:\n        logger.error(\"Request to {} failed with status code {}\".format(url, response.status_code))\n        return None\n    return response.headers[\"Content-Type\"]\n", "def fetch_content_type(url: str) -> str:\n    # First, parse the HTML and return the type of the response.\n    html = requests.get(url)\n    if html.status_code == 200:\n        return parse_http_date(html.headers['content-type'])\n    else:\n        return ''\n", "def fetch_content_type(url: str) -> str:\n    # try retrieve the content type from the URL\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n        content_type = response.headers[\"content-type\"]\n    except Exception:\n        # we don't know what the content type is, try retrieving it from the URL\n        try:\n            response = requests.get(url)\n            content_type = response.headers[\"content-type\"]\n        except Exception:\n            # we don't know what the content type is, try retrieving it from the URL\n            content_type = \"\"\n\n    # return the parsed content type without quotes (so that it is a string)\n    return content_type.strip('\"')\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n        return response.headers[\"content-type\"]\n    except Exception as e:\n        logger.error(\"Failed to retrieve content type for %s. %s\", url, e)\n        return None\n", "def fetch_content_type(url: str) -> str:\n    response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    return response.headers[\"Content-Type\"]\n", "def fetch_content_type(url: str) -> str:\n    parsed_url = urlparse(url)\n    headers = {\n        'User-Agent': USER_AGENT,\n        'Accept': '*/*',\n        'Accept-Encoding': ', '.join(ACCEPT_ENCODINGS),\n        'Accept-Language': 'en-US,en;q=0.5',\n    }\n\n    if parsed_url.username and parsed_url.password:\n        headers['Authorization'] = 'Basic'+ parsed_url.username + ':' + parsed_url.password\n\n    return parsed_url.geturl().replace(parsed_url.path, '', 1), headers\n", "def fetch_content_type(url: str) -> str:\n    logger.info(\"Fetching content type from: %s\", url)\n    response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    response.raise_for_status()\n    return response.headers[\"Content-Type\"]\n", "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    except requests.exceptions.RequestException as exc:\n        raise FetchError('Failed to fetch {}'.format(exc)) from exc\n    if response.status_code!= 200:\n        raise FetchError('Failed to fetch {}'.format(response.status_code))\n    return response.headers['content-type']\n", "def fetch_content_type(url: str) -> str:\n    content_type = urllib.request.Request(url)\n    content_type = content_type.get_method()\n\n    if \"Content-Type\" in content_type:\n        return content_type\n\n    if USER_AGENT == \"\":\n        raise NotImplementedError(\"Cannot determine Content-Type header.\")\n\n    return USER_AGENT + \" \" + content_type\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url=url, headers={'User-Agent': USER_AGENT})\n    except RequestException as e:\n        raise RequestFailure(str(e))\n\n    return response.headers.get('content-type')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    except (requests.ConnectionError, requests.Timeout):\n        logger.error(\"ConnectionError or Timeout\")\n        return None\n    if response.status_code!= 200:\n        logger.error(\"Request to {} failed with status code {}\".format(url, response.status_code))\n        return None\n    return response.headers[\"Content-Type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    # First, parse the HTML and return the type of the response.\n    html = requests.get(url)\n    if html.status_code == 200:\n        return parse_http_date(html.headers['content-type'])\n    else:\n        return ''\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    # try retrieve the content type from the URL\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n        content_type = response.headers[\"content-type\"]\n    except Exception:\n        # we don't know what the content type is, try retrieving it from the URL\n        try:\n            response = requests.get(url)\n            content_type = response.headers[\"content-type\"]\n        except Exception:\n            # we don't know what the content type is, try retrieving it from the URL\n            content_type = \"\"\n\n    # return the parsed content type without quotes (so that it is a string)\n    return content_type.strip('\"')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n        return response.headers[\"content-type\"]\n    except Exception as e:\n        logger.error(\"Failed to retrieve content type for %s. %s\", url, e)\n        return None\n", "is_pass": true, "return_code": 0}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    return response.headers[\"Content-Type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    parsed_url = urlparse(url)\n    headers = {\n        'User-Agent': USER_AGENT,\n        'Accept': '*/*',\n        'Accept-Encoding': ', '.join(ACCEPT_ENCODINGS),\n        'Accept-Language': 'en-US,en;q=0.5',\n    }\n\n    if parsed_url.username and parsed_url.password:\n        headers['Authorization'] = 'Basic'+ parsed_url.username + ':' + parsed_url.password\n\n    return parsed_url.geturl().replace(parsed_url.path, '', 1), headers\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    logger.info(\"Fetching content type from: %s\", url)\n    response = requests.get(url, headers={\"User-Agent\": USER_AGENT})\n    response.raise_for_status()\n    return response.headers[\"Content-Type\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    try:\n        response = requests.get(url, headers={'User-Agent': USER_AGENT})\n    except requests.exceptions.RequestException as exc:\n        raise FetchError('Failed to fetch {}'.format(exc)) from exc\n    if response.status_code!= 200:\n        raise FetchError('Failed to fetch {}'.format(response.status_code))\n    return response.headers['content-type']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def fetch_content_type(url: str) -> str:\n    content_type = urllib.request.Request(url)\n    content_type = content_type.get_method()\n\n    if \"Content-Type\" in content_type:\n        return content_type\n\n    if USER_AGENT == \"\":\n        raise NotImplementedError(\"Cannot determine Content-Type header.\")\n\n    return USER_AGENT + \" \" + content_type\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/text.py", "project": "jaywink/federation", "name": "test_tag", "docstring": "Test a word whether it could be accepted as a tag.", "ques_id": "6306292a52e177c0ba469f41", "code": ["def test_tag(tag: str) -> bool:\n    return any(char in tag for char in ILLEGAL_TAG_CHARS)\n", "def test_tag(tag: str) -> bool:\n    return any([tag in character.lower() for character in ILLEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag.find(c) >= 0 for c in ILLEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag.find(char)!= -1 for char in LEEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag in char for char in LEEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag in char.lower() for char in ILLEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n", "def test_tag(tag: str) -> bool:\n    return any((char in tag) for char in ILLEGAL_TAG_CHARS)\n", "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def test_tag(tag: str) -> bool:\n    return any(char in tag for char in ILLEGAL_TAG_CHARS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag in character.lower() for character in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag.find(c) >= 0 for c in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag.find(char)!= -1 for char in LEEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag in char for char in LEEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag in char.lower() for char in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any((char in tag) for char in ILLEGAL_TAG_CHARS)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def test_tag(tag: str) -> bool:\n    return any([tag.startswith(char) for char in ILLEGAL_TAG_CHARS])\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "xml_children_as_dict", "docstring": "Turn the children of node <xml> into a dict, keyed by tag name.\n\nThis is only a shallow conversation - child nodes are not recursively processed.", "ques_id": "6306298b52e177c0ba469fdc", "code": ["def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    return {child.tag: child.text for child in children}\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.getchildren()\n    result = {}\n    for child in children:\n        tag = child.tag\n        result[tag] = child.text if child.text is not None else \"\"\n    return result\n", "def xml_children_as_dict(node):\n    result = {}\n    for child in node:\n        tag = child.tag\n        result[tag] = child.text\n    return result\n", "def xml_children_as_dict(node):\n    children = {}\n    for child in node:\n        tag = child.tag\n        children[tag] = child\n    return children\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    d = {}\n    for child in node:\n        d[child.tag] = child.text\n    return d\n", "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "def xml_children_as_dict(node):\n    children = node.xpath(\".//*\")\n    return {child.tag: child.text for child in children}\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    return {child.tag: child.text for child in children}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.getchildren()\n    result = {}\n    for child in children:\n        tag = child.tag\n        result[tag] = child.text if child.text is not None else \"\"\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def xml_children_as_dict(node):\n    result = {}\n    for child in node:\n        tag = child.tag\n        result[tag] = child.text\n    return result\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = {}\n    for child in node:\n        tag = child.tag\n        children[tag] = child\n    return children\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    d = {}\n    for child in node:\n        d[child.tag] = child.text\n    return d\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    return {child.tag: child.text for child in node}\n", "is_pass": true, "return_code": 0}, {"generate_code": "def xml_children_as_dict(node):\n    children = node.xpath(\".//*\")\n    return {child.tag: child.text for child in children}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/entities/diaspora/mappers.py", "project": "jaywink/federation", "name": "check_sender_and_entity_handle_match", "docstring": "Ensure that sender and entity handles match.\n\nBasically we've already verified the sender is who they say when receiving the payload. However, the sender might\nbe trying to set another author in the payload itself, since Diaspora has the sender in both the payload headers\nAND the object. We must ensure they're the same.", "ques_id": "6306299052e177c0ba469fe8", "code": ["def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_handle_is_equal = False\n\n    if sender_handle == entity_handle:\n        sender_handle_is_equal = True\n\n    if sender_handle_is_equal:\n        logger.debug(\"Sender handle match for {}\".format(entity_handle))\n\n    return sender_handle_is_equal\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = entity_handle.attrib[TAGS[\"sender\"]]\n    sender = MAPPINGS.get(sender_key)\n    entity = MAPPINGS.get(entity_handle.attrib[TAGS[\"entity\"]])\n    return sender == entity_handle or sender == entity.handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = sender_handle.get('@id')\n    entity_key = entity_handle.get('@id')\n    sender_uri = sender_key.split('/')[0]\n    entity_uri = entity_key.split('/')[0]\n    sender_int_key = int(sender_key.split(':')[1])\n    entity_int_key = int(entity_key.split(':')[1])\n    if sender_int_key!= entity_int_key:\n        logger.warning(\n            'Sender handle does not match entity handle: %s vs %s',\n            sender_handle, entity_handle\n        )\n        return False\n    return True\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_handle_lower = sender_handle.lower()\n    entity_handle_lower = entity_handle.lower()\n\n    if sender_handle_lower == entity_handle_lower:\n        logger.info(\"Sender handle match ({})\".format(sender_handle_lower))\n        return True\n\n    logger.info(\"Received message from ({}) but sender handle ({}) is different ({}).\".format(\n        sender_handle_lower, entity_handle_lower, sender_handle_lower!= entity_handle_lower\n    ))\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = sender_handle.split(\"@\")[0]\n    entity_key = entity_handle.split(\"@\")[0]\n\n    if sender_key == entity_key:\n        return True\n\n    logger.debug(\n        \"Sender handle does not match entity handle (%s): %s!= %s\",\n        sender_key,\n        sender_handle,\n        entity_handle,\n    )\n\n    return False\n", "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    if sender_handle in entity_handle:\n        return True\n    if entity_handle in sender_handle:\n        return True\n    logger.debug('sender handle mismatch (%s) and entity handle mismatch (%s)',\n                 sender_handle, entity_handle)\n    return False\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_handle_is_equal = False\n\n    if sender_handle == entity_handle:\n        sender_handle_is_equal = True\n\n    if sender_handle_is_equal:\n        logger.debug(\"Sender handle match for {}\".format(entity_handle))\n\n    return sender_handle_is_equal\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = entity_handle.attrib[TAGS[\"sender\"]]\n    sender = MAPPINGS.get(sender_key)\n    entity = MAPPINGS.get(entity_handle.attrib[TAGS[\"entity\"]])\n    return sender == entity_handle or sender == entity.handle\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    return sender_handle == entity_handle\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = sender_handle.get('@id')\n    entity_key = entity_handle.get('@id')\n    sender_uri = sender_key.split('/')[0]\n    entity_uri = entity_key.split('/')[0]\n    sender_int_key = int(sender_key.split(':')[1])\n    entity_int_key = int(entity_key.split(':')[1])\n    if sender_int_key!= entity_int_key:\n        logger.warning(\n            'Sender handle does not match entity handle: %s vs %s',\n            sender_handle, entity_handle\n        )\n        return False\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_handle_lower = sender_handle.lower()\n    entity_handle_lower = entity_handle.lower()\n\n    if sender_handle_lower == entity_handle_lower:\n        logger.info(\"Sender handle match ({})\".format(sender_handle_lower))\n        return True\n\n    logger.info(\"Received message from ({}) but sender handle ({}) is different ({}).\".format(\n        sender_handle_lower, entity_handle_lower, sender_handle_lower!= entity_handle_lower\n    ))\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    sender_key = sender_handle.split(\"@\")[0]\n    entity_key = entity_handle.split(\"@\")[0]\n\n    if sender_key == entity_key:\n        return True\n\n    logger.debug(\n        \"Sender handle does not match entity handle (%s): %s!= %s\",\n        sender_key,\n        sender_handle,\n        entity_handle,\n    )\n\n    return False\n", "is_pass": true, "return_code": 0}, {"generate_code": "def check_sender_and_entity_handle_match(sender_handle, entity_handle):\n    if sender_handle == entity_handle:\n        return True\n    if sender_handle in entity_handle:\n        return True\n    if entity_handle in sender_handle:\n        return True\n    logger.debug('sender handle mismatch (%s) and entity handle mismatch (%s)',\n                 sender_handle, entity_handle)\n    return False\n", "is_pass": true, "return_code": 0}]}
{"file_path": "federation/hostmeta/generators.py", "project": "jaywink/federation", "name": "get_nodeinfo_well_known_document", "docstring": "Generate a NodeInfo .well-known document.\n\nSee spec: http://nodeinfo.diaspora.software\n\n:arg url: The full base url with protocol, ie https://example.com\n:arg document_path: Custom NodeInfo document path if supplied (optional)\n:returns: dict", "ques_id": "630629b952e177c0ba46a043", "code": ["def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = generate_nodeinfo2_document()\n\n    # Remove the path from the url.\n    url = url[7:]\n\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"nodeinfo\": nodeinfo\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or \"{}/{}\".format(url, DOCUMENT_NAME)\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or url\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    template = {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n\n    return generate_host_meta(template)\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n    return document\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = generate_nodeinfo2_document()\n    doc[\"url\"] = url\n    if document_path:\n        doc[\"document_path\"] = document_path\n    return doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = {\"url\": url}\n\n    if document_path is not None:\n        doc[\"document_path\"] = document_path\n\n    return doc\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        \"url\": url,\n        \"document_path\": document_path or \"\"\n    }\n\n    return result\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or get_nodeinfo_document_path(url),\n    }\n", "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo_dict = {\n        \"url\": url,\n        \"document_path\": document_path or \"\"\n    }\n    return nodeinfo_dict\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo = generate_nodeinfo2_document()\n\n    # Remove the path from the url.\n    url = url[7:]\n\n    return {\n        \"url\": url,\n        \"document_path\": document_path,\n        \"nodeinfo\": nodeinfo\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or \"{}/{}\".format(url, DOCUMENT_NAME)\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or url\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    template = {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n\n    return generate_host_meta(template)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    document = {\n        \"url\": url,\n        \"document_path\": document_path\n    }\n    return document\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = generate_nodeinfo2_document()\n    doc[\"url\"] = url\n    if document_path:\n        doc[\"document_path\"] = document_path\n    return doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    doc = {\"url\": url}\n\n    if document_path is not None:\n        doc[\"document_path\"] = document_path\n\n    return doc\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    result = {\n        \"url\": url,\n        \"document_path\": document_path or \"\"\n    }\n\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    return {\n        \"url\": url,\n        \"document_path\": document_path or get_nodeinfo_document_path(url),\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nodeinfo_well_known_document(url, document_path=None):\n    nodeinfo_dict = {\n        \"url\": url,\n        \"document_path\": document_path or \"\"\n    }\n    return nodeinfo_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/protocols/diaspora/signatures.py", "project": "jaywink/federation", "name": "verify_relayable_signature", "docstring": "Verify the signed XML elements to have confidence that the claimed\nauthor did actually generate this message.", "ques_id": "630629d052e177c0ba46a0a1", "code": ["def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "def verify_relayable_signature(public_key, doc, signature):\n    if signature is None:\n        return True\n    return crypto_sign_seal(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return\n\n    sig_alg, sig_key, sig_bits = signature\n    verifier = PKCS1_v1_5.new(sig_key)\n    if not verifier.verify(doc, signature):\n        raise SignatureMismatch()\n", "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.attrib['sig'] == signature\n        and doc.attrib['alg'] == 'RS256'\n        and public_key.verify_signature(signature, doc.text)\n    )\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    return _verify_sig(public_key, doc, signature)\n", "def verify_relayable_signature(public_key, doc, signature):\n    return True\n", "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, True)\n", "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.get('sig'):\n        return\n\n    sig = doc.get('sig')\n    sig_algorithm = doc.get('sigalg')\n\n    if not signature:\n        raise Exception('No signature provided')\n\n    digestmod = get_digest_module(sig_algorithm)\n    if digestmod is None:\n        raise Exception('Unknown signature algorithm')\n\n    if not len(sig) == len(signature):\n        raise Exception('Wrong signature length')\n\n    rsa_key = RSA.importKey(public_key)\n\n    # Convert the signature into bytes\n    signed = bytearray(sig, 'utf-8')\n    signed_b64 = base64.b64encode(signed)\n\n    # Verify the signature using the public key.\n    verifier = PKCS1_v1_5.new(rsa_key)\n    try:\n        verifier.verify(signed_b64, signature)\n    except Exception as e:\n        raise Exception('Signature verification failed')\n", "def verify_relayable_signature(public_key, doc, signature):\n\n    return _verify_sig(public_key, doc, signature)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature,'relayable')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if signature is None:\n        return True\n    return crypto_sign_seal(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    if signature is None:\n        return\n\n    sig_alg, sig_key, sig_bits = signature\n    verifier = PKCS1_v1_5.new(sig_key)\n    if not verifier.verify(doc, signature):\n        raise SignatureMismatch()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return (\n        doc.attrib['sig'] == signature\n        and doc.attrib['alg'] == 'RS256'\n        and public_key.verify_signature(signature, doc.text)\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    return _verify_sig(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    return _verify_signature(public_key, doc, signature, True)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    signer = PKCS1_v1_5.new(public_key)\n    return signer.verify(signature, doc.toxml())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n    if not doc.get('sig'):\n        return\n\n    sig = doc.get('sig')\n    sig_algorithm = doc.get('sigalg')\n\n    if not signature:\n        raise Exception('No signature provided')\n\n    digestmod = get_digest_module(sig_algorithm)\n    if digestmod is None:\n        raise Exception('Unknown signature algorithm')\n\n    if not len(sig) == len(signature):\n        raise Exception('Wrong signature length')\n\n    rsa_key = RSA.importKey(public_key)\n\n    # Convert the signature into bytes\n    signed = bytearray(sig, 'utf-8')\n    signed_b64 = base64.b64encode(signed)\n\n    # Verify the signature using the public key.\n    verifier = PKCS1_v1_5.new(rsa_key)\n    try:\n        verifier.verify(signed_b64, signature)\n    except Exception as e:\n        raise Exception('Signature verification failed')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def verify_relayable_signature(public_key, doc, signature):\n\n    return _verify_sig(public_key, doc, signature)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "parse_diaspora_webfinger", "docstring": "Parse Diaspora webfinger which is either in JSON format (new) or XRD (old).\n\nhttps://diaspora.github.io/diaspora_federation/discovery/webfinger.html", "ques_id": "630629e052e177c0ba46a0c4", "code": ["def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    result = {}\n    root = json.loads(document)\n    for link in root.findall(\"link[@rel='nofollow']\"):\n        href = link.attrib[\"href\"]\n        result[href] = parse_diaspora_webfinger(href)\n    return result\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    doc = json.loads(document)\n    return {\n        _get_element_text_or_none(document, \"hcard_url\"): doc.get(\"value\")\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_attr_or_none(document, \"hcard_url\", \"\"))\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_text_or_none(document, \"hcard_url\"))\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    result = {}\n    try:\n        document = json.loads(document)\n        if \"hcard_url\" in document:\n            result[\"hcard_url\"] = document[\"hcard_url\"]\n    except (ValueError, KeyError) as e:\n        logger.warning(\n            \"Failed to parse webfinger from the document '%s': %s\",\n            document,\n            e,\n        )\n    return result\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    root = utils.get_etree_root(document)\n    hcard_url = root.xpath(\n        '//hcard[@hcard_url]', namespaces={'hcard_url': utils.NS_DIAspora}\n    )\n    if not hcard_url:\n        raise ValueError('No hcard_url in the document')\n    hcard_url = hcard_url[0].text\n    return {\n        'handle': hcard_url,\n        'value': parse_diaspora_host_meta(hcard_url)['value'],\n    }\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    json_data = document\n    logger.debug(\"Parsing webfinger document: %s\", document)\n    try:\n        webfinger = json.loads(json_data)[\"hcard_url\"]\n    except ValueError:\n        logger.error(\"Invalid webfinger JSON document: %s\", document)\n        webfinger = \"\"\n    return webfinger\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_attr_or_none(document, \"hcard_url\", \"\"))\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_text_or_none(document, \"hcard_url\"))\n", "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    xml = _get_element_text_or_none(document, \"{%s}hcard_url\" % DIAspora.NS_ROOT)\n    if xml is None:\n        return {}\n    return {_get_element_attr_or_none(document, \"{%s}hcard_url\" % DIAspora.NS_ROOT, \"value\"): xml}\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, Any]:\n    result = {}\n    root = json.loads(document)\n    for link in root.findall(\"link[@rel='nofollow']\"):\n        href = link.attrib[\"href\"]\n        result[href] = parse_diaspora_webfinger(href)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    doc = json.loads(document)\n    return {\n        _get_element_text_or_none(document, \"hcard_url\"): doc.get(\"value\")\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_attr_or_none(document, \"hcard_url\", \"\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_text_or_none(document, \"hcard_url\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    result = {}\n    try:\n        document = json.loads(document)\n        if \"hcard_url\" in document:\n            result[\"hcard_url\"] = document[\"hcard_url\"]\n    except (ValueError, KeyError) as e:\n        logger.warning(\n            \"Failed to parse webfinger from the document '%s': %s\",\n            document,\n            e,\n        )\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    root = utils.get_etree_root(document)\n    hcard_url = root.xpath(\n        '//hcard[@hcard_url]', namespaces={'hcard_url': utils.NS_DIAspora}\n    )\n    if not hcard_url:\n        raise ValueError('No hcard_url in the document')\n    hcard_url = hcard_url[0].text\n    return {\n        'handle': hcard_url,\n        'value': parse_diaspora_host_meta(hcard_url)['value'],\n    }\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    json_data = document\n    logger.debug(\"Parsing webfinger document: %s\", document)\n    try:\n        webfinger = json.loads(json_data)[\"hcard_url\"]\n    except ValueError:\n        logger.error(\"Invalid webfinger JSON document: %s\", document)\n        webfinger = \"\"\n    return webfinger\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_attr_or_none(document, \"hcard_url\", \"\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    return json.loads(_get_element_text_or_none(document, \"hcard_url\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def parse_diaspora_webfinger(document: str) -> Dict[str, str]:\n    xml = _get_element_text_or_none(document, \"{%s}hcard_url\" % DIAspora.NS_ROOT)\n    if xml is None:\n        return {}\n    return {_get_element_attr_or_none(document, \"{%s}hcard_url\" % DIAspora.NS_ROOT, \"value\"): xml}\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "try_retrieve_webfinger_document", "docstring": "Try to retrieve an RFC7033 webfinger document. Does not raise if it fails.", "ques_id": "630629e152e177c0ba46a0d1", "code": ["def try_retrieve_webfinger_document(handle: Response) -> str:\n    try:\n        handle.read(100)\n    except (URLError, socket.timeout):\n        return None\n    if handle.getcode()!= 200:\n        return None\n    return handle.read().decode('utf-8')\n", "def try_retrieve_webfinger_document(handle: socket.socket) -> bytes:\n    handle.flush()\n    handle.seek(0)\n    return handle.read(131072).decode(\"utf-8\")\n", "def try_retrieve_webfinger_document(handle: requests.Response) -> bytes:\n    response = handle.get(\"https://www.webfinger.com/rss\")\n    if response.status_code == 404:\n        return b\"\"\n    return response.content\n", "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    try:\n        handle.settimeout(0.1)\n        handle.connect((\"localhost\", WebFingerDoc.PORT))\n        response = handle.recv(1024)\n        logger.debug(\"Received webfinger document: %s\", response)\n        return response\n    except socket.timeout:\n        raise WebFingerDocRetrievalError()\n    except socket.error:\n        raise WebFingerDocRetrievalError()\n    except Exception as ex:\n        raise WebFingerDocRetrievalError(ex)\n", "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        return fetch_http_date(handle.getheader(\"date\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/document.asp\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/index.asp\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/sitemap.asp\"))\n    except AttributeError:\n        pass\n    logger.warning(\"Unable to retrieve webfinger document.\")\n    return \"\"\n", "def try_retrieve_webfinger_document(handle: requests.Response) -> Dict[str, Any]:\n    try:\n        return fetch_document(handle.url, handle.headers, handle.status_code, handle.reason)\n    except (HTTPError, URLError) as e:\n        if hasattr(e, \"code\") and e.code == 404:\n            # Found nothing, return the original error message\n            return {\"error\": e.message, \"url\": handle.url}\n        raise\n", "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    handle.settimeout(0.5)\n    try:\n        data = handle.recv(1024).decode()\n    except socket.timeout:\n        return ''\n    except socket.error as e:\n        logger.error('Error while retrieving webfinger document: {}'.format(e))\n        return ''\n    logger.debug('Fetched webfinger document: {}'.format(data))\n    return data\n", "def try_retrieve_webfinger_document(handle: urllib.request.Request) -> str:\n    try:\n        return fetch_http_date(handle.geturl())\n    except urllib.error.HTTPError as e:\n        if e.code == 404:\n            return ''\n        raise e\n", "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    try:\n        handle.sendall(b\"HTTP/1.1 200 OK\\r\\n\\r\\n\")\n        body = handle.recv(1024)\n        if body.startswith(b\"HTTP/1.1 200 OK\"):\n            logger.info(\"Webfinger received\")\n            return body.decode(\"utf-8\")\n        else:\n            logger.info(\"HTTP received (%s)\", body)\n            raise Exception(\"HTTP received error\")\n    except Exception as ex:\n        logger.info(\"Webfinger error (%s)\", ex)\n        raise Exception(\"Webfinger error (%s)\", ex)\n", "def try_retrieve_webfinger_document(handle: HTTPResponse):\n    try:\n        finger = handle.getheader(\"X-RFC-DOC\")\n    except (AttributeError, TypeError):\n        finger = \"\"\n    return finger\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def try_retrieve_webfinger_document(handle: Response) -> str:\n    try:\n        handle.read(100)\n    except (URLError, socket.timeout):\n        return None\n    if handle.getcode()!= 200:\n        return None\n    return handle.read().decode('utf-8')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket) -> bytes:\n    handle.flush()\n    handle.seek(0)\n    return handle.read(131072).decode(\"utf-8\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: requests.Response) -> bytes:\n    response = handle.get(\"https://www.webfinger.com/rss\")\n    if response.status_code == 404:\n        return b\"\"\n    return response.content\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    try:\n        handle.settimeout(0.1)\n        handle.connect((\"localhost\", WebFingerDoc.PORT))\n        response = handle.recv(1024)\n        logger.debug(\"Received webfinger document: %s\", response)\n        return response\n    except socket.timeout:\n        raise WebFingerDocRetrievalError()\n    except socket.error:\n        raise WebFingerDocRetrievalError()\n    except Exception as ex:\n        raise WebFingerDocRetrievalError(ex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse) -> str:\n    try:\n        return fetch_http_date(handle.getheader(\"date\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/document.asp\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/index.asp\"))\n    except AttributeError:\n        pass\n    try:\n        return fetch_http_date(handle.request(\"GET\", \"https://webfinger.net/sitemap.asp\"))\n    except AttributeError:\n        pass\n    logger.warning(\"Unable to retrieve webfinger document.\")\n    return \"\"\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: requests.Response) -> Dict[str, Any]:\n    try:\n        return fetch_document(handle.url, handle.headers, handle.status_code, handle.reason)\n    except (HTTPError, URLError) as e:\n        if hasattr(e, \"code\") and e.code == 404:\n            # Found nothing, return the original error message\n            return {\"error\": e.message, \"url\": handle.url}\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    handle.settimeout(0.5)\n    try:\n        data = handle.recv(1024).decode()\n    except socket.timeout:\n        return ''\n    except socket.error as e:\n        logger.error('Error while retrieving webfinger document: {}'.format(e))\n        return ''\n    logger.debug('Fetched webfinger document: {}'.format(data))\n    return data\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: urllib.request.Request) -> str:\n    try:\n        return fetch_http_date(handle.geturl())\n    except urllib.error.HTTPError as e:\n        if e.code == 404:\n            return ''\n        raise e\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: socket.socket) -> str:\n    try:\n        handle.sendall(b\"HTTP/1.1 200 OK\\r\\n\\r\\n\")\n        body = handle.recv(1024)\n        if body.startswith(b\"HTTP/1.1 200 OK\"):\n            logger.info(\"Webfinger received\")\n            return body.decode(\"utf-8\")\n        else:\n            logger.info(\"HTTP received (%s)\", body)\n            raise Exception(\"HTTP received error\")\n    except Exception as ex:\n        logger.info(\"Webfinger error (%s)\", ex)\n        raise Exception(\"Webfinger error (%s)\", ex)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def try_retrieve_webfinger_document(handle: HTTPResponse):\n    try:\n        finger = handle.getheader(\"X-RFC-DOC\")\n    except (AttributeError, TypeError):\n        finger = \"\"\n    return finger\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_and_parse_diaspora_webfinger", "docstring": "Retrieve a and parse a remote Diaspora webfinger document.\n\n:arg handle: Remote handle to retrieve\n:returns: dict", "ques_id": "630629e152e177c0ba46a0d2", "code": ["def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_profile_from_hcard(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = fetch_public_key(handle)\n    return parse_diaspora_webfinger(document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_hcard(handle)\n\n    if not response:\n        return\n\n    root = response.getroot()\n\n    if root.tag!='results':\n        logger.error(\n            'Unable to retrieve remote Diaspora webfinger document.')\n        raise RuntimeError(\n            'Unable to retrieve remote Diaspora webfinger document.')\n\n    return parse_profile_from_hcard(\n        root=root,\n        handle=handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    handle = get_public_endpoint(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = parse_diaspora_webfinger(handle)\n    return parse_profile_from_hcard(handle, document)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.domain,\n                                         entity_type=handle.entity_type,\n                                         guid=handle.guid)\n    return parse_diaspora_webfinger(response)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    parse_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=handle.domain, entity_type=handle.entity_type, guid=handle.guid)\n    if document is None:\n        return None\n    return parse_diaspora_webfinger(document)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_profile_from_hcard(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = fetch_public_key(handle)\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_hcard(handle)\n\n    if not response:\n        return\n\n    root = response.getroot()\n\n    if root.tag!='results':\n        logger.error(\n            'Unable to retrieve remote Diaspora webfinger document.')\n        raise RuntimeError(\n            'Unable to retrieve remote Diaspora webfinger document.')\n\n    return parse_profile_from_hcard(\n        root=root,\n        handle=handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    handle = get_public_endpoint(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = retrieve_diaspora_webfinger(handle)\n    return parse_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = parse_diaspora_webfinger(handle)\n    return parse_profile_from_hcard(handle, document)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    response = get_fetch_content_endpoint(domain=handle.domain,\n                                         entity_type=handle.entity_type,\n                                         guid=handle.guid)\n    return parse_diaspora_webfinger(response)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    retrieve_webfinger(handle)\n    parse_webfinger(handle)\n    return parse_diaspora_webfinger(handle)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_and_parse_diaspora_webfinger(handle):\n    document = get_fetch_content_endpoint(domain=handle.domain, entity_type=handle.entity_type, guid=handle.guid)\n    if document is None:\n        return None\n    return parse_diaspora_webfinger(document)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/diaspora.py", "project": "jaywink/federation", "name": "retrieve_diaspora_host_meta", "docstring": "Retrieve a remote Diaspora host-meta document.\n\n:arg host: Host to retrieve from\n:returns: ``XRD`` instance", "ques_id": "630629e252e177c0ba46a0d6", "code": ["def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/request/' % host,\n        auth=(settings.DIAspora_USER, settings.DIAspora_PASSWORD),\n    )\n    response.raise_for_status()\n    return response.json()\n", "def retrieve_diaspora_host_meta(host):\n    resp = requests.get(\n        \"https://%s/api/v1/metadata/hostname/%s\" % (settings.XRD_DOMAIN, host)\n    )\n    if resp.status_code!= 200:\n        raise Exception(\n            \"HTTP status code %d when retrieving XRD host meta\"\n            % resp.status_code\n        )\n    xrd = xml.etree.ElementTree.XML(resp.content)\n    return XRD(xrd)\n", "def retrieve_diaspora_host_meta(host):\n    host_meta_url = (\n        \"https://api.diaspora.mitre.org/v1/host-meta/host/{host}\"\n    ).format(host=host)\n    resp = requests.get(host_meta_url)\n    resp.raise_for_status()\n    return XRD(resp.json())\n", "def retrieve_diaspora_host_meta(host):\n    resp = requests.get(\n        'https://{}/api/v1/hostMeta'.format(host),\n        auth=(settings.USER, settings.PASSWORD),\n        headers={'Content-Type': 'application/json'},\n    )\n\n    if resp.status_code!= 200:\n        raise requests.HTTPError('HTTP {}: {}'.format(resp.status_code, resp.text))\n\n    return XRD(resp.json())\n", "def retrieve_diaspora_host_meta(host):\n    url = 'https://{host}/metadata/host-meta'.format(host=host)\n    resp = requests.get(url)\n    if resp.status_code!= 200:\n        raise requests.HTTPError('{} failed'.format(url))\n    return XRD(resp.json())\n", "def retrieve_diaspora_host_meta(host):\n    url = \"https://%s.diaspora.org/remote-metadata.xml\" % host\n    try:\n        return XRD(url)\n    except Exception as e:\n        logging.error(\"Failed to retrieve %s host-meta document: %s\", host, e)\n        return XRD(\"\")\n", "def retrieve_diaspora_host_meta(host):\n    url = 'https://{}/api/v1/metadata/hostname'.format(host)\n    r = requests.get(url, auth=(settings.XRD_USER, settings.XRD_PASSWORD))\n    r.raise_for_status()\n    return r.json()\n", "def retrieve_diaspora_host_meta(host):\n    url = \"{base}/hosts/{host}\".format(\n        base=DIAspora.BASE_URL, host=host)\n    resp = requests.get(url)\n    resp.raise_for_status()\n    root = xml.etree.ElementTree.fromstring(resp.content)\n    for element in root.iter(tag=\"XRD\"):\n        if element.attrib[\"@type\"] == \"Diaspora:HostMeta\":\n            return XRD(url=url, data=element)\n    raise XRDException(\"No XRD found for {}\".format(host))\n", "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n\n    :returns: ``XRD`` instance\n    \"\"\"\n    response = requests.get(\n        'https://{host}/api/v1/documents/host-meta'.format(\n            host=host\n        )\n    )\n\n    response.raise_for_status()\n\n    return XRD(response.json())\n", "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        host,\n        auth=(settings.XRD_SITE_USER, settings.XRD_SITE_PASSWORD),\n        headers={\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent': settings.XRD_SITE_USER_AGENT,\n        },\n    )\n    response.raise_for_status()\n    return XRD(response.json())\n"], "level": "plib_runnable", "generate_results": [{"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        'https://%s/xrd/request/' % host,\n        auth=(settings.DIAspora_USER, settings.DIAspora_PASSWORD),\n    )\n    response.raise_for_status()\n    return response.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    resp = requests.get(\n        \"https://%s/api/v1/metadata/hostname/%s\" % (settings.XRD_DOMAIN, host)\n    )\n    if resp.status_code!= 200:\n        raise Exception(\n            \"HTTP status code %d when retrieving XRD host meta\"\n            % resp.status_code\n        )\n    xrd = xml.etree.ElementTree.XML(resp.content)\n    return XRD(xrd)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    host_meta_url = (\n        \"https://api.diaspora.mitre.org/v1/host-meta/host/{host}\"\n    ).format(host=host)\n    resp = requests.get(host_meta_url)\n    resp.raise_for_status()\n    return XRD(resp.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    resp = requests.get(\n        'https://{}/api/v1/hostMeta'.format(host),\n        auth=(settings.USER, settings.PASSWORD),\n        headers={'Content-Type': 'application/json'},\n    )\n\n    if resp.status_code!= 200:\n        raise requests.HTTPError('HTTP {}: {}'.format(resp.status_code, resp.text))\n\n    return XRD(resp.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = 'https://{host}/metadata/host-meta'.format(host=host)\n    resp = requests.get(url)\n    if resp.status_code!= 200:\n        raise requests.HTTPError('{} failed'.format(url))\n    return XRD(resp.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"https://%s.diaspora.org/remote-metadata.xml\" % host\n    try:\n        return XRD(url)\n    except Exception as e:\n        logging.error(\"Failed to retrieve %s host-meta document: %s\", host, e)\n        return XRD(\"\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = 'https://{}/api/v1/metadata/hostname'.format(host)\n    r = requests.get(url, auth=(settings.XRD_USER, settings.XRD_PASSWORD))\n    r.raise_for_status()\n    return r.json()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    url = \"{base}/hosts/{host}\".format(\n        base=DIAspora.BASE_URL, host=host)\n    resp = requests.get(url)\n    resp.raise_for_status()\n    root = xml.etree.ElementTree.fromstring(resp.content)\n    for element in root.iter(tag=\"XRD\"):\n        if element.attrib[\"@type\"] == \"Diaspora:HostMeta\":\n            return XRD(url=url, data=element)\n    raise XRDException(\"No XRD found for {}\".format(host))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    # type: (str) -> XRD\n    \"\"\"\n    Retrieve a remote Diaspora host-meta document.\n\n    :arg host: Host to retrieve from\n\n    :returns: ``XRD`` instance\n    \"\"\"\n    response = requests.get(\n        'https://{host}/api/v1/documents/host-meta'.format(\n            host=host\n        )\n    )\n\n    response.raise_for_status()\n\n    return XRD(response.json())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def retrieve_diaspora_host_meta(host):\n    response = requests.get(\n        host,\n        auth=(settings.XRD_SITE_USER, settings.XRD_SITE_PASSWORD),\n        headers={\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent': settings.XRD_SITE_USER_AGENT,\n        },\n    )\n    response.raise_for_status()\n    return XRD(response.json())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "federation/utils/network.py", "project": "jaywink/federation", "name": "send_document", "docstring": "Helper method to send a document via POST.\n\nAdditional ``*args`` and ``**kwargs`` will be passed on to ``requests.post``.\n\n:arg url: Full url to send to, including protocol\n:arg data: Dictionary (will be form-encoded), bytes, or file-like object to send in the body\n:arg timeout: Seconds to wait for response (defaults to 10)\n:arg method: Method to use, defaults to post\n:returns: Tuple of status code (int or None) and error (exception class instance or None)", "ques_id": "630629e752e177c0ba46a0fb", "code": ["def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    resp = fetch_http_date(data, timeout=timeout, raise_ssl_errors=True)\n    logger.debug(\"sending %d bytes to %s\", len(data), url)\n    return resp\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    logger.debug(\"Sending document: %s\", url)\n    response = requests.post(url, data=data, timeout=timeout, headers={\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"*/*\",\n        \"Connection\": \"keep-alive\",\n    }, *args, **kwargs)\n    logger.debug(\"Response: %s\", response)\n    return parse_http_date(response.headers.get(\"Last-Modified\", \"\"))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    logger.info(\"sending %s to %s\", data, url)\n    response = fetch_http_response(url, data, timeout, method, *args, **kwargs)\n    return response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        resp = requests.post(url, data=data, timeout=timeout, **kwargs)\n    except (requests.exceptions.InvalidSchema, requests.exceptions.InvalidURL,\n            requests.exceptions.InvalidURL, requests.exceptions.ReadTimeout) as exc:\n        raise HTTPError(\"HTTP POST failed with error {}\".format(exc))\n\n    # raise_for_status is disabled because of https://github.com/twitter/requests/issues/423\n    # https://github.com/twitter/requests/issues/423 --> successful request\n    resp.raise_for_status()\n    return resp\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    data = fetch_content_type(url) + \"\\n\" + data\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return parse_http_date(response.headers.get(\"Last-Modified\", \"\"))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.RequestException as ex:\n        raise FederationError(\"Failed to send document to {}: {}\".format(url, ex))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"*/*\",\n        \"Accept-Charset\": \"utf-8\",\n        \"Accept-Language\": \"en-US\",\n        \"Connection\": \"keep-alive\",\n    }\n\n    try:\n        response = requests.post(url, data, headers=headers, timeout=timeout, *args, **kwargs)\n        return response\n    except requests.exceptions.RequestException as exc:\n        raise ValueError(\"Request to {} failed with error {}\".format(url, exc))\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        response = requests.post(url, data=data, timeout=timeout,\n                                 headers={\"User-Agent\": USER_AGENT}, *args, **kwargs)\n    except RequestException as e:\n        return {\"error\": str(e)}\n    return {\"status\": response.status_code, \"data\": response.json()}\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(url, data=data, timeout=timeout, **kwargs))\n    if response is None:\n        return response\n\n    return response\n", "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.Timeout as timeout:\n        logger.error(\"Timeout while trying to send %s\", url)\n        raise timeout\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    resp = fetch_http_date(data, timeout=timeout, raise_ssl_errors=True)\n    logger.debug(\"sending %d bytes to %s\", len(data), url)\n    return resp\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    logger.debug(\"Sending document: %s\", url)\n    response = requests.post(url, data=data, timeout=timeout, headers={\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"*/*\",\n        \"Connection\": \"keep-alive\",\n    }, *args, **kwargs)\n    logger.debug(\"Response: %s\", response)\n    return parse_http_date(response.headers.get(\"Last-Modified\", \"\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    logger.info(\"sending %s to %s\", data, url)\n    response = fetch_http_response(url, data, timeout, method, *args, **kwargs)\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        resp = requests.post(url, data=data, timeout=timeout, **kwargs)\n    except (requests.exceptions.InvalidSchema, requests.exceptions.InvalidURL,\n            requests.exceptions.InvalidURL, requests.exceptions.ReadTimeout) as exc:\n        raise HTTPError(\"HTTP POST failed with error {}\".format(exc))\n\n    # raise_for_status is disabled because of https://github.com/twitter/requests/issues/423\n    # https://github.com/twitter/requests/issues/423 --> successful request\n    resp.raise_for_status()\n    return resp\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    data = fetch_content_type(url) + \"\\n\" + data\n    response = requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    return parse_http_date(response.headers.get(\"Last-Modified\", \"\"))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.RequestException as ex:\n        raise FederationError(\"Failed to send document to {}: {}\".format(url, ex))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"*/*\",\n        \"Accept-Charset\": \"utf-8\",\n        \"Accept-Language\": \"en-US\",\n        \"Connection\": \"keep-alive\",\n    }\n\n    try:\n        response = requests.post(url, data, headers=headers, timeout=timeout, *args, **kwargs)\n        return response\n    except requests.exceptions.RequestException as exc:\n        raise ValueError(\"Request to {} failed with error {}\".format(url, exc))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        response = requests.post(url, data=data, timeout=timeout,\n                                 headers={\"User-Agent\": USER_AGENT}, *args, **kwargs)\n    except RequestException as e:\n        return {\"error\": str(e)}\n    return {\"status\": response.status_code, \"data\": response.json()}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    response = try_retrieve_webfinger_document(handle=requests.post(url, data=data, timeout=timeout, **kwargs))\n    if response is None:\n        return response\n\n    return response\n", "is_pass": false, "return_code": 1}, {"generate_code": "def send_document(url, data, timeout=10, method=\"post\", *args, **kwargs):\n    try:\n        return requests.post(url, data=data, timeout=timeout, *args, **kwargs)\n    except requests.exceptions.Timeout as timeout:\n        logger.error(\"Timeout while trying to send %s\", url)\n        raise timeout\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/utils/dict_utils.py", "project": "redhat-openstack/infrared", "name": "dict_insert", "docstring": "insert a value of a nested key into a dictionary\n\nto insert value for a nested key, all ancestor keys should be given as\nmethod's arguments\n\nexample:\n  dict_insert({}, 'val', 'key1.key2'.split('.'))\n\n:param dic: a dictionary object to insert the nested key value into\n:param val: a value to insert to the given dictionary\n:param key: first key in a chain of key that will store the value\n:param keys: sub keys in the keys chain", "ques_id": "6306091073426c38ae68acac", "code": ["def dict_insert(dic, val, key, *keys):\n    if not isinstance(keys[0], str):\n        keys = keys[0]\n    for key_in_chain in keys:\n        dic = dict_merge(dic, val, getattr(dic, key_in_chain))\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dict_merge(dic, getattr(dic, key), key)\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not dic:\n        dic[key] = val\n        return\n    for key_ in keys:\n        if isinstance(dic.get(key_, None), dict):\n            dic[key_] = dict_insert(dic[key_], val, key_)\n        else:\n            dic[key] = [dic[key_], val]\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        dic = dic.setdefault(k, {})\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        prefix = '.'.join(keys)\n        if prefix not in dic:\n            dic[prefix] = dict()\n        dic = dic[prefix]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if len(keys) > 0 else []\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[keys[-1]] = val\n", "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        if not isinstance(val, dict):\n            raise TypeError('val must be a dictionary')\n        if k in val:\n            dic[k].update(val[k])\n        else:\n            dic[k] = val[k]\n", "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not key in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        keys = [key]\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = \".\" + key.strip('.')\n\n    if key in dic:\n        dic[key].update(val)\n    else:\n        dic[key] = val\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not isinstance(keys[0], str):\n        keys = keys[0]\n    for key_in_chain in keys:\n        dic = dict_merge(dic, val, getattr(dic, key_in_chain))\n    dic[key] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        dic = dict_merge(dic, getattr(dic, key), key)\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not dic:\n        dic[key] = val\n        return\n    for key_ in keys:\n        if isinstance(dic.get(key_, None), dict):\n            dic[key_] = dict_insert(dic[key_], val, key_)\n        else:\n            dic[key] = [dic[key_], val]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        dic = dic.setdefault(k, {})\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        prefix = '.'.join(keys)\n        if prefix not in dic:\n            dic[prefix] = dict()\n        dic = dic[prefix]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    keys = keys[:-1] if len(keys) > 0 else []\n    for k in keys:\n        if k not in dic:\n            dic[k] = {}\n        dic = dic[k]\n    dic[keys[-1]] = val\n", "is_pass": false, "return_code": 1}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for k in keys:\n        if not isinstance(k, str):\n            raise TypeError('keys must be strings')\n        if not isinstance(val, dict):\n            raise TypeError('val must be a dictionary')\n        if k in val:\n            dic[k].update(val[k])\n        else:\n            dic[k] = val[k]\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    for key in keys:\n        if not key in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if not keys:\n        keys = [key]\n    for key in keys:\n        if key not in dic:\n            dic[key] = {}\n        dic = dic[key]\n    dic[key] = val\n", "is_pass": true, "return_code": 0}, {"generate_code": "def dict_insert(dic, val, key, *keys):\n    if keys:\n        key = \".\" + key.strip('.')\n\n    if key in dic:\n        dic[key].update(val)\n    else:\n        dic[key] = val\n", "is_pass": true, "return_code": 0}]}
{"file_path": "tests/test_complex_types.py", "project": "redhat-openstack/infrared", "name": "list_of_file_names", "docstring": "Create a new IniType complex type", "ques_id": "6306091a73426c38ae68acc8", "code": ["def list_of_file_names(settings_dirs, spec_option):\n    ini_type = IniType(\n        {\n            \"general\": {\n                \"path\": \"/tmp/ini\",\n                \"read_only\": False,\n                \"write_only\": False,\n                \"hidden\": False,\n                \"required\": False,\n                \"type\": \"file\",\n                \"description\": \"A complex type via cli.ListOfFileNames()\",\n            },\n            \"meta\": {\n                \"path\": \"/tmp/ini\",\n                \"read_only\": False,\n                \"write_only\": False,\n                \"hidden\": False,\n                \"required\": False,\n                \"type\": \"file\",\n                \"description\": \"A complex type via cli.ListOfFileNames()\"", "def list_of_file_names(settings_dirs, spec_option):\n    return infrared.ListOfFileNames(\n        [os.path.join(sd, \"config.yaml\") for sd in settings_dirs]\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = [str(x) for x in settings_dirs]\n    ini_file_names = IniType(\n        'ini_file_names',\n        [\n            ('test', 'test.txt'),\n            ('test2', 'test2.txt'),\n        ],\n        None,\n        spec_option,\n        settings_dirs,\n    )\n    return ini_file_names\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        [\n            IniFile(os.path.join(sdir, \"myfile.txt\"), []),\n            IniFile(os.path.join(sdir, \"subfile.txt\"), [\"one\", \"two\"]),\n        ]\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    settings_dir = os.path.join(*settings_dirs)\n    return IniType(\n        'complex',\n        [\n            IniFile(os.path.join(settings_dir,'my.ini'), '.ini'),\n            IniFile(os.path.join(settings_dir, 'another.ini'), '.ini'),\n        ],\n        'test',\n        spec_option,\n        [\n            os.path.join(settings_dir,'my.txt'),\n            os.path.join(settings_dir, 'another.txt'),\n        ],\n        False,\n        False,\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        settings_dirs, \"complex\", {\"foo\": {\"path\": \"foo\"}}, [], spec_option\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        {\n            \"general\": {\"path\": \"\", \"type\": \"file\"},\n            \"verbose\": {\"path\": \"\", \"type\": \"file\"},\n            \"debug\": {\"path\": \"\", \"type\": \"file\"},\n            \"version\": {\"path\": \"\", \"type\": \"string\"},\n            \"testing\": {\"path\": \"\", \"type\": \"string\"},\n            \"irc\": {\"path\": \"\", \"type\": \"string\"},\n            \"irc_autodiscovery\": {\"path\": \"\", \"type\": \"string\"},\n            \"log\": {\"path\": \"\", \"type\": \"string\"},\n            \"log_autodiscovery\": {\"path\": \"\", \"type\": \"string\"},\n        },\n        \"general\",\n        \"irc\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n  ", "def list_of_file_names(settings_dirs, spec_option):\n    from infrared.types import IniType\n    return IniType(\n        [os.path.join(sdir, \"file_names.txt\") for sdir in settings_dirs]\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        [os.path.join(sdir, \"list_of_file_names.ini\") for sdir in settings_dirs]\n    )\n", "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        None,\n        'list_of_file_names',\n        [\n            IniFile('test.txt', [\n                IniFile('one.txt', [\n                    IniFile('two.txt', [\n                        IniFile('three.txt', [\n                            IniFile('four.txt', [\n                                IniFile('five.txt', [\n                                    IniFile('six.txt', [IniFile('seven.txt', [])])])])])\n                    ])\n                ])\n            ])\n        ],\n        [\n            IniFile('one.txt', [\n                IniFile('two.txt', [\n          "], "level": "plib_runnable", "generate_results": [{"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    ini_type = IniType(\n        {\n            \"general\": {\n                \"path\": \"/tmp/ini\",\n                \"read_only\": False,\n                \"write_only\": False,\n                \"hidden\": False,\n                \"required\": False,\n                \"type\": \"file\",\n                \"description\": \"A complex type via cli.ListOfFileNames()\",\n            },\n            \"meta\": {\n                \"path\": \"/tmp/ini\",\n                \"read_only\": False,\n                \"write_only\": False,\n                \"hidden\": False,\n                \"required\": False,\n                \"type\": \"file\",\n                \"description\": \"A complex type via cli.ListOfFileNames()\"", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return infrared.ListOfFileNames(\n        [os.path.join(sd, \"config.yaml\") for sd in settings_dirs]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    settings_dirs = [str(x) for x in settings_dirs]\n    ini_file_names = IniType(\n        'ini_file_names',\n        [\n            ('test', 'test.txt'),\n            ('test2', 'test2.txt'),\n        ],\n        None,\n        spec_option,\n        settings_dirs,\n    )\n    return ini_file_names\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        [\n            IniFile(os.path.join(sdir, \"myfile.txt\"), []),\n            IniFile(os.path.join(sdir, \"subfile.txt\"), [\"one\", \"two\"]),\n        ]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    settings_dir = os.path.join(*settings_dirs)\n    return IniType(\n        'complex',\n        [\n            IniFile(os.path.join(settings_dir,'my.ini'), '.ini'),\n            IniFile(os.path.join(settings_dir, 'another.ini'), '.ini'),\n        ],\n        'test',\n        spec_option,\n        [\n            os.path.join(settings_dir,'my.txt'),\n            os.path.join(settings_dir, 'another.txt'),\n        ],\n        False,\n        False,\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        settings_dirs, \"complex\", {\"foo\": {\"path\": \"foo\"}}, [], spec_option\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        {\n            \"general\": {\"path\": \"\", \"type\": \"file\"},\n            \"verbose\": {\"path\": \"\", \"type\": \"file\"},\n            \"debug\": {\"path\": \"\", \"type\": \"file\"},\n            \"version\": {\"path\": \"\", \"type\": \"string\"},\n            \"testing\": {\"path\": \"\", \"type\": \"string\"},\n            \"irc\": {\"path\": \"\", \"type\": \"string\"},\n            \"irc_autodiscovery\": {\"path\": \"\", \"type\": \"string\"},\n            \"log\": {\"path\": \"\", \"type\": \"string\"},\n            \"log_autodiscovery\": {\"path\": \"\", \"type\": \"string\"},\n        },\n        \"general\",\n        \"irc\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n        \"irc_autodiscovery\",\n  ", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    from infrared.types import IniType\n    return IniType(\n        [os.path.join(sdir, \"file_names.txt\") for sdir in settings_dirs]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        [os.path.join(sdir, \"list_of_file_names.ini\") for sdir in settings_dirs]\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def list_of_file_names(settings_dirs, spec_option):\n    return IniType(\n        None,\n        'list_of_file_names',\n        [\n            IniFile('test.txt', [\n                IniFile('one.txt', [\n                    IniFile('two.txt', [\n                        IniFile('three.txt', [\n                            IniFile('four.txt', [\n                                IniFile('five.txt', [\n                                    IniFile('six.txt', [IniFile('seven.txt', [])])])])])\n                    ])\n                ])\n            ])\n        ],\n        [\n            IniFile('one.txt', [\n                IniFile('two.txt', [\n          ", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "ansible_config_manager", "docstring": "Gets the ansible config manager.", "ques_id": "6306091b73426c38ae68acd7", "code": ["def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "def ansible_config_manager(cls):\n    return cls._get_service(\n        ServiceName.ANSIBLE_CONFIG_MANAGER).manager\n", "def ansible_config_manager(cls):\n    if 'ansible_config_manager' not in cls._get_service().keys():\n        cls._get_service()['ansible_config_manager'] = ServiceName(\n            name='ansible_config_manager',\n            core_settings=cls._get_service()\n        )\n    return cls._get_service()['ansible_config_manager']\n", "def ansible_config_manager(cls):\n    if cls._ansible_config_manager is None:\n        cls._ansible_config_manager = cls._get_service(\n            ServiceName.ANSIBLE_CONFIG_MANAGER)\n    return cls._ansible_config_manager\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "def ansible_config_manager(cls):\n    return cls._get_service(\n        name=constants.ServiceName.ANSIBLE_CONFIG_MANAGER\n    )\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\n        ServiceName.ANSIBLE_CONFIG_MANAGER).manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if 'ansible_config_manager' not in cls._get_service().keys():\n        cls._get_service()['ansible_config_manager'] = ServiceName(\n            name='ansible_config_manager',\n            core_settings=cls._get_service()\n        )\n    return cls._get_service()['ansible_config_manager']\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    if cls._ansible_config_manager is None:\n        cls._ansible_config_manager = cls._get_service(\n            ServiceName.ANSIBLE_CONFIG_MANAGER)\n    return cls._ansible_config_manager\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service(\n        name=constants.ServiceName.ANSIBLE_CONFIG_MANAGER\n    )\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def ansible_config_manager(cls):\n    return cls._get_service('ansible_config_manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "workspace_manager", "docstring": "Gets the workspace manager.", "ques_id": "6306091b73426c38ae68acd9", "code": ["def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('WorkspaceManager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('WORKSPACE_MANAGER')\n", "def workspace_manager(cls):\n    return cls._get_service('WorkspaceManager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('WorkspaceManager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('WORKSPACE_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('WorkspaceManager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def workspace_manager(cls):\n    return cls._get_service('workspace_manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/services/__init__.py", "project": "redhat-openstack/infrared", "name": "plugins_manager", "docstring": "Gets the plugin manager.", "ques_id": "6306091b73426c38ae68acda", "code": ["def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('PLUGINS_MANAGER')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}, {"generate_code": "def plugins_manager(cls):\n    return cls._get_service('plugins_manager')\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_content", "docstring": "validates that spec (YAML) content has all required fields\n\n:param spec_content: content of spec file\n:raise IRValidatorException: when mandatory data\nis missing in spec file\n:return: Dictionary with data loaded from a spec (YAML) file", "ques_id": "6306091c73426c38ae68acdc", "code": ["def validate_from_content(cls, spec_content=None):\n    try:\n        return cls.validate_from_file(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Spec file is malformed: {}\".format(e))\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        validated_data = cls.load_from_string(spec_content)\n    except Invalid as e:\n        raise IRValidatorException(e.message)\n\n    try:\n        validated_data['timestamp'] = validated_data['timestamp'].isoformat()\n    except KeyError:\n        pass\n\n    return validated_data\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n    try:\n        yaml_file = open(spec_content, 'r')\n        data = yaml.safe_load(yaml_file)\n    except Exception as e:\n        raise IRValidatorException('Unable to load YAML file {}: {}'.format(\n            spec_content, e))\n\n    if not data:\n        raise IRValidatorException('No data to validate')\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n\n    try:\n        validate(spec_content, cls.SCHEMA)\n    except ValidationError as e:\n        raise IRValidatorException(\"Incorrect format for spec file\") from e\n\n    return cls.SCHEMA\n", "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name', 'description']\n    return cls.validate_from_file(required_fields, spec_content)\n", "def validate_from_content(cls, spec_content=None):\n    data = {}\n\n    try:\n        data = yaml.load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException(\n            \"Failed to parse YAML file ({0})\".format(exc)\n        )\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    spec = load_yaml(spec_content)\n\n    if'metadata' not in spec:\n        raise IRValidatorException('Missing \"metadata\" key in spec file')\n\n    if'settings' not in spec['metadata']:\n        raise IRValidatorException('Missing \"settings\" key in metadata key')\n\n    required_fields = ['name', 'description', 'image', 'template','stack',\n                       'api_url', 'node_name', 'node_type']\n\n    missing_fields = set(required_fields) - set(spec.keys())\n    if missing_fields:\n        raise IRValidatorException('Missing required fields: {}'.format(\n            ', '.join(missing_fields)))\n\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    spec = None\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    try:\n        spec = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Unable to parse spec file - {}\".format(e))\n\n    if'reports' not in spec:\n        raise IRValidatorException(\"Missing reports data\")\n\n    return spec\n", "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    data = yaml.safe_load(spec_content)\n\n    missing_required_keys = [key for key in cls.required_keys if key not in data]\n    if missing_required_keys:\n        raise IRValidatorException(\n            \"Missing required fields: {}\".format(missing_required_keys)\n        )\n\n    return data\n", "def validate_from_content(cls, spec_content=None):\n    try:\n        return cls._load_spec(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException('Unable to parse YAML file {}: {}'.format(\n            cls._file_path, e), cls._file_path)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        return cls.validate_from_file(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException(\"Spec file is malformed: {}\".format(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        validated_data = cls.load_from_string(spec_content)\n    except Invalid as e:\n        raise IRValidatorException(e.message)\n\n    try:\n        validated_data['timestamp'] = validated_data['timestamp'].isoformat()\n    except KeyError:\n        pass\n\n    return validated_data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n    try:\n        yaml_file = open(spec_content, 'r')\n        data = yaml.safe_load(yaml_file)\n    except Exception as e:\n        raise IRValidatorException('Unable to load YAML file {}: {}'.format(\n            spec_content, e))\n\n    if not data:\n        raise IRValidatorException('No data to validate')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n\n    try:\n        validate(spec_content, cls.SCHEMA)\n    except ValidationError as e:\n        raise IRValidatorException(\"Incorrect format for spec file\") from e\n\n    return cls.SCHEMA\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    required_fields = ['name', 'description']\n    return cls.validate_from_file(required_fields, spec_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    data = {}\n\n    try:\n        data = yaml.load(spec_content)\n    except yaml.YAMLError as exc:\n        raise IRValidatorException(\n            \"Failed to parse YAML file ({0})\".format(exc)\n        )\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = load_yaml(spec_content)\n\n    if'metadata' not in spec:\n        raise IRValidatorException('Missing \"metadata\" key in spec file')\n\n    if'settings' not in spec['metadata']:\n        raise IRValidatorException('Missing \"settings\" key in metadata key')\n\n    required_fields = ['name', 'description', 'image', 'template','stack',\n                       'api_url', 'node_name', 'node_type']\n\n    missing_fields = set(required_fields) - set(spec.keys())\n    if missing_fields:\n        raise IRValidatorException('Missing required fields: {}'.format(\n            ', '.join(missing_fields)))\n\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    spec = None\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    try:\n        spec = yaml.safe_load(spec_content)\n    except yaml.YAMLError as e:\n        raise IRValidatorException(\"Unable to parse spec file - {}\".format(e))\n\n    if'reports' not in spec:\n        raise IRValidatorException(\"Missing reports data\")\n\n    return spec\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    if spec_content is None:\n        raise IRValidatorException(\"Spec content is required\")\n\n    data = yaml.safe_load(spec_content)\n\n    missing_required_keys = [key for key in cls.required_keys if key not in data]\n    if missing_required_keys:\n        raise IRValidatorException(\n            \"Missing required fields: {}\".format(missing_required_keys)\n        )\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_content(cls, spec_content=None):\n    try:\n        return cls._load_spec(spec_content)\n    except (yaml.YAMLError, IOError) as e:\n        raise IRValidatorException('Unable to parse YAML file {}: {}'.format(\n            cls._file_path, e), cls._file_path)\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/utils/validators.py", "project": "redhat-openstack/infrared", "name": "validate_from_file", "docstring": "Loads & validates that a YAML file has all required fields\n\n:param yaml_file: Path to YAML file\n:raise IRValidatorException: when mandatory data is missing in file\n:return: Dictionary with data loaded from a YAML file", "ques_id": "6306091c73426c38ae68acdd", "code": ["def validate_from_file(cls, yaml_file=None):\n    data = load_yaml(yaml_file)\n    cls.validate(data)\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    yaml_file = yaml_file or cls._yaml_file_path\n\n    with open(yaml_file) as yaml_file:\n        data = yaml.safe_load(yaml_file)\n\n    try:\n        cls.validate_from_content(data)\n    except IRValidatorException as error:\n        raise IRValidatorException(error)\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required field 'yaml_file'\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    try:\n        validate(data, cls.SCHEMA)\n    except ValidationError as e:\n        raise IRValidatorException(\"Invalid YAML file: {}\".format(e))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    if not yaml_file:\n        raise IRValidatorException('Missing file path')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.load(f, Loader=yaml.SafeLoader)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file {}'.format(exc))\n\n        if data is None or not isinstance(data, dict):\n            raise IRValidatorException('Invalid YAML file {}'.format(yaml_file))\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n\n    # load and validate the YAML file\n    with open(yaml_file, 'r') as f:\n        yaml_content = yaml.safe_load(f)\n\n    # validate all required fields\n    return cls.validate_from_content(yaml_content)\n", "def validate_from_file(cls, yaml_file=None):\n\n    with open(yaml_file, 'r') as f:\n        file_content = yaml.safe_load(f)\n\n    try:\n        cls.validate_from_content(file_content)\n    except IRValidatorException as e:\n        raise IRValidatorException(e)\n\n    return file_content\n", "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file path provided')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not data:\n        raise IRValidatorException('File does not contain required data')\n\n    return data\n", "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as f:\n            file_content = f.read()\n            return cls.validate_from_content(file_content)\n    except IOError as io_err:\n        raise IRValidatorException('Unable to open YAML file {}: {}'.format(yaml_file, io_err))\n", "def validate_from_file(cls, yaml_file=None):\n\n    with open(yaml_file) as f:\n        try:\n            return cls.validate_from_content(yaml.load(f))\n        except yaml.YAMLError as e:\n            raise IRValidatorException('Invalid YAML file ({})'.format(e))\n", "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f.read(), Loader=yaml.SafeLoader)\n\n    if not data:\n        raise IRValidatorException('Missing required fields')\n\n    return data\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_from_file(cls, yaml_file=None):\n    data = load_yaml(yaml_file)\n    cls.validate(data)\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    yaml_file = yaml_file or cls._yaml_file_path\n\n    with open(yaml_file) as yaml_file:\n        data = yaml.safe_load(yaml_file)\n\n    try:\n        cls.validate_from_content(data)\n    except IRValidatorException as error:\n        raise IRValidatorException(error)\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException(\"Missing required field 'yaml_file'\")\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    try:\n        validate(data, cls.SCHEMA)\n    except ValidationError as e:\n        raise IRValidatorException(\"Invalid YAML file: {}\".format(e))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if not yaml_file:\n        raise IRValidatorException('Missing file path')\n\n    with open(yaml_file, 'r') as f:\n        try:\n            data = yaml.load(f, Loader=yaml.SafeLoader)\n        except yaml.YAMLError as exc:\n            raise IRValidatorException('Invalid YAML file {}'.format(exc))\n\n        if data is None or not isinstance(data, dict):\n            raise IRValidatorException('Invalid YAML file {}'.format(yaml_file))\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    # load and validate the YAML file\n    with open(yaml_file, 'r') as f:\n        yaml_content = yaml.safe_load(f)\n\n    # validate all required fields\n    return cls.validate_from_content(yaml_content)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    with open(yaml_file, 'r') as f:\n        file_content = yaml.safe_load(f)\n\n    try:\n        cls.validate_from_content(file_content)\n    except IRValidatorException as e:\n        raise IRValidatorException(e)\n\n    return file_content\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    if yaml_file is None:\n        raise IRValidatorException('No file path provided')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.safe_load(f)\n\n    if not data:\n        raise IRValidatorException('File does not contain required data')\n\n    return data\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    try:\n        with open(yaml_file, 'r') as f:\n            file_content = f.read()\n            return cls.validate_from_content(file_content)\n    except IOError as io_err:\n        raise IRValidatorException('Unable to open YAML file {}: {}'.format(yaml_file, io_err))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n\n    with open(yaml_file) as f:\n        try:\n            return cls.validate_from_content(yaml.load(f))\n        except yaml.YAMLError as e:\n            raise IRValidatorException('Invalid YAML file ({})'.format(e))\n", "is_pass": true, "return_code": 0}, {"generate_code": "def validate_from_file(cls, yaml_file=None):\n    if yaml_file is None:\n        raise IRValidatorException('Missing YAML file')\n\n    with open(yaml_file, 'r') as f:\n        data = yaml.load(f.read(), Loader=yaml.SafeLoader)\n\n    if not data:\n        raise IRValidatorException('Missing required fields')\n\n    return data\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "_include_groups", "docstring": "Resolves the include dict directive in the spec files.", "ques_id": "6306091d73426c38ae68ace5", "code": ["def _include_groups(self, parser_dict):\n    include_groups = copy.deepcopy(parser_dict['__include_groups__'])\n\n    for include_group in include_groups:\n        include_group['commands'] = self._include_groups(include_group['commands'])\n\n    parser_dict['__include_groups__'] = include_groups\n", "def _include_groups(self, parser_dict):\n    include_groups = copy.copy(parser_dict['include'])\n\n    for include_group in include_groups:\n        option_name = include_group.pop('option_name')\n        if option_name in self.spec_dict:\n            self.spec_dict[option_name].extend(include_group)\n", "def _include_groups(self, parser_dict):\n    if \"include_groups\" in parser_dict:\n        parser_dict[\"include_groups\"] = parser_dict[\"include_groups\"].split(\",\")\n        for group in parser_dict[\"include_groups\"]:\n            if \"group_name\" in group:\n                group_name = group[\"group_name\"].lower()\n                if \"include_group\" in parser_dict:\n                    parser_dict[\"include_group\"] = parser_dict[\"include_group\"].split(\",\") + [group_name]\n                else:\n                    parser_dict[\"include_group\"] = [group_name]\n", "def _include_groups(self, parser_dict):\n    # get all options spec\n    all_options_spec = self._get_all_options_spec(parser_dict)\n    # remove the include groups\n    parser_dict.pop('include_groups', None)\n    # add the include groups\n    for option_spec in all_options_spec:\n        if option_spec.group is not None:\n            parser_dict[option_spec.key] = option_spec.group\n", "def _include_groups(self, parser_dict):\n    includes = {}\n\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            includes[key] = self._include_groups(value)\n        else:\n            includes[key] = value\n\n    return includes\n", "def _include_groups(self, parser_dict):\n    includes = {}\n    for group, options_dict in parser_dict.items():\n        for option in options_dict.keys():\n            if option == 'include':\n                includes[group] = options_dict[option]\n    return includes\n", "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        include_groups = parser_dict['include_groups']\n        if isinstance(include_groups, list):\n            parser_dict['include_groups'] = [\n                self.spec_dict.get_option_spec('group', i)\n                for i in include_groups\n            ]\n    return parser_dict\n", "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups']:\n        include_groups = parser_dict['include_groups']\n        for include_spec in include_groups.split(','):\n            spec = copy.deepcopy(self.spec_dict)\n            spec['include_groups'] = include_spec.split(':')\n            yield spec\n", "def _include_groups(self, parser_dict):\n    include_group_specs = []\n\n    for parser_name, parser_spec in parser_dict.items():\n        # If the parser spec is a group, recurse into it\n        if isinstance(parser_spec, dict):\n            for include_group_name, include_group_spec in parser_spec.items():\n                include_group_specs.append(\n                    self.spec_dict[include_group_name]\n                )\n                include_group_specs.extend(\n                    self._include_groups(include_group_spec)\n                )\n        else:\n            include_group_specs.append(parser_spec)\n\n    return include_group_specs\n", "def _include_groups(self, parser_dict):\n    for command_name, command_spec in parser_dict.items():\n        command_name = command_name.replace(\"-\", \"_\")\n\n        if command_name not in self._include_groups:\n            continue\n\n        for include_spec in command_spec.get(\"include\", []):\n            include_spec = include_spec.replace(\"/\", \"\\\\/\")\n            parser_dict[command_name][\"include\"].append(include_spec)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = copy.deepcopy(parser_dict['__include_groups__'])\n\n    for include_group in include_groups:\n        include_group['commands'] = self._include_groups(include_group['commands'])\n\n    parser_dict['__include_groups__'] = include_groups\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_groups = copy.copy(parser_dict['include'])\n\n    for include_group in include_groups:\n        option_name = include_group.pop('option_name')\n        if option_name in self.spec_dict:\n            self.spec_dict[option_name].extend(include_group)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if \"include_groups\" in parser_dict:\n        parser_dict[\"include_groups\"] = parser_dict[\"include_groups\"].split(\",\")\n        for group in parser_dict[\"include_groups\"]:\n            if \"group_name\" in group:\n                group_name = group[\"group_name\"].lower()\n                if \"include_group\" in parser_dict:\n                    parser_dict[\"include_group\"] = parser_dict[\"include_group\"].split(\",\") + [group_name]\n                else:\n                    parser_dict[\"include_group\"] = [group_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    # get all options spec\n    all_options_spec = self._get_all_options_spec(parser_dict)\n    # remove the include groups\n    parser_dict.pop('include_groups', None)\n    # add the include groups\n    for option_spec in all_options_spec:\n        if option_spec.group is not None:\n            parser_dict[option_spec.key] = option_spec.group\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    includes = {}\n\n    for key, value in parser_dict.items():\n        if isinstance(value, dict):\n            includes[key] = self._include_groups(value)\n        else:\n            includes[key] = value\n\n    return includes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    includes = {}\n    for group, options_dict in parser_dict.items():\n        for option in options_dict.keys():\n            if option == 'include':\n                includes[group] = options_dict[option]\n    return includes\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if 'include_groups' in parser_dict:\n        include_groups = parser_dict['include_groups']\n        if isinstance(include_groups, list):\n            parser_dict['include_groups'] = [\n                self.spec_dict.get_option_spec('group', i)\n                for i in include_groups\n            ]\n    return parser_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    if parser_dict['include_groups']:\n        include_groups = parser_dict['include_groups']\n        for include_spec in include_groups.split(','):\n            spec = copy.deepcopy(self.spec_dict)\n            spec['include_groups'] = include_spec.split(':')\n            yield spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    include_group_specs = []\n\n    for parser_name, parser_spec in parser_dict.items():\n        # If the parser spec is a group, recurse into it\n        if isinstance(parser_spec, dict):\n            for include_group_name, include_group_spec in parser_spec.items():\n                include_group_specs.append(\n                    self.spec_dict[include_group_name]\n                )\n                include_group_specs.extend(\n                    self._include_groups(include_group_spec)\n                )\n        else:\n            include_group_specs.append(parser_spec)\n\n    return include_group_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _include_groups(self, parser_dict):\n    for command_name, command_spec in parser_dict.items():\n        command_name = command_name.replace(\"-\", \"_\")\n\n        if command_name not in self._include_groups:\n            continue\n\n        for include_spec in command_spec.get(\"include\", []):\n            include_spec = include_spec.replace(\"/\", \"\\\\/\")\n            parser_dict[command_name][\"include\"].append(include_spec)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_spec_defaults", "docstring": "Resolve arguments' values from spec and other sources.", "ques_id": "6306092373426c38ae68acfa", "code": ["def get_spec_defaults(self):\n    return self.defaults\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars[\"__spec_defaults__\"]\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_spec_defaults(self):\n    return self.defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars[\"__spec_defaults__\"]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('__spec_defaults__', {})\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_spec_defaults(self):\n    return self.vars.get('_spec_defaults', {})\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_deprecated_args", "docstring": "Returning dict with options which deprecate others.", "ques_id": "6306092973426c38ae68ad01", "code": ["def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._get_conditionally_required_args(\n        'cli', ['options', 'args', 'arguments']\n    )\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.vars.get('deprecated_args', []))\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser._actions)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser._actions)\n", "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._get_conditionally_required_args(\n        'cli', ['options', 'args', 'arguments']\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.vars.get('deprecated_args', []))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser.deprecated_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.parser._actions)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_deprecated_args(self):\n    return self._merge_duplicated_cli_args(self.get_deprecated_args())\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_arg_deprecation", "docstring": "Validates and prints the deprecated arguments.\n\n:param cli_args: the dict of arguments from cli\n:param answer_file_args:  the dict of arguments from files", "ques_id": "6306092c73426c38ae68ad02", "code": ["def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecation_message = \"The '--{}' option is deprecated and will be removed in an upcoming release.\".format(\n        self.option_name)\n    if cli_args.type == \"\":\n        deprecation_message += \" Use '{} {}' instead\".format(\n            self.get_spec_defaults()['type'], self.get_spec_defaults()['name'])\n    if deprecation_message not in cli_args.deprecation_messages:\n        LOG.warning(deprecation_message)\n        cli_args.deprecation_messages.append(deprecation_message)\n    if cli_args.deprecation_messages and cli_args.deprecation_messages[-1] is not None:\n        cli_args.deprecation_messages[-1] +='and '\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arguments deprecation')\n    self._validate_arg_sources('cli_args', cli_args)\n    self._validate_arg_sources('answer_file_args', answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg_name, arg_spec in cli_args.items():\n        arg_type, arg_default = self._get_conditionally_required_args(\n            arg_name, arg_spec, args=cli_args)\n        arg_default = self.validate_arg_default(arg_name, arg_default, arg_spec)\n        arg_spec['default'] = arg_default\n\n        arg_spec['required'] = self.validate_requires_args(args=args,\n                                                          arg_spec=arg_spec)\n        arg_spec['type'] = arg_type\n\n        arg_spec['plugin_path'] = self.plugin_path\n\n        self._merge_duplicated_cli_args(args)\n\n        if arg_spec['deprecated']:\n            LOG.warning(\"'%s' argument is deprecated, use '%s'\",\n                        arg_name, arg_name)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warn(\"Arguments were ignored due to deprecation of args for \"\n             \"command '%s' and are therefore not supported.\" % (\n                 cli_args.command_name, ))\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"validate_arg_deprecation: %s\", cli_args)\n    LOG.debug(\"validate_arg_deprecation: %s\", answer_file_args)\n    if not isinstance(cli_args, list):\n        cli_args = [cli_args]\n    if not isinstance(answer_file_args, list):\n        answer_file_args = [answer_file_args]\n    return self.validate_arg_sources(cli_args, answer_file_args)\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecation_type == 'range':\n        try:\n            min_arg, max_arg = cli_args.deprecation_range\n            if min_arg is not None and max_arg is not None:\n                LOG.warn('You cannot set both --deprecation-type=range '\n                         'and --deprecation-range=range(min,max) at the same '\n                         'time. This will break the argument parser and '\n                         'will result in errors.')\n        except AttributeError:\n            LOG.warn('Please provide a deprecation type that is a list of '\n                     'deprecation types and will be ignored.')\n            min_arg = None\n            max_arg = None\n    else:\n        min_arg = answer_file_args.get('--min', None)\n        ma", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    required_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if required_args:\n        LOG.warn(\"Argument '%s' is deprecated, it will be removed in the next release.\", required_args.pop())\n    return required_args\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--fail-if-missing' in cli_args:\n        raise ArgumentDeprecationError(''.join([\n            'Use `--fail-if-missing <arg_name>` instead of `--help`.',\n            'For more information, see the specification of argparse.',\n        ]))\n\n    if '--fail-on-no-required' in cli_args:\n        raise ArgumentDeprecationError(''.join([\n            'Use `--fail-on-no-required <arg_name>` instead of `--help`.',\n            'For more information, see the specification of argparse.',\n        ]))\n\n    if '--fail-on-no-deprecated' in cli_args:\n        LOG.info(''.join([\n            'Provide an argument with default value \"None\" in the '\n            '`--help` message.',\n        ]))\n\n    return cli_args\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        LOG.warning('The \"--%s\" option is deprecated, please use '\n                    '\"--%s=%s\" instead.',\n                    cli_args['command'], cli_args['option'],\n                    cli_args['value'])\n", "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None:\n        return\n\n    if len(cli_args)!= len(answer_file_args):\n        LOG.warning('Invalid number of arguments for command %s. '\n                    'Expected %d, found %d.',\n                    self.command_name, len(cli_args), len(answer_file_args))\n        return\n\n    for a, b in zip(cli_args, answer_file_args):\n        self._merge_duplicated_cli_args(a)\n        self._merge_duplicated_cli_args(b)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    deprecation_message = \"The '--{}' option is deprecated and will be removed in an upcoming release.\".format(\n        self.option_name)\n    if cli_args.type == \"\":\n        deprecation_message += \" Use '{} {}' instead\".format(\n            self.get_spec_defaults()['type'], self.get_spec_defaults()['name'])\n    if deprecation_message not in cli_args.deprecation_messages:\n        LOG.warning(deprecation_message)\n        cli_args.deprecation_messages.append(deprecation_message)\n    if cli_args.deprecation_messages and cli_args.deprecation_messages[-1] is not None:\n        cli_args.deprecation_messages[-1] +='and '\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug('Validating arguments deprecation')\n    self._validate_arg_sources('cli_args', cli_args)\n    self._validate_arg_sources('answer_file_args', answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    for arg_name, arg_spec in cli_args.items():\n        arg_type, arg_default = self._get_conditionally_required_args(\n            arg_name, arg_spec, args=cli_args)\n        arg_default = self.validate_arg_default(arg_name, arg_default, arg_spec)\n        arg_spec['default'] = arg_default\n\n        arg_spec['required'] = self.validate_requires_args(args=args,\n                                                          arg_spec=arg_spec)\n        arg_spec['type'] = arg_type\n\n        arg_spec['plugin_path'] = self.plugin_path\n\n        self._merge_duplicated_cli_args(args)\n\n        if arg_spec['deprecated']:\n            LOG.warning(\"'%s' argument is deprecated, use '%s'\",\n                        arg_name, arg_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.warn(\"Arguments were ignored due to deprecation of args for \"\n             \"command '%s' and are therefore not supported.\" % (\n                 cli_args.command_name, ))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    LOG.debug(\"validate_arg_deprecation: %s\", cli_args)\n    LOG.debug(\"validate_arg_deprecation: %s\", answer_file_args)\n    if not isinstance(cli_args, list):\n        cli_args = [cli_args]\n    if not isinstance(answer_file_args, list):\n        answer_file_args = [answer_file_args]\n    return self.validate_arg_sources(cli_args, answer_file_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args.deprecation_type == 'range':\n        try:\n            min_arg, max_arg = cli_args.deprecation_range\n            if min_arg is not None and max_arg is not None:\n                LOG.warn('You cannot set both --deprecation-type=range '\n                         'and --deprecation-range=range(min,max) at the same '\n                         'time. This will break the argument parser and '\n                         'will result in errors.')\n        except AttributeError:\n            LOG.warn('Please provide a deprecation type that is a list of '\n                     'deprecation types and will be ignored.')\n            min_arg = None\n            max_arg = None\n    else:\n        min_arg = answer_file_args.get('--min', None)\n        ma", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    required_args = self._get_conditionally_required_args('args', cli_args, answer_file_args)\n    if required_args:\n        LOG.warn(\"Argument '%s' is deprecated, it will be removed in the next release.\", required_args.pop())\n    return required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if '--fail-if-missing' in cli_args:\n        raise ArgumentDeprecationError(''.join([\n            'Use `--fail-if-missing <arg_name>` instead of `--help`.',\n            'For more information, see the specification of argparse.',\n        ]))\n\n    if '--fail-on-no-required' in cli_args:\n        raise ArgumentDeprecationError(''.join([\n            'Use `--fail-on-no-required <arg_name>` instead of `--help`.',\n            'For more information, see the specification of argparse.',\n        ]))\n\n    if '--fail-on-no-deprecated' in cli_args:\n        LOG.info(''.join([\n            'Provide an argument with default value \"None\" in the '\n            '`--help` message.',\n        ]))\n\n    return cli_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args['deprecated']:\n        LOG.warning('The \"--%s\" option is deprecated, please use '\n                    '\"--%s=%s\" instead.',\n                    cli_args['command'], cli_args['option'],\n                    cli_args['value'])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_arg_deprecation(self, cli_args, answer_file_args):\n    if cli_args is None:\n        return\n\n    if len(cli_args)!= len(answer_file_args):\n        LOG.warning('Invalid number of arguments for command %s. '\n                    'Expected %d, found %d.',\n                    self.command_name, len(cli_args), len(answer_file_args))\n        return\n\n    for a, b in zip(cli_args, answer_file_args):\n        self._merge_duplicated_cli_args(a)\n        self._merge_duplicated_cli_args(b)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_parser_option_specs", "docstring": "Gets all the options for the specified command\n\n:param command_name: the command name (main, virsh, ospd, etc...)\n:return: the list of all command options", "ques_id": "6306092d73426c38ae68ad04", "code": ["def get_parser_option_specs(self, command_name):\n    if command_name in self.spec_dict:\n        return self.spec_dict[command_name][\"options\"]\n    return []\n", "def get_parser_option_specs(self, command_name):\n    # type: (str) -> list[dict[str, Any]]\n    \"\"\"\n    Gets all the options for the specified command\n\n    :param command_name: the command name (main, virsh, ospd, etc...)\n    :return: the list of all command options\n    \"\"\"\n    option_specs = []\n    for parser_dict in self.iterate_parsers():\n        option_specs.append(self.get_option_spec(command_name, parser_dict[\"option_name\"]))\n    return option_specs\n", "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name, None)\n    if not option_spec:\n        return []\n    return option_spec.options\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "def get_parser_option_specs(self, command_name):\n    if command_name not in self.spec_dict:\n        raise AttributeError(\"Command name '%s' is not defined\" % command_name)\n    return self.spec_dict[command_name].keys()\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].get('options', [])\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict.get(command_name, {}).get(\"options\", [])\n", "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['parser_option_specs']\n", "def get_parser_option_specs(self, command_name):\n    if command_name in self.spec_dict:\n        return self.spec_dict[command_name].keys()\n    else:\n        return []\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.spec_dict:\n        return self.spec_dict[command_name][\"options\"]\n    return []\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    # type: (str) -> list[dict[str, Any]]\n    \"\"\"\n    Gets all the options for the specified command\n\n    :param command_name: the command name (main, virsh, ospd, etc...)\n    :return: the list of all command options\n    \"\"\"\n    option_specs = []\n    for parser_dict in self.iterate_parsers():\n        option_specs.append(self.get_option_spec(command_name, parser_dict[\"option_name\"]))\n    return option_specs\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    option_spec = self.spec_dict.get(command_name, None)\n    if not option_spec:\n        return []\n    return option_spec.options\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name not in self.spec_dict:\n        raise AttributeError(\"Command name '%s' is not defined\" % command_name)\n    return self.spec_dict[command_name].keys()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name].get('options', [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict.get(command_name, {}).get(\"options\", [])\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self._get_all_options_spec(command_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    return self.spec_dict[command_name]['parser_option_specs']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_parser_option_specs(self, command_name):\n    if command_name in self.spec_dict:\n        return self.spec_dict[command_name].keys()\n    else:\n        return []\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/helper.py", "project": "redhat-openstack/infrared", "name": "get_option_spec", "docstring": "Gets the specification for the specified option name.", "ques_id": "6306092d73426c38ae68ad05", "code": ["def get_option_spec(self, command_name, argument_name):\n    for parser_spec in self.get_parser_option_specs(command_name):\n        if parser_spec.get(argument_name):\n            return parser_spec\n    return None\n", "def get_option_spec(self, command_name, argument_name):\n    option_spec = self.spec_dict[command_name][argument_name]\n    if isinstance(option_spec, dict):\n        return Spec(option_spec)\n    elif isinstance(option_spec, tuple):\n        return Spec(option_spec[0], option_spec[1])\n    else:\n        return option_spec\n", "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict[command_name].get(argument_name)\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict.get((command_name, argument_name), None)\n", "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.get_parser_option_specs(command_name)\n    return self.spec_dict[command_name][argument_name](parser_spec)\n", "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self.get_parser_option_specs(command_name)\n    return parser_specs.get(argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict.get(command_name + '_' + argument_name, None)\n", "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError(\"Command name '%s' does not exists\" % (command_name))\n    return self.spec_dict[command_name][argument_name]\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_option_spec(self, command_name, argument_name):\n    for parser_spec in self.get_parser_option_specs(command_name):\n        if parser_spec.get(argument_name):\n            return parser_spec\n    return None\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    option_spec = self.spec_dict[command_name][argument_name]\n    if isinstance(option_spec, dict):\n        return Spec(option_spec)\n    elif isinstance(option_spec, tuple):\n        return Spec(option_spec[0], option_spec[1])\n    else:\n        return option_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict[command_name].get(argument_name)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict.get((command_name, argument_name), None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_dict = self.spec_dict.get(command_name, {})\n    return parser_dict.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_spec = self.get_parser_option_specs(command_name)\n    return self.spec_dict[command_name][argument_name](parser_spec)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    parser_specs = self.get_parser_option_specs(command_name)\n    return parser_specs.get(argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    return self.spec_dict.get(command_name + '_' + argument_name, None)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_option_spec(self, command_name, argument_name):\n    if command_name not in self.spec_dict:\n        raise KeyError(\"Command name '%s' does not exists\" % (command_name))\n    return self.spec_dict[command_name][argument_name]\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_silent_args", "docstring": "list of silenced argument\n\n:param args: The received arguments.\n:return: list, slienced argument names", "ques_id": "6306092d73426c38ae68ad06", "code": ["def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return super(Command, self).get_silent_args(args) + [\n        '--insecure',\n        '--no-color',\n        '--quiet',\n        '--no-required'\n    ]\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None]\n", "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None]\n", "def get_silent_args(self, args):\n    return super(InfraredCLI, self).get_silent_args(args) + [\n        '--infrared-only',\n    ]\n", "def get_silent_args(self, args):\n    return super(CLI, self).get_silent_args(args) + ['--no-color']\n", "def get_silent_args(self, args):\n    return []\n", "def get_silent_args(self, args):\n    return args\n", "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return super(Command, self).get_silent_args(args) + [\n        '--insecure',\n        '--no-color',\n        '--quiet',\n        '--no-required'\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return [arg for arg in args if arg is not None]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return super(InfraredCLI, self).get_silent_args(args) + [\n        '--infrared-only',\n    ]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return super(CLI, self).get_silent_args(args) + ['--no-color']\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return []\n", "is_pass": true, "return_code": 0}, {"generate_code": "def get_silent_args(self, args):\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_silent_args(self, args):\n    return self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_requires_args", "docstring": "Check if all the required arguments have been provided.", "ques_id": "6306092d73426c38ae68ad07", "code": ["def validate_requires_args(self, args):\n    arg_spec = dict(self.parser._required_args)\n    for arg_name, arg_type in args.items():\n        if arg_name not in arg_spec:\n            raise CLIError('Required argument {} not found'.format(arg_name))\n        arg_spec[arg_name] = arg_type\n", "def validate_requires_args(self, args):\n    return self._validate_requires_args(args)\n", "def validate_requires_args(self, args):\n    if args.requires_args is None:\n        return\n\n    spec = vars(args)\n    required_args = spec.get('requires', [])\n    for required_arg in required_args:\n        if required_arg not in self.vars:\n            raise MissingArgument(\n                \"Missing required argument '{}'\".format(required_arg)\n            )\n", "def validate_requires_args(self, args):\n    return self._validate_requires_args(args)\n", "def validate_requires_args(self, args):\n    spec_args = vars(self.vars)\n    required_args = spec_args.pop('required')\n    for arg in args:\n        if arg not in required_args:\n            print('{} is not a required argument for {}'.format(arg, self.command_name))\n            raise InvalidArgumentError\n", "def validate_requires_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if spec_args is not None:\n        required_args = spec_args.get(args.command, [])\n        if args.command in required_args:\n            raise exceptions.RequireArgument(args.command, required_args)\n", "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(\n       'requires',\n        args)\n    if not required_args:\n        return\n\n    err_msg = 'Argument(s) \"{}\" must have at least one'\\\n        'conditional argument.'\n    raise MissingArgsError(err_msg.format(', '.join(required_args)))\n", "def validate_requires_args(self, args):\n    arg_names = [arg.name for arg in args]\n    if '--' in arg_names:\n        raise InvalidArgumentException('-- arguments cannot be specified at the same time')\n    return args\n", "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(self.parser.parse_args)\n    required_args = arg_spec.args[-len(args):]\n    deprecated_args = [arg for arg in args if arg not in required_args]\n    if deprecated_args:\n        deprecation_warning(\"Received arguments {} that are deprecated \"\n                            \"in {}. Please consult the documentation \"\n                            \"for further information.\"\n                           .format(deprecated_args, self.plugin_path))\n", "def validate_requires_args(self, args):\n    arg_spec = inspect.getfullargspec(args)\n    arg_spec.defaults = args.__defaults__ if arg_spec.defaults is not None else []\n    arg_spec.args = [arg_spec.args[i] if i < len(arg_spec.args) else None for i in range(len(arg_spec.args))]\n    return arg_spec\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_requires_args(self, args):\n    arg_spec = dict(self.parser._required_args)\n    for arg_name, arg_type in args.items():\n        if arg_name not in arg_spec:\n            raise CLIError('Required argument {} not found'.format(arg_name))\n        arg_spec[arg_name] = arg_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return self._validate_requires_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    if args.requires_args is None:\n        return\n\n    spec = vars(args)\n    required_args = spec.get('requires', [])\n    for required_arg in required_args:\n        if required_arg not in self.vars:\n            raise MissingArgument(\n                \"Missing required argument '{}'\".format(required_arg)\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    return self._validate_requires_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    spec_args = vars(self.vars)\n    required_args = spec_args.pop('required')\n    for arg in args:\n        if arg not in required_args:\n            print('{} is not a required argument for {}'.format(arg, self.command_name))\n            raise InvalidArgumentError\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    spec_args = self.vars.get('__spec_args__')\n    if spec_args is not None:\n        required_args = spec_args.get(args.command, [])\n        if args.command in required_args:\n            raise exceptions.RequireArgument(args.command, required_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    required_args = self._get_conditionally_required_args(\n       'requires',\n        args)\n    if not required_args:\n        return\n\n    err_msg = 'Argument(s) \"{}\" must have at least one'\\\n        'conditional argument.'\n    raise MissingArgsError(err_msg.format(', '.join(required_args)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    arg_names = [arg.name for arg in args]\n    if '--' in arg_names:\n        raise InvalidArgumentException('-- arguments cannot be specified at the same time')\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    arg_spec = inspect.getargspec(self.parser.parse_args)\n    required_args = arg_spec.args[-len(args):]\n    deprecated_args = [arg for arg in args if arg not in required_args]\n    if deprecated_args:\n        deprecation_warning(\"Received arguments {} that are deprecated \"\n                            \"in {}. Please consult the documentation \"\n                            \"for further information.\"\n                           .format(deprecated_args, self.plugin_path))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_requires_args(self, args):\n    arg_spec = inspect.getfullargspec(args)\n    arg_spec.defaults = args.__defaults__ if arg_spec.defaults is not None else []\n    arg_spec.args = [arg_spec.args[i] if i < len(arg_spec.args) else None for i in range(len(arg_spec.args))]\n    return arg_spec\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_get_conditionally_required_args", "docstring": "List arguments with ``required_when`` condition matched.\n\n:param command_name: the command name.\n:param options_spec:  the list of command spec options.\n:param args: the received input arguments\n:return: list, list of argument names with matched ``required_when``\n    condition", "ques_id": "6306092d73426c38ae68ad08", "code": ["def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Returns a list of all the arguments that must be required when the\n    specified command is run. The returned list should not include arguments\n    that are specified in the ``--`` or ``----opt`` arguments.\n    \"\"\"\n    spec_args = self.vars[command_name]['args']\n    required_args = [arg for arg in args if arg not in spec_args]\n    return required_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get required arguments from args and validate them with the spec.\n    \"\"\"\n    arg_spec = vars(args)\n    arg_spec.update(options_spec)\n    args = vars(args)\n    args['required'] = self._validate_required_args(args)\n    args = self.validate_arg_deprecation(args, command_name)\n    return args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get conditionally required arguments from command arguments.\n    \"\"\"\n    # parse arguments\n    args = self.parse_args(args)\n\n    # resolve arguments\n    cli_args = self._resolve_cli_args(args)\n\n    # validate arguments\n    self.validate_arg_sources(cli_args, args)\n    self.validate_choices_args(cli_args, args)\n\n    # return conditionally required arguments\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    This method is used to validate the requirements of a command.\n    \"\"\"\n    args_without_defaults = args[:-len(options_spec[command_name]['defaults'])]\n    args_without_defaults += [arg for arg in args_without_defaults\n                              if arg is not None]\n    return args_without_defaults\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Generate required arguments for command.\n\n    \"\"\"\n    args = super(CLI, self)._get_conditionally_required_args(command_name,\n                                                             options_spec,\n                                                             args)\n    if 'choices' in args:\n        args['choices'] = self._merge_duplicated_cli_args(args['choices'])\n    return args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\" get conditionally required args \"\"\"\n    arg_spec = ArgumentSpec.from_command_name_and_options(\n        command_name, options_spec, args)\n    args = arg_spec.args\n    required_args = set()\n\n    for arg_name in args:\n        if arg_name in self.vars and arg_name not in self.defaults:\n            required_args.update(self.vars[arg_name])\n\n    return required_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    The conditionally required args are taken from the spec arguments.\n    \"\"\"\n    required_args = []\n    for arg in args:\n        if arg['name'] in options_spec and arg['required']:\n            required_args.append(arg)\n\n    return required_args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    :type command_name: string\n    :type options_spec: dict\n    :type args: list[string]\n    :rtype: list[string]\n    \"\"\"\n    arg_spec = dict(args)\n\n    for arg_name, arg_type in arg_spec.items():\n        if not arg_type.is_type_of(command_name):\n            continue\n\n        for arg_name_, arg_type_ in arg_spec.items():\n            if arg_name_ == arg_name and arg_type_ == arg_type:\n                continue\n\n            if arg_name_ not in options_spec or arg_type_!= arg_type:\n                raise InvalidArgument('Unknown argument %s' % arg_name)\n\n            args.remove(arg_name)\n\n    return args\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    This method is used to get the required arguments for the ``generate``\n    command when the command is run as a single command with the ``generate``\n    command and it will return the list of arguments that are not\n    required by the plugin.\n    \"\"\"\n    required_args = []\n\n    if command_name in self.vars and self.vars[command_name].required:\n        required_args = self.vars[command_name].required\n\n    return self._merge_duplicated_cli_args(required_args, args)\n", "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get the required arguments for the conditionally required command\n    \"\"\"\n    args = super(ConditionalArgumentParser, self)._get_conditionally_required_args(\n        command_name, options_spec, args)\n\n    args.update(self._get_conditionally_required_args(\n        command_name, options_spec, args))\n\n    return args\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Returns a list of all the arguments that must be required when the\n    specified command is run. The returned list should not include arguments\n    that are specified in the ``--`` or ``----opt`` arguments.\n    \"\"\"\n    spec_args = self.vars[command_name]['args']\n    required_args = [arg for arg in args if arg not in spec_args]\n    return required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get required arguments from args and validate them with the spec.\n    \"\"\"\n    arg_spec = vars(args)\n    arg_spec.update(options_spec)\n    args = vars(args)\n    args['required'] = self._validate_required_args(args)\n    args = self.validate_arg_deprecation(args, command_name)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get conditionally required arguments from command arguments.\n    \"\"\"\n    # parse arguments\n    args = self.parse_args(args)\n\n    # resolve arguments\n    cli_args = self._resolve_cli_args(args)\n\n    # validate arguments\n    self.validate_arg_sources(cli_args, args)\n    self.validate_choices_args(cli_args, args)\n\n    # return conditionally required arguments\n    return self._get_conditionally_required_args(command_name, options_spec,\n                                                args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    This method is used to validate the requirements of a command.\n    \"\"\"\n    args_without_defaults = args[:-len(options_spec[command_name]['defaults'])]\n    args_without_defaults += [arg for arg in args_without_defaults\n                              if arg is not None]\n    return args_without_defaults\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Generate required arguments for command.\n\n    \"\"\"\n    args = super(CLI, self)._get_conditionally_required_args(command_name,\n                                                             options_spec,\n                                                             args)\n    if 'choices' in args:\n        args['choices'] = self._merge_duplicated_cli_args(args['choices'])\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\" get conditionally required args \"\"\"\n    arg_spec = ArgumentSpec.from_command_name_and_options(\n        command_name, options_spec, args)\n    args = arg_spec.args\n    required_args = set()\n\n    for arg_name in args:\n        if arg_name in self.vars and arg_name not in self.defaults:\n            required_args.update(self.vars[arg_name])\n\n    return required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    The conditionally required args are taken from the spec arguments.\n    \"\"\"\n    required_args = []\n    for arg in args:\n        if arg['name'] in options_spec and arg['required']:\n            required_args.append(arg)\n\n    return required_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    :type command_name: string\n    :type options_spec: dict\n    :type args: list[string]\n    :rtype: list[string]\n    \"\"\"\n    arg_spec = dict(args)\n\n    for arg_name, arg_type in arg_spec.items():\n        if not arg_type.is_type_of(command_name):\n            continue\n\n        for arg_name_, arg_type_ in arg_spec.items():\n            if arg_name_ == arg_name and arg_type_ == arg_type:\n                continue\n\n            if arg_name_ not in options_spec or arg_type_!= arg_type:\n                raise InvalidArgument('Unknown argument %s' % arg_name)\n\n            args.remove(arg_name)\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    This method is used to get the required arguments for the ``generate``\n    command when the command is run as a single command with the ``generate``\n    command and it will return the list of arguments that are not\n    required by the plugin.\n    \"\"\"\n    required_args = []\n\n    if command_name in self.vars and self.vars[command_name].required:\n        required_args = self.vars[command_name].required\n\n    return self._merge_duplicated_cli_args(required_args, args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _get_conditionally_required_args(self, command_name, options_spec,\n                                         args):\n    \"\"\"\n    Get the required arguments for the conditionally required command\n    \"\"\"\n    args = super(ConditionalArgumentParser, self)._get_conditionally_required_args(\n        command_name, options_spec, args)\n\n    args.update(self._get_conditionally_required_args(\n        command_name, options_spec, args))\n\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_length_args", "docstring": "Check if value of arguments is not longer than length specified.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad09", "code": ["def validate_length_args(self, args):\n    if len(args) < 2:\n        raise CommandArgumentException(\"This command takes at least two arguments.\")\n", "def validate_length_args(self, args):\n    if len(args)!= len(self.vars):\n        raise AnsibleFilterError(\"Incorrect number of variables provided \"\n                                \"for command %s\" % args)\n    return args\n", "def validate_length_args(self, args):\n    return self._validate_length_args(args)\n", "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[\"max_args\"]:\n            raise ArgumentTooLongException(\n                \"Argument '{}' cannot be more than {} \"\n                \"arguments\".format(arg, self.vars[\"max_args\"])\n            )\n", "def validate_length_args(self, args):\n    if len(args) > len(self.vars):\n        raise ValueError('Too many arguments for \"%s\". Expected %d '\n                         '(got %d)' % (args[0], len(self.vars), len(args) - len(self.vars)))\n", "def validate_length_args(self, args):\n    required_args = [arg for arg in args if arg['required']]\n    if len(required_args) == 0:\n        self._print_help('')\n        return None\n    elif len(required_args) > 1:\n        self._print_help('')\n        return None\n    return required_args[0]\n", "def validate_length_args(self, args):\n    if len(args) > 1:\n        raise InvalidArgumentException(args, 'Too many arguments.')\n\n    return args[0]\n", "def validate_length_args(self, args):\n    arg_spec = inspect.getfullargspec(args)\n    if arg_spec.varargs is None:\n        if arg_spec.keywords is None:\n            if arg_spec.defaults is None:\n                raise CliArgumentError('Either a single arg or a var arg must be provided.')\n            else:\n                return args\n        else:\n            raise CliArgumentError('Var args not provided. Please provide at least one arg.')\n    else:\n        return args\n", "def validate_length_args(self, args):\n    if len(args)!= len(self.vars):\n        raise AnsibleFilterError(\"{} requires {} arguments\".format(\n            args, len(self.vars)\n        ))\n\n    return args\n", "def validate_length_args(self, args):\n    if len(args)!= self.vars['num_vars']:\n        raise InvalidArguments('Invalid number of arguments!')\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_length_args(self, args):\n    if len(args) < 2:\n        raise CommandArgumentException(\"This command takes at least two arguments.\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args)!= len(self.vars):\n        raise AnsibleFilterError(\"Incorrect number of variables provided \"\n                                \"for command %s\" % args)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    return self._validate_length_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    for arg in args:\n        if len(args[arg]) > self.vars[\"max_args\"]:\n            raise ArgumentTooLongException(\n                \"Argument '{}' cannot be more than {} \"\n                \"arguments\".format(arg, self.vars[\"max_args\"])\n            )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > len(self.vars):\n        raise ValueError('Too many arguments for \"%s\". Expected %d '\n                         '(got %d)' % (args[0], len(self.vars), len(args) - len(self.vars)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    required_args = [arg for arg in args if arg['required']]\n    if len(required_args) == 0:\n        self._print_help('')\n        return None\n    elif len(required_args) > 1:\n        self._print_help('')\n        return None\n    return required_args[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args) > 1:\n        raise InvalidArgumentException(args, 'Too many arguments.')\n\n    return args[0]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    arg_spec = inspect.getfullargspec(args)\n    if arg_spec.varargs is None:\n        if arg_spec.keywords is None:\n            if arg_spec.defaults is None:\n                raise CliArgumentError('Either a single arg or a var arg must be provided.')\n            else:\n                return args\n        else:\n            raise CliArgumentError('Var args not provided. Please provide at least one arg.')\n    else:\n        return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args)!= len(self.vars):\n        raise AnsibleFilterError(\"{} requires {} arguments\".format(\n            args, len(self.vars)\n        ))\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_length_args(self, args):\n    if len(args)!= self.vars['num_vars']:\n        raise InvalidArguments('Invalid number of arguments!')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_choices_args", "docstring": "Check if value of choice arguments is one of the available choices.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0a", "code": ["def validate_choices_args(self, args):\n    if 'choices' in args:\n        if not isinstance(args['choices'], list):\n            raise InvalidArgumentTypeError('choices', 'list')\n        args['choices'] = ','.join(args['choices'])\n    return args\n", "def validate_choices_args(self, args):\n    for choice, arg_name in args.items():\n        arg_spec = self.vars.get(arg_name)\n        if arg_spec is None:\n            continue\n        if arg_spec.choices and choice not in arg_spec.choices:\n            raise exceptions.CLIAbort(\n                'Must be one of {0}.choices'.format(arg_spec.choices))\n", "def validate_choices_args(self, args):\n    if args['--choices']:\n        if args['--choices'] not in self.vars['CHOICES']:\n            raise CLIError('{0} is not a valid choice for --choices'.format(args['--choices']))\n", "def validate_choices_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n    return self.validate_arg_deprecation(args)\n", "def validate_choices_args(self, args):\n    if not args:\n        raise InvalidArgumentException('You must specify at least one choice argument!')\n    if len(args) > 1:\n        raise InvalidArgumentException('You can only specify one choice argument!')\n    if args[0] not in self.vars:\n        raise InvalidArgumentException('Unknown choice argument: {}'.format(args[0]))\n", "def validate_choices_args(self, args):\n    choices_args = self.get_spec_defaults().get('choices')\n    if choices_args:\n        for arg in args:\n            if arg not in choices_args:\n                raise ArgumentTypeError('Argument {0} is not a valid choice'.format(arg))\n    return args\n", "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    arg_spec.update(self.vars)\n    arg_spec.pop('self', None)\n    return arg_spec\n", "def validate_choices_args(self, args):\n    if not isinstance(args, dict):\n        return False\n\n    for arg_name, arg_spec in args.items():\n        if arg_name in self.vars and arg_spec.choices is None:\n            return False\n        if arg_name not in self.vars and arg_spec.choices is not None:\n            return False\n\n    return True\n", "def validate_choices_args(self, args):\n    if args['--choices']:\n        args['--choices'] = args['--choices'].split(',')\n\n    return args\n", "def validate_choices_args(self, args):\n    self._merge_duplicated_cli_args(args)\n    return args\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_choices_args(self, args):\n    if 'choices' in args:\n        if not isinstance(args['choices'], list):\n            raise InvalidArgumentTypeError('choices', 'list')\n        args['choices'] = ','.join(args['choices'])\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    for choice, arg_name in args.items():\n        arg_spec = self.vars.get(arg_name)\n        if arg_spec is None:\n            continue\n        if arg_spec.choices and choice not in arg_spec.choices:\n            raise exceptions.CLIAbort(\n                'Must be one of {0}.choices'.format(arg_spec.choices))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices']:\n        if args['--choices'] not in self.vars['CHOICES']:\n            raise CLIError('{0} is not a valid choice for --choices'.format(args['--choices']))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n    return self.validate_arg_deprecation(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if not args:\n        raise InvalidArgumentException('You must specify at least one choice argument!')\n    if len(args) > 1:\n        raise InvalidArgumentException('You can only specify one choice argument!')\n    if args[0] not in self.vars:\n        raise InvalidArgumentException('Unknown choice argument: {}'.format(args[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    choices_args = self.get_spec_defaults().get('choices')\n    if choices_args:\n        for arg in args:\n            if arg not in choices_args:\n                raise ArgumentTypeError('Argument {0} is not a valid choice'.format(arg))\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    arg_spec = vars(args)\n    arg_spec.update(self.vars)\n    arg_spec.pop('self', None)\n    return arg_spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if not isinstance(args, dict):\n        return False\n\n    for arg_name, arg_spec in args.items():\n        if arg_name in self.vars and arg_spec.choices is None:\n            return False\n        if arg_name not in self.vars and arg_spec.choices is not None:\n            return False\n\n    return True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    if args['--choices']:\n        args['--choices'] = args['--choices'].split(',')\n\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_choices_args(self, args):\n    self._merge_duplicated_cli_args(args)\n    return args\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "validate_min_max_args", "docstring": "Check if value of arguments is between minimum and maximum values.\n\n:param args: The received arguments.", "ques_id": "6306092e73426c38ae68ad0b", "code": ["def validate_min_max_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n    return self.validate_arg_sources(args)\n", "def validate_min_max_args(self, args):\n    min_args = []\n    max_args = []\n    for name, arg in args.items():\n        arg_type = self.vars[name].type\n        if arg_type not in [int, float]:\n            raise InvalidArgumentError(\n                \"Argument {} must be integer or float values\".format(name))\n        if not isinstance(arg, arg_type):\n            raise InvalidArgumentError(\n                \"Argument {} must be a valid type {}\".format(name, arg_type))\n        min_args.append(name)\n        max_args.append(name)\n\n    if len(min_args) > 1:\n        raise InvalidArgumentError(\n            \"Arguments must have at most one named argument\")\n\n    if len(max_args) > 1:\n        raise InvalidArgumentError(\n            \"Arguments must have at most one named argument\")\n", "def validate_min_max_args(self, args):\n    if len(args) < 1:\n        raise InvalidArgumentException('Arguments provided to \"min\" or \"max\" command must be at least one argument')\n    if args[0] not in ['min','max']:\n        raise InvalidArgumentException('Argument \"{}\" is not a valid argument for \"min\" or \"max\" command'.format(args[0]))\n", "def validate_min_max_args(self, args):\n    arg_spec = vars(args)\n    if arg_spec['type'] == 'int':\n        if arg_spec['min'] is not None and arg_spec['max'] is not None:\n            raise ArgumentError(\n                'Both --type int and --min and --max cannot be specified together')\n    elif arg_spec['type'] =='str':\n        if arg_spec['min'] is not None and arg_spec['max'] is not None:\n            raise ArgumentError(\n                'Both --type str and --min and --max cannot be specified together')\n    return args\n", "def validate_min_max_args(self, args):\n    validate_min_max_args(args, self.vars, self.vars_dir)\n", "def validate_min_max_args(self, args):\n    if not args:\n        raise NoArgumentsError('No arguments were provided.')\n    min_args = self.parser._get_arg_count(args[0])\n    max_args = min_args + len(args) - 1\n    if min_args > max_args:\n        raise ArgumentCountError('Arguments count %s is greater than the min '\n                                 'arguments count %s' %\n                                 (min_args, max_args))\n", "def validate_min_max_args(self, args):\n    if len(args) < 2:\n        raise InvalidArgumentException(\n            'Not enough arguments provided to function \"{}\"'.format(\n                self.__name__))\n    elif args[0] not in self.vars:\n        raise InvalidArgumentException(\n            'Unknown variable \"{}\". Choose from {}.'.format(\n                args[0], ', '.join(self.vars)))\n", "def validate_min_max_args(self, args):\n    return self._validate_min_max_args(args,'min','max')\n", "def validate_min_max_args(self, args):\n    args = super(CLIArgumentParser, self).validate_min_max_args(args)\n    if args['--min'] > args['--max']:\n        msg = 'Minimum argument must be greater or equal than maximum argument'\n        raise ArgumentTypeError(msg)\n    return args\n", "def validate_min_max_args(self, args):\n    min_args, max_args = self._get_conditionally_required_args('min', args)\n    if min_args > max_args:\n        msg = 'Argument {args} must be between {min_args} and {max_args}'\n        raise CLIError(msg.format(args=args, min_args=min_args, max_args=max_args))\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def validate_min_max_args(self, args):\n    args = self._merge_duplicated_cli_args(args)\n    return self.validate_arg_sources(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_args = []\n    max_args = []\n    for name, arg in args.items():\n        arg_type = self.vars[name].type\n        if arg_type not in [int, float]:\n            raise InvalidArgumentError(\n                \"Argument {} must be integer or float values\".format(name))\n        if not isinstance(arg, arg_type):\n            raise InvalidArgumentError(\n                \"Argument {} must be a valid type {}\".format(name, arg_type))\n        min_args.append(name)\n        max_args.append(name)\n\n    if len(min_args) > 1:\n        raise InvalidArgumentError(\n            \"Arguments must have at most one named argument\")\n\n    if len(max_args) > 1:\n        raise InvalidArgumentError(\n            \"Arguments must have at most one named argument\")\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if len(args) < 1:\n        raise InvalidArgumentException('Arguments provided to \"min\" or \"max\" command must be at least one argument')\n    if args[0] not in ['min','max']:\n        raise InvalidArgumentException('Argument \"{}\" is not a valid argument for \"min\" or \"max\" command'.format(args[0]))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    arg_spec = vars(args)\n    if arg_spec['type'] == 'int':\n        if arg_spec['min'] is not None and arg_spec['max'] is not None:\n            raise ArgumentError(\n                'Both --type int and --min and --max cannot be specified together')\n    elif arg_spec['type'] =='str':\n        if arg_spec['min'] is not None and arg_spec['max'] is not None:\n            raise ArgumentError(\n                'Both --type str and --min and --max cannot be specified together')\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    validate_min_max_args(args, self.vars, self.vars_dir)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if not args:\n        raise NoArgumentsError('No arguments were provided.')\n    min_args = self.parser._get_arg_count(args[0])\n    max_args = min_args + len(args) - 1\n    if min_args > max_args:\n        raise ArgumentCountError('Arguments count %s is greater than the min '\n                                 'arguments count %s' %\n                                 (min_args, max_args))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    if len(args) < 2:\n        raise InvalidArgumentException(\n            'Not enough arguments provided to function \"{}\"'.format(\n                self.__name__))\n    elif args[0] not in self.vars:\n        raise InvalidArgumentException(\n            'Unknown variable \"{}\". Choose from {}.'.format(\n                args[0], ', '.join(self.vars)))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    return self._validate_min_max_args(args,'min','max')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    args = super(CLIArgumentParser, self).validate_min_max_args(args)\n    if args['--min'] > args['--max']:\n        msg = 'Minimum argument must be greater or equal than maximum argument'\n        raise ArgumentTypeError(msg)\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def validate_min_max_args(self, args):\n    min_args, max_args = self._get_conditionally_required_args('min', args)\n    if min_args > max_args:\n        msg = 'Argument {args} must be between {min_args} and {max_args}'\n        raise CLIError(msg.format(args=args, min_args=min_args, max_args=max_args))\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "create_complex_argumet_type", "docstring": "Build the complex argument type\n\n:param subcommand: the command name\n:param type_name: the complex type name\n:param option_name: the option name\n:param spec_option: option's specifications\n:return: the complex type instance", "ques_id": "6306092e73426c38ae68ad0d", "code": ["def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    :param subcommand: command name\n    :param type_name: type name\n    :param option_name: option name\n    :param spec_option: spec option value\n    \"\"\"\n    if subcommand not in self.vars:\n        self.vars[subcommand] = dict()\n    if type_name not in self.vars[subcommand]:\n        self.vars[subcommand][type_name] = dict()\n    if option_name not in self.vars[subcommand][type_name]:\n        self.vars[subcommand][type_name][option_name] = dict()\n    self.vars[subcommand][type_name][option_name][spec_option] = True\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    if subcommand == \"init\":\n        return InitArgument(option_name, spec_option)\n\n    return Argument(type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type for a command\n    \"\"\"\n    spec_option = spec_option or '--{0}'.format(option_name)\n\n    def decorator(func):\n        argument_type = ArgumentType(\n            func.__name__, spec_option, argparse.SUPPRESS,\n            func, option_name, spec_option)\n        self._merge_duplicated_cli_args([argument_type])\n        self._merge_duplicated_cli_args([args for args in\n                                         argument_type.args])\n        return func\n\n    return decorator\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type\n    \"\"\"\n    def _parse_value(value):\n        value = value.strip()\n        if not value:\n            return None\n        return value\n\n    if isinstance(spec_option, list):\n        spec_option = [_parse_value(item) for item in spec_option]\n    elif isinstance(spec_option, tuple):\n        spec_option = tuple(_parse_value(item) for item in spec_option)\n    elif isinstance(spec_option, dict):\n        spec_option = {_parse_value(key): _parse_value(value)\n                       for key, value in spec_option.items()}\n    else:\n        spec_option = _parse_value(spec_option)\n\n    return ComplexArgumentType(subcommand, type_name, option_name, spec_option)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    This method creates a complex argument type that is used to specify the\n    type of the variable that is required by the command. It is only valid for\n    commands that require arguments.\n    \"\"\"\n    spec_option = spec_option.lower()\n    if spec_option not in self.defaults:\n        raise CliArgumentTypeError('Unknown variable \"%s\" specified in '\n                                   '\"%s\" subcommand. Options are [%s]' %\n                                   (option_name, subcommand,\n                                    ', '.join(self.defaults.keys())))\n\n    def required_type(arg_parser, args):\n        return self.defaults[spec_option]\n\n    return required_type\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    description = \"%s argument type\" % type_name\n    parser = argparse.ArgumentParser(\n        description=description,\n        add_help=False,\n        )\n    parser.add_argument(\n        '--%s' % option_name,\n        metavar='PATH',\n        type=argparse.FileType('r'),\n        default='',\n        help='path to the configuration file',\n        )\n    parser.add_argument(\n        '--%s-type' % option_name,\n        metavar='TYPE',\n        choices=self.vars[type_name].choices,\n        type=argparse.FileType('r'),\n        default='',\n        help='type of the argument (one of %s)' % (\n            ', '.join(self.vars[type_name].choices),\n        ),\n        )\n    return parser.parse_args(arg_parser=args)\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    This method is used to create a complex argument type\n    \"\"\"\n    if isinstance(option_name, list):\n        option_name = ','.join(option_name)\n\n    if isinstance(spec_option, list):\n        spec_option = ','.join(spec_option)\n\n    if isinstance(subcommand, list):\n        subcommand = ','.join(subcommand)\n\n    return \"{subcommand} {option} {spec_option}\".format(\n        subcommand=subcommand,\n        option=option_name,\n        spec_option=spec_option\n    )\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    deprecation_warning_message = (\n        \"The 'create_complex_argumet_type' command is deprecated. \"\n        \"Use 'create_argument_type' instead.\")\n    deprecation_warning_message += (\n        \"This command has been renamed to 'create_argument_type'.\")\n    deprecation_warning_message += (\n        \"For more information please see %s\" % deprecation_warning_message)\n\n    def decorator(func):\n        self.create_argument_type(subcommand, type_name, option_name, spec_option, func)\n        return func\n    return decorator\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type\n    \"\"\"\n    if subcommand in self.vars:\n        raise Exception('duplicate command %s' % subcommand)\n    self.vars[subcommand] = {}\n    self.vars[subcommand][type_name] = {}\n    self.vars[subcommand][type_name][option_name] = spec_option\n    return self.vars[subcommand][type_name][option_name]\n", "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a new argument type for a command\n    \"\"\"\n    def argument_type(self, *args, **kwargs):\n        if args and args[0]:\n            raise InvalidCommandError('Unexpected argument count '\n                                       'for %s command' % subcommand)\n        return self._get_conditionally_required_args(subcommand, option_name,\n                                                            args)\n    return argument_type\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    :param subcommand: command name\n    :param type_name: type name\n    :param option_name: option name\n    :param spec_option: spec option value\n    \"\"\"\n    if subcommand not in self.vars:\n        self.vars[subcommand] = dict()\n    if type_name not in self.vars[subcommand]:\n        self.vars[subcommand][type_name] = dict()\n    if option_name not in self.vars[subcommand][type_name]:\n        self.vars[subcommand][type_name][option_name] = dict()\n    self.vars[subcommand][type_name][option_name][spec_option] = True\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    if subcommand == \"init\":\n        return InitArgument(option_name, spec_option)\n\n    return Argument(type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type for a command\n    \"\"\"\n    spec_option = spec_option or '--{0}'.format(option_name)\n\n    def decorator(func):\n        argument_type = ArgumentType(\n            func.__name__, spec_option, argparse.SUPPRESS,\n            func, option_name, spec_option)\n        self._merge_duplicated_cli_args([argument_type])\n        self._merge_duplicated_cli_args([args for args in\n                                         argument_type.args])\n        return func\n\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type\n    \"\"\"\n    def _parse_value(value):\n        value = value.strip()\n        if not value:\n            return None\n        return value\n\n    if isinstance(spec_option, list):\n        spec_option = [_parse_value(item) for item in spec_option]\n    elif isinstance(spec_option, tuple):\n        spec_option = tuple(_parse_value(item) for item in spec_option)\n    elif isinstance(spec_option, dict):\n        spec_option = {_parse_value(key): _parse_value(value)\n                       for key, value in spec_option.items()}\n    else:\n        spec_option = _parse_value(spec_option)\n\n    return ComplexArgumentType(subcommand, type_name, option_name, spec_option)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    This method creates a complex argument type that is used to specify the\n    type of the variable that is required by the command. It is only valid for\n    commands that require arguments.\n    \"\"\"\n    spec_option = spec_option.lower()\n    if spec_option not in self.defaults:\n        raise CliArgumentTypeError('Unknown variable \"%s\" specified in '\n                                   '\"%s\" subcommand. Options are [%s]' %\n                                   (option_name, subcommand,\n                                    ', '.join(self.defaults.keys())))\n\n    def required_type(arg_parser, args):\n        return self.defaults[spec_option]\n\n    return required_type\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    description = \"%s argument type\" % type_name\n    parser = argparse.ArgumentParser(\n        description=description,\n        add_help=False,\n        )\n    parser.add_argument(\n        '--%s' % option_name,\n        metavar='PATH',\n        type=argparse.FileType('r'),\n        default='',\n        help='path to the configuration file',\n        )\n    parser.add_argument(\n        '--%s-type' % option_name,\n        metavar='TYPE',\n        choices=self.vars[type_name].choices,\n        type=argparse.FileType('r'),\n        default='',\n        help='type of the argument (one of %s)' % (\n            ', '.join(self.vars[type_name].choices),\n        ),\n        )\n    return parser.parse_args(arg_parser=args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    This method is used to create a complex argument type\n    \"\"\"\n    if isinstance(option_name, list):\n        option_name = ','.join(option_name)\n\n    if isinstance(spec_option, list):\n        spec_option = ','.join(spec_option)\n\n    if isinstance(subcommand, list):\n        subcommand = ','.join(subcommand)\n\n    return \"{subcommand} {option} {spec_option}\".format(\n        subcommand=subcommand,\n        option=option_name,\n        spec_option=spec_option\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type.\n    \"\"\"\n    deprecation_warning_message = (\n        \"The 'create_complex_argumet_type' command is deprecated. \"\n        \"Use 'create_argument_type' instead.\")\n    deprecation_warning_message += (\n        \"This command has been renamed to 'create_argument_type'.\")\n    deprecation_warning_message += (\n        \"For more information please see %s\" % deprecation_warning_message)\n\n    def decorator(func):\n        self.create_argument_type(subcommand, type_name, option_name, spec_option, func)\n        return func\n    return decorator\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a complex argument type\n    \"\"\"\n    if subcommand in self.vars:\n        raise Exception('duplicate command %s' % subcommand)\n    self.vars[subcommand] = {}\n    self.vars[subcommand][type_name] = {}\n    self.vars[subcommand][type_name][option_name] = spec_option\n    return self.vars[subcommand][type_name][option_name]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def create_complex_argumet_type(self, subcommand, type_name, option_name,\n                                    spec_option):\n    \"\"\"\n    Create a new argument type for a command\n    \"\"\"\n    def argument_type(self, *args, **kwargs):\n        if args and args[0]:\n            raise InvalidCommandError('Unexpected argument count '\n                                       'for %s command' % subcommand)\n        return self._get_conditionally_required_args(subcommand, option_name,\n                                                            args)\n    return argument_type\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "get_nested_custom_and_control_args", "docstring": "Split input arguments to control nested and custom.\n\nControls arguments: control the IR behavior. These arguments\n    will not be put into the spec yml file\nNested arguments: are used by the Ansible playbooks and will be put\n    into the spec yml file.\nCustom arguments: Custom ansible variables to be used instead of the\n    normal nested usage.\n\n:param args: the collected list of args.\n:return: (dict, dict): flat dicts (control_args, nested_args)", "ques_id": "6306092e73426c38ae68ad0f", "code": ["def get_nested_custom_and_control_args(self, args):\n    if args.nested_args is not None:\n        self.nested_args = args.nested_args\n        LOG.debug(\"nested args: %s\", self.nested_args)\n        return True\n\n    return False\n", "def get_nested_custom_and_control_args(self, args):\n    return [args.pop(0)] + self._merge_duplicated_cli_args(args)\n", "def get_nested_custom_and_control_args(self, args):\n\n    nested_args = collections.defaultdict(list)\n    for arg in args:\n        if arg in self.vars:\n            nested_args[arg].append(arg)\n        elif arg in self.defaults:\n            nested_args[arg].append(arg)\n    return nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "def get_nested_custom_and_control_args(self, args):\n    nested_args = dict()\n    for arg in args:\n        if arg.startswith('--') and arg.endswith('='):\n            nested_args[arg[2:-1]] = args[arg]\n        else:\n            nested_args[arg] = args[arg]\n\n    return nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    args = super(InfraredCLI, self).get_nested_custom_and_control_args(args)\n    args['cli_args'] = self.parser.parse_args(args['cli_args'])\n    args['args'] = self._merge_duplicated_cli_args(args['args'])\n    return args\n", "def get_nested_custom_and_control_args(self, args):\n    arg_list = []\n    for arg in args:\n        if arg.startswith('--'):\n            arg_list.append(arg)\n        elif arg in self.vars:\n            arg_list.extend(['--', arg])\n        else:\n            LOG.debug('Unrecognized argument %s', arg)\n    return arg_list\n", "def get_nested_custom_and_control_args(self, args):\n\n    def get_nested_custom_args(args):\n        return self._get_conditionally_required_args(args)\n\n    nested_args = self.parser.parse_known_args(args)\n    nested_args = get_nested_custom_args(nested_args)\n\n    return nested_args\n", "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args(args, 'c')\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def get_nested_custom_and_control_args(self, args):\n    if args.nested_args is not None:\n        self.nested_args = args.nested_args\n        LOG.debug(\"nested args: %s\", self.nested_args)\n        return True\n\n    return False\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return [args.pop(0)] + self._merge_duplicated_cli_args(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    nested_args = collections.defaultdict(list)\n    for arg in args:\n        if arg in self.vars:\n            nested_args[arg].append(arg)\n        elif arg in self.defaults:\n            nested_args[arg].append(arg)\n    return nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._iterate_received_arguments(args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    nested_args = dict()\n    for arg in args:\n        if arg.startswith('--') and arg.endswith('='):\n            nested_args[arg[2:-1]] = args[arg]\n        else:\n            nested_args[arg] = args[arg]\n\n    return nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    args = super(InfraredCLI, self).get_nested_custom_and_control_args(args)\n    args['cli_args'] = self.parser.parse_args(args['cli_args'])\n    args['args'] = self._merge_duplicated_cli_args(args['args'])\n    return args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    arg_list = []\n    for arg in args:\n        if arg.startswith('--'):\n            arg_list.append(arg)\n        elif arg in self.vars:\n            arg_list.extend(['--', arg])\n        else:\n            LOG.debug('Unrecognized argument %s', arg)\n    return arg_list\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n\n    def get_nested_custom_args(args):\n        return self._get_conditionally_required_args(args)\n\n    nested_args = self.parser.parse_known_args(args)\n    nested_args = get_nested_custom_args(nested_args)\n\n    return nested_args\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_nested_custom_and_control_args(self, args):\n    return self._get_conditionally_required_args(args, 'c')\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/settings.py", "project": "redhat-openstack/infrared", "name": "merge_extra_vars", "docstring": "Extend ``vars_dict`` with ``extra-vars``\n\n:param vars_dict: Dictionary to merge extra-vars into\n:param extra_vars: List of extra-vars", "ques_id": "6306092e73426c38ae68ad11", "code": ["def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict:\n        return vars_dict\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = None\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                extra_vars.append(key)\n\n    return dict(vars_dict, **extra_vars)\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra' not in vars_dict:\n        vars_dict['_extra'] = extra_vars\n    else:\n        vars_dict['_extra'].extend(extra_vars)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                extra_vars.extend(value)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(dict(extra_vars))\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if not vars_dict:\n        return vars_dict\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict[extra_var] = None\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                extra_vars.append(key)\n\n    return dict(vars_dict, **extra_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if '_extra' not in vars_dict:\n        vars_dict['_extra'] = extra_vars\n    else:\n        vars_dict['_extra'].extend(extra_vars)\n\n    return vars_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(vars_dict, dict):\n        for key, value in vars_dict.items():\n            if key not in extra_vars:\n                vars_dict[key] = value\n            else:\n                extra_vars.extend(value)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    if isinstance(extra_vars, str):\n        extra_vars = [extra_vars]\n\n    vars_dict.update(dict(extra_vars))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        return vars_dict\n\n    for extra_var in extra_vars:\n        if extra_var not in vars_dict:\n            vars_dict.update(extra_var)\n\n    return vars_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def merge_extra_vars(vars_dict, extra_vars=None):\n    if extra_vars is None:\n        extra_vars = []\n\n    vars_dict.update(extra_vars)\n    return vars_dict\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "ansible_playbook", "docstring": "Wraps the 'ansible-playbook' CLI.\n\n:param ir_workspace: An Infrared Workspace object represents the active\nworkspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:param playbook_path: the playbook to invoke\n:param verbose: Ansible verbosity level\n:param extra_vars: dict. Passed to Ansible as extra-vars\n:param ansible_args: dict of ansible-playbook arguments to plumb down\n    directly to Ansible.", "ques_id": "6306092f73426c38ae68ad13", "code": ["def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n\n    # Init variables\n    ir_workspace = ir_workspace\n    ir_plugin = ir_plugin\n    playbook_path = playbook_path\n    verbose = verbose or ir_plugin.get_verbosity()\n    extra_vars = extra_vars or ir_plugin.get_ansible_extra_vars()\n    ansible_args = ansible_args or ir_plugin.get_ansible_args()\n\n    # Run playbook\n    LOG.debug('Executing playbook %s in %s with args %s',\n              playbook_path, ir_workspace.name, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # FIXME: pass extra_vars to the infrared plugin\n    ir_workspace.ansible_logger.log(verbose, ir_workspace.ansible_vars)\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    try:\n        return _run_playbook(\n            ir_workspace, ir_plugin, playbook_path, verbose,\n            extra_vars=extra_vars, ansible_args=ansible_args)\n    except Exception as e:\n        LOG.error('An error occurred while running the ansible-playbook: %s', e)\n        if ansible_args:\n            print('ANSIBLE_ARGS=%s' % ansible_args)\n        raise\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # set the verbosity and extra_vars to be passed to Ansible\n    _run_playbook(cli_args=extra_vars, vars_dict=extra_vars,\n                  ir_workspace=ir_workspace, ir_plugin=ir_plugin,\n                  verbose=verbose, playbook_path=playbook_path,\n                  ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    ir_playbook_path = os.path.join(ir_workspace.ir_path, playbook_path)\n    ansible_args = ansible_args or {}\n\n    LOG.info(\"Running ansible-playbook %s on %s\", playbook_path, ir_workspace)\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    # Get the plugin's current workspace\n    ir_workspace = workspace.get_workspace(ir_workspace)\n\n    # Run the playbook\n    LOG.debug('Running ansible-playbook %s', playbook_path)\n    return _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    playbook = ir_workspace.get_playbook(playbook_path)\n    if playbook:\n        return _run_playbook(ir_workspace, ir_plugin, playbook, verbose,\n                             extra_vars, ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                        directly to Ansible.\n    \"\"\"\n    _run_playbook(cli_args, vars_dict=extra_vars, ir_workspace=ir_workspace,\n                 ir_plugin=ir_plugin, playbook_path=playbook_path,\n                 verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args)\n", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    ansible_args = ansible_args or {}\n    args = dict(vars(ir_args) for ir_args in extra_vars.items())\n    args.update(vars(ir_args))\n\n    ansible_args.update({\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n    })\n    LOG.debug(\"Ansible args: %s\", args)\n\n    LOG.debug(\"Calling 'ansible-playbook' with args: %s\", args)\n\n    try:\n   ", "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    playbook_name = os.path.basename(playbook_path)\n    ansible_args = ansible_args or {}\n    ansible_args.update({'ANSIBLE_RUN_playbook': playbook_name})\n    if verbose is not None:\n        ansible_args.update({'verbosity': verbose})\n    if extra_vars is not None:\n        ansible_args.update(extra_vars)\n    LOG.debug('Invoking %s', ansible_args)\n    _run_playbook(ir_workspace, ir_plugin, playbook_path, ir_plugin, **ansible_args)\n"], "level": "file_runnable", "generate_results": [{"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n\n    # Init variables\n    ir_workspace = ir_workspace\n    ir_plugin = ir_plugin\n    playbook_path = playbook_path\n    verbose = verbose or ir_plugin.get_verbosity()\n    extra_vars = extra_vars or ir_plugin.get_ansible_extra_vars()\n    ansible_args = ansible_args or ir_plugin.get_ansible_args()\n\n    # Run playbook\n    LOG.debug('Executing playbook %s in %s with args %s',\n              playbook_path, ir_workspace.name, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # FIXME: pass extra_vars to the infrared plugin\n    ir_workspace.ansible_logger.log(verbose, ir_workspace.ansible_vars)\n    return _run_playbook(\n        ir_workspace, ir_plugin, playbook_path, verbose, extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    try:\n        return _run_playbook(\n            ir_workspace, ir_plugin, playbook_path, verbose,\n            extra_vars=extra_vars, ansible_args=ansible_args)\n    except Exception as e:\n        LOG.error('An error occurred while running the ansible-playbook: %s', e)\n        if ansible_args:\n            print('ANSIBLE_ARGS=%s' % ansible_args)\n        raise\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    # set the verbosity and extra_vars to be passed to Ansible\n    _run_playbook(cli_args=extra_vars, vars_dict=extra_vars,\n                  ir_workspace=ir_workspace, ir_plugin=ir_plugin,\n                  verbose=verbose, playbook_path=playbook_path,\n                  ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    ir_playbook_path = os.path.join(ir_workspace.ir_path, playbook_path)\n    ansible_args = ansible_args or {}\n\n    LOG.info(\"Running ansible-playbook %s on %s\", playbook_path, ir_workspace)\n    return _run_playbook(ir_workspace, ir_plugin, playbook_path, verbose,\n                         extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    # Get the plugin's current workspace\n    ir_workspace = workspace.get_workspace(ir_workspace)\n\n    # Run the playbook\n    LOG.debug('Running ansible-playbook %s', playbook_path)\n    return _run_playbook(\n        ir_workspace,\n        ir_plugin,\n        playbook_path,\n        verbose,\n        extra_vars=extra_vars,\n        ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible\n    \"\"\"\n    playbook = ir_workspace.get_playbook(playbook_path)\n    if playbook:\n        return _run_playbook(ir_workspace, ir_plugin, playbook, verbose,\n                             extra_vars, ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"\n    Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n                        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n                        directly to Ansible.\n    \"\"\"\n    _run_playbook(cli_args, vars_dict=extra_vars, ir_workspace=ir_workspace,\n                 ir_plugin=ir_plugin, playbook_path=playbook_path,\n                 verbose=verbose, extra_vars=extra_vars, ansible_args=ansible_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    ansible_args = ansible_args or {}\n    args = dict(vars(ir_args) for ir_args in extra_vars.items())\n    args.update(vars(ir_args))\n\n    ansible_args.update({\n        'ir_workspace': ir_workspace,\n        'ir_plugin': ir_plugin,\n        'playbook_path': playbook_path,\n    })\n    LOG.debug(\"Ansible args: %s\", args)\n\n    LOG.debug(\"Calling 'ansible-playbook' with args: %s\", args)\n\n    try:\n   ", "is_pass": false, "return_code": 1}, {"generate_code": "def ansible_playbook(ir_workspace, ir_plugin, playbook_path, verbose=None,\n                     extra_vars=None, ansible_args=None):\n    \"\"\"Wraps the 'ansible-playbook' CLI.\n\n    :param ir_workspace: An Infrared Workspace object represents the active\n        workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :param playbook_path: the playbook to invoke\n    :param verbose: Ansible verbosity\n    :param extra_vars: dict. Passed to Ansible as extra-vars\n    :param ansible_args: dict of ansible-playbook arguments to plumb down\n        directly to Ansible.\n    \"\"\"\n    playbook_name = os.path.basename(playbook_path)\n    ansible_args = ansible_args or {}\n    ansible_args.update({'ANSIBLE_RUN_playbook': playbook_name})\n    if verbose is not None:\n        ansible_args.update({'verbosity': verbose})\n    if extra_vars is not None:\n        ansible_args.update(extra_vars)\n    LOG.debug('Invoking %s', ansible_args)\n    _run_playbook(ir_workspace, ir_plugin, playbook_path, ir_plugin, **ansible_args)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/execute.py", "project": "redhat-openstack/infrared", "name": "_run_playbook", "docstring": "Runs ansible cli with vars dict\n\n:param vars_dict: dict, Will be passed as Ansible extra-vars\n:param cli_args: the list  of command line arguments\n:param ir_workspace: An Infrared Workspace object represents the active\n workspace\n:param ir_plugin: An InfraredPlugin object of the current plugin\n:return: ansible results", "ques_id": "6306093273426c38ae68ad15", "code": ["def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible result\n    \"\"\"\n    ansible_runner = Runner(ir_workspace, ir_plugin, cli_args)\n    return ansible_runner.run_playbook(cli_args, vars_dict)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # pylint: disable=unused-argument\n    return ir_plugin.main(cli_args)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible result\n    \"\"\"\n    try:\n        ansible_runner = Runner(cli_args=cli_args, workspace=ir_workspace, plugin=ir_plugin)\n        result = ansible_runner.run(vars_dict=vars_dict)\n        return result\n    except Exception as e:\n        print('Error when running the ansible cli: {}'.format(str(e)))\n        return {'failed': True}\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_plugin.get_vars(cli_args))\n\n    return run_ansible_playbook(cli_args, ansible_vars, ir_workspace, ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object represnting the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.vars)\n    ansible_vars.update(ir_plugin.vars)\n    ansible_result = AnsibleRunner(cli_args, ir_workspace, ir_plugin, vars_dict).run()\n    return ansible_result\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.ansible_vars)\n    ansible_vars.update(ir_plugin.ansible_vars)\n    ansible_args = ['-i', cli_args, '--extra-vars={}'.format(json.dumps(ansible_vars))]\n    result = runner.invoke(cli_plugins.ansible, args=ansible_args)\n    return result.exit_code == 0\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace is None:\n        raise exceptions.MissingWorkspaceException()\n    if ir_plugin is None:\n        raise exceptions.MissingPluginException()\n\n    results = {}\n    ir_plugin.run(cli_args, vars_dict, ir_workspace)\n    results['ansible_facts'] = ir_workspace.ansible_facts\n    results['ir_facts'] = ir_facts.ir_facts\n    results['ir_vars'] = vars_dict\n    results['ir_plugin'] = ir_plugin\n\n    return results\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # pylint: disable=unused-argument\n    return ir_workspace.infrared_plugin.main(cli_args=cli_args, ir_plugin=ir_plugin)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_plugin.get_vars())\n    return cli_args, run_inventory(cli_args, ir_workspace, ansible_vars)\n", "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    # TODO handle vars_dict and ir_workspace in infrared plugin config\n    return ir_workspace.ansible.run_playbook(cli_args=cli_args, vars_dict=vars_dict, ir_plugin=ir_plugin)\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible result\n    \"\"\"\n    ansible_runner = Runner(ir_workspace, ir_plugin, cli_args)\n    return ansible_runner.run_playbook(cli_args, vars_dict)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # pylint: disable=unused-argument\n    return ir_plugin.main(cli_args)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: an ansible result\n    \"\"\"\n    try:\n        ansible_runner = Runner(cli_args=cli_args, workspace=ir_workspace, plugin=ir_plugin)\n        result = ansible_runner.run(vars_dict=vars_dict)\n        return result\n    except Exception as e:\n        print('Error when running the ansible cli: {}'.format(str(e)))\n        return {'failed': True}\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_plugin.get_vars(cli_args))\n\n    return run_ansible_playbook(cli_args, ansible_vars, ir_workspace, ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object represnting the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.vars)\n    ansible_vars.update(ir_plugin.vars)\n    ansible_result = AnsibleRunner(cli_args, ir_workspace, ir_plugin, vars_dict).run()\n    return ansible_result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_workspace.ansible_vars)\n    ansible_vars.update(ir_plugin.ansible_vars)\n    ansible_args = ['-i', cli_args, '--extra-vars={}'.format(json.dumps(ansible_vars))]\n    result = runner.invoke(cli_plugins.ansible, args=ansible_args)\n    return result.exit_code == 0\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    if ir_workspace is None:\n        raise exceptions.MissingWorkspaceException()\n    if ir_plugin is None:\n        raise exceptions.MissingPluginException()\n\n    results = {}\n    ir_plugin.run(cli_args, vars_dict, ir_workspace)\n    results['ansible_facts'] = ir_workspace.ansible_facts\n    results['ir_facts'] = ir_facts.ir_facts\n    results['ir_vars'] = vars_dict\n    results['ir_plugin'] = ir_plugin\n\n    return results\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # pylint: disable=unused-argument\n    return ir_workspace.infrared_plugin.main(cli_args=cli_args, ir_plugin=ir_plugin)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    ansible_vars = vars_dict.copy()\n    ansible_vars.update(ir_plugin.get_vars())\n    return cli_args, run_inventory(cli_args, ir_workspace, ansible_vars)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _run_playbook(cli_args, vars_dict, ir_workspace, ir_plugin):\n    # type: (dict, dict, InfraredWorkspace, InfraredPlugin) -> dict\n    \"\"\"\n    Runs an ansible cli with vars dict\n\n    :param vars_dict: dict, Will be passed as Ansible extra-vars\n    :param cli_args: the list of command line arguments\n    :param ir_workspace: An InfraredWorkspace object representing the active workspace\n    :param ir_plugin: An InfraredPlugin object of the current plugin\n    :return: ansible results\n    \"\"\"\n    # TODO handle vars_dict and ir_workspace in infrared plugin config\n    return ir_workspace.ansible.run_playbook(cli_args=cli_args, vars_dict=vars_dict, ir_plugin=ir_plugin)\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/inspector/inspector.py", "project": "redhat-openstack/infrared", "name": "_convert_non_cli_args", "docstring": "Casts arguments to correct types by modifying values_dict param.\n\nBy default all the values are strings.\n\n:param parser_name: The command name, e.g. main, virsh, ospd, etc\n:param values_dict: The dict of with arguments", "ques_id": "63060ada73426c38ae68ad31", "code": ["def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = ','.join(value)\n        elif isinstance(value, dict):\n            values_dict[key] = ','.join(\n                ['{0}={1}'.format(key, self._convert_non_cli_args(parser_name, value)) for value in value.values()]\n            )\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in six.iteritems(values_dict):\n        if isinstance(arg_value, list):\n            values_dict[arg_name] = ','.join(arg_value)\n        elif isinstance(arg_value, dict):\n            values_dict[arg_name] = ','.join([\n                '{0}={1}'.format(arg_name, arg_value[arg_name])\n                for arg_name in self._merge_duplicated_cli_args(args=arg_value)\n            ])\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    new_values_dict = {}\n    for arg_name, arg_value in values_dict.items():\n        if arg_name in self.parser._get_required_args():\n            arg_value = self.parser._get_required_args()[arg_name]\n        if arg_name in self.parser._get_deprecated_args():\n            arg_value = self.parser._get_deprecated_args()[arg_name]\n        new_values_dict[arg_name] = arg_value\n    return new_values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in values_dict.items():\n        if not arg_name.startswith('--'):\n            arg_name = parser_name + '_' + arg_name\n        if isinstance(arg_value, list):\n            values_dict[arg_name] = arg_value[0]\n        elif isinstance(arg_value, dict):\n            values_dict[arg_name] = self._convert_non_cli_args(parser_name, arg_value)\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts:\n        if arg.dest in values_dict:\n            parser_name._short_opts[arg.dest] = values_dict[arg.dest]\n    for arg in parser_name._long_opts:\n        if arg.dest in values_dict:\n            parser_name._long_opts[arg.dest] = values_dict[arg.dest]\n\n    for arg in parser_name._optional_opts:\n        if arg.dest in values_dict:\n            parser_name._optional_opts[arg.dest] = values_dict[arg.dest]\n\n    for arg in parser_name._positional_opts:\n        if arg.dest in values_dict:\n            parser_name._positional_opts[arg.dest] = values_dict[arg.dest]\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name in values_dict:\n        if not arg_name.startswith(parser_name + '_'):\n            continue\n        return arg_name.replace(parser_name + '_', '', 1)\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_type in values_dict.items():\n        if arg_type is None:\n            continue\n\n        value = args.get(arg_name)\n        if value is None:\n            continue\n\n        if arg_type == \"int\":\n            value = int(value)\n        elif arg_type == \"float\":\n            value = float(value)\n        elif arg_type == \"boolean\":\n            value = value.lower() in [\"true\", \"1\"]\n\n        values_dict[arg_name] = value\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in self.vars:\n        for arg in values_dict:\n            if arg in self.vars[parser_name]:\n                values_dict[arg] = self.vars[parser_name][arg]\n\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_type in values_dict.items():\n        if arg_name not in self.vars:\n            continue\n        if arg_type.__name__ == 'IntArg':\n            values_dict[arg_name] = int(arg_type.convert(arg_type.default))\n        elif arg_type.__name__ == 'FloatArg':\n            values_dict[arg_name] = float(arg_type.convert(arg_type.default))\n        elif arg_type.__name__ == 'CommaSeparatedListArg':\n            values_dict[arg_name] = [item.strip() for item in arg_type.convert(arg_type.default).split(',')]\n    return values_dict\n", "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if arg_spec.converter:\n            converter_name = arg_spec.converter\n            if converter_name not in self.vars.keys():\n                raise exceptions.ArgumentParserError(\n                    '{}: {} argument not found. Converter name must be one of {}'.format(\n                        parser_name, arg_name, self.vars.keys()\n                    )\n                )\n            values_dict[arg_name] = self.vars[converter_name](\n                arg_spec.format_value(arg_spec.parser, arg_spec.default)\n            )\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for key, value in values_dict.items():\n        if isinstance(value, list):\n            values_dict[key] = ','.join(value)\n        elif isinstance(value, dict):\n            values_dict[key] = ','.join(\n                ['{0}={1}'.format(key, self._convert_non_cli_args(parser_name, value)) for value in value.values()]\n            )\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in six.iteritems(values_dict):\n        if isinstance(arg_value, list):\n            values_dict[arg_name] = ','.join(arg_value)\n        elif isinstance(arg_value, dict):\n            values_dict[arg_name] = ','.join([\n                '{0}={1}'.format(arg_name, arg_value[arg_name])\n                for arg_name in self._merge_duplicated_cli_args(args=arg_value)\n            ])\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    new_values_dict = {}\n    for arg_name, arg_value in values_dict.items():\n        if arg_name in self.parser._get_required_args():\n            arg_value = self.parser._get_required_args()[arg_name]\n        if arg_name in self.parser._get_deprecated_args():\n            arg_value = self.parser._get_deprecated_args()[arg_name]\n        new_values_dict[arg_name] = arg_value\n    return new_values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_value in values_dict.items():\n        if not arg_name.startswith('--'):\n            arg_name = parser_name + '_' + arg_name\n        if isinstance(arg_value, list):\n            values_dict[arg_name] = arg_value[0]\n        elif isinstance(arg_value, dict):\n            values_dict[arg_name] = self._convert_non_cli_args(parser_name, arg_value)\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg in parser_name._short_opts:\n        if arg.dest in values_dict:\n            parser_name._short_opts[arg.dest] = values_dict[arg.dest]\n    for arg in parser_name._long_opts:\n        if arg.dest in values_dict:\n            parser_name._long_opts[arg.dest] = values_dict[arg.dest]\n\n    for arg in parser_name._optional_opts:\n        if arg.dest in values_dict:\n            parser_name._optional_opts[arg.dest] = values_dict[arg.dest]\n\n    for arg in parser_name._positional_opts:\n        if arg.dest in values_dict:\n            parser_name._positional_opts[arg.dest] = values_dict[arg.dest]\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name in values_dict:\n        if not arg_name.startswith(parser_name + '_'):\n            continue\n        return arg_name.replace(parser_name + '_', '', 1)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_type in values_dict.items():\n        if arg_type is None:\n            continue\n\n        value = args.get(arg_name)\n        if value is None:\n            continue\n\n        if arg_type == \"int\":\n            value = int(value)\n        elif arg_type == \"float\":\n            value = float(value)\n        elif arg_type == \"boolean\":\n            value = value.lower() in [\"true\", \"1\"]\n\n        values_dict[arg_name] = value\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    if parser_name in self.vars:\n        for arg in values_dict:\n            if arg in self.vars[parser_name]:\n                values_dict[arg] = self.vars[parser_name][arg]\n\n    return values_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_type in values_dict.items():\n        if arg_name not in self.vars:\n            continue\n        if arg_type.__name__ == 'IntArg':\n            values_dict[arg_name] = int(arg_type.convert(arg_type.default))\n        elif arg_type.__name__ == 'FloatArg':\n            values_dict[arg_name] = float(arg_type.convert(arg_type.default))\n        elif arg_type.__name__ == 'CommaSeparatedListArg':\n            values_dict[arg_name] = [item.strip() for item in arg_type.convert(arg_type.default).split(',')]\n    return values_dict\n", "is_pass": true, "return_code": 0}, {"generate_code": "def _convert_non_cli_args(self, parser_name, values_dict):\n    for arg_name, arg_spec in iteritems(values_dict):\n        if arg_spec.converter:\n            converter_name = arg_spec.converter\n            if converter_name not in self.vars.keys():\n                raise exceptions.ArgumentParserError(\n                    '{}: {} argument not found. Converter name must be one of {}'.format(\n                        parser_name, arg_name, self.vars.keys()\n                    )\n                )\n            values_dict[arg_name] = self.vars[converter_name](\n                arg_spec.format_value(arg_spec.parser, arg_spec.default)\n            )\n", "is_pass": false, "return_code": 1}]}
{"file_path": "tests/test_plugins.py", "project": "redhat-openstack/infrared", "name": "get_plugin_spec_flatten_dict", "docstring": "Creates a flat dict from the plugin spec\n\n:param plugin_dir: A path to the plugin's dir\n:return: A flatten dictionary contains the plugin's properties", "ques_id": "63060b1a73426c38ae68ad3e", "code": ["def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for filename in files:\n            if not filename.endswith('.yml'):\n                continue\n            file_path = os.path.join(root, filename)\n            with open(file_path, 'r') as f:\n                data = yaml.safe_load(f)\n                flat_dict.update(data)\n    return flat_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    yaml_filename = os.path.join(plugin_dir, '__init__.yml')\n    with open(yaml_filename, 'rt') as f:\n        try:\n            plugin_spec_flatten_dict = yaml.safe_load(f)\n        except yaml.YAMLError as e:\n            print('Unable to parse YAML file {0}:\\n{1}'.format(\n                yaml_filename, e), file=sys.stderr)\n            sys.exit(1)\n    return plugin_spec_flatten_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    # This function implementation was chosen to be compatible across Python 2/3.\n    # pylint: disable=invalid-name\n    if sys.version_info < (3, 2):\n        import yaml\n    else:\n        import yaml.compat.ruamel_yaml\n\n    spec = yaml.compat.OrderedDict()\n    with open(plugin_dir) as fp:\n        yaml_content = fp.read()\n        plugin_spec_flatten_dict = yaml.compat.ruamel_yaml.load(yaml_content, Loader=yaml.SafeLoader)\n        for k, v in plugin_spec_flatten_dict.items():\n            if isinstance(v, dict):\n                spec[k] = v\n            else:\n                spec[k] = [v]\n    return spec\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for filename in files:\n            if not filename.endswith('.yml'):\n                continue\n            filepath = os.path.join(root, filename)\n            with open(filepath) as ymlfile:\n                result = yaml.load(ymlfile, Loader=yaml.SafeLoader)\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for file_name in files:\n            if file_name.endswith(\".yml\"):\n                file_path = os.path.join(root, file_name)\n                with open(file_path, \"r\") as f:\n                    result = yaml.safe_load(f)\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, _, files in os.walk(plugin_dir):\n        for file_ in files:\n            if file_.endswith('.yml'):\n                with open(os.path.join(root, file_)) as f:\n                    result = yaml.safe_load(f.read())\n    return result\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_flatten_dict = OrderedDict()\n    for plugin_name, plugin_spec in plugin_dir.items():\n        flat_spec = yaml.safe_load(plugin_spec)\n        if isinstance(flat_spec, dict):\n            spec_flatten_dict[plugin_name] = flat_spec\n    return spec_flatten_dict\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.isdir(plugin_dir):\n        return None\n    output = {}\n    for f in os.listdir(plugin_dir):\n        if f.endswith(\".yml\"):\n            with open(os.path.join(plugin_dir, f)) as fp:\n                output = yaml.safe_load(fp)\n    return output\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    # type: (unicode) -> dict\n    \"\"\"\n    Use YAML to read various information in plugin_dir and return the information in dictionary form.\n    \"\"\"\n    with open(plugin_dir) as f:\n        spec = yaml.safe_load(f)\n    return spec\n", "def get_plugin_spec_flatten_dict(plugin_dir):\n    dict_ret = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith(\".yml\"):\n            with open(os.path.join(plugin_dir, filename)) as f:\n                dict_ret.update(yaml.load(f))\n    return dict_ret\n"], "level": "project_runnable", "generate_results": [{"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    flat_dict = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for filename in files:\n            if not filename.endswith('.yml'):\n                continue\n            file_path = os.path.join(root, filename)\n            with open(file_path, 'r') as f:\n                data = yaml.safe_load(f)\n                flat_dict.update(data)\n    return flat_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    plugin_spec_flatten_dict = {}\n    yaml_filename = os.path.join(plugin_dir, '__init__.yml')\n    with open(yaml_filename, 'rt') as f:\n        try:\n            plugin_spec_flatten_dict = yaml.safe_load(f)\n        except yaml.YAMLError as e:\n            print('Unable to parse YAML file {0}:\\n{1}'.format(\n                yaml_filename, e), file=sys.stderr)\n            sys.exit(1)\n    return plugin_spec_flatten_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    # This function implementation was chosen to be compatible across Python 2/3.\n    # pylint: disable=invalid-name\n    if sys.version_info < (3, 2):\n        import yaml\n    else:\n        import yaml.compat.ruamel_yaml\n\n    spec = yaml.compat.OrderedDict()\n    with open(plugin_dir) as fp:\n        yaml_content = fp.read()\n        plugin_spec_flatten_dict = yaml.compat.ruamel_yaml.load(yaml_content, Loader=yaml.SafeLoader)\n        for k, v in plugin_spec_flatten_dict.items():\n            if isinstance(v, dict):\n                spec[k] = v\n            else:\n                spec[k] = [v]\n    return spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for filename in files:\n            if not filename.endswith('.yml'):\n                continue\n            filepath = os.path.join(root, filename)\n            with open(filepath) as ymlfile:\n                result = yaml.load(ymlfile, Loader=yaml.SafeLoader)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, dirs, files in os.walk(plugin_dir):\n        for file_name in files:\n            if file_name.endswith(\".yml\"):\n                file_path = os.path.join(root, file_name)\n                with open(file_path, \"r\") as f:\n                    result = yaml.safe_load(f)\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    result = {}\n    for root, _, files in os.walk(plugin_dir):\n        for file_ in files:\n            if file_.endswith('.yml'):\n                with open(os.path.join(root, file_)) as f:\n                    result = yaml.safe_load(f.read())\n    return result\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    spec_flatten_dict = OrderedDict()\n    for plugin_name, plugin_spec in plugin_dir.items():\n        flat_spec = yaml.safe_load(plugin_spec)\n        if isinstance(flat_spec, dict):\n            spec_flatten_dict[plugin_name] = flat_spec\n    return spec_flatten_dict\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    if not os.path.isdir(plugin_dir):\n        return None\n    output = {}\n    for f in os.listdir(plugin_dir):\n        if f.endswith(\".yml\"):\n            with open(os.path.join(plugin_dir, f)) as fp:\n                output = yaml.safe_load(fp)\n    return output\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    # type: (unicode) -> dict\n    \"\"\"\n    Use YAML to read various information in plugin_dir and return the information in dictionary form.\n    \"\"\"\n    with open(plugin_dir) as f:\n        spec = yaml.safe_load(f)\n    return spec\n", "is_pass": false, "return_code": 1}, {"generate_code": "def get_plugin_spec_flatten_dict(plugin_dir):\n    dict_ret = {}\n    for filename in os.listdir(plugin_dir):\n        if filename.endswith(\".yml\"):\n            with open(os.path.join(plugin_dir, filename)) as f:\n                dict_ret.update(yaml.load(f))\n    return dict_ret\n", "is_pass": false, "return_code": 1}]}
{"file_path": "infrared/core/services/ansible_config.py", "project": "redhat-openstack/infrared", "name": "inject_config", "docstring": "Set the environment variable for config path, if it is undefined.", "ques_id": "63060b1b73426c38ae68ad42", "code": ["def inject_config(self):\n    env_config = os.environ.get('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n\n    if not env_config:\n        env_config = self.ansible_config_path\n\n    super(InfraredIntegration, self).inject_config()\n", "def inject_config(self):\n    config = self._get_ansible_conf_path(self.ansible_config_path)\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = config\n", "def inject_config(self):\n    env_path = os.environ.get('ANSIBLE_CONFIG', None)\n    if env_path is None:\n        env_path = self.ansible_config_path\n\n    if not env_path:\n        return\n\n    self._create_ansible_config(env_path)\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self._create_ansible_config(\n            self.infrared_home)\n", "def inject_config(self):\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self._get_ansible_conf_path(self.ansible_config_path)\n", "def inject_config(self):\n    env_config = self._get_ansible_conf_path(self.ansible_config_path)\n    if env_config is None:\n        env_config = self._create_ansible_config(self.ansible_config_path)\n\n    os.environ['ANSIBLE_CONFIG'] = env_config\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' in os.environ:\n        return\n\n    self.ansible_config_path = self._get_ansible_conf_path(\n        self.infrared_home\n    )\n", "def inject_config(self):\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n"], "level": "class_runnable", "generate_results": [{"generate_code": "def inject_config(self):\n    env_config = os.environ.get('ANSIBLE_CONFIG', '/etc/ansible/ansible.cfg')\n\n    if not env_config:\n        env_config = self.ansible_config_path\n\n    super(InfraredIntegration, self).inject_config()\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    config = self._get_ansible_conf_path(self.ansible_config_path)\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = config\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_path = os.environ.get('ANSIBLE_CONFIG', None)\n    if env_path is None:\n        env_path = self.ansible_config_path\n\n    if not env_path:\n        return\n\n    self._create_ansible_config(env_path)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self._create_ansible_config(\n            self.infrared_home)\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        self.ansible_config_path = self._get_ansible_conf_path(self.ansible_config_path)\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    env_config = self._get_ansible_conf_path(self.ansible_config_path)\n    if env_config is None:\n        env_config = self._create_ansible_config(self.ansible_config_path)\n\n    os.environ['ANSIBLE_CONFIG'] = env_config\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' in os.environ:\n        return\n\n    self.ansible_config_path = self._get_ansible_conf_path(\n        self.infrared_home\n    )\n", "is_pass": false, "return_code": 1}, {"generate_code": "def inject_config(self):\n    if not os.environ.get('ANSIBLE_CONFIG'):\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}, {"generate_code": "def inject_config(self):\n    if 'ANSIBLE_CONFIG' not in os.environ:\n        os.environ['ANSIBLE_CONFIG'] = self.ansible_config_path\n", "is_pass": true, "return_code": 0}]}
{"file_path": "infrared/main.py", "project": "redhat-openstack/infrared", "name": "extend_cli", "docstring": "Adds the spec cli options to to the main entry point.\n\n:param subparser: the subparser object to extend.", "ques_id": "63060b1b73426c38ae68ad43", "code": ["def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Show infrared information')\n    parser.add_argument('--inventory', action='store_true',\n                        help='Print infrared inventory attributes')\n    parser.add_argument('--workspace', action='store',\n                        dest='workspace_manager',\n                        default='infrared',\n                        help='Workspace manager to use. Defaults to \"infrared\".')\n    parser.add_argument('--selected-workspace', action='store',\n                        dest='workspace',\n                        help='Selected workspace to use.')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='Displays the current '\n                                      'spec and its dependencies.')\n\n    parser.add_argument('--short', action='store_true',\n                        help='Show only the spec details.')\n    parser.add_argument('--version', action='store_true',\n                        help='Show the version number.')\n\n    parser.add_argument('--inventory', metavar='PKG_INFO',\n                        help='Load the inventory from the spec.')\n\n    parser.add_argument('--upgrade', metavar='PKG_INFO',\n                        help='Update the package information from the '\n                            'spec.')\n\n    parser.add_argument('--remove-orphans', action='store_true',\n                        help=", "def extend_cli(self, root_subparsers):\n    infrared_parser = root_subparsers.add_parser(\n        'infrared',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        description=textwrap.dedent(\n            \"\"\"\n            Infrared stack deployment.\n\n            Usage: infrared [--checkout-workspace] [--force] [--debug]\n            \"\"\"))\n\n    infrared_parser.add_argument(\n        '--checkout-workspace',\n        type=str,\n        required=False,\n        help='Path to checkout workspace.')\n\n    infrared_parser.add_argument(\n        '--force',\n        action='store_true',\n        help='Force the infrared deployment to use the root workspace.')\n\n    infrared_parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Debug output.')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    self._fetch_inventory(self.name)\n    self.spec_handler(parser, args=parser.add_subparsers())\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='manage infrared packages and export inventory to output'\n    )\n    parser.add_argument(\n        '--workspace',\n        dest='workspace',\n        action='store',\n        metavar='PACKAGE',\n        required=True,\n        help='workspace to export to',\n        default=self._checkout_workspace('infrared'),\n    )\n    parser.add_argument(\n        '--no-cleanup',\n        dest='cleanup',\n        action='store_true',\n        help='do not cleanup infrared packages',\n    )\n    parser.add_argument(\n        '--output-file',\n        dest='output_file',\n        action='store',\n        metavar='FILE',\n        required=False,\n        help='output file name',\n    )\n    parser.add_argument(\n        '--no-update'", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n\n    parser.add_argument('--scan-only', action='store_true',\n                        help='Scan only the infrared devices')\n\n    parser.add_argument('--no-scan', action='store_true',\n                        help='Disable scanning of devices')\n\n    parser.add_argument('--clear-scan', action='store_true',\n                        help='Clear the infrared device list and re-scan')\n\n    parser.add_argument('--update-spec-file', action='store_true',\n                        help='Use spec file for updating the infrared device list')\n\n    parser.add_argument('--remove-spec-file', action='store_true',\n                        help='Use spec file for removing the infrared devices')\n\n    parser.add_argument('--overwrite-spec-fil", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI arguments')\n    parser.add_argument('--inventory', type=str, required=False, default=self._checkout_workspace('inventory'), help='Infrared inventory directory')\n    parser.add_argument('--workspace', type=str, required=False, default=self._checkout_workspace('workspace'), help='Workspace name')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name, help='manage infrared packages and update them from the '\n                 'infrared repository')\n    self.spec_handler(parser, args=parser.add_argument_group(\n        title='arguments for infrared package management'+ self.name))\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='Manage infrared specs')\n    self._fetch_inventory('all')\n    self._checkout_workspace('spec', create=True)\n    parser.add_argument('--force', action='store_true',\n                        help='Force overwrite of existing infrared '\n                            'specs')\n", "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', description='Infrared CLI entry point.')\n    parser.add_argument('--inventory', '-i', default=None, required=True,\n                        help='path to the inventory file.')\n    parser.add_argument('--workspace', '-w', default=None, required=True,\n                        help='path to the workspace to fetch from.')\n    parser.add_argument('--port', '-p', default=None, required=True,\n                        help='port to use (default: all).')\n    parser.add_argument('--address', '-a', default=None, required=True,\n                        help='ip address of the infrared device.')\n    parser.add_argument('--username', '-u', default=None, required=True,\n                        help='username to use (default: root).')\n    parser.add_argument('"], "level": "project_runnable", "generate_results": [{"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Show infrared information')\n    parser.add_argument('--inventory', action='store_true',\n                        help='Print infrared inventory attributes')\n    parser.add_argument('--workspace', action='store',\n                        dest='workspace_manager',\n                        default='infrared',\n                        help='Workspace manager to use. Defaults to \"infrared\".')\n    parser.add_argument('--selected-workspace', action='store',\n                        dest='workspace',\n                        help='Selected workspace to use.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='Displays the current '\n                                      'spec and its dependencies.')\n\n    parser.add_argument('--short', action='store_true',\n                        help='Show only the spec details.')\n    parser.add_argument('--version', action='store_true',\n                        help='Show the version number.')\n\n    parser.add_argument('--inventory', metavar='PKG_INFO',\n                        help='Load the inventory from the spec.')\n\n    parser.add_argument('--upgrade', metavar='PKG_INFO',\n                        help='Update the package information from the '\n                            'spec.')\n\n    parser.add_argument('--remove-orphans', action='store_true',\n                        help=", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    infrared_parser = root_subparsers.add_parser(\n        'infrared',\n        formatter_class=ArgumentDefaultsHelpFormatter,\n        description=textwrap.dedent(\n            \"\"\"\n            Infrared stack deployment.\n\n            Usage: infrared [--checkout-workspace] [--force] [--debug]\n            \"\"\"))\n\n    infrared_parser.add_argument(\n        '--checkout-workspace',\n        type=str,\n        required=False,\n        help='Path to checkout workspace.')\n\n    infrared_parser.add_argument(\n        '--force',\n        action='store_true',\n        help='Force the infrared deployment to use the root workspace.')\n\n    infrared_parser.add_argument(\n        '--debug',\n        action='store_true',\n        help='Debug output.')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(self.name, help=self.description)\n    self._fetch_inventory(self.name)\n    self.spec_handler(parser, args=parser.add_subparsers())\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name,\n        help='manage infrared packages and export inventory to output'\n    )\n    parser.add_argument(\n        '--workspace',\n        dest='workspace',\n        action='store',\n        metavar='PACKAGE',\n        required=True,\n        help='workspace to export to',\n        default=self._checkout_workspace('infrared'),\n    )\n    parser.add_argument(\n        '--no-cleanup',\n        dest='cleanup',\n        action='store_true',\n        help='do not cleanup infrared packages',\n    )\n    parser.add_argument(\n        '--output-file',\n        dest='output_file',\n        action='store',\n        metavar='FILE',\n        required=False,\n        help='output file name',\n    )\n    parser.add_argument(\n        '--no-update'", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI options')\n\n    parser.add_argument('--scan-only', action='store_true',\n                        help='Scan only the infrared devices')\n\n    parser.add_argument('--no-scan', action='store_true',\n                        help='Disable scanning of devices')\n\n    parser.add_argument('--clear-scan', action='store_true',\n                        help='Clear the infrared device list and re-scan')\n\n    parser.add_argument('--update-spec-file', action='store_true',\n                        help='Use spec file for updating the infrared device list')\n\n    parser.add_argument('--remove-spec-file', action='store_true',\n                        help='Use spec file for removing the infrared devices')\n\n    parser.add_argument('--overwrite-spec-fil", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', help='Infrared CLI arguments')\n    parser.add_argument('--inventory', type=str, required=False, default=self._checkout_workspace('inventory'), help='Infrared inventory directory')\n    parser.add_argument('--workspace', type=str, required=False, default=self._checkout_workspace('workspace'), help='Workspace name')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser(\n        self.name, help='manage infrared packages and update them from the '\n                 'infrared repository')\n    self.spec_handler(parser, args=parser.add_argument_group(\n        title='arguments for infrared package management'+ self.name))\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('spec', help='Manage infrared specs')\n    self._fetch_inventory('all')\n    self._checkout_workspace('spec', create=True)\n    parser.add_argument('--force', action='store_true',\n                        help='Force overwrite of existing infrared '\n                            'specs')\n", "is_pass": false, "return_code": 1}, {"generate_code": "def extend_cli(self, root_subparsers):\n    parser = root_subparsers.add_parser('infrared', description='Infrared CLI entry point.')\n    parser.add_argument('--inventory', '-i', default=None, required=True,\n                        help='path to the inventory file.')\n    parser.add_argument('--workspace', '-w', default=None, required=True,\n                        help='path to the workspace to fetch from.')\n    parser.add_argument('--port', '-p', default=None, required=True,\n                        help='port to use (default: all).')\n    parser.add_argument('--address', '-a', default=None, required=True,\n                        help='ip address of the infrared device.')\n    parser.add_argument('--username', '-u', default=None, required=True,\n                        help='username to use (default: root).')\n    parser.add_argument('", "is_pass": false, "return_code": 1}]}
